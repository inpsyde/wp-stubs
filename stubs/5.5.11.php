<?php

namespace {
    /**
     * Administration API: WP_List_Table class
     *
     * @package WordPress
     * @subpackage List_Table
     * @since 3.1.0
     */
    /**
     * Base class for displaying a list of items in an ajaxified HTML table.
     *
     * @since 3.1.0
     * @access private
     */
    class WP_List_Table
    {
        /**
         * The current list of items.
         *
         * @since 3.1.0
         * @var array
         */
        public $items;
        /**
         * Various information about the current table.
         *
         * @since 3.1.0
         * @var array
         */
        protected $_args;
        /**
         * Various information needed for displaying the pagination.
         *
         * @since 3.1.0
         * @var array
         */
        protected $_pagination_args = array();
        /**
         * The current screen.
         *
         * @since 3.1.0
         * @var WP_Screen
         */
        protected $screen;
        /**
         * Cached bulk actions.
         *
         * @since 3.1.0
         * @var array
         */
        private $_actions;
        /**
         * Cached pagination output.
         *
         * @since 3.1.0
         * @var string
         */
        private $_pagination;
        /**
         * The view switcher modes.
         *
         * @since 4.1.0
         * @var array
         */
        protected $modes = array();
        /**
         * Stores the value returned by ->get_column_info().
         *
         * @since 4.1.0
         * @var array
         */
        protected $_column_headers;
        /**
         * {@internal Missing Summary}
         *
         * @var array
         */
        protected $compat_fields = array('_args', '_pagination_args', 'screen', '_actions', '_pagination');
        /**
         * {@internal Missing Summary}
         *
         * @var array
         */
        protected $compat_methods = array('set_pagination_args', 'get_views', 'get_bulk_actions', 'bulk_actions', 'row_actions', 'months_dropdown', 'view_switcher', 'comments_bubble', 'get_items_per_page', 'pagination', 'get_sortable_columns', 'get_column_info', 'get_table_classes', 'display_tablenav', 'extra_tablenav', 'single_row_columns');
        /**
         * Constructor.
         *
         * The child class should call this constructor from its own constructor to override
         * the default $args.
         *
         * @since 3.1.0
         *
         * @param array|string $args {
         *     Array or string of arguments.
         *
         *     @type string $plural   Plural value used for labels and the objects being listed.
         *                            This affects things such as CSS class-names and nonces used
         *                            in the list table, e.g. 'posts'. Default empty.
         *     @type string $singular Singular label for an object being listed, e.g. 'post'.
         *                            Default empty
         *     @type bool   $ajax     Whether the list table supports Ajax. This includes loading
         *                            and sorting data, for example. If true, the class will call
         *                            the _js_vars() method in the footer to provide variables
         *                            to any scripts handling Ajax events. Default false.
         *     @type string $screen   String containing the hook name used to determine the current
         *                            screen. If left null, the current screen will be automatically set.
         *                            Default null.
         * }
         */
        public function __construct($args = array())
        {
        }
        /**
         * Make private properties readable for backward compatibility.
         *
         * @since 4.0.0
         *
         * @param string $name Property to get.
         * @return mixed Property.
         */
        public function __get($name)
        {
        }
        /**
         * Make private properties settable for backward compatibility.
         *
         * @since 4.0.0
         *
         * @param string $name  Property to check if set.
         * @param mixed  $value Property value.
         * @return mixed Newly-set property.
         */
        public function __set($name, $value)
        {
        }
        /**
         * Make private properties checkable for backward compatibility.
         *
         * @since 4.0.0
         *
         * @param string $name Property to check if set.
         * @return bool Whether the property is a back-compat property and it is set.
         */
        public function __isset($name)
        {
        }
        /**
         * Make private properties un-settable for backward compatibility.
         *
         * @since 4.0.0
         *
         * @param string $name Property to unset.
         */
        public function __unset($name)
        {
        }
        /**
         * Make private/protected methods readable for backward compatibility.
         *
         * @since 4.0.0
         *
         * @param string $name      Method to call.
         * @param array  $arguments Arguments to pass when calling.
         * @return mixed|bool Return value of the callback, false otherwise.
         */
        public function __call($name, $arguments)
        {
        }
        /**
         * Checks the current user's permissions
         *
         * @since 3.1.0
         * @abstract
         */
        public function ajax_user_can()
        {
        }
        /**
         * Prepares the list of items for displaying.
         *
         * @uses WP_List_Table::set_pagination_args()
         *
         * @since 3.1.0
         * @abstract
         */
        public function prepare_items()
        {
        }
        /**
         * An internal method that sets all the necessary pagination arguments
         *
         * @since 3.1.0
         *
         * @param array|string $args Array or string of arguments with information about the pagination.
         */
        protected function set_pagination_args($args)
        {
        }
        /**
         * Access the pagination args.
         *
         * @since 3.1.0
         *
         * @param string $key Pagination argument to retrieve. Common values include 'total_items',
         *                    'total_pages', 'per_page', or 'infinite_scroll'.
         * @return int Number of items that correspond to the given pagination argument.
         */
        public function get_pagination_arg($key)
        {
        }
        /**
         * Whether the table has items to display or not
         *
         * @since 3.1.0
         *
         * @return bool
         */
        public function has_items()
        {
        }
        /**
         * Message to be displayed when there are no items
         *
         * @since 3.1.0
         */
        public function no_items()
        {
        }
        /**
         * Displays the search box.
         *
         * @since 3.1.0
         *
         * @param string $text     The 'submit' button label.
         * @param string $input_id ID attribute value for the search input field.
         */
        public function search_box($text, $input_id)
        {
        }
        /**
         * Gets the list of views available on this table.
         *
         * The format is an associative array:
         * - `'id' => 'link'`
         *
         * @since 3.1.0
         *
         * @return array
         */
        protected function get_views()
        {
        }
        /**
         * Displays the list of views available on this table.
         *
         * @since 3.1.0
         */
        public function views()
        {
        }
        /**
         * Retrieves the list of bulk actions available for this table.
         *
         * The format is an associative array where each element represents either a top level option value and label, or
         * an array representing an optgroup and its options.
         *
         * For a standard option, the array element key is the field value and the array element value is the field label.
         *
         * For an optgroup, the array element key is the label and the array element value is an associative array of
         * options as above.
         *
         * Example:
         *
         *     [
         *         'edit'         => 'Edit',
         *         'delete'       => 'Delete',
         *         'Change State' => [
         *             'feature' => 'Featured',
         *             'sale'    => 'On Sale',
         *         ]
         *     ]
         *
         * @since 3.1.0
         * @since 5.6.0 A bulk action can now contain an array of options in order to create an optgroup.
         *
         * @return array
         */
        protected function get_bulk_actions()
        {
        }
        /**
         * Displays the bulk actions dropdown.
         *
         * @since 3.1.0
         *
         * @param string $which The location of the bulk actions: 'top' or 'bottom'.
         *                      This is designated as optional for backward compatibility.
         */
        protected function bulk_actions($which = '')
        {
        }
        /**
         * Gets the current action selected from the bulk actions dropdown.
         *
         * @since 3.1.0
         *
         * @return string|false The action name. False if no action was selected.
         */
        public function current_action()
        {
        }
        /**
         * Generates the required HTML for a list of row action links.
         *
         * @since 3.1.0
         *
         * @param string[] $actions        An array of action links.
         * @param bool     $always_visible Whether the actions should be always visible.
         * @return string The HTML for the row actions.
         */
        protected function row_actions($actions, $always_visible = \false)
        {
        }
        /**
         * Displays a dropdown for filtering items in the list table by month.
         *
         * @since 3.1.0
         *
         * @global wpdb      $wpdb      WordPress database abstraction object.
         * @global WP_Locale $wp_locale WordPress date and time locale object.
         *
         * @param string $post_type The post type.
         */
        protected function months_dropdown($post_type)
        {
        }
        /**
         * Displays a view switcher.
         *
         * @since 3.1.0
         *
         * @param string $current_mode
         */
        protected function view_switcher($current_mode)
        {
        }
        /**
         * Displays a comment count bubble.
         *
         * @since 3.1.0
         *
         * @param int $post_id          The post ID.
         * @param int $pending_comments Number of pending comments.
         */
        protected function comments_bubble($post_id, $pending_comments)
        {
        }
        /**
         * Gets the current page number.
         *
         * @since 3.1.0
         *
         * @return int
         */
        public function get_pagenum()
        {
        }
        /**
         * Gets the number of items to display on a single page.
         *
         * @since 3.1.0
         *
         * @param string $option        User option name.
         * @param int    $default_value Optional. The number of items to display. Default 20.
         * @return int
         */
        protected function get_items_per_page($option, $default_value = 20)
        {
        }
        /**
         * Displays the pagination.
         *
         * @since 3.1.0
         *
         * @param string $which
         */
        protected function pagination($which)
        {
        }
        /**
         * Gets a list of columns.
         *
         * The format is:
         * - `'internal-name' => 'Title'`
         *
         * @since 3.1.0
         * @abstract
         *
         * @return array
         */
        public function get_columns()
        {
        }
        /**
         * Gets a list of sortable columns.
         *
         * The format is:
         * - `'internal-name' => 'orderby'`
         * - `'internal-name' => array( 'orderby', 'asc' )` - The second element sets the initial sorting order.
         * - `'internal-name' => array( 'orderby', true )`  - The second element makes the initial order descending.
         *
         * @since 3.1.0
         *
         * @return array
         */
        protected function get_sortable_columns()
        {
        }
        /**
         * Gets the name of the default primary column.
         *
         * @since 4.3.0
         *
         * @return string Name of the default primary column, in this case, an empty string.
         */
        protected function get_default_primary_column_name()
        {
        }
        /**
         * Public wrapper for WP_List_Table::get_default_primary_column_name().
         *
         * @since 4.4.0
         *
         * @return string Name of the default primary column.
         */
        public function get_primary_column()
        {
        }
        /**
         * Gets the name of the primary column.
         *
         * @since 4.3.0
         *
         * @return string The name of the primary column.
         */
        protected function get_primary_column_name()
        {
        }
        /**
         * Gets a list of all, hidden, and sortable columns, with filter applied.
         *
         * @since 3.1.0
         *
         * @return array
         */
        protected function get_column_info()
        {
        }
        /**
         * Returns the number of visible columns.
         *
         * @since 3.1.0
         *
         * @return int
         */
        public function get_column_count()
        {
        }
        /**
         * Prints column headers, accounting for hidden and sortable columns.
         *
         * @since 3.1.0
         *
         * @param bool $with_id Whether to set the ID attribute or not
         */
        public function print_column_headers($with_id = \true)
        {
        }
        /**
         * Displays the table.
         *
         * @since 3.1.0
         */
        public function display()
        {
        }
        /**
         * Gets a list of CSS classes for the WP_List_Table table tag.
         *
         * @since 3.1.0
         *
         * @return string[] Array of CSS classes for the table tag.
         */
        protected function get_table_classes()
        {
        }
        /**
         * Generates the table navigation above or below the table
         *
         * @since 3.1.0
         * @param string $which
         */
        protected function display_tablenav($which)
        {
        }
        /**
         * Extra controls to be displayed between bulk actions and pagination.
         *
         * @since 3.1.0
         *
         * @param string $which
         */
        protected function extra_tablenav($which)
        {
        }
        /**
         * Generates the tbody element for the list table.
         *
         * @since 3.1.0
         */
        public function display_rows_or_placeholder()
        {
        }
        /**
         * Generates the table rows.
         *
         * @since 3.1.0
         */
        public function display_rows()
        {
        }
        /**
         * Generates content for a single row of the table.
         *
         * @since 3.1.0
         *
         * @param object|array $item The current item
         */
        public function single_row($item)
        {
        }
        /**
         * @param object|array $item
         * @param string $column_name
         */
        protected function column_default($item, $column_name)
        {
        }
        /**
         * @param object|array $item
         */
        protected function column_cb($item)
        {
        }
        /**
         * Generates the columns for a single row of the table.
         *
         * @since 3.1.0
         *
         * @param object|array $item The current item.
         */
        protected function single_row_columns($item)
        {
        }
        /**
         * Generates and display row actions links for the list table.
         *
         * @since 4.3.0
         *
         * @param object|array $item        The item being acted upon.
         * @param string       $column_name Current column name.
         * @param string       $primary     Primary column name.
         * @return string The row actions HTML, or an empty string
         *                if the current column is not the primary column.
         */
        protected function handle_row_actions($item, $column_name, $primary)
        {
        }
        /**
         * Handles an incoming ajax request (called from admin-ajax.php)
         *
         * @since 3.1.0
         */
        public function ajax_response()
        {
        }
        /**
         * Sends required variables to JavaScript land.
         *
         * @since 3.1.0
         */
        public function _js_vars()
        {
        }
    }
    /**
     * List Table API: WP_Terms_List_Table class
     *
     * @package WordPress
     * @subpackage Administration
     * @since 3.1.0
     */
    /**
     * Core class used to implement displaying terms in a list table.
     *
     * @since 3.1.0
     * @access private
     *
     * @see WP_List_Table
     */
    class WP_Terms_List_Table extends \WP_List_Table
    {
        public $callback_args;
        private $level;
        /**
         * Constructor.
         *
         * @since 3.1.0
         *
         * @see WP_List_Table::__construct() for more information on default arguments.
         *
         * @global string $post_type
         * @global string $taxonomy
         * @global string $action
         * @global object $tax
         *
         * @param array $args An associative array of arguments.
         */
        public function __construct($args = array())
        {
        }
        /**
         * @return bool
         */
        public function ajax_user_can()
        {
        }
        /**
         */
        public function prepare_items()
        {
        }
        /**
         */
        public function no_items()
        {
        }
        /**
         * @return array
         */
        protected function get_bulk_actions()
        {
        }
        /**
         * @return string
         */
        public function current_action()
        {
        }
        /**
         * @return array
         */
        public function get_columns()
        {
        }
        /**
         * @return array
         */
        protected function get_sortable_columns()
        {
        }
        /**
         */
        public function display_rows_or_placeholder()
        {
        }
        /**
         * @param string $taxonomy
         * @param array  $terms
         * @param array  $children
         * @param int    $start
         * @param int    $per_page
         * @param int    $count
         * @param int    $parent_term
         * @param int    $level
         */
        private function _rows($taxonomy, $terms, &$children, $start, $per_page, &$count, $parent_term = 0, $level = 0)
        {
        }
        /**
         * @global string $taxonomy
         * @param WP_Term $tag   Term object.
         * @param int     $level
         */
        public function single_row($tag, $level = 0)
        {
        }
        /**
         * @since 5.9.0 Renamed `$tag` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @param WP_Term $item Term object.
         * @return string
         */
        public function column_cb($item)
        {
        }
        /**
         * @param WP_Term $tag Term object.
         * @return string
         */
        public function column_name($tag)
        {
        }
        /**
         * Gets the name of the default primary column.
         *
         * @since 4.3.0
         *
         * @return string Name of the default primary column, in this case, 'name'.
         */
        protected function get_default_primary_column_name()
        {
        }
        /**
         * Generates and displays row action links.
         *
         * @since 4.3.0
         * @since 5.9.0 Renamed `$tag` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @param WP_Term $item        Tag being acted upon.
         * @param string  $column_name Current column name.
         * @param string  $primary     Primary column name.
         * @return string Row actions output for terms, or an empty string
         *                if the current column is not the primary column.
         */
        protected function handle_row_actions($item, $column_name, $primary)
        {
        }
        /**
         * @param WP_Term $tag Term object.
         * @return string
         */
        public function column_description($tag)
        {
        }
        /**
         * @param WP_Term $tag Term object.
         * @return string
         */
        public function column_slug($tag)
        {
        }
        /**
         * @param WP_Term $tag Term object.
         * @return string
         */
        public function column_posts($tag)
        {
        }
        /**
         * @param WP_Term $tag Term object.
         * @return string
         */
        public function column_links($tag)
        {
        }
        /**
         * @since 5.9.0 Renamed `$tag` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @param WP_Term $item        Term object.
         * @param string  $column_name Name of the column.
         * @return string
         */
        public function column_default($item, $column_name)
        {
        }
        /**
         * Outputs the hidden row displayed when inline editing
         *
         * @since 3.1.0
         */
        public function inline_edit()
        {
        }
    }
    /**
     * Upgrader API: WP_Upgrader_Skin class
     *
     * @package WordPress
     * @subpackage Upgrader
     * @since 4.6.0
     */
    /**
     * Generic Skin for the WordPress Upgrader classes. This skin is designed to be extended for specific purposes.
     *
     * @since 2.8.0
     * @since 4.6.0 Moved to its own file from wp-admin/includes/class-wp-upgrader-skins.php.
     */
    class WP_Upgrader_Skin
    {
        /**
         * Holds the upgrader data.
         *
         * @since 2.8.0
         *
         * @var WP_Upgrader
         */
        public $upgrader;
        /**
         * Whether header is done.
         *
         * @since 2.8.0
         *
         * @var bool
         */
        public $done_header = \false;
        /**
         * Whether footer is done.
         *
         * @since 2.8.0
         *
         * @var bool
         */
        public $done_footer = \false;
        /**
         * Holds the result of an upgrade.
         *
         * @since 2.8.0
         *
         * @var string|bool|WP_Error
         */
        public $result = \false;
        /**
         * Holds the options of an upgrade.
         *
         * @since 2.8.0
         *
         * @var array
         */
        public $options = array();
        /**
         * Constructor.
         *
         * Sets up the generic skin for the WordPress Upgrader classes.
         *
         * @since 2.8.0
         *
         * @param array $args Optional. The WordPress upgrader skin arguments to
         *                    override default options. Default empty array.
         */
        public function __construct($args = array())
        {
        }
        /**
         * @since 2.8.0
         *
         * @param WP_Upgrader $upgrader
         */
        public function set_upgrader(&$upgrader)
        {
        }
        /**
         * @since 3.0.0
         */
        public function add_strings()
        {
        }
        /**
         * Sets the result of an upgrade.
         *
         * @since 2.8.0
         *
         * @param string|bool|WP_Error $result The result of an upgrade.
         */
        public function set_result($result)
        {
        }
        /**
         * Displays a form to the user to request for their FTP/SSH details in order
         * to connect to the filesystem.
         *
         * @since 2.8.0
         * @since 4.6.0 The `$context` parameter default changed from `false` to an empty string.
         *
         * @see request_filesystem_credentials()
         *
         * @param bool|WP_Error $error                        Optional. Whether the current request has failed to connect,
         *                                                    or an error object. Default false.
         * @param string        $context                      Optional. Full path to the directory that is tested
         *                                                    for being writable. Default empty.
         * @param bool          $allow_relaxed_file_ownership Optional. Whether to allow Group/World writable. Default false.
         * @return bool True on success, false on failure.
         */
        public function request_filesystem_credentials($error = \false, $context = '', $allow_relaxed_file_ownership = \false)
        {
        }
        /**
         * @since 2.8.0
         */
        public function header()
        {
        }
        /**
         * @since 2.8.0
         */
        public function footer()
        {
        }
        /**
         * @since 2.8.0
         *
         * @param string|WP_Error $errors Errors.
         */
        public function error($errors)
        {
        }
        /**
         * @since 2.8.0
         * @since 5.9.0 Renamed `$string` (a PHP reserved keyword) to `$feedback` for PHP 8 named parameter support.
         *
         * @param string $feedback Message data.
         * @param mixed  ...$args  Optional text replacements.
         */
        public function feedback($feedback, ...$args)
        {
        }
        /**
         * Action to perform before an update.
         *
         * @since 2.8.0
         */
        public function before()
        {
        }
        /**
         * Action to perform following an update.
         *
         * @since 2.8.0
         */
        public function after()
        {
        }
        /**
         * Output JavaScript that calls function to decrement the update counts.
         *
         * @since 3.9.0
         *
         * @param string $type Type of update count to decrement. Likely values include 'plugin',
         *                     'theme', 'translation', etc.
         */
        protected function decrement_update_count($type)
        {
        }
        /**
         * @since 3.0.0
         */
        public function bulk_header()
        {
        }
        /**
         * @since 3.0.0
         */
        public function bulk_footer()
        {
        }
        /**
         * Hides the `process_failed` error message when updating by uploading a zip file.
         *
         * @since 5.5.0
         *
         * @param WP_Error $wp_error WP_Error object.
         * @return bool
         */
        public function hide_process_failed($wp_error)
        {
        }
    }
    /**
     * Upgrader API: Plugin_Installer_Skin class
     *
     * @package WordPress
     * @subpackage Upgrader
     * @since 4.6.0
     */
    /**
     * Plugin Installer Skin for WordPress Plugin Installer.
     *
     * @since 2.8.0
     * @since 4.6.0 Moved to its own file from wp-admin/includes/class-wp-upgrader-skins.php.
     *
     * @see WP_Upgrader_Skin
     */
    class Plugin_Installer_Skin extends \WP_Upgrader_Skin
    {
        public $api;
        public $type;
        public $url;
        public $overwrite;
        private $is_downgrading = \false;
        /**
         * @param array $args
         */
        public function __construct($args = array())
        {
        }
        /**
         * Action to perform before installing a plugin.
         *
         * @since 2.8.0
         */
        public function before()
        {
        }
        /**
         * Hides the `process_failed` error when updating a plugin by uploading a zip file.
         *
         * @since 5.5.0
         *
         * @param WP_Error $wp_error WP_Error object.
         * @return bool
         */
        public function hide_process_failed($wp_error)
        {
        }
        /**
         * Action to perform following a plugin install.
         *
         * @since 2.8.0
         */
        public function after()
        {
        }
        /**
         * Check if the plugin can be overwritten and output the HTML for overwriting a plugin on upload.
         *
         * @since 5.5.0
         *
         * @return bool Whether the plugin can be overwritten and HTML was outputted.
         */
        private function do_overwrite()
        {
        }
    }
    /**
     * List Table API: WP_Themes_List_Table class
     *
     * @package WordPress
     * @subpackage Administration
     * @since 3.1.0
     */
    /**
     * Core class used to implement displaying installed themes in a list table.
     *
     * @since 3.1.0
     * @access private
     *
     * @see WP_List_Table
     */
    class WP_Themes_List_Table extends \WP_List_Table
    {
        protected $search_terms = array();
        public $features = array();
        /**
         * Constructor.
         *
         * @since 3.1.0
         *
         * @see WP_List_Table::__construct() for more information on default arguments.
         *
         * @param array $args An associative array of arguments.
         */
        public function __construct($args = array())
        {
        }
        /**
         * @return bool
         */
        public function ajax_user_can()
        {
        }
        /**
         */
        public function prepare_items()
        {
        }
        /**
         */
        public function no_items()
        {
        }
        /**
         * @param string $which
         */
        public function tablenav($which = 'top')
        {
        }
        /**
         * Displays the themes table.
         *
         * Overrides the parent display() method to provide a different container.
         *
         * @since 3.1.0
         */
        public function display()
        {
        }
        /**
         * @return array
         */
        public function get_columns()
        {
        }
        /**
         */
        public function display_rows_or_placeholder()
        {
        }
        /**
         */
        public function display_rows()
        {
        }
        /**
         * @param WP_Theme $theme
         * @return bool
         */
        public function search_theme($theme)
        {
        }
        /**
         * Send required variables to JavaScript land
         *
         * @since 3.4.0
         *
         * @param array $extra_args
         */
        public function _js_vars($extra_args = array())
        {
        }
    }
    /**
     * List Table API: WP_Theme_Install_List_Table class
     *
     * @package WordPress
     * @subpackage Administration
     * @since 3.1.0
     */
    /**
     * Core class used to implement displaying themes to install in a list table.
     *
     * @since 3.1.0
     * @access private
     *
     * @see WP_Themes_List_Table
     */
    class WP_Theme_Install_List_Table extends \WP_Themes_List_Table
    {
        public $features = array();
        /**
         * @return bool
         */
        public function ajax_user_can()
        {
        }
        /**
         * @global array  $tabs
         * @global string $tab
         * @global int    $paged
         * @global string $type
         * @global array  $theme_field_defaults
         */
        public function prepare_items()
        {
        }
        /**
         */
        public function no_items()
        {
        }
        /**
         * @global array $tabs
         * @global string $tab
         * @return array
         */
        protected function get_views()
        {
        }
        /**
         * Displays the theme install table.
         *
         * Overrides the parent display() method to provide a different container.
         *
         * @since 3.1.0
         */
        public function display()
        {
        }
        /**
         */
        public function display_rows()
        {
        }
        /**
         * Prints a theme from the WordPress.org API.
         *
         * @since 3.1.0
         *
         * @global array $themes_allowedtags
         *
         * @param stdClass $theme {
         *     An object that contains theme data returned by the WordPress.org API.
         *
         *     @type string $name           Theme name, e.g. 'Twenty Twenty-One'.
         *     @type string $slug           Theme slug, e.g. 'twentytwentyone'.
         *     @type string $version        Theme version, e.g. '1.1'.
         *     @type string $author         Theme author username, e.g. 'melchoyce'.
         *     @type string $preview_url    Preview URL, e.g. 'https://2021.wordpress.net/'.
         *     @type string $screenshot_url Screenshot URL, e.g. 'https://wordpress.org/themes/twentytwentyone/'.
         *     @type float  $rating         Rating score.
         *     @type int    $num_ratings    The number of ratings.
         *     @type string $homepage       Theme homepage, e.g. 'https://wordpress.org/themes/twentytwentyone/'.
         *     @type string $description    Theme description.
         *     @type string $download_link  Theme ZIP download URL.
         * }
         */
        public function single_row($theme)
        {
        }
        /**
         * Prints the wrapper for the theme installer.
         */
        public function theme_installer()
        {
        }
        /**
         * Prints the wrapper for the theme installer with a provided theme's data.
         * Used to make the theme installer work for no-js.
         *
         * @param stdClass $theme A WordPress.org Theme API object.
         */
        public function theme_installer_single($theme)
        {
        }
        /**
         * Prints the info for a theme (to be used in the theme installer modal).
         *
         * @global array $themes_allowedtags
         *
         * @param stdClass $theme A WordPress.org Theme API object.
         */
        public function install_theme_info($theme)
        {
        }
        /**
         * Send required variables to JavaScript land
         *
         * @since 3.4.0
         *
         * @global string $tab  Current tab within Themes->Install screen
         * @global string $type Type of search.
         *
         * @param array $extra_args Unused.
         */
        public function _js_vars($extra_args = array())
        {
        }
        /**
         * Check to see if the theme is already installed.
         *
         * @since 3.4.0
         *
         * @param stdClass $theme A WordPress.org Theme API object.
         * @return string Theme status.
         */
        private function _get_theme_status($theme)
        {
        }
    }
    /**
     * List Table API: WP_Links_List_Table class
     *
     * @package WordPress
     * @subpackage Administration
     * @since 3.1.0
     */
    /**
     * Core class used to implement displaying links in a list table.
     *
     * @since 3.1.0
     * @access private
     *
     * @see WP_List_Table
     */
    class WP_Links_List_Table extends \WP_List_Table
    {
        /**
         * Constructor.
         *
         * @since 3.1.0
         *
         * @see WP_List_Table::__construct() for more information on default arguments.
         *
         * @param array $args An associative array of arguments.
         */
        public function __construct($args = array())
        {
        }
        /**
         * @return bool
         */
        public function ajax_user_can()
        {
        }
        /**
         * @global int    $cat_id
         * @global string $s
         * @global string $orderby
         * @global string $order
         */
        public function prepare_items()
        {
        }
        /**
         */
        public function no_items()
        {
        }
        /**
         * @return array
         */
        protected function get_bulk_actions()
        {
        }
        /**
         * @global int $cat_id
         * @param string $which
         */
        protected function extra_tablenav($which)
        {
        }
        /**
         * @return array
         */
        public function get_columns()
        {
        }
        /**
         * @return array
         */
        protected function get_sortable_columns()
        {
        }
        /**
         * Get the name of the default primary column.
         *
         * @since 4.3.0
         *
         * @return string Name of the default primary column, in this case, 'name'.
         */
        protected function get_default_primary_column_name()
        {
        }
        /**
         * Handles the checkbox column output.
         *
         * @since 4.3.0
         * @since 5.9.0 Renamed `$link` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @param object $item The current link object.
         */
        public function column_cb($item)
        {
        }
        /**
         * Handles the link name column output.
         *
         * @since 4.3.0
         *
         * @param object $link The current link object.
         */
        public function column_name($link)
        {
        }
        /**
         * Handles the link URL column output.
         *
         * @since 4.3.0
         *
         * @param object $link The current link object.
         */
        public function column_url($link)
        {
        }
        /**
         * Handles the link categories column output.
         *
         * @since 4.3.0
         *
         * @global int $cat_id
         *
         * @param object $link The current link object.
         */
        public function column_categories($link)
        {
        }
        /**
         * Handles the link relation column output.
         *
         * @since 4.3.0
         *
         * @param object $link The current link object.
         */
        public function column_rel($link)
        {
        }
        /**
         * Handles the link visibility column output.
         *
         * @since 4.3.0
         *
         * @param object $link The current link object.
         */
        public function column_visible($link)
        {
        }
        /**
         * Handles the link rating column output.
         *
         * @since 4.3.0
         *
         * @param object $link The current link object.
         */
        public function column_rating($link)
        {
        }
        /**
         * Handles the default column output.
         *
         * @since 4.3.0
         * @since 5.9.0 Renamed `$link` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @param object $item        Link object.
         * @param string $column_name Current column name.
         */
        public function column_default($item, $column_name)
        {
        }
        public function display_rows()
        {
        }
        /**
         * Generates and displays row action links.
         *
         * @since 4.3.0
         * @since 5.9.0 Renamed `$link` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @param object $item        Link being acted upon.
         * @param string $column_name Current column name.
         * @param string $primary     Primary column name.
         * @return string Row actions output for links, or an empty string
         *                if the current column is not the primary column.
         */
        protected function handle_row_actions($item, $column_name, $primary)
        {
        }
    }
    /**
     * PemFTP base class
     *
     */
    class ftp_base
    {
        /* Public variables */
        var $LocalEcho;
        var $Verbose;
        var $OS_local;
        var $OS_remote;
        /* Private variables */
        var $_lastaction;
        var $_errors;
        var $_type;
        var $_umask;
        var $_timeout;
        var $_passive;
        var $_host;
        var $_fullhost;
        var $_port;
        var $_datahost;
        var $_dataport;
        var $_ftp_control_sock;
        var $_ftp_data_sock;
        var $_ftp_temp_sock;
        var $_ftp_buff_size;
        var $_login;
        var $_password;
        var $_connected;
        var $_ready;
        var $_code;
        var $_message;
        var $_can_restore;
        var $_port_available;
        var $_curtype;
        var $_features;
        var $_error_array;
        var $AuthorizedTransferMode;
        var $OS_FullName;
        var $_eol_code;
        var $AutoAsciiExt;
        /* Constructor */
        function __construct($port_mode = \FALSE, $verb = \FALSE, $le = \FALSE)
        {
        }
        function ftp_base($port_mode = \FALSE)
        {
        }
        // <!-- --------------------------------------------------------------------------------------- -->
        // <!--       Public functions                                                                  -->
        // <!-- --------------------------------------------------------------------------------------- -->
        function parselisting($line)
        {
        }
        function SendMSG($message = "", $crlf = \true)
        {
        }
        function SetType($mode = \FTP_AUTOASCII)
        {
        }
        function _settype($mode = \FTP_ASCII)
        {
        }
        function Passive($pasv = \NULL)
        {
        }
        function SetServer($host, $port = 21, $reconnect = \true)
        {
        }
        function SetUmask($umask = 022)
        {
        }
        function SetTimeout($timeout = 30)
        {
        }
        function connect($server = \NULL)
        {
        }
        function quit($force = \false)
        {
        }
        function login($user = \NULL, $pass = \NULL)
        {
        }
        function pwd()
        {
        }
        function cdup()
        {
        }
        function chdir($pathname)
        {
        }
        function rmdir($pathname)
        {
        }
        function mkdir($pathname)
        {
        }
        function rename($from, $to)
        {
        }
        function filesize($pathname)
        {
        }
        function abort()
        {
        }
        function mdtm($pathname)
        {
        }
        function systype()
        {
        }
        function delete($pathname)
        {
        }
        function site($command, $fnction = "site")
        {
        }
        function chmod($pathname, $mode)
        {
        }
        function restore($from)
        {
        }
        function features()
        {
        }
        function rawlist($pathname = "", $arg = "")
        {
        }
        function nlist($pathname = "", $arg = "")
        {
        }
        function is_exists($pathname)
        {
        }
        function file_exists($pathname)
        {
        }
        function fget($fp, $remotefile, $rest = 0)
        {
        }
        function get($remotefile, $localfile = \NULL, $rest = 0)
        {
        }
        function fput($remotefile, $fp, $rest = 0)
        {
        }
        function put($localfile, $remotefile = \NULL, $rest = 0)
        {
        }
        function mput($local = ".", $remote = \NULL, $continious = \false)
        {
        }
        function mget($remote, $local = ".", $continious = \false)
        {
        }
        function mdel($remote, $continious = \false)
        {
        }
        function mmkdir($dir, $mode = 0777)
        {
        }
        function glob($pattern, $handle = \NULL)
        {
        }
        function glob_pattern_match($pattern, $subject)
        {
        }
        function glob_regexp($pattern, $subject)
        {
        }
        function dirlist($remote)
        {
        }
        // <!-- --------------------------------------------------------------------------------------- -->
        // <!--       Private functions                                                                 -->
        // <!-- --------------------------------------------------------------------------------------- -->
        function _checkCode()
        {
        }
        function _list($arg = "", $cmd = "LIST", $fnction = "_list")
        {
        }
        // <!-- --------------------------------------------------------------------------------------- -->
        // <!-- Partie : gestion des erreurs                                                            -->
        // <!-- --------------------------------------------------------------------------------------- -->
        // Gnre une erreur pour traitement externe  la classe
        function PushError($fctname, $msg, $desc = \false)
        {
        }
        // Rcupre une erreur externe
        function PopError()
        {
        }
    }
    /**
     * PemFTP - An Ftp implementation in pure PHP
     *
     * @package PemFTP
     * @since 2.5.0
     *
     * @version 1.0
     * @copyright Alexey Dotsenko
     * @author Alexey Dotsenko
     * @link https://www.phpclasses.org/package/1743-PHP-FTP-client-in-pure-PHP.html
     * @license LGPL https://opensource.org/licenses/lgpl-license.html
     */
    /**
     * FTP implementation using fsockopen to connect.
     *
     * @package PemFTP
     * @subpackage Pure
     * @since 2.5.0
     *
     * @version 1.0
     * @copyright Alexey Dotsenko
     * @author Alexey Dotsenko
     * @link https://www.phpclasses.org/package/1743-PHP-FTP-client-in-pure-PHP.html
     * @license LGPL https://opensource.org/licenses/lgpl-license.html
     */
    class ftp_pure extends \ftp_base
    {
        function __construct($verb = \FALSE, $le = \FALSE)
        {
        }
        // <!-- --------------------------------------------------------------------------------------- -->
        // <!--       Private functions                                                                 -->
        // <!-- --------------------------------------------------------------------------------------- -->
        function _settimeout($sock)
        {
        }
        function _connect($host, $port)
        {
        }
        function _readmsg($fnction = "_readmsg")
        {
        }
        function _exec($cmd, $fnction = "_exec")
        {
        }
        function _data_prepare($mode = \FTP_ASCII)
        {
        }
        function _data_read($mode = \FTP_ASCII, $fp = \NULL)
        {
        }
        function _data_write($mode = \FTP_ASCII, $fp = \NULL)
        {
        }
        function _data_write_block($mode, $block)
        {
        }
        function _data_close()
        {
        }
        function _quit($force = \FALSE)
        {
        }
    }
    /**
     * A class for displaying various tree-like structures.
     *
     * Extend the Walker class to use it, see examples below. Child classes
     * do not need to implement all of the abstract methods in the class. The child
     * only needs to implement the methods that are needed.
     *
     * @since 2.1.0
     *
     * @package WordPress
     * @abstract
     */
    class Walker
    {
        /**
         * What the class handles.
         *
         * @since 2.1.0
         * @var string
         */
        public $tree_type;
        /**
         * DB fields to use.
         *
         * @since 2.1.0
         * @var string[]
         */
        public $db_fields;
        /**
         * Max number of pages walked by the paged walker.
         *
         * @since 2.7.0
         * @var int
         */
        public $max_pages = 1;
        /**
         * Whether the current element has children or not.
         *
         * To be used in start_el().
         *
         * @since 4.0.0
         * @var bool
         */
        public $has_children;
        /**
         * Starts the list before the elements are added.
         *
         * The $args parameter holds additional values that may be used with the child
         * class methods. This method is called at the start of the output list.
         *
         * @since 2.1.0
         * @abstract
         *
         * @param string $output Used to append additional content (passed by reference).
         * @param int    $depth  Depth of the item.
         * @param array  $args   An array of additional arguments.
         */
        public function start_lvl(&$output, $depth = 0, $args = array())
        {
        }
        /**
         * Ends the list of after the elements are added.
         *
         * The $args parameter holds additional values that may be used with the child
         * class methods. This method finishes the list at the end of output of the elements.
         *
         * @since 2.1.0
         * @abstract
         *
         * @param string $output Used to append additional content (passed by reference).
         * @param int    $depth  Depth of the item.
         * @param array  $args   An array of additional arguments.
         */
        public function end_lvl(&$output, $depth = 0, $args = array())
        {
        }
        /**
         * Starts the element output.
         *
         * The $args parameter holds additional values that may be used with the child
         * class methods. Also includes the element output.
         *
         * @since 2.1.0
         * @since 5.9.0 Renamed `$object` (a PHP reserved keyword) to `$data_object` for PHP 8 named parameter support.
         * @abstract
         *
         * @param string $output            Used to append additional content (passed by reference).
         * @param object $data_object       The data object.
         * @param int    $depth             Depth of the item.
         * @param array  $args              An array of additional arguments.
         * @param int    $current_object_id Optional. ID of the current item. Default 0.
         */
        public function start_el(&$output, $data_object, $depth = 0, $args = array(), $current_object_id = 0)
        {
        }
        /**
         * Ends the element output, if needed.
         *
         * The $args parameter holds additional values that may be used with the child class methods.
         *
         * @since 2.1.0
         * @since 5.9.0 Renamed `$object` (a PHP reserved keyword) to `$data_object` for PHP 8 named parameter support.
         * @abstract
         *
         * @param string $output      Used to append additional content (passed by reference).
         * @param object $data_object The data object.
         * @param int    $depth       Depth of the item.
         * @param array  $args        An array of additional arguments.
         */
        public function end_el(&$output, $data_object, $depth = 0, $args = array())
        {
        }
        /**
         * Traverses elements to create list from elements.
         *
         * Display one element if the element doesn't have any children otherwise,
         * display the element and its children. Will only traverse up to the max
         * depth and no ignore elements under that depth. It is possible to set the
         * max depth to include all depths, see walk() method.
         *
         * This method should not be called directly, use the walk() method instead.
         *
         * @since 2.5.0
         *
         * @param object $element           Data object.
         * @param array  $children_elements List of elements to continue traversing (passed by reference).
         * @param int    $max_depth         Max depth to traverse.
         * @param int    $depth             Depth of current element.
         * @param array  $args              An array of arguments.
         * @param string $output            Used to append additional content (passed by reference).
         */
        public function display_element($element, &$children_elements, $max_depth, $depth, $args, &$output)
        {
        }
        /**
         * Displays array of elements hierarchically.
         *
         * Does not assume any existing order of elements.
         *
         * $max_depth = -1 means flatly display every element.
         * $max_depth = 0 means display all levels.
         * $max_depth > 0 specifies the number of display levels.
         *
         * @since 2.1.0
         * @since 5.3.0 Formalized the existing `...$args` parameter by adding it
         *              to the function signature.
         *
         * @param array $elements  An array of elements.
         * @param int   $max_depth The maximum hierarchical depth.
         * @param mixed ...$args   Optional additional arguments.
         * @return string The hierarchical item output.
         */
        public function walk($elements, $max_depth, ...$args)
        {
        }
        /**
         * Produces a page of nested elements.
         *
         * Given an array of hierarchical elements, the maximum depth, a specific page number,
         * and number of elements per page, this function first determines all top level root elements
         * belonging to that page, then lists them and all of their children in hierarchical order.
         *
         * $max_depth = 0 means display all levels.
         * $max_depth > 0 specifies the number of display levels.
         *
         * @since 2.7.0
         * @since 5.3.0 Formalized the existing `...$args` parameter by adding it
         *              to the function signature.
         *
         * @param array $elements  An array of elements.
         * @param int   $max_depth The maximum hierarchical depth.
         * @param int   $page_num  The specific page number, beginning with 1.
         * @param int   $per_page  Number of elements per page.
         * @param mixed ...$args   Optional additional arguments.
         * @return string XHTML of the specified page of elements.
         */
        public function paged_walk($elements, $max_depth, $page_num, $per_page, ...$args)
        {
        }
        /**
         * Calculates the total number of root elements.
         *
         * @since 2.7.0
         *
         * @param array $elements Elements to list.
         * @return int Number of root elements.
         */
        public function get_number_of_root_elements($elements)
        {
        }
        /**
         * Unsets all the children for a given top level element.
         *
         * @since 2.7.0
         *
         * @param object $element           The top level element.
         * @param array  $children_elements The children elements.
         */
        public function unset_children($element, &$children_elements)
        {
        }
    }
    /**
     * Nav Menu API: Walker_Nav_Menu class
     *
     * @package WordPress
     * @subpackage Nav_Menus
     * @since 4.6.0
     */
    /**
     * Core class used to implement an HTML list of nav menu items.
     *
     * @since 3.0.0
     *
     * @see Walker
     */
    class Walker_Nav_Menu extends \Walker
    {
        /**
         * What the class handles.
         *
         * @since 3.0.0
         * @var string
         *
         * @see Walker::$tree_type
         */
        public $tree_type = array('post_type', 'taxonomy', 'custom');
        /**
         * Database fields to use.
         *
         * @since 3.0.0
         * @todo Decouple this.
         * @var string[]
         *
         * @see Walker::$db_fields
         */
        public $db_fields = array('parent' => 'menu_item_parent', 'id' => 'db_id');
        /**
         * Starts the list before the elements are added.
         *
         * @since 3.0.0
         *
         * @see Walker::start_lvl()
         *
         * @param string   $output Used to append additional content (passed by reference).
         * @param int      $depth  Depth of menu item. Used for padding.
         * @param stdClass $args   An object of wp_nav_menu() arguments.
         */
        public function start_lvl(&$output, $depth = 0, $args = \null)
        {
        }
        /**
         * Ends the list of after the elements are added.
         *
         * @since 3.0.0
         *
         * @see Walker::end_lvl()
         *
         * @param string   $output Used to append additional content (passed by reference).
         * @param int      $depth  Depth of menu item. Used for padding.
         * @param stdClass $args   An object of wp_nav_menu() arguments.
         */
        public function end_lvl(&$output, $depth = 0, $args = \null)
        {
        }
        /**
         * Starts the element output.
         *
         * @since 3.0.0
         * @since 4.4.0 The {@see 'nav_menu_item_args'} filter was added.
         * @since 5.9.0 Renamed `$item` to `$data_object` and `$id` to `$current_object_id`
         *              to match parent class for PHP 8 named parameter support.
         *
         * @see Walker::start_el()
         *
         * @param string   $output            Used to append additional content (passed by reference).
         * @param WP_Post  $data_object       Menu item data object.
         * @param int      $depth             Depth of menu item. Used for padding.
         * @param stdClass $args              An object of wp_nav_menu() arguments.
         * @param int      $current_object_id Optional. ID of the current menu item. Default 0.
         */
        public function start_el(&$output, $data_object, $depth = 0, $args = \null, $current_object_id = 0)
        {
        }
        /**
         * Ends the element output, if needed.
         *
         * @since 3.0.0
         * @since 5.9.0 Renamed `$item` to `$data_object` to match parent class for PHP 8 named parameter support.
         *
         * @see Walker::end_el()
         *
         * @param string   $output      Used to append additional content (passed by reference).
         * @param WP_Post  $data_object Menu item data object. Not used.
         * @param int      $depth       Depth of page. Not Used.
         * @param stdClass $args        An object of wp_nav_menu() arguments.
         */
        public function end_el(&$output, $data_object, $depth = 0, $args = \null)
        {
        }
    }
    /**
     * Navigation Menu API: Walker_Nav_Menu_Checklist class
     *
     * @package WordPress
     * @subpackage Administration
     * @since 4.4.0
     */
    /**
     * Create HTML list of nav menu input items.
     *
     * @since 3.0.0
     * @uses Walker_Nav_Menu
     */
    class Walker_Nav_Menu_Checklist extends \Walker_Nav_Menu
    {
        /**
         * @param array|false $fields Database fields to use.
         */
        public function __construct($fields = \false)
        {
        }
        /**
         * Starts the list before the elements are added.
         *
         * @see Walker_Nav_Menu::start_lvl()
         *
         * @since 3.0.0
         *
         * @param string   $output Used to append additional content (passed by reference).
         * @param int      $depth  Depth of page. Used for padding.
         * @param stdClass $args   Not used.
         */
        public function start_lvl(&$output, $depth = 0, $args = \null)
        {
        }
        /**
         * Ends the list of after the elements are added.
         *
         * @see Walker_Nav_Menu::end_lvl()
         *
         * @since 3.0.0
         *
         * @param string   $output Used to append additional content (passed by reference).
         * @param int      $depth  Depth of page. Used for padding.
         * @param stdClass $args   Not used.
         */
        public function end_lvl(&$output, $depth = 0, $args = \null)
        {
        }
        /**
         * Start the element output.
         *
         * @see Walker_Nav_Menu::start_el()
         *
         * @since 3.0.0
         * @since 5.9.0 Renamed `$item` to `$data_object` and `$id` to `$current_object_id`
         *              to match parent class for PHP 8 named parameter support.
         *
         * @global int        $_nav_menu_placeholder
         * @global int|string $nav_menu_selected_id
         *
         * @param string   $output            Used to append additional content (passed by reference).
         * @param WP_Post  $data_object       Menu item data object.
         * @param int      $depth             Depth of menu item. Used for padding.
         * @param stdClass $args              Not used.
         * @param int      $current_object_id Optional. ID of the current menu item. Default 0.
         */
        public function start_el(&$output, $data_object, $depth = 0, $args = \null, $current_object_id = 0)
        {
        }
    }
    /**
     * Upgrade API: WP_Automatic_Updater class
     *
     * @package WordPress
     * @subpackage Upgrader
     * @since 4.6.0
     */
    /**
     * Core class used for handling automatic background updates.
     *
     * @since 3.7.0
     * @since 4.6.0 Moved to its own file from wp-admin/includes/class-wp-upgrader.php.
     */
    class WP_Automatic_Updater
    {
        /**
         * Tracks update results during processing.
         *
         * @var array
         */
        protected $update_results = array();
        /**
         * Determines whether the entire automatic updater is disabled.
         *
         * @since 3.7.0
         */
        public function is_disabled()
        {
        }
        /**
         * Checks for version control checkouts.
         *
         * Checks for Subversion, Git, Mercurial, and Bazaar. It recursively looks up the
         * filesystem to the top of the drive, erring on the side of detecting a VCS
         * checkout somewhere.
         *
         * ABSPATH is always checked in addition to whatever `$context` is (which may be the
         * wp-content directory, for example). The underlying assumption is that if you are
         * using version control *anywhere*, then you should be making decisions for
         * how things get updated.
         *
         * @since 3.7.0
         *
         * @param string $context The filesystem path to check, in addition to ABSPATH.
         * @return bool True if a VCS checkout was discovered at `$context` or ABSPATH,
         *              or anywhere higher. False otherwise.
         */
        public function is_vcs_checkout($context)
        {
        }
        /**
         * Tests to see if we can and should update a specific item.
         *
         * @since 3.7.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param string $type    The type of update being checked: 'core', 'theme',
         *                        'plugin', 'translation'.
         * @param object $item    The update offer.
         * @param string $context The filesystem context (a path) against which filesystem
         *                        access and status should be checked.
         * @return bool True if the item should be updated, false otherwise.
         */
        public function should_update($type, $item, $context)
        {
        }
        /**
         * Notifies an administrator of a core update.
         *
         * @since 3.7.0
         *
         * @param object $item The update offer.
         * @return bool True if the site administrator is notified of a core update,
         *              false otherwise.
         */
        protected function send_core_update_notification_email($item)
        {
        }
        /**
         * Updates an item, if appropriate.
         *
         * @since 3.7.0
         *
         * @param string $type The type of update being checked: 'core', 'theme', 'plugin', 'translation'.
         * @param object $item The update offer.
         * @return null|WP_Error
         */
        public function update($type, $item)
        {
        }
        /**
         * Kicks off the background update process, looping through all pending updates.
         *
         * @since 3.7.0
         */
        public function run()
        {
        }
        /**
         * If we tried to perform a core update, check if we should send an email,
         * and if we need to avoid processing future updates.
         *
         * @since 3.7.0
         *
         * @param object $update_result The result of the core update. Includes the update offer and result.
         */
        protected function after_core_update($update_result)
        {
        }
        /**
         * Sends an email upon the completion or failure of a background core update.
         *
         * @since 3.7.0
         *
         * @param string $type        The type of email to send. Can be one of 'success', 'fail', 'manual', 'critical'.
         * @param object $core_update The update offer that was attempted.
         * @param mixed  $result      Optional. The result for the core update. Can be WP_Error.
         */
        protected function send_email($type, $core_update, $result = \null)
        {
        }
        /**
         * If we tried to perform plugin or theme updates, check if we should send an email.
         *
         * @since 5.5.0
         *
         * @param array $update_results The results of update tasks.
         */
        protected function after_plugin_theme_update($update_results)
        {
        }
        /**
         * Sends an email upon the completion or failure of a plugin or theme background update.
         *
         * @since 5.5.0
         *
         * @param string $type               The type of email to send. Can be one of 'success', 'fail', 'mixed'.
         * @param array  $successful_updates A list of updates that succeeded.
         * @param array  $failed_updates     A list of updates that failed.
         */
        protected function send_plugin_theme_email($type, $successful_updates, $failed_updates)
        {
        }
        /**
         * Prepares and sends an email of a full log of background update results, useful for debugging and geekery.
         *
         * @since 3.7.0
         */
        protected function send_debug_email()
        {
        }
    }
    /**
     * List Table API: WP_Privacy_Requests_Table class
     *
     * @package WordPress
     * @subpackage Administration
     * @since 4.9.6
     */
    abstract class WP_Privacy_Requests_Table extends \WP_List_Table
    {
        /**
         * Action name for the requests this table will work with. Classes
         * which inherit from WP_Privacy_Requests_Table should define this.
         *
         * Example: 'export_personal_data'.
         *
         * @since 4.9.6
         *
         * @var string $request_type Name of action.
         */
        protected $request_type = 'INVALID';
        /**
         * Post type to be used.
         *
         * @since 4.9.6
         *
         * @var string $post_type The post type.
         */
        protected $post_type = 'INVALID';
        /**
         * Get columns to show in the list table.
         *
         * @since 4.9.6
         *
         * @return string[] Array of column titles keyed by their column name.
         */
        public function get_columns()
        {
        }
        /**
         * Normalize the admin URL to the current page (by request_type).
         *
         * @since 5.3.0
         *
         * @return string URL to the current admin page.
         */
        protected function get_admin_url()
        {
        }
        /**
         * Get a list of sortable columns.
         *
         * @since 4.9.6
         *
         * @return array Default sortable columns.
         */
        protected function get_sortable_columns()
        {
        }
        /**
         * Default primary column.
         *
         * @since 4.9.6
         *
         * @return string Default primary column name.
         */
        protected function get_default_primary_column_name()
        {
        }
        /**
         * Count number of requests for each status.
         *
         * @since 4.9.6
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @return object Number of posts for each status.
         */
        protected function get_request_counts()
        {
        }
        /**
         * Get an associative array ( id => link ) with the list of views available on this table.
         *
         * @since 4.9.6
         *
         * @return string[] An array of HTML links keyed by their view.
         */
        protected function get_views()
        {
        }
        /**
         * Get bulk actions.
         *
         * @since 4.9.6
         *
         * @return array Array of bulk action labels keyed by their action.
         */
        protected function get_bulk_actions()
        {
        }
        /**
         * Process bulk actions.
         *
         * @since 4.9.6
         * @since 5.6.0 Added support for the `complete` action.
         */
        public function process_bulk_action()
        {
        }
        /**
         * Prepare items to output.
         *
         * @since 4.9.6
         * @since 5.1.0 Added support for column sorting.
         */
        public function prepare_items()
        {
        }
        /**
         * Checkbox column.
         *
         * @since 4.9.6
         *
         * @param WP_User_Request $item Item being shown.
         * @return string Checkbox column markup.
         */
        public function column_cb($item)
        {
        }
        /**
         * Status column.
         *
         * @since 4.9.6
         *
         * @param WP_User_Request $item Item being shown.
         * @return string Status column markup.
         */
        public function column_status($item)
        {
        }
        /**
         * Convert timestamp for display.
         *
         * @since 4.9.6
         *
         * @param int $timestamp Event timestamp.
         * @return string Human readable date.
         */
        protected function get_timestamp_as_date($timestamp)
        {
        }
        /**
         * Default column handler.
         *
         * @since 4.9.6
         * @since 5.7.0 Added `manage_{$this->screen->id}_custom_column` action.
         *
         * @param WP_User_Request $item        Item being shown.
         * @param string          $column_name Name of column being shown.
         */
        public function column_default($item, $column_name)
        {
        }
        /**
         * Created timestamp column. Overridden by children.
         *
         * @since 5.7.0
         *
         * @param WP_User_Request $item Item being shown.
         * @return string Human readable date.
         */
        public function column_created_timestamp($item)
        {
        }
        /**
         * Actions column. Overridden by children.
         *
         * @since 4.9.6
         *
         * @param WP_User_Request $item Item being shown.
         * @return string Email column markup.
         */
        public function column_email($item)
        {
        }
        /**
         * Next steps column. Overridden by children.
         *
         * @since 4.9.6
         *
         * @param WP_User_Request $item Item being shown.
         */
        public function column_next_steps($item)
        {
        }
        /**
         * Generates content for a single row of the table,
         *
         * @since 4.9.6
         *
         * @param WP_User_Request $item The current item.
         */
        public function single_row($item)
        {
        }
        /**
         * Embed scripts used to perform actions. Overridden by children.
         *
         * @since 4.9.6
         */
        public function embed_scripts()
        {
        }
    }
    /**
     * WP_Privacy_Data_Removal_Requests_List_Table class.
     *
     * @since 4.9.6
     */
    class WP_Privacy_Data_Removal_Requests_List_Table extends \WP_Privacy_Requests_Table
    {
        /**
         * Action name for the requests this table will work with.
         *
         * @since 4.9.6
         *
         * @var string $request_type Name of action.
         */
        protected $request_type = 'remove_personal_data';
        /**
         * Post type for the requests.
         *
         * @since 4.9.6
         *
         * @var string $post_type The post type.
         */
        protected $post_type = 'user_request';
        /**
         * Actions column.
         *
         * @since 4.9.6
         *
         * @param WP_User_Request $item Item being shown.
         * @return string Email column markup.
         */
        public function column_email($item)
        {
        }
        /**
         * Next steps column.
         *
         * @since 4.9.6
         *
         * @param WP_User_Request $item Item being shown.
         */
        public function column_next_steps($item)
        {
        }
    }
    /**
     * Upgrader API: Bulk_Upgrader_Skin class
     *
     * @package WordPress
     * @subpackage Upgrader
     * @since 4.6.0
     */
    /**
     * Generic Bulk Upgrader Skin for WordPress Upgrades.
     *
     * @since 3.0.0
     * @since 4.6.0 Moved to its own file from wp-admin/includes/class-wp-upgrader-skins.php.
     *
     * @see WP_Upgrader_Skin
     */
    class Bulk_Upgrader_Skin extends \WP_Upgrader_Skin
    {
        public $in_loop = \false;
        /**
         * @var string|false
         */
        public $error = \false;
        /**
         * @param array $args
         */
        public function __construct($args = array())
        {
        }
        /**
         */
        public function add_strings()
        {
        }
        /**
         * @since 5.9.0 Renamed `$string` (a PHP reserved keyword) to `$feedback` for PHP 8 named parameter support.
         *
         * @param string $feedback Message data.
         * @param mixed  ...$args  Optional text replacements.
         */
        public function feedback($feedback, ...$args)
        {
        }
        /**
         */
        public function header()
        {
        }
        /**
         */
        public function footer()
        {
        }
        /**
         * @since 5.9.0 Renamed `$error` to `$errors` for PHP 8 named parameter support.
         *
         * @param string|WP_Error $errors Errors.
         */
        public function error($errors)
        {
        }
        /**
         */
        public function bulk_header()
        {
        }
        /**
         */
        public function bulk_footer()
        {
        }
        /**
         * @param string $title
         */
        public function before($title = '')
        {
        }
        /**
         * @param string $title
         */
        public function after($title = '')
        {
        }
        /**
         */
        public function reset()
        {
        }
        /**
         */
        public function flush_output()
        {
        }
    }
    /**
     * Upgrader API: Bulk_Plugin_Upgrader_Skin class
     *
     * @package WordPress
     * @subpackage Upgrader
     * @since 4.6.0
     */
    /**
     * Bulk Plugin Upgrader Skin for WordPress Plugin Upgrades.
     *
     * @since 3.0.0
     * @since 4.6.0 Moved to its own file from wp-admin/includes/class-wp-upgrader-skins.php.
     *
     * @see Bulk_Upgrader_Skin
     */
    class Bulk_Plugin_Upgrader_Skin extends \Bulk_Upgrader_Skin
    {
        public $plugin_info = array();
        // Plugin_Upgrader::bulk_upgrade() will fill this in.
        public function add_strings()
        {
        }
        /**
         * @param string $title
         */
        public function before($title = '')
        {
        }
        /**
         * @param string $title
         */
        public function after($title = '')
        {
        }
        /**
         */
        public function bulk_footer()
        {
        }
    }
    /**
     * WP_Privacy_Data_Export_Requests_Table class.
     *
     * @since 4.9.6
     */
    class WP_Privacy_Data_Export_Requests_List_Table extends \WP_Privacy_Requests_Table
    {
        /**
         * Action name for the requests this table will work with.
         *
         * @since 4.9.6
         *
         * @var string $request_type Name of action.
         */
        protected $request_type = 'export_personal_data';
        /**
         * Post type for the requests.
         *
         * @since 4.9.6
         *
         * @var string $post_type The post type.
         */
        protected $post_type = 'user_request';
        /**
         * Actions column.
         *
         * @since 4.9.6
         *
         * @param WP_User_Request $item Item being shown.
         * @return string Email column markup.
         */
        public function column_email($item)
        {
        }
        /**
         * Displays the next steps column.
         *
         * @since 4.9.6
         *
         * @param WP_User_Request $item Item being shown.
         */
        public function column_next_steps($item)
        {
        }
    }
    /**
     * Upgrader API: Theme_Installer_Skin class
     *
     * @package WordPress
     * @subpackage Upgrader
     * @since 4.6.0
     */
    /**
     * Theme Installer Skin for the WordPress Theme Installer.
     *
     * @since 2.8.0
     * @since 4.6.0 Moved to its own file from wp-admin/includes/class-wp-upgrader-skins.php.
     *
     * @see WP_Upgrader_Skin
     */
    class Theme_Installer_Skin extends \WP_Upgrader_Skin
    {
        public $api;
        public $type;
        public $url;
        public $overwrite;
        private $is_downgrading = \false;
        /**
         * @param array $args
         */
        public function __construct($args = array())
        {
        }
        /**
         * Action to perform before installing a theme.
         *
         * @since 2.8.0
         */
        public function before()
        {
        }
        /**
         * Hides the `process_failed` error when updating a theme by uploading a zip file.
         *
         * @since 5.5.0
         *
         * @param WP_Error $wp_error WP_Error object.
         * @return bool
         */
        public function hide_process_failed($wp_error)
        {
        }
        /**
         * Action to perform following a single theme install.
         *
         * @since 2.8.0
         */
        public function after()
        {
        }
        /**
         * Check if the theme can be overwritten and output the HTML for overwriting a theme on upload.
         *
         * @since 5.5.0
         *
         * @return bool Whether the theme can be overwritten and HTML was outputted.
         */
        private function do_overwrite()
        {
        }
    }
    /**
     * List Table API: WP_MS_Users_List_Table class
     *
     * @package WordPress
     * @subpackage Administration
     * @since 3.1.0
     */
    /**
     * Core class used to implement displaying users in a list table for the network admin.
     *
     * @since 3.1.0
     * @access private
     *
     * @see WP_List_Table
     */
    class WP_MS_Users_List_Table extends \WP_List_Table
    {
        /**
         * @return bool
         */
        public function ajax_user_can()
        {
        }
        /**
         * @global string $mode       List table view mode.
         * @global string $usersearch
         * @global string $role
         */
        public function prepare_items()
        {
        }
        /**
         * @return array
         */
        protected function get_bulk_actions()
        {
        }
        /**
         */
        public function no_items()
        {
        }
        /**
         * @global string $role
         * @return array
         */
        protected function get_views()
        {
        }
        /**
         * @global string $mode List table view mode.
         *
         * @param string $which
         */
        protected function pagination($which)
        {
        }
        /**
         * @return array
         */
        public function get_columns()
        {
        }
        /**
         * @return array
         */
        protected function get_sortable_columns()
        {
        }
        /**
         * Handles the checkbox column output.
         *
         * @since 4.3.0
         * @since 5.9.0 Renamed `$user` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @param WP_User $item The current WP_User object.
         */
        public function column_cb($item)
        {
        }
        /**
         * Handles the ID column output.
         *
         * @since 4.4.0
         *
         * @param WP_User $user The current WP_User object.
         */
        public function column_id($user)
        {
        }
        /**
         * Handles the username column output.
         *
         * @since 4.3.0
         *
         * @param WP_User $user The current WP_User object.
         */
        public function column_username($user)
        {
        }
        /**
         * Handles the name column output.
         *
         * @since 4.3.0
         *
         * @param WP_User $user The current WP_User object.
         */
        public function column_name($user)
        {
        }
        /**
         * Handles the email column output.
         *
         * @since 4.3.0
         *
         * @param WP_User $user The current WP_User object.
         */
        public function column_email($user)
        {
        }
        /**
         * Handles the registered date column output.
         *
         * @since 4.3.0
         *
         * @global string $mode List table view mode.
         *
         * @param WP_User $user The current WP_User object.
         */
        public function column_registered($user)
        {
        }
        /**
         * @since 4.3.0
         *
         * @param WP_User $user
         * @param string  $classes
         * @param string  $data
         * @param string  $primary
         */
        protected function _column_blogs($user, $classes, $data, $primary)
        {
        }
        /**
         * Handles the sites column output.
         *
         * @since 4.3.0
         *
         * @param WP_User $user The current WP_User object.
         */
        public function column_blogs($user)
        {
        }
        /**
         * Handles the default column output.
         *
         * @since 4.3.0
         * @since 5.9.0 Renamed `$user` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @param WP_User $item        The current WP_User object.
         * @param string  $column_name The current column name.
         */
        public function column_default($item, $column_name)
        {
        }
        public function display_rows()
        {
        }
        /**
         * Gets the name of the default primary column.
         *
         * @since 4.3.0
         *
         * @return string Name of the default primary column, in this case, 'username'.
         */
        protected function get_default_primary_column_name()
        {
        }
        /**
         * Generates and displays row action links.
         *
         * @since 4.3.0
         * @since 5.9.0 Renamed `$user` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @param WP_User $item        User being acted upon.
         * @param string  $column_name Current column name.
         * @param string  $primary     Primary column name.
         * @return string Row actions output for users in Multisite, or an empty string
         *                if the current column is not the primary column.
         */
        protected function handle_row_actions($item, $column_name, $primary)
        {
        }
    }
    /**
     * Upgrader API: Language_Pack_Upgrader_Skin class
     *
     * @package WordPress
     * @subpackage Upgrader
     * @since 4.6.0
     */
    /**
     * Translation Upgrader Skin for WordPress Translation Upgrades.
     *
     * @since 3.7.0
     * @since 4.6.0 Moved to its own file from wp-admin/includes/class-wp-upgrader-skins.php.
     *
     * @see WP_Upgrader_Skin
     */
    class Language_Pack_Upgrader_Skin extends \WP_Upgrader_Skin
    {
        public $language_update = \null;
        public $done_header = \false;
        public $done_footer = \false;
        public $display_footer_actions = \true;
        /**
         * @param array $args
         */
        public function __construct($args = array())
        {
        }
        /**
         */
        public function before()
        {
        }
        /**
         * @since 5.9.0 Renamed `$error` to `$errors` for PHP 8 named parameter support.
         *
         * @param string|WP_Error $errors Errors.
         */
        public function error($errors)
        {
        }
        /**
         */
        public function after()
        {
        }
        /**
         */
        public function bulk_footer()
        {
        }
    }
    /**
     * List Table API: WP_MS_Sites_List_Table class
     *
     * @package WordPress
     * @subpackage Administration
     * @since 3.1.0
     */
    /**
     * Core class used to implement displaying sites in a list table for the network admin.
     *
     * @since 3.1.0
     * @access private
     *
     * @see WP_List_Table
     */
    class WP_MS_Sites_List_Table extends \WP_List_Table
    {
        /**
         * Site status list.
         *
         * @since 4.3.0
         * @var array
         */
        public $status_list;
        /**
         * Constructor.
         *
         * @since 3.1.0
         *
         * @see WP_List_Table::__construct() for more information on default arguments.
         *
         * @param array $args An associative array of arguments.
         */
        public function __construct($args = array())
        {
        }
        /**
         * @return bool
         */
        public function ajax_user_can()
        {
        }
        /**
         * Prepares the list of sites for display.
         *
         * @since 3.1.0
         *
         * @global string $mode List table view mode.
         * @global string $s
         * @global wpdb   $wpdb WordPress database abstraction object.
         */
        public function prepare_items()
        {
        }
        /**
         */
        public function no_items()
        {
        }
        /**
         * Gets links to filter sites by status.
         *
         * @since 5.3.0
         *
         * @return array
         */
        protected function get_views()
        {
        }
        /**
         * @return array
         */
        protected function get_bulk_actions()
        {
        }
        /**
         * @global string $mode List table view mode.
         *
         * @param string $which The location of the pagination nav markup: 'top' or 'bottom'.
         */
        protected function pagination($which)
        {
        }
        /**
         * Extra controls to be displayed between bulk actions and pagination.
         *
         * @since 5.3.0
         *
         * @param string $which The location of the extra table nav markup: 'top' or 'bottom'.
         */
        protected function extra_tablenav($which)
        {
        }
        /**
         * @return array
         */
        public function get_columns()
        {
        }
        /**
         * @return array
         */
        protected function get_sortable_columns()
        {
        }
        /**
         * Handles the checkbox column output.
         *
         * @since 4.3.0
         * @since 5.9.0 Renamed `$blog` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @param array $item Current site.
         */
        public function column_cb($item)
        {
        }
        /**
         * Handles the ID column output.
         *
         * @since 4.4.0
         *
         * @param array $blog Current site.
         */
        public function column_id($blog)
        {
        }
        /**
         * Handles the site name column output.
         *
         * @since 4.3.0
         *
         * @global string $mode List table view mode.
         *
         * @param array $blog Current site.
         */
        public function column_blogname($blog)
        {
        }
        /**
         * Handles the lastupdated column output.
         *
         * @since 4.3.0
         *
         * @global string $mode List table view mode.
         *
         * @param array $blog Current site.
         */
        public function column_lastupdated($blog)
        {
        }
        /**
         * Handles the registered column output.
         *
         * @since 4.3.0
         *
         * @global string $mode List table view mode.
         *
         * @param array $blog Current site.
         */
        public function column_registered($blog)
        {
        }
        /**
         * Handles the users column output.
         *
         * @since 4.3.0
         *
         * @param array $blog Current site.
         */
        public function column_users($blog)
        {
        }
        /**
         * Handles the plugins column output.
         *
         * @since 4.3.0
         *
         * @param array $blog Current site.
         */
        public function column_plugins($blog)
        {
        }
        /**
         * Handles output for the default column.
         *
         * @since 4.3.0
         * @since 5.9.0 Renamed `$blog` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @param array  $item        Current site.
         * @param string $column_name Current column name.
         */
        public function column_default($item, $column_name)
        {
        }
        /**
         * @global string $mode List table view mode.
         */
        public function display_rows()
        {
        }
        /**
         * Maybe output comma-separated site states.
         *
         * @since 5.3.0
         *
         * @param array $site
         */
        protected function site_states($site)
        {
        }
        /**
         * Gets the name of the default primary column.
         *
         * @since 4.3.0
         *
         * @return string Name of the default primary column, in this case, 'blogname'.
         */
        protected function get_default_primary_column_name()
        {
        }
        /**
         * Generates and displays row action links.
         *
         * @since 4.3.0
         * @since 5.9.0 Renamed `$blog` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @param array  $item        Site being acted upon.
         * @param string $column_name Current column name.
         * @param string $primary     Primary column name.
         * @return string Row actions output for sites in Multisite, or an empty string
         *                if the current column is not the primary column.
         */
        protected function handle_row_actions($item, $column_name, $primary)
        {
        }
    }
    /**
     * WP_Privacy_Policy_Content class.
     *
     * @package WordPress
     * @subpackage Administration
     * @since 4.9.6
     */
    final class WP_Privacy_Policy_Content
    {
        private static $policy_content = array();
        /**
         * Constructor
         *
         * @since 4.9.6
         */
        private function __construct()
        {
        }
        /**
         * Add content to the postbox shown when editing the privacy policy.
         *
         * Plugins and themes should suggest text for inclusion in the site's privacy policy.
         * The suggested text should contain information about any functionality that affects user privacy,
         * and will be shown in the Suggested Privacy Policy Content postbox.
         *
         * Intended for use from `wp_add_privacy_policy_content()`.
         *
         * @since 4.9.6
         *
         * @param string $plugin_name The name of the plugin or theme that is suggesting content for the site's privacy policy.
         * @param string $policy_text The suggested content for inclusion in the policy.
         */
        public static function add($plugin_name, $policy_text)
        {
        }
        /**
         * Quick check if any privacy info has changed.
         *
         * @since 4.9.6
         */
        public static function text_change_check()
        {
        }
        /**
         * Output a warning when some privacy info has changed.
         *
         * @since 4.9.6
         *
         * @global WP_Post $post Global post object.
         */
        public static function policy_text_changed_notice()
        {
        }
        /**
         * Update the cached policy info when the policy page is updated.
         *
         * @since 4.9.6
         * @access private
         *
         * @param int $post_id The ID of the updated post.
         */
        public static function _policy_page_updated($post_id)
        {
        }
        /**
         * Check for updated, added or removed privacy policy information from plugins.
         *
         * Caches the current info in post_meta of the policy page.
         *
         * @since 4.9.6
         *
         * @return array The privacy policy text/information added by core and plugins.
         */
        public static function get_suggested_policy_text()
        {
        }
        /**
         * Add a notice with a link to the guide when editing the privacy policy page.
         *
         * @since 4.9.6
         * @since 5.0.0 The `$post` parameter was made optional.
         *
         * @global WP_Post $post Global post object.
         *
         * @param WP_Post|null $post The currently edited post. Default null.
         */
        public static function notice($post = \null)
        {
        }
        /**
         * Output the privacy policy guide together with content from the theme and plugins.
         *
         * @since 4.9.6
         */
        public static function privacy_policy_guide()
        {
        }
        /**
         * Return the default suggested privacy policy content.
         *
         * @since 4.9.6
         * @since 5.0.0 Added the `$blocks` parameter.
         *
         * @param bool $description Whether to include the descriptions under the section headings. Default false.
         * @param bool $blocks      Whether to format the content for the block editor. Default true.
         * @return string The default policy content.
         */
        public static function get_default_content($description = \false, $blocks = \true)
        {
        }
        /**
         * Add the suggested privacy policy text to the policy postbox.
         *
         * @since 4.9.6
         */
        public static function add_suggested_content()
        {
        }
    }
    /* For futur use
      define( 'PCLZIP_CB_PRE_LIST', 78005 );
      define( 'PCLZIP_CB_POST_LIST', 78006 );
      define( 'PCLZIP_CB_PRE_DELETE', 78007 );
      define( 'PCLZIP_CB_POST_DELETE', 78008 );
      */
    // --------------------------------------------------------------------------------
    // Class : PclZip
    // Description :
    //   PclZip is the class that represent a Zip archive.
    //   The public methods allow the manipulation of the archive.
    // Attributes :
    //   Attributes must not be accessed directly.
    // Methods :
    //   PclZip() : Object creator
    //   create() : Creates the Zip archive
    //   listContent() : List the content of the Zip archive
    //   extract() : Extract the content of the archive
    //   properties() : List the properties of the archive
    // --------------------------------------------------------------------------------
    class PclZip
    {
        // ----- Filename of the zip file
        var $zipname = '';
        // ----- File descriptor of the zip file
        var $zip_fd = 0;
        // ----- Internal error handling
        var $error_code = 1;
        var $error_string = '';
        // ----- Current status of the magic_quotes_runtime
        // This value store the php configuration for magic_quotes
        // The class can then disable the magic_quotes and reset it after
        var $magic_quotes_status;
        // --------------------------------------------------------------------------------
        // Function : PclZip()
        // Description :
        //   Creates a PclZip object and set the name of the associated Zip archive
        //   filename.
        //   Note that no real action is taken, if the archive does not exist it is not
        //   created. Use create() for that.
        // --------------------------------------------------------------------------------
        function __construct($p_zipname)
        {
        }
        public function PclZip($p_zipname)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function :
        //   create($p_filelist, $p_add_dir="", $p_remove_dir="")
        //   create($p_filelist, $p_option, $p_option_value, ...)
        // Description :
        //   This method supports two different synopsis. The first one is historical.
        //   This method creates a Zip Archive. The Zip file is created in the
        //   filesystem. The files and directories indicated in $p_filelist
        //   are added in the archive. See the parameters description for the
        //   supported format of $p_filelist.
        //   When a directory is in the list, the directory and its content is added
        //   in the archive.
        //   In this synopsis, the function takes an optional variable list of
        //   options. See below the supported options.
        // Parameters :
        //   $p_filelist : An array containing file or directory names, or
        //                 a string containing one filename or one directory name, or
        //                 a string containing a list of filenames and/or directory
        //                 names separated by spaces.
        //   $p_add_dir : A path to add before the real path of the archived file,
        //                in order to have it memorized in the archive.
        //   $p_remove_dir : A path to remove from the real path of the file to archive,
        //                   in order to have a shorter path memorized in the archive.
        //                   When $p_add_dir and $p_remove_dir are set, $p_remove_dir
        //                   is removed first, before $p_add_dir is added.
        // Options :
        //   PCLZIP_OPT_ADD_PATH :
        //   PCLZIP_OPT_REMOVE_PATH :
        //   PCLZIP_OPT_REMOVE_ALL_PATH :
        //   PCLZIP_OPT_COMMENT :
        //   PCLZIP_CB_PRE_ADD :
        //   PCLZIP_CB_POST_ADD :
        // Return Values :
        //   0 on failure,
        //   The list of the added files, with a status of the add action.
        //   (see PclZip::listContent() for list entry format)
        // --------------------------------------------------------------------------------
        function create($p_filelist)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function :
        //   add($p_filelist, $p_add_dir="", $p_remove_dir="")
        //   add($p_filelist, $p_option, $p_option_value, ...)
        // Description :
        //   This method supports two synopsis. The first one is historical.
        //   This methods add the list of files in an existing archive.
        //   If a file with the same name already exists, it is added at the end of the
        //   archive, the first one is still present.
        //   If the archive does not exist, it is created.
        // Parameters :
        //   $p_filelist : An array containing file or directory names, or
        //                 a string containing one filename or one directory name, or
        //                 a string containing a list of filenames and/or directory
        //                 names separated by spaces.
        //   $p_add_dir : A path to add before the real path of the archived file,
        //                in order to have it memorized in the archive.
        //   $p_remove_dir : A path to remove from the real path of the file to archive,
        //                   in order to have a shorter path memorized in the archive.
        //                   When $p_add_dir and $p_remove_dir are set, $p_remove_dir
        //                   is removed first, before $p_add_dir is added.
        // Options :
        //   PCLZIP_OPT_ADD_PATH :
        //   PCLZIP_OPT_REMOVE_PATH :
        //   PCLZIP_OPT_REMOVE_ALL_PATH :
        //   PCLZIP_OPT_COMMENT :
        //   PCLZIP_OPT_ADD_COMMENT :
        //   PCLZIP_OPT_PREPEND_COMMENT :
        //   PCLZIP_CB_PRE_ADD :
        //   PCLZIP_CB_POST_ADD :
        // Return Values :
        //   0 on failure,
        //   The list of the added files, with a status of the add action.
        //   (see PclZip::listContent() for list entry format)
        // --------------------------------------------------------------------------------
        function add($p_filelist)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : listContent()
        // Description :
        //   This public method, gives the list of the files and directories, with their
        //   properties.
        //   The properties of each entries in the list are (used also in other functions) :
        //     filename : Name of the file. For a create or add action it is the filename
        //                given by the user. For an extract function it is the filename
        //                of the extracted file.
        //     stored_filename : Name of the file / directory stored in the archive.
        //     size : Size of the stored file.
        //     compressed_size : Size of the file's data compressed in the archive
        //                       (without the headers overhead)
        //     mtime : Last known modification date of the file (UNIX timestamp)
        //     comment : Comment associated with the file
        //     folder : true | false
        //     index : index of the file in the archive
        //     status : status of the action (depending of the action) :
        //              Values are :
        //                ok : OK !
        //                filtered : the file / dir is not extracted (filtered by user)
        //                already_a_directory : the file can not be extracted because a
        //                                      directory with the same name already exists
        //                write_protected : the file can not be extracted because a file
        //                                  with the same name already exists and is
        //                                  write protected
        //                newer_exist : the file was not extracted because a newer file exists
        //                path_creation_fail : the file is not extracted because the folder
        //                                     does not exist and can not be created
        //                write_error : the file was not extracted because there was a
        //                              error while writing the file
        //                read_error : the file was not extracted because there was a error
        //                             while reading the file
        //                invalid_header : the file was not extracted because of an archive
        //                                 format error (bad file header)
        //   Note that each time a method can continue operating when there
        //   is an action error on a file, the error is only logged in the file status.
        // Return Values :
        //   0 on an unrecoverable failure,
        //   The list of the files in the archive.
        // --------------------------------------------------------------------------------
        function listContent()
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function :
        //   extract($p_path="./", $p_remove_path="")
        //   extract([$p_option, $p_option_value, ...])
        // Description :
        //   This method supports two synopsis. The first one is historical.
        //   This method extract all the files / directories from the archive to the
        //   folder indicated in $p_path.
        //   If you want to ignore the 'root' part of path of the memorized files
        //   you can indicate this in the optional $p_remove_path parameter.
        //   By default, if a newer file with the same name already exists, the
        //   file is not extracted.
        //
        //   If both PCLZIP_OPT_PATH and PCLZIP_OPT_ADD_PATH options
        //   are used, the path indicated in PCLZIP_OPT_ADD_PATH is append
        //   at the end of the path value of PCLZIP_OPT_PATH.
        // Parameters :
        //   $p_path : Path where the files and directories are to be extracted
        //   $p_remove_path : First part ('root' part) of the memorized path
        //                    (if any similar) to remove while extracting.
        // Options :
        //   PCLZIP_OPT_PATH :
        //   PCLZIP_OPT_ADD_PATH :
        //   PCLZIP_OPT_REMOVE_PATH :
        //   PCLZIP_OPT_REMOVE_ALL_PATH :
        //   PCLZIP_CB_PRE_EXTRACT :
        //   PCLZIP_CB_POST_EXTRACT :
        // Return Values :
        //   0 or a negative value on failure,
        //   The list of the extracted files, with a status of the action.
        //   (see PclZip::listContent() for list entry format)
        // --------------------------------------------------------------------------------
        function extract()
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function :
        //   extractByIndex($p_index, $p_path="./", $p_remove_path="")
        //   extractByIndex($p_index, [$p_option, $p_option_value, ...])
        // Description :
        //   This method supports two synopsis. The first one is historical.
        //   This method is doing a partial extract of the archive.
        //   The extracted files or folders are identified by their index in the
        //   archive (from 0 to n).
        //   Note that if the index identify a folder, only the folder entry is
        //   extracted, not all the files included in the archive.
        // Parameters :
        //   $p_index : A single index (integer) or a string of indexes of files to
        //              extract. The form of the string is "0,4-6,8-12" with only numbers
        //              and '-' for range or ',' to separate ranges. No spaces or ';'
        //              are allowed.
        //   $p_path : Path where the files and directories are to be extracted
        //   $p_remove_path : First part ('root' part) of the memorized path
        //                    (if any similar) to remove while extracting.
        // Options :
        //   PCLZIP_OPT_PATH :
        //   PCLZIP_OPT_ADD_PATH :
        //   PCLZIP_OPT_REMOVE_PATH :
        //   PCLZIP_OPT_REMOVE_ALL_PATH :
        //   PCLZIP_OPT_EXTRACT_AS_STRING : The files are extracted as strings and
        //     not as files.
        //     The resulting content is in a new field 'content' in the file
        //     structure.
        //     This option must be used alone (any other options are ignored).
        //   PCLZIP_CB_PRE_EXTRACT :
        //   PCLZIP_CB_POST_EXTRACT :
        // Return Values :
        //   0 on failure,
        //   The list of the extracted files, with a status of the action.
        //   (see PclZip::listContent() for list entry format)
        // --------------------------------------------------------------------------------
        //function extractByIndex($p_index, options...)
        function extractByIndex($p_index)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function :
        //   delete([$p_option, $p_option_value, ...])
        // Description :
        //   This method removes files from the archive.
        //   If no parameters are given, then all the archive is emptied.
        // Parameters :
        //   None or optional arguments.
        // Options :
        //   PCLZIP_OPT_BY_INDEX :
        //   PCLZIP_OPT_BY_NAME :
        //   PCLZIP_OPT_BY_EREG :
        //   PCLZIP_OPT_BY_PREG :
        // Return Values :
        //   0 on failure,
        //   The list of the files which are still present in the archive.
        //   (see PclZip::listContent() for list entry format)
        // --------------------------------------------------------------------------------
        function delete()
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : deleteByIndex()
        // Description :
        //   ***** Deprecated *****
        //   delete(PCLZIP_OPT_BY_INDEX, $p_index) should be preferred.
        // --------------------------------------------------------------------------------
        function deleteByIndex($p_index)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : properties()
        // Description :
        //   This method gives the properties of the archive.
        //   The properties are :
        //     nb : Number of files in the archive
        //     comment : Comment associated with the archive file
        //     status : not_exist, ok
        // Parameters :
        //   None
        // Return Values :
        //   0 on failure,
        //   An array with the archive properties.
        // --------------------------------------------------------------------------------
        function properties()
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : duplicate()
        // Description :
        //   This method creates an archive by copying the content of an other one. If
        //   the archive already exist, it is replaced by the new one without any warning.
        // Parameters :
        //   $p_archive : The filename of a valid archive, or
        //                a valid PclZip object.
        // Return Values :
        //   1 on success.
        //   0 or a negative value on error (error code).
        // --------------------------------------------------------------------------------
        function duplicate($p_archive)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : merge()
        // Description :
        //   This method merge the $p_archive_to_add archive at the end of the current
        //   one ($this).
        //   If the archive ($this) does not exist, the merge becomes a duplicate.
        //   If the $p_archive_to_add archive does not exist, the merge is a success.
        // Parameters :
        //   $p_archive_to_add : It can be directly the filename of a valid zip archive,
        //                       or a PclZip object archive.
        // Return Values :
        //   1 on success,
        //   0 or negative values on error (see below).
        // --------------------------------------------------------------------------------
        function merge($p_archive_to_add)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : errorCode()
        // Description :
        // Parameters :
        // --------------------------------------------------------------------------------
        function errorCode()
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : errorName()
        // Description :
        // Parameters :
        // --------------------------------------------------------------------------------
        function errorName($p_with_code = \false)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : errorInfo()
        // Description :
        // Parameters :
        // --------------------------------------------------------------------------------
        function errorInfo($p_full = \false)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // ***** UNDER THIS LINE ARE DEFINED PRIVATE INTERNAL FUNCTIONS *****
        // *****                                                        *****
        // *****       THESES FUNCTIONS MUST NOT BE USED DIRECTLY       *****
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privCheckFormat()
        // Description :
        //   This method check that the archive exists and is a valid zip archive.
        //   Several level of check exists. (futur)
        // Parameters :
        //   $p_level : Level of check. Default 0.
        //              0 : Check the first bytes (magic codes) (default value))
        //              1 : 0 + Check the central directory (futur)
        //              2 : 1 + Check each file header (futur)
        // Return Values :
        //   true on success,
        //   false on error, the error code is set.
        // --------------------------------------------------------------------------------
        function privCheckFormat($p_level = 0)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privParseOptions()
        // Description :
        //   This internal methods reads the variable list of arguments ($p_options_list,
        //   $p_size) and generate an array with the options and values ($v_result_list).
        //   $v_requested_options contains the options that can be present and those that
        //   must be present.
        //   $v_requested_options is an array, with the option value as key, and 'optional',
        //   or 'mandatory' as value.
        // Parameters :
        //   See above.
        // Return Values :
        //   1 on success.
        //   0 on failure.
        // --------------------------------------------------------------------------------
        function privParseOptions(&$p_options_list, $p_size, &$v_result_list, $v_requested_options = \false)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privOptionDefaultThreshold()
        // Description :
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privOptionDefaultThreshold(&$p_options)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privFileDescrParseAtt()
        // Description :
        // Parameters :
        // Return Values :
        //   1 on success.
        //   0 on failure.
        // --------------------------------------------------------------------------------
        function privFileDescrParseAtt(&$p_file_list, &$p_filedescr, $v_options, $v_requested_options = \false)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privFileDescrExpand()
        // Description :
        //   This method look for each item of the list to see if its a file, a folder
        //   or a string to be added as file. For any other type of files (link, other)
        //   just ignore the item.
        //   Then prepare the information that will be stored for that file.
        //   When its a folder, expand the folder with all the files that are in that
        //   folder (recursively).
        // Parameters :
        // Return Values :
        //   1 on success.
        //   0 on failure.
        // --------------------------------------------------------------------------------
        function privFileDescrExpand(&$p_filedescr_list, &$p_options)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privCreate()
        // Description :
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privCreate($p_filedescr_list, &$p_result_list, &$p_options)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privAdd()
        // Description :
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privAdd($p_filedescr_list, &$p_result_list, &$p_options)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privOpenFd()
        // Description :
        // Parameters :
        // --------------------------------------------------------------------------------
        function privOpenFd($p_mode)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privCloseFd()
        // Description :
        // Parameters :
        // --------------------------------------------------------------------------------
        function privCloseFd()
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privAddList()
        // Description :
        //   $p_add_dir and $p_remove_dir will give the ability to memorize a path which is
        //   different from the real path of the file. This is useful if you want to have PclTar
        //   running in any directory, and memorize relative path from an other directory.
        // Parameters :
        //   $p_list : An array containing the file or directory names to add in the tar
        //   $p_result_list : list of added files with their properties (specially the status field)
        //   $p_add_dir : Path to add in the filename path archived
        //   $p_remove_dir : Path to remove in the filename path archived
        // Return Values :
        // --------------------------------------------------------------------------------
        //  function privAddList($p_list, &$p_result_list, $p_add_dir, $p_remove_dir, $p_remove_all_dir, &$p_options)
        function privAddList($p_filedescr_list, &$p_result_list, &$p_options)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privAddFileList()
        // Description :
        // Parameters :
        //   $p_filedescr_list : An array containing the file description
        //                      or directory names to add in the zip
        //   $p_result_list : list of added files with their properties (specially the status field)
        // Return Values :
        // --------------------------------------------------------------------------------
        function privAddFileList($p_filedescr_list, &$p_result_list, &$p_options)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privAddFile()
        // Description :
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privAddFile($p_filedescr, &$p_header, &$p_options)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privAddFileUsingTempFile()
        // Description :
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privAddFileUsingTempFile($p_filedescr, &$p_header, &$p_options)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privCalculateStoredFilename()
        // Description :
        //   Based on file descriptor properties and global options, this method
        //   calculate the filename that will be stored in the archive.
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privCalculateStoredFilename(&$p_filedescr, &$p_options)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privWriteFileHeader()
        // Description :
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privWriteFileHeader(&$p_header)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privWriteCentralFileHeader()
        // Description :
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privWriteCentralFileHeader(&$p_header)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privWriteCentralHeader()
        // Description :
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privWriteCentralHeader($p_nb_entries, $p_size, $p_offset, $p_comment)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privList()
        // Description :
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privList(&$p_list)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privConvertHeader2FileInfo()
        // Description :
        //   This function takes the file information from the central directory
        //   entries and extract the interesting parameters that will be given back.
        //   The resulting file infos are set in the array $p_info
        //     $p_info['filename'] : Filename with full path. Given by user (add),
        //                           extracted in the filesystem (extract).
        //     $p_info['stored_filename'] : Stored filename in the archive.
        //     $p_info['size'] = Size of the file.
        //     $p_info['compressed_size'] = Compressed size of the file.
        //     $p_info['mtime'] = Last modification date of the file.
        //     $p_info['comment'] = Comment associated with the file.
        //     $p_info['folder'] = true/false : indicates if the entry is a folder or not.
        //     $p_info['status'] = status of the action on the file.
        //     $p_info['crc'] = CRC of the file content.
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privConvertHeader2FileInfo($p_header, &$p_info)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privExtractByRule()
        // Description :
        //   Extract a file or directory depending of rules (by index, by name, ...)
        // Parameters :
        //   $p_file_list : An array where will be placed the properties of each
        //                  extracted file
        //   $p_path : Path to add while writing the extracted files
        //   $p_remove_path : Path to remove (from the file memorized path) while writing the
        //                    extracted files. If the path does not match the file path,
        //                    the file is extracted with its memorized path.
        //                    $p_remove_path does not apply to 'list' mode.
        //                    $p_path and $p_remove_path are commulative.
        // Return Values :
        //   1 on success,0 or less on error (see error code list)
        // --------------------------------------------------------------------------------
        function privExtractByRule(&$p_file_list, $p_path, $p_remove_path, $p_remove_all_path, &$p_options)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privExtractFile()
        // Description :
        // Parameters :
        // Return Values :
        //
        // 1 : ... ?
        // PCLZIP_ERR_USER_ABORTED(2) : User ask for extraction stop in callback
        // --------------------------------------------------------------------------------
        function privExtractFile(&$p_entry, $p_path, $p_remove_path, $p_remove_all_path, &$p_options)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privExtractFileUsingTempFile()
        // Description :
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privExtractFileUsingTempFile(&$p_entry, &$p_options)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privExtractFileInOutput()
        // Description :
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privExtractFileInOutput(&$p_entry, &$p_options)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privExtractFileAsString()
        // Description :
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privExtractFileAsString(&$p_entry, &$p_string, &$p_options)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privReadFileHeader()
        // Description :
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privReadFileHeader(&$p_header)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privReadCentralFileHeader()
        // Description :
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privReadCentralFileHeader(&$p_header)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privCheckFileHeaders()
        // Description :
        // Parameters :
        // Return Values :
        //   1 on success,
        //   0 on error;
        // --------------------------------------------------------------------------------
        function privCheckFileHeaders(&$p_local_header, &$p_central_header)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privReadEndCentralDir()
        // Description :
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privReadEndCentralDir(&$p_central_dir)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privDeleteByRule()
        // Description :
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privDeleteByRule(&$p_result_list, &$p_options)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privDirCheck()
        // Description :
        //   Check if a directory exists, if not it creates it and all the parents directory
        //   which may be useful.
        // Parameters :
        //   $p_dir : Directory path to check.
        // Return Values :
        //    1 : OK
        //   -1 : Unable to create directory
        // --------------------------------------------------------------------------------
        function privDirCheck($p_dir, $p_is_dir = \false)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privMerge()
        // Description :
        //   If $p_archive_to_add does not exist, the function exit with a success result.
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privMerge(&$p_archive_to_add)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privDuplicate()
        // Description :
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privDuplicate($p_archive_filename)
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privErrorLog()
        // Description :
        // Parameters :
        // --------------------------------------------------------------------------------
        function privErrorLog($p_error_code = 0, $p_error_string = '')
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privErrorReset()
        // Description :
        // Parameters :
        // --------------------------------------------------------------------------------
        function privErrorReset()
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privDisableMagicQuotes()
        // Description :
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privDisableMagicQuotes()
        {
        }
        // --------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------
        // Function : privSwapBackMagicQuotes()
        // Description :
        // Parameters :
        // Return Values :
        // --------------------------------------------------------------------------------
        function privSwapBackMagicQuotes()
        {
        }
        // --------------------------------------------------------------------------------
    }
    /**
     * Administration API: WP_Site_Icon class
     *
     * @package WordPress
     * @subpackage Administration
     * @since 4.3.0
     */
    /**
     * Core class used to implement site icon functionality.
     *
     * @since 4.3.0
     */
    class WP_Site_Icon
    {
        /**
         * The minimum size of the site icon.
         *
         * @since 4.3.0
         * @var int
         */
        public $min_size = 512;
        /**
         * The size to which to crop the image so that we can display it in the UI nicely.
         *
         * @since 4.3.0
         * @var int
         */
        public $page_crop = 512;
        /**
         * List of site icon sizes.
         *
         * @since 4.3.0
         * @var int[]
         */
        public $site_icon_sizes = array(
            /*
             * Square, medium sized tiles for IE11+.
             *
             * See https://msdn.microsoft.com/library/dn455106(v=vs.85).aspx
             */
            270,
            /*
             * App icon for Android/Chrome.
             *
             * @link https://developers.google.com/web/updates/2014/11/Support-for-theme-color-in-Chrome-39-for-Android
             * @link https://developer.chrome.com/multidevice/android/installtohomescreen
             */
            192,
            /*
             * App icons up to iPhone 6 Plus.
             *
             * See https://developer.apple.com/library/prerelease/ios/documentation/UserExperience/Conceptual/MobileHIG/IconMatrix.html
             */
            180,
            // Our regular Favicon.
            32,
        );
        /**
         * Registers actions and filters.
         *
         * @since 4.3.0
         */
        public function __construct()
        {
        }
        /**
         * Creates an attachment 'object'.
         *
         * @since 4.3.0
         *
         * @param string $cropped              Cropped image URL.
         * @param int    $parent_attachment_id Attachment ID of parent image.
         * @return array An array with attachment object data.
         */
        public function create_attachment_object($cropped, $parent_attachment_id)
        {
        }
        /**
         * Inserts an attachment.
         *
         * @since 4.3.0
         *
         * @param array  $attachment An array with attachment object data.
         * @param string $file       File path of the attached image.
         * @return int               Attachment ID.
         */
        public function insert_attachment($attachment, $file)
        {
        }
        /**
         * Adds additional sizes to be made when creating the site icon images.
         *
         * @since 4.3.0
         *
         * @param array[] $sizes Array of arrays containing information for additional sizes.
         * @return array[] Array of arrays containing additional image sizes.
         */
        public function additional_sizes($sizes = array())
        {
        }
        /**
         * Adds Site Icon sizes to the array of image sizes on demand.
         *
         * @since 4.3.0
         *
         * @param string[] $sizes Array of image size names.
         * @return string[] Array of image size names.
         */
        public function intermediate_image_sizes($sizes = array())
        {
        }
        /**
         * Deletes the Site Icon when the image file is deleted.
         *
         * @since 4.3.0
         *
         * @param int $post_id Attachment ID.
         */
        public function delete_attachment_data($post_id)
        {
        }
        /**
         * Adds custom image sizes when meta data for an image is requested, that happens to be used as Site Icon.
         *
         * @since 4.3.0
         *
         * @param null|array|string $value    The value get_metadata() should return a single metadata value, or an
         *                                    array of values.
         * @param int               $post_id  Post ID.
         * @param string            $meta_key Meta key.
         * @param bool              $single   Whether to return only the first value of the specified `$meta_key`.
         * @return array|null|string The attachment metadata value, array of values, or null.
         */
        public function get_post_metadata($value, $post_id, $meta_key, $single)
        {
        }
    }
    /**
     * Class for testing automatic updates in the WordPress code.
     *
     * @package WordPress
     * @subpackage Site_Health
     * @since 5.2.0
     */
    class WP_Site_Health_Auto_Updates
    {
        /**
         * WP_Site_Health_Auto_Updates constructor.
         *
         * @since 5.2.0
         */
        public function __construct()
        {
        }
        /**
         * Run tests to determine if auto-updates can run.
         *
         * @since 5.2.0
         *
         * @return array The test results.
         */
        public function run_tests()
        {
        }
        /**
         * Test if auto-updates related constants are set correctly.
         *
         * @since 5.2.0
         * @since 5.5.1 The `$value` parameter can accept an array.
         *
         * @param string $constant         The name of the constant to check.
         * @param bool|string|array $value The value that the constant should be, if set,
         *                                 or an array of acceptable values.
         * @return array The test results.
         */
        public function test_constants($constant, $value)
        {
        }
        /**
         * Check if updates are intercepted by a filter.
         *
         * @since 5.2.0
         *
         * @return array The test results.
         */
        public function test_wp_version_check_attached()
        {
        }
        /**
         * Check if automatic updates are disabled by a filter.
         *
         * @since 5.2.0
         *
         * @return array The test results.
         */
        public function test_filters_automatic_updater_disabled()
        {
        }
        /**
         * Check if automatic updates are disabled.
         *
         * @since 5.3.0
         *
         * @return array|false The test results. False if auto-updates are enabled.
         */
        public function test_wp_automatic_updates_disabled()
        {
        }
        /**
         * Check if automatic updates have tried to run, but failed, previously.
         *
         * @since 5.2.0
         *
         * @return array|false The test results. False if the auto-updates failed.
         */
        public function test_if_failed_update()
        {
        }
        /**
         * Check if WordPress is controlled by a VCS (Git, Subversion etc).
         *
         * @since 5.2.0
         *
         * @return array The test results.
         */
        public function test_vcs_abspath()
        {
        }
        /**
         * Check if we can access files without providing credentials.
         *
         * @since 5.2.0
         *
         * @return array The test results.
         */
        public function test_check_wp_filesystem_method()
        {
        }
        /**
         * Check if core files are writable by the web user/group.
         *
         * @since 5.2.0
         *
         * @global WP_Filesystem_Base $wp_filesystem WordPress filesystem subclass.
         *
         * @return array|false The test results. False if they're not writeable.
         */
        public function test_all_files_writable()
        {
        }
        /**
         * Check if the install is using a development branch and can use nightly packages.
         *
         * @since 5.2.0
         *
         * @return array|false The test results. False if it isn't a development version.
         */
        public function test_accepts_dev_updates()
        {
        }
        /**
         * Check if the site supports automatic minor updates.
         *
         * @since 5.2.0
         *
         * @return array The test results.
         */
        public function test_accepts_minor_updates()
        {
        }
    }
    /**
     * List Table API: WP_Media_List_Table class
     *
     * @package WordPress
     * @subpackage Administration
     * @since 3.1.0
     */
    /**
     * Core class used to implement displaying media items in a list table.
     *
     * @since 3.1.0
     * @access private
     *
     * @see WP_List_Table
     */
    class WP_Media_List_Table extends \WP_List_Table
    {
        /**
         * Holds the number of pending comments for each post.
         *
         * @since 4.4.0
         * @var array
         */
        protected $comment_pending_count = array();
        private $detached;
        private $is_trash;
        /**
         * Constructor.
         *
         * @since 3.1.0
         *
         * @see WP_List_Table::__construct() for more information on default arguments.
         *
         * @param array $args An associative array of arguments.
         */
        public function __construct($args = array())
        {
        }
        /**
         * @return bool
         */
        public function ajax_user_can()
        {
        }
        /**
         * @global string   $mode                  List table view mode.
         * @global WP_Query $wp_query              WordPress Query object.
         * @global array    $post_mime_types
         * @global array    $avail_post_mime_types
         */
        public function prepare_items()
        {
        }
        /**
         * @global array $post_mime_types
         * @global array $avail_post_mime_types
         * @return array
         */
        protected function get_views()
        {
        }
        /**
         * @return array
         */
        protected function get_bulk_actions()
        {
        }
        /**
         * @param string $which
         */
        protected function extra_tablenav($which)
        {
        }
        /**
         * @return string
         */
        public function current_action()
        {
        }
        /**
         * @return bool
         */
        public function has_items()
        {
        }
        /**
         */
        public function no_items()
        {
        }
        /**
         * Override parent views so we can use the filter bar display.
         *
         * @global string $mode List table view mode.
         */
        public function views()
        {
        }
        /**
         * @return array
         */
        public function get_columns()
        {
        }
        /**
         * @return array
         */
        protected function get_sortable_columns()
        {
        }
        /**
         * Handles the checkbox column output.
         *
         * @since 4.3.0
         * @since 5.9.0 Renamed `$post` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @param WP_Post $item The current WP_Post object.
         */
        public function column_cb($item)
        {
        }
        /**
         * Handles the title column output.
         *
         * @since 4.3.0
         *
         * @param WP_Post $post The current WP_Post object.
         */
        public function column_title($post)
        {
        }
        /**
         * Handles the author column output.
         *
         * @since 4.3.0
         *
         * @param WP_Post $post The current WP_Post object.
         */
        public function column_author($post)
        {
        }
        /**
         * Handles the description column output.
         *
         * @since 4.3.0
         *
         * @param WP_Post $post The current WP_Post object.
         */
        public function column_desc($post)
        {
        }
        /**
         * Handles the date column output.
         *
         * @since 4.3.0
         *
         * @param WP_Post $post The current WP_Post object.
         */
        public function column_date($post)
        {
        }
        /**
         * Handles the parent column output.
         *
         * @since 4.3.0
         *
         * @param WP_Post $post The current WP_Post object.
         */
        public function column_parent($post)
        {
        }
        /**
         * Handles the comments column output.
         *
         * @since 4.3.0
         *
         * @param WP_Post $post The current WP_Post object.
         */
        public function column_comments($post)
        {
        }
        /**
         * Handles output for the default column.
         *
         * @since 4.3.0
         * @since 5.9.0 Renamed `$post` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @param WP_Post $item        The current WP_Post object.
         * @param string  $column_name Current column name.
         */
        public function column_default($item, $column_name)
        {
        }
        /**
         * @global WP_Post $post Global post object.
         */
        public function display_rows()
        {
        }
        /**
         * Gets the name of the default primary column.
         *
         * @since 4.3.0
         *
         * @return string Name of the default primary column, in this case, 'title'.
         */
        protected function get_default_primary_column_name()
        {
        }
        /**
         * @param WP_Post $post
         * @param string  $att_title
         * @return array
         */
        private function _get_row_actions($post, $att_title)
        {
        }
        /**
         * Generates and displays row action links.
         *
         * @since 4.3.0
         * @since 5.9.0 Renamed `$post` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @param WP_Post $item        Attachment being acted upon.
         * @param string  $column_name Current column name.
         * @param string  $primary     Primary column name.
         * @return string Row actions output for media attachments, or an empty string
         *                if the current column is not the primary column.
         */
        protected function handle_row_actions($item, $column_name, $primary)
        {
        }
    }
    /**
     * Base WordPress Filesystem
     *
     * @package WordPress
     * @subpackage Filesystem
     */
    /**
     * Base WordPress Filesystem class which Filesystem implementations extend.
     *
     * @since 2.5.0
     */
    class WP_Filesystem_Base
    {
        /**
         * Whether to display debug data for the connection.
         *
         * @since 2.5.0
         * @var bool
         */
        public $verbose = \false;
        /**
         * Cached list of local filepaths to mapped remote filepaths.
         *
         * @since 2.7.0
         * @var array
         */
        public $cache = array();
        /**
         * The Access method of the current connection, Set automatically.
         *
         * @since 2.5.0
         * @var string
         */
        public $method = '';
        /**
         * @var WP_Error
         */
        public $errors = \null;
        /**
         */
        public $options = array();
        /**
         * Returns the path on the remote filesystem of ABSPATH.
         *
         * @since 2.7.0
         *
         * @return string The location of the remote path.
         */
        public function abspath()
        {
        }
        /**
         * Returns the path on the remote filesystem of WP_CONTENT_DIR.
         *
         * @since 2.7.0
         *
         * @return string The location of the remote path.
         */
        public function wp_content_dir()
        {
        }
        /**
         * Returns the path on the remote filesystem of WP_PLUGIN_DIR.
         *
         * @since 2.7.0
         *
         * @return string The location of the remote path.
         */
        public function wp_plugins_dir()
        {
        }
        /**
         * Returns the path on the remote filesystem of the Themes Directory.
         *
         * @since 2.7.0
         *
         * @param string|false $theme Optional. The theme stylesheet or template for the directory.
         *                            Default false.
         * @return string The location of the remote path.
         */
        public function wp_themes_dir($theme = \false)
        {
        }
        /**
         * Returns the path on the remote filesystem of WP_LANG_DIR.
         *
         * @since 3.2.0
         *
         * @return string The location of the remote path.
         */
        public function wp_lang_dir()
        {
        }
        /**
         * Locates a folder on the remote filesystem.
         *
         * @since 2.5.0
         * @deprecated 2.7.0 use WP_Filesystem_Base::abspath() or WP_Filesystem_Base::wp_*_dir() instead.
         * @see WP_Filesystem_Base::abspath()
         * @see WP_Filesystem_Base::wp_content_dir()
         * @see WP_Filesystem_Base::wp_plugins_dir()
         * @see WP_Filesystem_Base::wp_themes_dir()
         * @see WP_Filesystem_Base::wp_lang_dir()
         *
         * @param string $base    Optional. The folder to start searching from. Default '.'.
         * @param bool   $verbose Optional. True to display debug information. Default false.
         * @return string The location of the remote path.
         */
        public function find_base_dir($base = '.', $verbose = \false)
        {
        }
        /**
         * Locates a folder on the remote filesystem.
         *
         * @since 2.5.0
         * @deprecated 2.7.0 use WP_Filesystem_Base::abspath() or WP_Filesystem_Base::wp_*_dir() methods instead.
         * @see WP_Filesystem_Base::abspath()
         * @see WP_Filesystem_Base::wp_content_dir()
         * @see WP_Filesystem_Base::wp_plugins_dir()
         * @see WP_Filesystem_Base::wp_themes_dir()
         * @see WP_Filesystem_Base::wp_lang_dir()
         *
         * @param string $base    Optional. The folder to start searching from. Default '.'.
         * @param bool   $verbose Optional. True to display debug information. Default false.
         * @return string The location of the remote path.
         */
        public function get_base_dir($base = '.', $verbose = \false)
        {
        }
        /**
         * Locates a folder on the remote filesystem.
         *
         * Assumes that on Windows systems, Stripping off the Drive
         * letter is OK Sanitizes \\ to / in Windows filepaths.
         *
         * @since 2.7.0
         *
         * @param string $folder the folder to locate.
         * @return string|false The location of the remote path, false on failure.
         */
        public function find_folder($folder)
        {
        }
        /**
         * Locates a folder on the remote filesystem.
         *
         * Expects Windows sanitized path.
         *
         * @since 2.7.0
         *
         * @param string $folder The folder to locate.
         * @param string $base   The folder to start searching from.
         * @param bool   $loop   If the function has recursed. Internal use only.
         * @return string|false The location of the remote path, false to cease looping.
         */
        public function search_for_folder($folder, $base = '.', $loop = \false)
        {
        }
        /**
         * Returns the *nix-style file permissions for a file.
         *
         * From the PHP documentation page for fileperms().
         *
         * @link https://www.php.net/manual/en/function.fileperms.php
         *
         * @since 2.5.0
         *
         * @param string $file String filename.
         * @return string The *nix-style representation of permissions.
         */
        public function gethchmod($file)
        {
        }
        /**
         * Gets the permissions of the specified file or filepath in their octal format.
         *
         * @since 2.5.0
         *
         * @param string $file Path to the file.
         * @return string Mode of the file (the last 3 digits).
         */
        public function getchmod($file)
        {
        }
        /**
         * Converts *nix-style file permissions to a octal number.
         *
         * Converts '-rw-r--r--' to 0644
         * From "info at rvgate dot nl"'s comment on the PHP documentation for chmod()
         *
         * @link https://www.php.net/manual/en/function.chmod.php#49614
         *
         * @since 2.5.0
         *
         * @param string $mode string The *nix-style file permissions.
         * @return string Octal representation of permissions.
         */
        public function getnumchmodfromh($mode)
        {
        }
        /**
         * Determines if the string provided contains binary characters.
         *
         * @since 2.7.0
         *
         * @param string $text String to test against.
         * @return bool True if string is binary, false otherwise.
         */
        public function is_binary($text)
        {
        }
        /**
         * Changes the owner of a file or directory.
         *
         * Default behavior is to do nothing, override this in your subclass, if desired.
         *
         * @since 2.5.0
         *
         * @param string     $file      Path to the file or directory.
         * @param string|int $owner     A user name or number.
         * @param bool       $recursive Optional. If set to true, changes file owner recursively.
         *                              Default false.
         * @return bool True on success, false on failure.
         */
        public function chown($file, $owner, $recursive = \false)
        {
        }
        /**
         * Connects filesystem.
         *
         * @since 2.5.0
         * @abstract
         *
         * @return bool True on success, false on failure (always true for WP_Filesystem_Direct).
         */
        public function connect()
        {
        }
        /**
         * Reads entire file into a string.
         *
         * @since 2.5.0
         * @abstract
         *
         * @param string $file Name of the file to read.
         * @return string|false Read data on success, false on failure.
         */
        public function get_contents($file)
        {
        }
        /**
         * Reads entire file into an array.
         *
         * @since 2.5.0
         * @abstract
         *
         * @param string $file Path to the file.
         * @return array|false File contents in an array on success, false on failure.
         */
        public function get_contents_array($file)
        {
        }
        /**
         * Writes a string to a file.
         *
         * @since 2.5.0
         * @abstract
         *
         * @param string    $file     Remote path to the file where to write the data.
         * @param string    $contents The data to write.
         * @param int|false $mode     Optional. The file permissions as octal number, usually 0644.
         *                            Default false.
         * @return bool True on success, false on failure.
         */
        public function put_contents($file, $contents, $mode = \false)
        {
        }
        /**
         * Gets the current working directory.
         *
         * @since 2.5.0
         * @abstract
         *
         * @return string|false The current working directory on success, false on failure.
         */
        public function cwd()
        {
        }
        /**
         * Changes current directory.
         *
         * @since 2.5.0
         * @abstract
         *
         * @param string $dir The new current directory.
         * @return bool True on success, false on failure.
         */
        public function chdir($dir)
        {
        }
        /**
         * Changes the file group.
         *
         * @since 2.5.0
         * @abstract
         *
         * @param string     $file      Path to the file.
         * @param string|int $group     A group name or number.
         * @param bool       $recursive Optional. If set to true, changes file group recursively.
         *                              Default false.
         * @return bool True on success, false on failure.
         */
        public function chgrp($file, $group, $recursive = \false)
        {
        }
        /**
         * Changes filesystem permissions.
         *
         * @since 2.5.0
         * @abstract
         *
         * @param string    $file      Path to the file.
         * @param int|false $mode      Optional. The permissions as octal number, usually 0644 for files,
         *                             0755 for directories. Default false.
         * @param bool      $recursive Optional. If set to true, changes file permissions recursively.
         *                             Default false.
         * @return bool True on success, false on failure.
         */
        public function chmod($file, $mode = \false, $recursive = \false)
        {
        }
        /**
         * Gets the file owner.
         *
         * @since 2.5.0
         * @abstract
         *
         * @param string $file Path to the file.
         * @return string|false Username of the owner on success, false on failure.
         */
        public function owner($file)
        {
        }
        /**
         * Gets the file's group.
         *
         * @since 2.5.0
         * @abstract
         *
         * @param string $file Path to the file.
         * @return string|false The group on success, false on failure.
         */
        public function group($file)
        {
        }
        /**
         * Copies a file.
         *
         * @since 2.5.0
         * @abstract
         *
         * @param string    $source      Path to the source file.
         * @param string    $destination Path to the destination file.
         * @param bool      $overwrite   Optional. Whether to overwrite the destination file if it exists.
         *                               Default false.
         * @param int|false $mode        Optional. The permissions as octal number, usually 0644 for files,
         *                               0755 for dirs. Default false.
         * @return bool True on success, false on failure.
         */
        public function copy($source, $destination, $overwrite = \false, $mode = \false)
        {
        }
        /**
         * Moves a file.
         *
         * @since 2.5.0
         * @abstract
         *
         * @param string $source      Path to the source file.
         * @param string $destination Path to the destination file.
         * @param bool   $overwrite   Optional. Whether to overwrite the destination file if it exists.
         *                            Default false.
         * @return bool True on success, false on failure.
         */
        public function move($source, $destination, $overwrite = \false)
        {
        }
        /**
         * Deletes a file or directory.
         *
         * @since 2.5.0
         * @abstract
         *
         * @param string       $file      Path to the file or directory.
         * @param bool         $recursive Optional. If set to true, deletes files and folders recursively.
         *                                Default false.
         * @param string|false $type      Type of resource. 'f' for file, 'd' for directory.
         *                                Default false.
         * @return bool True on success, false on failure.
         */
        public function delete($file, $recursive = \false, $type = \false)
        {
        }
        /**
         * Checks if a file or directory exists.
         *
         * @since 2.5.0
         * @abstract
         *
         * @param string $file Path to file or directory.
         * @return bool Whether $file exists or not.
         */
        public function exists($file)
        {
        }
        /**
         * Checks if resource is a file.
         *
         * @since 2.5.0
         * @abstract
         *
         * @param string $file File path.
         * @return bool Whether $file is a file.
         */
        public function is_file($file)
        {
        }
        /**
         * Checks if resource is a directory.
         *
         * @since 2.5.0
         * @abstract
         *
         * @param string $path Directory path.
         * @return bool Whether $path is a directory.
         */
        public function is_dir($path)
        {
        }
        /**
         * Checks if a file is readable.
         *
         * @since 2.5.0
         * @abstract
         *
         * @param string $file Path to file.
         * @return bool Whether $file is readable.
         */
        public function is_readable($file)
        {
        }
        /**
         * Checks if a file or directory is writable.
         *
         * @since 2.5.0
         * @abstract
         *
         * @param string $file Path to file or directory.
         * @return bool Whether $file is writable.
         */
        public function is_writable($file)
        {
        }
        /**
         * Gets the file's last access time.
         *
         * @since 2.5.0
         * @abstract
         *
         * @param string $file Path to file.
         * @return int|false Unix timestamp representing last access time, false on failure.
         */
        public function atime($file)
        {
        }
        /**
         * Gets the file modification time.
         *
         * @since 2.5.0
         * @abstract
         *
         * @param string $file Path to file.
         * @return int|false Unix timestamp representing modification time, false on failure.
         */
        public function mtime($file)
        {
        }
        /**
         * Gets the file size (in bytes).
         *
         * @since 2.5.0
         * @abstract
         *
         * @param string $file Path to file.
         * @return int|false Size of the file in bytes on success, false on failure.
         */
        public function size($file)
        {
        }
        /**
         * Sets the access and modification times of a file.
         *
         * Note: If $file doesn't exist, it will be created.
         *
         * @since 2.5.0
         * @abstract
         *
         * @param string $file  Path to file.
         * @param int    $time  Optional. Modified time to set for file.
         *                      Default 0.
         * @param int    $atime Optional. Access time to set for file.
         *                      Default 0.
         * @return bool True on success, false on failure.
         */
        public function touch($file, $time = 0, $atime = 0)
        {
        }
        /**
         * Creates a directory.
         *
         * @since 2.5.0
         * @abstract
         *
         * @param string           $path  Path for new directory.
         * @param int|false        $chmod Optional. The permissions as octal number (or false to skip chmod).
         *                                Default false.
         * @param string|int|false $chown Optional. A user name or number (or false to skip chown).
         *                                Default false.
         * @param string|int|false $chgrp Optional. A group name or number (or false to skip chgrp).
         *                                Default false.
         * @return bool True on success, false on failure.
         */
        public function mkdir($path, $chmod = \false, $chown = \false, $chgrp = \false)
        {
        }
        /**
         * Deletes a directory.
         *
         * @since 2.5.0
         * @abstract
         *
         * @param string $path      Path to directory.
         * @param bool   $recursive Optional. Whether to recursively remove files/directories.
         *                          Default false.
         * @return bool True on success, false on failure.
         */
        public function rmdir($path, $recursive = \false)
        {
        }
        /**
         * Gets details for files in a directory or a specific file.
         *
         * @since 2.5.0
         * @abstract
         *
         * @param string $path           Path to directory or file.
         * @param bool   $include_hidden Optional. Whether to include details of hidden ("." prefixed) files.
         *                               Default true.
         * @param bool   $recursive      Optional. Whether to recursively include file details in nested directories.
         *                               Default false.
         * @return array|false {
         *     Array of files. False if unable to list directory contents.
         *
         *     @type string $name        Name of the file or directory.
         *     @type string $perms       *nix representation of permissions.
         *     @type string $permsn      Octal representation of permissions.
         *     @type string $owner       Owner name or ID.
         *     @type int    $size        Size of file in bytes.
         *     @type int    $lastmodunix Last modified unix timestamp.
         *     @type mixed  $lastmod     Last modified month (3 letter) and day (without leading 0).
         *     @type int    $time        Last modified time.
         *     @type string $type        Type of resource. 'f' for file, 'd' for directory.
         *     @type mixed  $files       If a directory and `$recursive` is true, contains another array of files.
         * }
         */
        public function dirlist($path, $include_hidden = \true, $recursive = \false)
        {
        }
    }
    /**
     * WordPress Filesystem Class for implementing SSH2
     *
     * To use this class you must follow these steps for PHP 5.2.6+
     *
     * @contrib http://kevin.vanzonneveld.net/techblog/article/make_ssh_connections_with_php/ - Installation Notes
     *
     * Compile libssh2 (Note: Only 0.14 is officaly working with PHP 5.2.6+ right now, But many users have found the latest versions work)
     *
     * cd /usr/src
     * wget https://www.libssh2.org/download/libssh2-0.14.tar.gz
     * tar -zxvf libssh2-0.14.tar.gz
     * cd libssh2-0.14/
     * ./configure
     * make all install
     *
     * Note: Do not leave the directory yet!
     *
     * Enter: pecl install -f ssh2
     *
     * Copy the ssh.so file it creates to your PHP Module Directory.
     * Open up your PHP.INI file and look for where extensions are placed.
     * Add in your PHP.ini file: extension=ssh2.so
     *
     * Restart Apache!
     * Check phpinfo() streams to confirm that: ssh2.shell, ssh2.exec, ssh2.tunnel, ssh2.scp, ssh2.sftp  exist.
     *
     * Note: As of WordPress 2.8, this utilizes the PHP5+ function `stream_get_contents()`.
     *
     * @since 2.7.0
     *
     * @package WordPress
     * @subpackage Filesystem
     */
    class WP_Filesystem_SSH2 extends \WP_Filesystem_Base
    {
        /**
         * @since 2.7.0
         * @var resource
         */
        public $link = \false;
        /**
         * @since 2.7.0
         * @var resource
         */
        public $sftp_link;
        /**
         * @since 2.7.0
         * @var bool
         */
        public $keys = \false;
        /**
         * Constructor.
         *
         * @since 2.7.0
         *
         * @param array $opt
         */
        public function __construct($opt = '')
        {
        }
        /**
         * Connects filesystem.
         *
         * @since 2.7.0
         *
         * @return bool True on success, false on failure.
         */
        public function connect()
        {
        }
        /**
         * Gets the ssh2.sftp PHP stream wrapper path to open for the given file.
         *
         * This method also works around a PHP bug where the root directory (/) cannot
         * be opened by PHP functions, causing a false failure. In order to work around
         * this, the path is converted to /./ which is semantically the same as /
         * See https://bugs.php.net/bug.php?id=64169 for more details.
         *
         * @since 4.4.0
         *
         * @param string $path The File/Directory path on the remote server to return
         * @return string The ssh2.sftp:// wrapped path to use.
         */
        public function sftp_path($path)
        {
        }
        /**
         * @since 2.7.0
         *
         * @param string $command
         * @param bool   $returnbool
         * @return bool|string True on success, false on failure. String if the command was executed, `$returnbool`
         *                     is false (default), and data from the resulting stream was retrieved.
         */
        public function run_command($command, $returnbool = \false)
        {
        }
        /**
         * Reads entire file into a string.
         *
         * @since 2.7.0
         *
         * @param string $file Name of the file to read.
         * @return string|false Read data on success, false if no temporary file could be opened,
         *                      or if the file couldn't be retrieved.
         */
        public function get_contents($file)
        {
        }
        /**
         * Reads entire file into an array.
         *
         * @since 2.7.0
         *
         * @param string $file Path to the file.
         * @return array|false File contents in an array on success, false on failure.
         */
        public function get_contents_array($file)
        {
        }
        /**
         * Writes a string to a file.
         *
         * @since 2.7.0
         *
         * @param string    $file     Remote path to the file where to write the data.
         * @param string    $contents The data to write.
         * @param int|false $mode     Optional. The file permissions as octal number, usually 0644.
         *                            Default false.
         * @return bool True on success, false on failure.
         */
        public function put_contents($file, $contents, $mode = \false)
        {
        }
        /**
         * Gets the current working directory.
         *
         * @since 2.7.0
         *
         * @return string|false The current working directory on success, false on failure.
         */
        public function cwd()
        {
        }
        /**
         * Changes current directory.
         *
         * @since 2.7.0
         *
         * @param string $dir The new current directory.
         * @return bool True on success, false on failure.
         */
        public function chdir($dir)
        {
        }
        /**
         * Changes the file group.
         *
         * @since 2.7.0
         *
         * @param string     $file      Path to the file.
         * @param string|int $group     A group name or number.
         * @param bool       $recursive Optional. If set to true, changes file group recursively.
         *                              Default false.
         * @return bool True on success, false on failure.
         */
        public function chgrp($file, $group, $recursive = \false)
        {
        }
        /**
         * Changes filesystem permissions.
         *
         * @since 2.7.0
         *
         * @param string    $file      Path to the file.
         * @param int|false $mode      Optional. The permissions as octal number, usually 0644 for files,
         *                             0755 for directories. Default false.
         * @param bool      $recursive Optional. If set to true, changes file permissions recursively.
         *                             Default false.
         * @return bool True on success, false on failure.
         */
        public function chmod($file, $mode = \false, $recursive = \false)
        {
        }
        /**
         * Changes the owner of a file or directory.
         *
         * @since 2.7.0
         *
         * @param string     $file      Path to the file or directory.
         * @param string|int $owner     A user name or number.
         * @param bool       $recursive Optional. If set to true, changes file owner recursively.
         *                              Default false.
         * @return bool True on success, false on failure.
         */
        public function chown($file, $owner, $recursive = \false)
        {
        }
        /**
         * Gets the file owner.
         *
         * @since 2.7.0
         *
         * @param string $file Path to the file.
         * @return string|false Username of the owner on success, false on failure.
         */
        public function owner($file)
        {
        }
        /**
         * Gets the permissions of the specified file or filepath in their octal format.
         *
         * @since 2.7.0
         *
         * @param string $file Path to the file.
         * @return string Mode of the file (the last 3 digits).
         */
        public function getchmod($file)
        {
        }
        /**
         * Gets the file's group.
         *
         * @since 2.7.0
         *
         * @param string $file Path to the file.
         * @return string|false The group on success, false on failure.
         */
        public function group($file)
        {
        }
        /**
         * Copies a file.
         *
         * @since 2.7.0
         *
         * @param string    $source      Path to the source file.
         * @param string    $destination Path to the destination file.
         * @param bool      $overwrite   Optional. Whether to overwrite the destination file if it exists.
         *                               Default false.
         * @param int|false $mode        Optional. The permissions as octal number, usually 0644 for files,
         *                               0755 for dirs. Default false.
         * @return bool True on success, false on failure.
         */
        public function copy($source, $destination, $overwrite = \false, $mode = \false)
        {
        }
        /**
         * Moves a file.
         *
         * @since 2.7.0
         *
         * @param string $source      Path to the source file.
         * @param string $destination Path to the destination file.
         * @param bool   $overwrite   Optional. Whether to overwrite the destination file if it exists.
         *                            Default false.
         * @return bool True on success, false on failure.
         */
        public function move($source, $destination, $overwrite = \false)
        {
        }
        /**
         * Deletes a file or directory.
         *
         * @since 2.7.0
         *
         * @param string       $file      Path to the file or directory.
         * @param bool         $recursive Optional. If set to true, deletes files and folders recursively.
         *                                Default false.
         * @param string|false $type      Type of resource. 'f' for file, 'd' for directory.
         *                                Default false.
         * @return bool True on success, false on failure.
         */
        public function delete($file, $recursive = \false, $type = \false)
        {
        }
        /**
         * Checks if a file or directory exists.
         *
         * @since 2.7.0
         *
         * @param string $file Path to file or directory.
         * @return bool Whether $file exists or not.
         */
        public function exists($file)
        {
        }
        /**
         * Checks if resource is a file.
         *
         * @since 2.7.0
         *
         * @param string $file File path.
         * @return bool Whether $file is a file.
         */
        public function is_file($file)
        {
        }
        /**
         * Checks if resource is a directory.
         *
         * @since 2.7.0
         *
         * @param string $path Directory path.
         * @return bool Whether $path is a directory.
         */
        public function is_dir($path)
        {
        }
        /**
         * Checks if a file is readable.
         *
         * @since 2.7.0
         *
         * @param string $file Path to file.
         * @return bool Whether $file is readable.
         */
        public function is_readable($file)
        {
        }
        /**
         * Checks if a file or directory is writable.
         *
         * @since 2.7.0
         *
         * @param string $file Path to file or directory.
         * @return bool Whether $file is writable.
         */
        public function is_writable($file)
        {
        }
        /**
         * Gets the file's last access time.
         *
         * @since 2.7.0
         *
         * @param string $file Path to file.
         * @return int|false Unix timestamp representing last access time, false on failure.
         */
        public function atime($file)
        {
        }
        /**
         * Gets the file modification time.
         *
         * @since 2.7.0
         *
         * @param string $file Path to file.
         * @return int|false Unix timestamp representing modification time, false on failure.
         */
        public function mtime($file)
        {
        }
        /**
         * Gets the file size (in bytes).
         *
         * @since 2.7.0
         *
         * @param string $file Path to file.
         * @return int|false Size of the file in bytes on success, false on failure.
         */
        public function size($file)
        {
        }
        /**
         * Sets the access and modification times of a file.
         *
         * Note: Not implemented.
         *
         * @since 2.7.0
         *
         * @param string $file  Path to file.
         * @param int    $time  Optional. Modified time to set for file.
         *                      Default 0.
         * @param int    $atime Optional. Access time to set for file.
         *                      Default 0.
         */
        public function touch($file, $time = 0, $atime = 0)
        {
        }
        /**
         * Creates a directory.
         *
         * @since 2.7.0
         *
         * @param string           $path  Path for new directory.
         * @param int|false        $chmod Optional. The permissions as octal number (or false to skip chmod).
         *                                Default false.
         * @param string|int|false $chown Optional. A user name or number (or false to skip chown).
         *                                Default false.
         * @param string|int|false $chgrp Optional. A group name or number (or false to skip chgrp).
         *                                Default false.
         * @return bool True on success, false on failure.
         */
        public function mkdir($path, $chmod = \false, $chown = \false, $chgrp = \false)
        {
        }
        /**
         * Deletes a directory.
         *
         * @since 2.7.0
         *
         * @param string $path      Path to directory.
         * @param bool   $recursive Optional. Whether to recursively remove files/directories.
         *                          Default false.
         * @return bool True on success, false on failure.
         */
        public function rmdir($path, $recursive = \false)
        {
        }
        /**
         * Gets details for files in a directory or a specific file.
         *
         * @since 2.7.0
         *
         * @param string $path           Path to directory or file.
         * @param bool   $include_hidden Optional. Whether to include details of hidden ("." prefixed) files.
         *                               Default true.
         * @param bool   $recursive      Optional. Whether to recursively include file details in nested directories.
         *                               Default false.
         * @return array|false {
         *     Array of files. False if unable to list directory contents.
         *
         *     @type string $name        Name of the file or directory.
         *     @type string $perms       *nix representation of permissions.
         *     @type string $permsn      Octal representation of permissions.
         *     @type string $owner       Owner name or ID.
         *     @type int    $size        Size of file in bytes.
         *     @type int    $lastmodunix Last modified unix timestamp.
         *     @type mixed  $lastmod     Last modified month (3 letter) and day (without leading 0).
         *     @type int    $time        Last modified time.
         *     @type string $type        Type of resource. 'f' for file, 'd' for directory.
         *     @type mixed  $files       If a directory and `$recursive` is true, contains another array of files.
         * }
         */
        public function dirlist($path, $include_hidden = \true, $recursive = \false)
        {
        }
    }
    /**
     * The custom background script.
     *
     * @package WordPress
     * @subpackage Administration
     */
    /**
     * The custom background class.
     *
     * @since 3.0.0
     */
    class Custom_Background
    {
        /**
         * Callback for administration header.
         *
         * @var callable
         * @since 3.0.0
         */
        public $admin_header_callback;
        /**
         * Callback for header div.
         *
         * @var callable
         * @since 3.0.0
         */
        public $admin_image_div_callback;
        /**
         * Used to trigger a success message when settings updated and set to true.
         *
         * @since 3.0.0
         * @var bool
         */
        private $updated;
        /**
         * Constructor - Register administration header callback.
         *
         * @since 3.0.0
         * @param callable $admin_header_callback
         * @param callable $admin_image_div_callback Optional custom image div output callback.
         */
        public function __construct($admin_header_callback = '', $admin_image_div_callback = '')
        {
        }
        /**
         * Set up the hooks for the Custom Background admin page.
         *
         * @since 3.0.0
         */
        public function init()
        {
        }
        /**
         * Set up the enqueue for the CSS & JavaScript files.
         *
         * @since 3.0.0
         */
        public function admin_load()
        {
        }
        /**
         * Execute custom background modification.
         *
         * @since 3.0.0
         */
        public function take_action()
        {
        }
        /**
         * Display the custom background page.
         *
         * @since 3.0.0
         */
        public function admin_page()
        {
        }
        /**
         * Handle an Image upload for the background image.
         *
         * @since 3.0.0
         */
        public function handle_upload()
        {
        }
        /**
         * Ajax handler for adding custom background context to an attachment.
         *
         * Triggers when the user adds a new background image from the
         * Media Manager.
         *
         * @since 4.1.0
         */
        public function ajax_background_add()
        {
        }
        /**
         * @since 3.4.0
         * @deprecated 3.5.0
         *
         * @param array $form_fields
         * @return array $form_fields
         */
        public function attachment_fields_to_edit($form_fields)
        {
        }
        /**
         * @since 3.4.0
         * @deprecated 3.5.0
         *
         * @param array $tabs
         * @return array $tabs
         */
        public function filter_upload_tabs($tabs)
        {
        }
        /**
         * @since 3.4.0
         * @deprecated 3.5.0
         */
        public function wp_set_background_image()
        {
        }
    }
    /**
     * Core class used for upgrading/installing a local set of files via
     * the Filesystem Abstraction classes from a Zip file.
     *
     * @since 2.8.0
     */
    class WP_Upgrader
    {
        /**
         * The error/notification strings used to update the user on the progress.
         *
         * @since 2.8.0
         * @var array $strings
         */
        public $strings = array();
        /**
         * The upgrader skin being used.
         *
         * @since 2.8.0
         * @var Automatic_Upgrader_Skin|WP_Upgrader_Skin $skin
         */
        public $skin = \null;
        /**
         * The result of the installation.
         *
         * This is set by WP_Upgrader::install_package(), only when the package is installed
         * successfully. It will then be an array, unless a WP_Error is returned by the
         * {@see 'upgrader_post_install'} filter. In that case, the WP_Error will be assigned to
         * it.
         *
         * @since 2.8.0
         *
         * @var array|WP_Error $result {
         *     @type string $source             The full path to the source the files were installed from.
         *     @type string $source_files       List of all the files in the source directory.
         *     @type string $destination        The full path to the installation destination folder.
         *     @type string $destination_name   The name of the destination folder, or empty if `$destination`
         *                                      and `$local_destination` are the same.
         *     @type string $local_destination  The full local path to the destination folder. This is usually
         *                                      the same as `$destination`.
         *     @type string $remote_destination The full remote path to the destination folder
         *                                      (i.e., from `$wp_filesystem`).
         *     @type bool   $clear_destination  Whether the destination folder was cleared.
         * }
         */
        public $result = array();
        /**
         * The total number of updates being performed.
         *
         * Set by the bulk update methods.
         *
         * @since 3.0.0
         * @var int $update_count
         */
        public $update_count = 0;
        /**
         * The current update if multiple updates are being performed.
         *
         * Used by the bulk update methods, and incremented for each update.
         *
         * @since 3.0.0
         * @var int
         */
        public $update_current = 0;
        /**
         * Construct the upgrader with a skin.
         *
         * @since 2.8.0
         *
         * @param WP_Upgrader_Skin $skin The upgrader skin to use. Default is a WP_Upgrader_Skin
         *                               instance.
         */
        public function __construct($skin = \null)
        {
        }
        /**
         * Initialize the upgrader.
         *
         * This will set the relationship between the skin being used and this upgrader,
         * and also add the generic strings to `WP_Upgrader::$strings`.
         *
         * @since 2.8.0
         */
        public function init()
        {
        }
        /**
         * Add the generic strings to WP_Upgrader::$strings.
         *
         * @since 2.8.0
         */
        public function generic_strings()
        {
        }
        /**
         * Connect to the filesystem.
         *
         * @since 2.8.0
         *
         * @global WP_Filesystem_Base $wp_filesystem WordPress filesystem subclass.
         *
         * @param string[] $directories                  Optional. Array of directories. If any of these do
         *                                               not exist, a WP_Error object will be returned.
         *                                               Default empty array.
         * @param bool     $allow_relaxed_file_ownership Whether to allow relaxed file ownership.
         *                                               Default false.
         * @return bool|WP_Error True if able to connect, false or a WP_Error otherwise.
         */
        public function fs_connect($directories = array(), $allow_relaxed_file_ownership = \false)
        {
        }
        /**
         * Download a package.
         *
         * @since 2.8.0
         * @since 5.2.0 Added the `$check_signatures` parameter.
         * @since 5.5.0 Added the `$hook_extra` parameter.
         *
         * @param string $package          The URI of the package. If this is the full path to an
         *                                 existing local file, it will be returned untouched.
         * @param bool   $check_signatures Whether to validate file signatures. Default false.
         * @param array  $hook_extra       Extra arguments to pass to the filter hooks. Default empty array.
         * @return string|WP_Error The full path to the downloaded package file, or a WP_Error object.
         */
        public function download_package($package, $check_signatures = \false, $hook_extra = array())
        {
        }
        /**
         * Unpack a compressed package file.
         *
         * @since 2.8.0
         *
         * @global WP_Filesystem_Base $wp_filesystem WordPress filesystem subclass.
         *
         * @param string $package        Full path to the package file.
         * @param bool   $delete_package Optional. Whether to delete the package file after attempting
         *                               to unpack it. Default true.
         * @return string|WP_Error The path to the unpacked contents, or a WP_Error on failure.
         */
        public function unpack_package($package, $delete_package = \true)
        {
        }
        /**
         * Flatten the results of WP_Filesystem_Base::dirlist() for iterating over.
         *
         * @since 4.9.0
         * @access protected
         *
         * @param array  $nested_files Array of files as returned by WP_Filesystem_Base::dirlist().
         * @param string $path         Relative path to prepend to child nodes. Optional.
         * @return array A flattened array of the $nested_files specified.
         */
        protected function flatten_dirlist($nested_files, $path = '')
        {
        }
        /**
         * Clears the directory where this item is going to be installed into.
         *
         * @since 4.3.0
         *
         * @global WP_Filesystem_Base $wp_filesystem WordPress filesystem subclass.
         *
         * @param string $remote_destination The location on the remote filesystem to be cleared.
         * @return true|WP_Error True upon success, WP_Error on failure.
         */
        public function clear_destination($remote_destination)
        {
        }
        /**
         * Install a package.
         *
         * Copies the contents of a package from a source directory, and installs them in
         * a destination directory. Optionally removes the source. It can also optionally
         * clear out the destination folder if it already exists.
         *
         * @since 2.8.0
         *
         * @global WP_Filesystem_Base $wp_filesystem        WordPress filesystem subclass.
         * @global array              $wp_theme_directories
         *
         * @param array|string $args {
         *     Optional. Array or string of arguments for installing a package. Default empty array.
         *
         *     @type string $source                      Required path to the package source. Default empty.
         *     @type string $destination                 Required path to a folder to install the package in.
         *                                               Default empty.
         *     @type bool   $clear_destination           Whether to delete any files already in the destination
         *                                               folder. Default false.
         *     @type bool   $clear_working               Whether to delete the files from the working directory
         *                                               after copying them to the destination. Default false.
         *     @type bool   $abort_if_destination_exists Whether to abort the installation if
         *                                               the destination folder already exists. Default true.
         *     @type array  $hook_extra                  Extra arguments to pass to the filter hooks called by
         *                                               WP_Upgrader::install_package(). Default empty array.
         * }
         *
         * @return array|WP_Error The result (also stored in `WP_Upgrader::$result`), or a WP_Error on failure.
         */
        public function install_package($args = array())
        {
        }
        /**
         * Run an upgrade/installation.
         *
         * Attempts to download the package (if it is not a local file), unpack it, and
         * install it in the destination folder.
         *
         * @since 2.8.0
         *
         * @param array $options {
         *     Array or string of arguments for upgrading/installing a package.
         *
         *     @type string $package                     The full path or URI of the package to install.
         *                                               Default empty.
         *     @type string $destination                 The full path to the destination folder.
         *                                               Default empty.
         *     @type bool   $clear_destination           Whether to delete any files already in the
         *                                               destination folder. Default false.
         *     @type bool   $clear_working               Whether to delete the files from the working
         *                                               directory after copying them to the destination.
         *                                               Default true.
         *     @type bool   $abort_if_destination_exists Whether to abort the installation if the destination
         *                                               folder already exists. When true, `$clear_destination`
         *                                               should be false. Default true.
         *     @type bool   $is_multi                    Whether this run is one of multiple upgrade/installation
         *                                               actions being performed in bulk. When true, the skin
         *                                               WP_Upgrader::header() and WP_Upgrader::footer()
         *                                               aren't called. Default false.
         *     @type array  $hook_extra                  Extra arguments to pass to the filter hooks called by
         *                                               WP_Upgrader::run().
         * }
         * @return array|false|WP_Error The result from self::install_package() on success, otherwise a WP_Error,
         *                              or false if unable to connect to the filesystem.
         */
        public function run($options)
        {
        }
        /**
         * Toggle maintenance mode for the site.
         *
         * Creates/deletes the maintenance file to enable/disable maintenance mode.
         *
         * @since 2.8.0
         *
         * @global WP_Filesystem_Base $wp_filesystem WordPress filesystem subclass.
         *
         * @param bool $enable True to enable maintenance mode, false to disable.
         */
        public function maintenance_mode($enable = \false)
        {
        }
        /**
         * Creates a lock using WordPress options.
         *
         * @since 4.5.0
         *
         * @param string $lock_name       The name of this unique lock.
         * @param int    $release_timeout Optional. The duration in seconds to respect an existing lock.
         *                                Default: 1 hour.
         * @return bool False if a lock couldn't be created or if the lock is still valid. True otherwise.
         */
        public static function create_lock($lock_name, $release_timeout = \null)
        {
        }
        /**
         * Releases an upgrader lock.
         *
         * @since 4.5.0
         *
         * @see WP_Upgrader::create_lock()
         *
         * @param string $lock_name The name of this unique lock.
         * @return bool True if the lock was successfully released. False on failure.
         */
        public static function release_lock($lock_name)
        {
        }
    }
    /**
     * Upgrade API: Theme_Upgrader class
     *
     * @package WordPress
     * @subpackage Upgrader
     * @since 4.6.0
     */
    /**
     * Core class used for upgrading/installing themes.
     *
     * It is designed to upgrade/install themes from a local zip, remote zip URL,
     * or uploaded zip file.
     *
     * @since 2.8.0
     * @since 4.6.0 Moved to its own file from wp-admin/includes/class-wp-upgrader.php.
     *
     * @see WP_Upgrader
     */
    class Theme_Upgrader extends \WP_Upgrader
    {
        /**
         * Result of the theme upgrade offer.
         *
         * @since 2.8.0
         * @var array|WP_Error $result
         * @see WP_Upgrader::$result
         */
        public $result;
        /**
         * Whether multiple themes are being upgraded/installed in bulk.
         *
         * @since 2.9.0
         * @var bool $bulk
         */
        public $bulk = \false;
        /**
         * New theme info.
         *
         * @since 5.5.0
         * @var array $new_theme_data
         *
         * @see check_package()
         */
        public $new_theme_data = array();
        /**
         * Initialize the upgrade strings.
         *
         * @since 2.8.0
         */
        public function upgrade_strings()
        {
        }
        /**
         * Initialize the installation strings.
         *
         * @since 2.8.0
         */
        public function install_strings()
        {
        }
        /**
         * Check if a child theme is being installed and we need to install its parent.
         *
         * Hooked to the {@see 'upgrader_post_install'} filter by Theme_Upgrader::install().
         *
         * @since 3.4.0
         *
         * @param bool  $install_result
         * @param array $hook_extra
         * @param array $child_result
         * @return bool
         */
        public function check_parent_theme_filter($install_result, $hook_extra, $child_result)
        {
        }
        /**
         * Don't display the activate and preview actions to the user.
         *
         * Hooked to the {@see 'install_theme_complete_actions'} filter by
         * Theme_Upgrader::check_parent_theme_filter() when installing
         * a child theme and installing the parent theme fails.
         *
         * @since 3.4.0
         *
         * @param array $actions Preview actions.
         * @return array
         */
        public function hide_activate_preview_actions($actions)
        {
        }
        /**
         * Install a theme package.
         *
         * @since 2.8.0
         * @since 3.7.0 The `$args` parameter was added, making clearing the update cache optional.
         *
         * @param string $package The full local path or URI of the package.
         * @param array  $args {
         *     Optional. Other arguments for installing a theme package. Default empty array.
         *
         *     @type bool $clear_update_cache Whether to clear the updates cache if successful.
         *                                    Default true.
         * }
         *
         * @return bool|WP_Error True if the installation was successful, false or a WP_Error object otherwise.
         */
        public function install($package, $args = array())
        {
        }
        /**
         * Upgrade a theme.
         *
         * @since 2.8.0
         * @since 3.7.0 The `$args` parameter was added, making clearing the update cache optional.
         *
         * @param string $theme The theme slug.
         * @param array  $args {
         *     Optional. Other arguments for upgrading a theme. Default empty array.
         *
         *     @type bool $clear_update_cache Whether to clear the update cache if successful.
         *                                    Default true.
         * }
         * @return bool|WP_Error True if the upgrade was successful, false or a WP_Error object otherwise.
         */
        public function upgrade($theme, $args = array())
        {
        }
        /**
         * Upgrade several themes at once.
         *
         * @since 3.0.0
         * @since 3.7.0 The `$args` parameter was added, making clearing the update cache optional.
         *
         * @param string[] $themes Array of the theme slugs.
         * @param array    $args {
         *     Optional. Other arguments for upgrading several themes at once. Default empty array.
         *
         *     @type bool $clear_update_cache Whether to clear the update cache if successful.
         *                                    Default true.
         * }
         * @return array[]|false An array of results, or false if unable to connect to the filesystem.
         */
        public function bulk_upgrade($themes, $args = array())
        {
        }
        /**
         * Checks that the package source contains a valid theme.
         *
         * Hooked to the {@see 'upgrader_source_selection'} filter by Theme_Upgrader::install().
         *
         * @since 3.3.0
         *
         * @global WP_Filesystem_Base $wp_filesystem WordPress filesystem subclass.
         * @global string             $wp_version    The WordPress version string.
         *
         * @param string $source The path to the downloaded package source.
         * @return string|WP_Error The source as passed, or a WP_Error object on failure.
         */
        public function check_package($source)
        {
        }
        /**
         * Turn on maintenance mode before attempting to upgrade the active theme.
         *
         * Hooked to the {@see 'upgrader_pre_install'} filter by Theme_Upgrader::upgrade() and
         * Theme_Upgrader::bulk_upgrade().
         *
         * @since 2.8.0
         *
         * @param bool|WP_Error $response The installation response before the installation has started.
         * @param array         $theme    Theme arguments.
         * @return bool|WP_Error The original `$response` parameter or WP_Error.
         */
        public function current_before($response, $theme)
        {
        }
        /**
         * Turn off maintenance mode after upgrading the active theme.
         *
         * Hooked to the {@see 'upgrader_post_install'} filter by Theme_Upgrader::upgrade()
         * and Theme_Upgrader::bulk_upgrade().
         *
         * @since 2.8.0
         *
         * @param bool|WP_Error $response The installation response after the installation has finished.
         * @param array         $theme    Theme arguments.
         * @return bool|WP_Error The original `$response` parameter or WP_Error.
         */
        public function current_after($response, $theme)
        {
        }
        /**
         * Delete the old theme during an upgrade.
         *
         * Hooked to the {@see 'upgrader_clear_destination'} filter by Theme_Upgrader::upgrade()
         * and Theme_Upgrader::bulk_upgrade().
         *
         * @since 2.8.0
         *
         * @global WP_Filesystem_Base $wp_filesystem Subclass
         *
         * @param bool   $removed
         * @param string $local_destination
         * @param string $remote_destination
         * @param array  $theme
         * @return bool
         */
        public function delete_old_theme($removed, $local_destination, $remote_destination, $theme)
        {
        }
        /**
         * Get the WP_Theme object for a theme.
         *
         * @since 2.8.0
         * @since 3.0.0 The `$theme` argument was added.
         *
         * @param string $theme The directory name of the theme. This is optional, and if not supplied,
         *                      the directory name from the last result will be used.
         * @return WP_Theme|false The theme's info object, or false `$theme` is not supplied
         *                        and the last result isn't set.
         */
        public function theme_info($theme = \null)
        {
        }
    }
    /**
     * PemFTP - An Ftp implementation in pure PHP
     *
     * @package PemFTP
     * @since 2.5.0
     *
     * @version 1.0
     * @copyright Alexey Dotsenko
     * @author Alexey Dotsenko
     * @link https://www.phpclasses.org/package/1743-PHP-FTP-client-in-pure-PHP.html
     * @license LGPL https://opensource.org/licenses/lgpl-license.html
     */
    /**
     * Socket Based FTP implementation
     *
     * @package PemFTP
     * @subpackage Socket
     * @since 2.5.0
     *
     * @version 1.0
     * @copyright Alexey Dotsenko
     * @author Alexey Dotsenko
     * @link https://www.phpclasses.org/package/1743-PHP-FTP-client-in-pure-PHP.html
     * @license LGPL https://opensource.org/licenses/lgpl-license.html
     */
    class ftp_sockets extends \ftp_base
    {
        function __construct($verb = \FALSE, $le = \FALSE)
        {
        }
        // <!-- --------------------------------------------------------------------------------------- -->
        // <!--       Private functions                                                                 -->
        // <!-- --------------------------------------------------------------------------------------- -->
        function _settimeout($sock)
        {
        }
        function _connect($host, $port)
        {
        }
        function _readmsg($fnction = "_readmsg")
        {
        }
        function _exec($cmd, $fnction = "_exec")
        {
        }
        function _data_prepare($mode = \FTP_ASCII)
        {
        }
        function _data_read($mode = \FTP_ASCII, $fp = \NULL)
        {
        }
        function _data_write($mode = \FTP_ASCII, $fp = \NULL)
        {
        }
        function _data_write_block($mode, $block)
        {
        }
        function _data_close()
        {
        }
        function _quit()
        {
        }
    }
    class ftp extends \ftp_sockets
    {
    }
    /**
     * WordPress FTP Filesystem.
     *
     * @package WordPress
     * @subpackage Filesystem
     */
    /**
     * WordPress Filesystem Class for implementing FTP.
     *
     * @since 2.5.0
     *
     * @see WP_Filesystem_Base
     */
    class WP_Filesystem_FTPext extends \WP_Filesystem_Base
    {
        /**
         * @since 2.5.0
         * @var resource
         */
        public $link;
        /**
         * Constructor.
         *
         * @since 2.5.0
         *
         * @param array $opt
         */
        public function __construct($opt = '')
        {
        }
        /**
         * Connects filesystem.
         *
         * @since 2.5.0
         *
         * @return bool True on success, false on failure.
         */
        public function connect()
        {
        }
        /**
         * Reads entire file into a string.
         *
         * @since 2.5.0
         *
         * @param string $file Name of the file to read.
         * @return string|false Read data on success, false if no temporary file could be opened,
         *                      or if the file couldn't be retrieved.
         */
        public function get_contents($file)
        {
        }
        /**
         * Reads entire file into an array.
         *
         * @since 2.5.0
         *
         * @param string $file Path to the file.
         * @return array|false File contents in an array on success, false on failure.
         */
        public function get_contents_array($file)
        {
        }
        /**
         * Writes a string to a file.
         *
         * @since 2.5.0
         *
         * @param string    $file     Remote path to the file where to write the data.
         * @param string    $contents The data to write.
         * @param int|false $mode     Optional. The file permissions as octal number, usually 0644.
         *                            Default false.
         * @return bool True on success, false on failure.
         */
        public function put_contents($file, $contents, $mode = \false)
        {
        }
        /**
         * Gets the current working directory.
         *
         * @since 2.5.0
         *
         * @return string|false The current working directory on success, false on failure.
         */
        public function cwd()
        {
        }
        /**
         * Changes current directory.
         *
         * @since 2.5.0
         *
         * @param string $dir The new current directory.
         * @return bool True on success, false on failure.
         */
        public function chdir($dir)
        {
        }
        /**
         * Changes filesystem permissions.
         *
         * @since 2.5.0
         *
         * @param string    $file      Path to the file.
         * @param int|false $mode      Optional. The permissions as octal number, usually 0644 for files,
         *                             0755 for directories. Default false.
         * @param bool      $recursive Optional. If set to true, changes file permissions recursively.
         *                             Default false.
         * @return bool True on success, false on failure.
         */
        public function chmod($file, $mode = \false, $recursive = \false)
        {
        }
        /**
         * Gets the file owner.
         *
         * @since 2.5.0
         *
         * @param string $file Path to the file.
         * @return string|false Username of the owner on success, false on failure.
         */
        public function owner($file)
        {
        }
        /**
         * Gets the permissions of the specified file or filepath in their octal format.
         *
         * @since 2.5.0
         *
         * @param string $file Path to the file.
         * @return string Mode of the file (the last 3 digits).
         */
        public function getchmod($file)
        {
        }
        /**
         * Gets the file's group.
         *
         * @since 2.5.0
         *
         * @param string $file Path to the file.
         * @return string|false The group on success, false on failure.
         */
        public function group($file)
        {
        }
        /**
         * Copies a file.
         *
         * @since 2.5.0
         *
         * @param string    $source      Path to the source file.
         * @param string    $destination Path to the destination file.
         * @param bool      $overwrite   Optional. Whether to overwrite the destination file if it exists.
         *                               Default false.
         * @param int|false $mode        Optional. The permissions as octal number, usually 0644 for files,
         *                               0755 for dirs. Default false.
         * @return bool True on success, false on failure.
         */
        public function copy($source, $destination, $overwrite = \false, $mode = \false)
        {
        }
        /**
         * Moves a file.
         *
         * @since 2.5.0
         *
         * @param string $source      Path to the source file.
         * @param string $destination Path to the destination file.
         * @param bool   $overwrite   Optional. Whether to overwrite the destination file if it exists.
         *                            Default false.
         * @return bool True on success, false on failure.
         */
        public function move($source, $destination, $overwrite = \false)
        {
        }
        /**
         * Deletes a file or directory.
         *
         * @since 2.5.0
         *
         * @param string       $file      Path to the file or directory.
         * @param bool         $recursive Optional. If set to true, deletes files and folders recursively.
         *                                Default false.
         * @param string|false $type      Type of resource. 'f' for file, 'd' for directory.
         *                                Default false.
         * @return bool True on success, false on failure.
         */
        public function delete($file, $recursive = \false, $type = \false)
        {
        }
        /**
         * Checks if a file or directory exists.
         *
         * @since 2.5.0
         *
         * @param string $file Path to file or directory.
         * @return bool Whether $file exists or not.
         */
        public function exists($file)
        {
        }
        /**
         * Checks if resource is a file.
         *
         * @since 2.5.0
         *
         * @param string $file File path.
         * @return bool Whether $file is a file.
         */
        public function is_file($file)
        {
        }
        /**
         * Checks if resource is a directory.
         *
         * @since 2.5.0
         *
         * @param string $path Directory path.
         * @return bool Whether $path is a directory.
         */
        public function is_dir($path)
        {
        }
        /**
         * Checks if a file is readable.
         *
         * @since 2.5.0
         *
         * @param string $file Path to file.
         * @return bool Whether $file is readable.
         */
        public function is_readable($file)
        {
        }
        /**
         * Checks if a file or directory is writable.
         *
         * @since 2.5.0
         *
         * @param string $file Path to file or directory.
         * @return bool Whether $file is writable.
         */
        public function is_writable($file)
        {
        }
        /**
         * Gets the file's last access time.
         *
         * @since 2.5.0
         *
         * @param string $file Path to file.
         * @return int|false Unix timestamp representing last access time, false on failure.
         */
        public function atime($file)
        {
        }
        /**
         * Gets the file modification time.
         *
         * @since 2.5.0
         *
         * @param string $file Path to file.
         * @return int|false Unix timestamp representing modification time, false on failure.
         */
        public function mtime($file)
        {
        }
        /**
         * Gets the file size (in bytes).
         *
         * @since 2.5.0
         *
         * @param string $file Path to file.
         * @return int|false Size of the file in bytes on success, false on failure.
         */
        public function size($file)
        {
        }
        /**
         * Sets the access and modification times of a file.
         *
         * Note: If $file doesn't exist, it will be created.
         *
         * @since 2.5.0
         *
         * @param string $file  Path to file.
         * @param int    $time  Optional. Modified time to set for file.
         *                      Default 0.
         * @param int    $atime Optional. Access time to set for file.
         *                      Default 0.
         * @return bool True on success, false on failure.
         */
        public function touch($file, $time = 0, $atime = 0)
        {
        }
        /**
         * Creates a directory.
         *
         * @since 2.5.0
         *
         * @param string           $path  Path for new directory.
         * @param int|false        $chmod Optional. The permissions as octal number (or false to skip chmod).
         *                                Default false.
         * @param string|int|false $chown Optional. A user name or number (or false to skip chown).
         *                                Default false.
         * @param string|int|false $chgrp Optional. A group name or number (or false to skip chgrp).
         *                                Default false.
         * @return bool True on success, false on failure.
         */
        public function mkdir($path, $chmod = \false, $chown = \false, $chgrp = \false)
        {
        }
        /**
         * Deletes a directory.
         *
         * @since 2.5.0
         *
         * @param string $path      Path to directory.
         * @param bool   $recursive Optional. Whether to recursively remove files/directories.
         *                          Default false.
         * @return bool True on success, false on failure.
         */
        public function rmdir($path, $recursive = \false)
        {
        }
        /**
         * @param string $line
         * @return array
         */
        public function parselisting($line)
        {
        }
        /**
         * Gets details for files in a directory or a specific file.
         *
         * @since 2.5.0
         *
         * @param string $path           Path to directory or file.
         * @param bool   $include_hidden Optional. Whether to include details of hidden ("." prefixed) files.
         *                               Default true.
         * @param bool   $recursive      Optional. Whether to recursively include file details in nested directories.
         *                               Default false.
         * @return array|false {
         *     Array of files. False if unable to list directory contents.
         *
         *     @type string $name        Name of the file or directory.
         *     @type string $perms       *nix representation of permissions.
         *     @type string $permsn      Octal representation of permissions.
         *     @type string $owner       Owner name or ID.
         *     @type int    $size        Size of file in bytes.
         *     @type int    $lastmodunix Last modified unix timestamp.
         *     @type mixed  $lastmod     Last modified month (3 letter) and day (without leading 0).
         *     @type int    $time        Last modified time.
         *     @type string $type        Type of resource. 'f' for file, 'd' for directory.
         *     @type mixed  $files       If a directory and `$recursive` is true, contains another array of files.
         * }
         */
        public function dirlist($path = '.', $include_hidden = \true, $recursive = \false)
        {
        }
        /**
         * Destructor.
         *
         * @since 2.5.0
         */
        public function __destruct()
        {
        }
    }
    /**
     * Class for looking up a site's health based on a user's WordPress environment.
     *
     * @package WordPress
     * @subpackage Site_Health
     * @since 5.2.0
     */
    class WP_Site_Health
    {
        private static $instance = \null;
        private $mysql_min_version_check;
        private $mysql_rec_version_check;
        public $is_mariadb = \false;
        private $mysql_server_version = '';
        private $health_check_mysql_required_version = '5.5';
        private $health_check_mysql_rec_version = '';
        public $php_memory_limit;
        public $schedules;
        public $crons;
        public $last_missed_cron = \null;
        public $last_late_cron = \null;
        private $timeout_missed_cron = \null;
        private $timeout_late_cron = \null;
        /**
         * WP_Site_Health constructor.
         *
         * @since 5.2.0
         */
        public function __construct()
        {
        }
        /**
         * Output the content of a tab in the Site Health screen.
         *
         * @since 5.8.0
         *
         * @param string $tab Slug of the current tab being displayed.
         */
        public function show_site_health_tab($tab)
        {
        }
        /**
         * Return an instance of the WP_Site_Health class, or create one if none exist yet.
         *
         * @since 5.4.0
         *
         * @return WP_Site_Health|null
         */
        public static function get_instance()
        {
        }
        /**
         * Enqueues the site health scripts.
         *
         * @since 5.2.0
         */
        public function enqueue_scripts()
        {
        }
        /**
         * Run a Site Health test directly.
         *
         * @since 5.4.0
         *
         * @param callable $callback
         * @return mixed|void
         */
        private function perform_test($callback)
        {
        }
        /**
         * Run the SQL version checks.
         *
         * These values are used in later tests, but the part of preparing them is more easily managed
         * early in the class for ease of access and discovery.
         *
         * @since 5.2.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         */
        private function prepare_sql_data()
        {
        }
        /**
         * Test if `wp_version_check` is blocked.
         *
         * It's possible to block updates with the `wp_version_check` filter, but this can't be checked
         * during an Ajax call, as the filter is never introduced then.
         *
         * This filter overrides a standard page request if it's made by an admin through the Ajax call
         * with the right query argument to check for this.
         *
         * @since 5.2.0
         */
        public function check_wp_version_check_exists()
        {
        }
        /**
         * Tests for WordPress version and outputs it.
         *
         * Gives various results depending on what kind of updates are available, if any, to encourage
         * the user to install security updates as a priority.
         *
         * @since 5.2.0
         *
         * @return array The test result.
         */
        public function get_test_wordpress_version()
        {
        }
        /**
         * Test if plugins are outdated, or unnecessary.
         *
         * The tests checks if your plugins are up to date, and encourages you to remove any
         * that are not in use.
         *
         * @since 5.2.0
         *
         * @return array The test result.
         */
        public function get_test_plugin_version()
        {
        }
        /**
         * Test if themes are outdated, or unnecessary.
         *
         * Сhecks if your site has a default theme (to fall back on if there is a need),
         * if your themes are up to date and, finally, encourages you to remove any themes
         * that are not needed.
         *
         * @since 5.2.0
         *
         * @return array The test results.
         */
        public function get_test_theme_version()
        {
        }
        /**
         * Test if the supplied PHP version is supported.
         *
         * @since 5.2.0
         *
         * @return array The test results.
         */
        public function get_test_php_version()
        {
        }
        /**
         * Check if the passed extension or function are available.
         *
         * Make the check for available PHP modules into a simple boolean operator for a cleaner test runner.
         *
         * @since 5.2.0
         * @since 5.3.0 The `$constant_name` and `$class_name` parameters were added.
         *
         * @param string $extension_name Optional. The extension name to test. Default null.
         * @param string $function_name  Optional. The function name to test. Default null.
         * @param string $constant_name  Optional. The constant name to test for. Default null.
         * @param string $class_name     Optional. The class name to test for. Default null.
         * @return bool Whether or not the extension and function are available.
         */
        private function test_php_extension_availability($extension_name = \null, $function_name = \null, $constant_name = \null, $class_name = \null)
        {
        }
        /**
         * Test if required PHP modules are installed on the host.
         *
         * This test builds on the recommendations made by the WordPress Hosting Team
         * as seen at https://make.wordpress.org/hosting/handbook/handbook/server-environment/#php-extensions
         *
         * @since 5.2.0
         *
         * @return array
         */
        public function get_test_php_extensions()
        {
        }
        /**
         * Test if the PHP default timezone is set to UTC.
         *
         * @since 5.3.1
         *
         * @return array The test results.
         */
        public function get_test_php_default_timezone()
        {
        }
        /**
         * Test if there's an active PHP session that can affect loopback requests.
         *
         * @since 5.5.0
         *
         * @return array The test results.
         */
        public function get_test_php_sessions()
        {
        }
        /**
         * Test if the SQL server is up to date.
         *
         * @since 5.2.0
         *
         * @return array The test results.
         */
        public function get_test_sql_server()
        {
        }
        /**
         * Test if the database server is capable of using utf8mb4.
         *
         * @since 5.2.0
         *
         * @return array The test results.
         */
        public function get_test_utf8mb4_support()
        {
        }
        /**
         * Test if the site can communicate with WordPress.org.
         *
         * @since 5.2.0
         *
         * @return array The test results.
         */
        public function get_test_dotorg_communication()
        {
        }
        /**
         * Test if debug information is enabled.
         *
         * When WP_DEBUG is enabled, errors and information may be disclosed to site visitors,
         * or logged to a publicly accessible file.
         *
         * Debugging is also frequently left enabled after looking for errors on a site,
         * as site owners do not understand the implications of this.
         *
         * @since 5.2.0
         *
         * @return array The test results.
         */
        public function get_test_is_in_debug_mode()
        {
        }
        /**
         * Test if your site is serving content over HTTPS.
         *
         * Many sites have varying degrees of HTTPS support, the most common of which is sites that have it
         * enabled, but only if you visit the right site address.
         *
         * @since 5.2.0
         * @since 5.7.0 Updated to rely on {@see wp_is_using_https()} and {@see wp_is_https_supported()}.
         *
         * @return array The test results.
         */
        public function get_test_https_status()
        {
        }
        /**
         * Check if the HTTP API can handle SSL/TLS requests.
         *
         * @since 5.2.0
         *
         * @return array The test results.
         */
        public function get_test_ssl_support()
        {
        }
        /**
         * Test if scheduled events run as intended.
         *
         * If scheduled events are not running, this may indicate something with WP_Cron is not working
         * as intended, or that there are orphaned events hanging around from older code.
         *
         * @since 5.2.0
         *
         * @return array The test results.
         */
        public function get_test_scheduled_events()
        {
        }
        /**
         * Test if WordPress can run automated background updates.
         *
         * Background updates in WordPress are primarily used for minor releases and security updates.
         * It's important to either have these working, or be aware that they are intentionally disabled
         * for whatever reason.
         *
         * @since 5.2.0
         *
         * @return array The test results.
         */
        public function get_test_background_updates()
        {
        }
        /**
         * Test if plugin and theme auto-updates appear to be configured correctly.
         *
         * @since 5.5.0
         *
         * @return array The test results.
         */
        public function get_test_plugin_theme_auto_updates()
        {
        }
        /**
         * Test if loopbacks work as expected.
         *
         * A loopback is when WordPress queries itself, for example to start a new WP_Cron instance,
         * or when editing a plugin or theme. This has shown itself to be a recurring issue,
         * as code can very easily break this interaction.
         *
         * @since 5.2.0
         *
         * @return array The test results.
         */
        public function get_test_loopback_requests()
        {
        }
        /**
         * Test if HTTP requests are blocked.
         *
         * It's possible to block all outgoing communication (with the possibility of allowing certain
         * hosts) via the HTTP API. This may create problems for users as many features are running as
         * services these days.
         *
         * @since 5.2.0
         *
         * @return array The test results.
         */
        public function get_test_http_requests()
        {
        }
        /**
         * Test if the REST API is accessible.
         *
         * Various security measures may block the REST API from working, or it may have been disabled in general.
         * This is required for the new block editor to work, so we explicitly test for this.
         *
         * @since 5.2.0
         *
         * @return array The test results.
         */
        public function get_test_rest_availability()
        {
        }
        /**
         * Test if 'file_uploads' directive in PHP.ini is turned off.
         *
         * @since 5.5.0
         *
         * @return array The test results.
         */
        public function get_test_file_uploads()
        {
        }
        /**
         * Tests if the Authorization header has the expected values.
         *
         * @since 5.6.0
         *
         * @return array
         */
        public function get_test_authorization_header()
        {
        }
        /**
         * Return a set of tests that belong to the site status page.
         *
         * Each site status test is defined here, they may be `direct` tests, that run on page load, or `async` tests
         * which will run later down the line via JavaScript calls to improve page performance and hopefully also user
         * experiences.
         *
         * @since 5.2.0
         * @since 5.6.0 Added support for `has_rest` and `permissions`.
         *
         * @return array The list of tests to run.
         */
        public static function get_tests()
        {
        }
        /**
         * Add a class to the body HTML tag.
         *
         * Filters the body class string for admin pages and adds our own class for easier styling.
         *
         * @since 5.2.0
         *
         * @param string $body_class The body class string.
         * @return string The modified body class string.
         */
        public function admin_body_class($body_class)
        {
        }
        /**
         * Initiate the WP_Cron schedule test cases.
         *
         * @since 5.2.0
         */
        private function wp_schedule_test_init()
        {
        }
        /**
         * Populate our list of cron events and store them to a class-wide variable.
         *
         * @since 5.2.0
         */
        private function get_cron_tasks()
        {
        }
        /**
         * Check if any scheduled tasks have been missed.
         *
         * Returns a boolean value of `true` if a scheduled task has been missed and ends processing.
         *
         * If the list of crons is an instance of WP_Error, returns the instance instead of a boolean value.
         *
         * @since 5.2.0
         *
         * @return bool|WP_Error True if a cron was missed, false if not. WP_Error if the cron is set to that.
         */
        public function has_missed_cron()
        {
        }
        /**
         * Check if any scheduled tasks are late.
         *
         * Returns a boolean value of `true` if a scheduled task is late and ends processing.
         *
         * If the list of crons is an instance of WP_Error, returns the instance instead of a boolean value.
         *
         * @since 5.3.0
         *
         * @return bool|WP_Error True if a cron is late, false if not. WP_Error if the cron is set to that.
         */
        public function has_late_cron()
        {
        }
        /**
         * Check for potential issues with plugin and theme auto-updates.
         *
         * Though there is no way to 100% determine if plugin and theme auto-updates are configured
         * correctly, a few educated guesses could be made to flag any conditions that would
         * potentially cause unexpected behaviors.
         *
         * @since 5.5.0
         *
         * @return object The test results.
         */
        public function detect_plugin_theme_auto_update_issues()
        {
        }
        /**
         * Run a loopback test on our site.
         *
         * Loopbacks are what WordPress uses to communicate with itself to start up WP_Cron, scheduled posts,
         * make sure plugin or theme edits don't cause site failures and similar.
         *
         * @since 5.2.0
         *
         * @return object The test results.
         */
        public function can_perform_loopback()
        {
        }
        /**
         * Create a weekly cron event, if one does not already exist.
         *
         * @since 5.4.0
         */
        public function maybe_create_scheduled_event()
        {
        }
        /**
         * Run our scheduled event to check and update the latest site health status for the website.
         *
         * @since 5.4.0
         */
        public function wp_cron_scheduled_check()
        {
        }
        /**
         * Checks if the current environment type is set to 'development' or 'local'.
         *
         * @since 5.6.0
         *
         * @return bool True if it is a development environment, false if not.
         */
        public function is_development_environment()
        {
        }
    }
    /**
     * Taxonomy API: Walker_Category_Checklist class
     *
     * @package WordPress
     * @subpackage Administration
     * @since 4.4.0
     */
    /**
     * Core walker class to output an unordered list of category checkbox input elements.
     *
     * @since 2.5.1
     *
     * @see Walker
     * @see wp_category_checklist()
     * @see wp_terms_checklist()
     */
    class Walker_Category_Checklist extends \Walker
    {
        public $tree_type = 'category';
        public $db_fields = array('parent' => 'parent', 'id' => 'term_id');
        // TODO: Decouple this.
        /**
         * Starts the list before the elements are added.
         *
         * @see Walker:start_lvl()
         *
         * @since 2.5.1
         *
         * @param string $output Used to append additional content (passed by reference).
         * @param int    $depth  Depth of category. Used for tab indentation.
         * @param array  $args   An array of arguments. @see wp_terms_checklist()
         */
        public function start_lvl(&$output, $depth = 0, $args = array())
        {
        }
        /**
         * Ends the list of after the elements are added.
         *
         * @see Walker::end_lvl()
         *
         * @since 2.5.1
         *
         * @param string $output Used to append additional content (passed by reference).
         * @param int    $depth  Depth of category. Used for tab indentation.
         * @param array  $args   An array of arguments. @see wp_terms_checklist()
         */
        public function end_lvl(&$output, $depth = 0, $args = array())
        {
        }
        /**
         * Start the element output.
         *
         * @see Walker::start_el()
         *
         * @since 2.5.1
         * @since 5.9.0 Renamed `$category` to `$data_object` and `$id` to `$current_object_id`
         *              to match parent class for PHP 8 named parameter support.
         *
         * @param string  $output            Used to append additional content (passed by reference).
         * @param WP_Term $data_object       The current term object.
         * @param int     $depth             Depth of the term in reference to parents. Default 0.
         * @param array   $args              An array of arguments. @see wp_terms_checklist()
         * @param int     $current_object_id Optional. ID of the current term. Default 0.
         */
        public function start_el(&$output, $data_object, $depth = 0, $args = array(), $current_object_id = 0)
        {
        }
        /**
         * Ends the element output, if needed.
         *
         * @see Walker::end_el()
         *
         * @since 2.5.1
         * @since 5.9.0 Renamed `$category` to `$data_object` to match parent class for PHP 8 named parameter support.
         *
         * @param string  $output      Used to append additional content (passed by reference).
         * @param WP_Term $data_object The current term object.
         * @param int     $depth       Depth of the term in reference to parents. Default 0.
         * @param array   $args        An array of arguments. @see wp_terms_checklist()
         */
        public function end_el(&$output, $data_object, $depth = 0, $args = array())
        {
        }
    }
    /**
     * Helper functions for displaying a list of items in an ajaxified HTML table.
     *
     * @package WordPress
     * @subpackage List_Table
     * @since 4.7.0
     */
    /**
     * Helper class to be used only by back compat functions.
     *
     * @since 3.1.0
     */
    class _WP_List_Table_Compat extends \WP_List_Table
    {
        public $_screen;
        public $_columns;
        /**
         * Constructor.
         *
         * @since 3.1.0
         *
         * @param string|WP_Screen $screen  The screen hook name or screen object.
         * @param string[]         $columns An array of columns with column IDs as the keys
         *                                  and translated column names as the values.
         */
        public function __construct($screen, $columns = array())
        {
        }
        /**
         * Gets a list of all, hidden, and sortable columns.
         *
         * @since 3.1.0
         *
         * @return array
         */
        protected function get_column_info()
        {
        }
        /**
         * Gets a list of columns.
         *
         * @since 3.1.0
         *
         * @return array
         */
        public function get_columns()
        {
        }
    }
    /**
     * List Table API: WP_Plugin_Install_List_Table class
     *
     * @package WordPress
     * @subpackage Administration
     * @since 3.1.0
     */
    /**
     * Core class used to implement displaying plugins to install in a list table.
     *
     * @since 3.1.0
     * @access private
     *
     * @see WP_List_Table
     */
    class WP_Plugin_Install_List_Table extends \WP_List_Table
    {
        public $order = 'ASC';
        public $orderby = \null;
        public $groups = array();
        private $error;
        /**
         * @return bool
         */
        public function ajax_user_can()
        {
        }
        /**
         * Return the list of known plugins.
         *
         * Uses the transient data from the updates API to determine the known
         * installed plugins.
         *
         * @since 4.9.0
         * @access protected
         *
         * @return array
         */
        protected function get_installed_plugins()
        {
        }
        /**
         * Return a list of slugs of installed plugins, if known.
         *
         * Uses the transient data from the updates API to determine the slugs of
         * known installed plugins. This might be better elsewhere, perhaps even
         * within get_plugins().
         *
         * @since 4.0.0
         *
         * @return array
         */
        protected function get_installed_plugin_slugs()
        {
        }
        /**
         * @global array  $tabs
         * @global string $tab
         * @global int    $paged
         * @global string $type
         * @global string $term
         */
        public function prepare_items()
        {
        }
        /**
         */
        public function no_items()
        {
        }
        /**
         * @global array $tabs
         * @global string $tab
         *
         * @return array
         */
        protected function get_views()
        {
        }
        /**
         * Override parent views so we can use the filter bar display.
         */
        public function views()
        {
        }
        /**
         * Displays the plugin install table.
         *
         * Overrides the parent display() method to provide a different container.
         *
         * @since 4.0.0
         */
        public function display()
        {
        }
        /**
         * @global string $tab
         *
         * @param string $which
         */
        protected function display_tablenav($which)
        {
        }
        /**
         * @return array
         */
        protected function get_table_classes()
        {
        }
        /**
         * @return array
         */
        public function get_columns()
        {
        }
        /**
         * @param object $plugin_a
         * @param object $plugin_b
         * @return int
         */
        private function order_callback($plugin_a, $plugin_b)
        {
        }
        public function display_rows()
        {
        }
    }
    /**
     * Class for providing debug data based on a users WordPress environment.
     *
     * @package WordPress
     * @subpackage Site_Health
     * @since 5.2.0
     */
    class WP_Debug_Data
    {
        /**
         * Calls all core functions to check for updates.
         *
         * @since 5.2.0
         */
        public static function check_for_updates()
        {
        }
        /**
         * Static function for generating site debug data when required.
         *
         * @since 5.2.0
         * @since 5.3.0 Added database charset, database collation,
         *              and timezone information.
         * @since 5.5.0 Added pretty permalinks support information.
         *
         * @throws ImagickException
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @return array The debug data for the site.
         */
        public static function debug_data()
        {
        }
        /**
         * Returns the value of a MySQL system variable.
         *
         * @since 5.9.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param string $mysql_var Name of the MySQL system variable.
         * @return string|null The variable value on success. Null if the variable does not exist.
         */
        public static function get_mysql_var($mysql_var)
        {
        }
        /**
         * Format the information gathered for debugging, in a manner suitable for copying to a forum or support ticket.
         *
         * @since 5.2.0
         *
         * @param array  $info_array Information gathered from the `WP_Debug_Data::debug_data()` function.
         * @param string $data_type  The data type to return, either 'info' or 'debug'.
         * @return string The formatted data.
         */
        public static function format($info_array, $data_type)
        {
        }
        /**
         * Fetch the total size of all the database tables for the active database user.
         *
         * @since 5.2.0
         *
         * @return int The size of the database, in bytes.
         */
        public static function get_database_size()
        {
        }
        /**
         * Fetch the sizes of the WordPress directories: `wordpress` (ABSPATH), `plugins`, `themes`, and `uploads`.
         * Intended to supplement the array returned by `WP_Debug_Data::debug_data()`.
         *
         * @since 5.2.0
         *
         * @return array The sizes of the directories, also the database size and total installation size.
         */
        public static function get_sizes()
        {
        }
    }
    /**
     * List Table API: WP_Application_Passwords_List_Table class
     *
     * @package WordPress
     * @subpackage Administration
     * @since 5.6.0
     */
    /**
     * Class for displaying the list of application password items.
     *
     * @since 5.6.0
     * @access private
     *
     * @see WP_List_Table
     */
    class WP_Application_Passwords_List_Table extends \WP_List_Table
    {
        /**
         * Gets the list of columns.
         *
         * @since 5.6.0
         *
         * @return array
         */
        public function get_columns()
        {
        }
        /**
         * Prepares the list of items for displaying.
         *
         * @since 5.6.0
         *
         * @global int $user_id User ID.
         */
        public function prepare_items()
        {
        }
        /**
         * Handles the name column output.
         *
         * @since 5.6.0
         *
         * @param array $item The current application password item.
         */
        public function column_name($item)
        {
        }
        /**
         * Handles the created column output.
         *
         * @since 5.6.0
         *
         * @param array $item The current application password item.
         */
        public function column_created($item)
        {
        }
        /**
         * Handles the last used column output.
         *
         * @since 5.6.0
         *
         * @param array $item The current application password item.
         */
        public function column_last_used($item)
        {
        }
        /**
         * Handles the last ip column output.
         *
         * @since 5.6.0
         *
         * @param array $item The current application password item.
         */
        public function column_last_ip($item)
        {
        }
        /**
         * Handles the revoke column output.
         *
         * @since 5.6.0
         *
         * @param array $item The current application password item.
         */
        public function column_revoke($item)
        {
        }
        /**
         * Generates content for a single row of the table
         *
         * @since 5.6.0
         *
         * @param array  $item        The current item.
         * @param string $column_name The current column name.
         */
        protected function column_default($item, $column_name)
        {
        }
        /**
         * Generates custom table navigation to prevent conflicting nonces.
         *
         * @since 5.6.0
         *
         * @param string $which The location of the bulk actions: 'top' or 'bottom'.
         */
        protected function display_tablenav($which)
        {
        }
        /**
         * Generates content for a single row of the table.
         *
         * @since 5.6.0
         *
         * @param array $item The current item.
         */
        public function single_row($item)
        {
        }
        /**
         * Gets the name of the default primary column.
         *
         * @since 5.6.0
         *
         * @return string Name of the default primary column, in this case, 'name'.
         */
        protected function get_default_primary_column_name()
        {
        }
        /**
         * Prints the JavaScript template for the new row item.
         *
         * @since 5.6.0
         */
        public function print_js_template_row()
        {
        }
    }
    /**
     * Screen API: WP_Screen class
     *
     * @package WordPress
     * @subpackage Administration
     * @since 4.4.0
     */
    /**
     * Core class used to implement an admin screen API.
     *
     * @since 3.3.0
     */
    final class WP_Screen
    {
        /**
         * Any action associated with the screen.
         *
         * 'add' for *-add.php and *-new.php screens. Empty otherwise.
         *
         * @since 3.3.0
         * @var string
         */
        public $action;
        /**
         * The base type of the screen.
         *
         * This is typically the same as `$id` but with any post types and taxonomies stripped.
         * For example, for an `$id` of 'edit-post' the base is 'edit'.
         *
         * @since 3.3.0
         * @var string
         */
        public $base;
        /**
         * The number of columns to display. Access with get_columns().
         *
         * @since 3.4.0
         * @var int
         */
        private $columns = 0;
        /**
         * The unique ID of the screen.
         *
         * @since 3.3.0
         * @var string
         */
        public $id;
        /**
         * Which admin the screen is in. network | user | site | false
         *
         * @since 3.5.0
         * @var string
         */
        protected $in_admin;
        /**
         * Whether the screen is in the network admin.
         *
         * Deprecated. Use in_admin() instead.
         *
         * @since 3.3.0
         * @deprecated 3.5.0
         * @var bool
         */
        public $is_network;
        /**
         * Whether the screen is in the user admin.
         *
         * Deprecated. Use in_admin() instead.
         *
         * @since 3.3.0
         * @deprecated 3.5.0
         * @var bool
         */
        public $is_user;
        /**
         * The base menu parent.
         *
         * This is derived from `$parent_file` by removing the query string and any .php extension.
         * `$parent_file` values of 'edit.php?post_type=page' and 'edit.php?post_type=post'
         * have a `$parent_base` of 'edit'.
         *
         * @since 3.3.0
         * @var string
         */
        public $parent_base;
        /**
         * The parent_file for the screen per the admin menu system.
         *
         * Some `$parent_file` values are 'edit.php?post_type=page', 'edit.php', and 'options-general.php'.
         *
         * @since 3.3.0
         * @var string
         */
        public $parent_file;
        /**
         * The post type associated with the screen, if any.
         *
         * The 'edit.php?post_type=page' screen has a post type of 'page'.
         * The 'edit-tags.php?taxonomy=$taxonomy&post_type=page' screen has a post type of 'page'.
         *
         * @since 3.3.0
         * @var string
         */
        public $post_type;
        /**
         * The taxonomy associated with the screen, if any.
         *
         * The 'edit-tags.php?taxonomy=category' screen has a taxonomy of 'category'.
         *
         * @since 3.3.0
         * @var string
         */
        public $taxonomy;
        /**
         * The help tab data associated with the screen, if any.
         *
         * @since 3.3.0
         * @var array
         */
        private $_help_tabs = array();
        /**
         * The help sidebar data associated with screen, if any.
         *
         * @since 3.3.0
         * @var string
         */
        private $_help_sidebar = '';
        /**
         * The accessible hidden headings and text associated with the screen, if any.
         *
         * @since 4.4.0
         * @var array
         */
        private $_screen_reader_content = array();
        /**
         * Stores old string-based help.
         *
         * @var array
         */
        private static $_old_compat_help = array();
        /**
         * The screen options associated with screen, if any.
         *
         * @since 3.3.0
         * @var array
         */
        private $_options = array();
        /**
         * The screen object registry.
         *
         * @since 3.3.0
         *
         * @var array
         */
        private static $_registry = array();
        /**
         * Stores the result of the public show_screen_options function.
         *
         * @since 3.3.0
         * @var bool
         */
        private $_show_screen_options;
        /**
         * Stores the 'screen_settings' section of screen options.
         *
         * @since 3.3.0
         * @var string
         */
        private $_screen_settings;
        /**
         * Whether the screen is using the block editor.
         *
         * @since 5.0.0
         * @var bool
         */
        public $is_block_editor = \false;
        /**
         * Fetches a screen object.
         *
         * @since 3.3.0
         *
         * @global string $hook_suffix
         *
         * @param string|WP_Screen $hook_name Optional. The hook name (also known as the hook suffix) used to determine the screen.
         *                                    Defaults to the current $hook_suffix global.
         * @return WP_Screen Screen object.
         */
        public static function get($hook_name = '')
        {
        }
        /**
         * Makes the screen object the current screen.
         *
         * @see set_current_screen()
         * @since 3.3.0
         *
         * @global WP_Screen $current_screen WordPress current screen object.
         * @global string    $typenow        The post type of the current screen.
         * @global string    $taxnow         The taxonomy of the current screen.
         */
        public function set_current_screen()
        {
        }
        /**
         * Constructor
         *
         * @since 3.3.0
         */
        private function __construct()
        {
        }
        /**
         * Indicates whether the screen is in a particular admin
         *
         * @since 3.5.0
         *
         * @param string $admin The admin to check against (network | user | site).
         *                      If empty any of the three admins will result in true.
         * @return bool True if the screen is in the indicated admin, false otherwise.
         */
        public function in_admin($admin = \null)
        {
        }
        /**
         * Sets or returns whether the block editor is loading on the current screen.
         *
         * @since 5.0.0
         *
         * @param bool $set Optional. Sets whether the block editor is loading on the current screen or not.
         * @return bool True if the block editor is being loaded, false otherwise.
         */
        public function is_block_editor($set = \null)
        {
        }
        /**
         * Sets the old string-based contextual help for the screen for backward compatibility.
         *
         * @since 3.3.0
         *
         * @param WP_Screen $screen A screen object.
         * @param string    $help   Help text.
         */
        public static function add_old_compat_help($screen, $help)
        {
        }
        /**
         * Set the parent information for the screen.
         *
         * This is called in admin-header.php after the menu parent for the screen has been determined.
         *
         * @since 3.3.0
         *
         * @param string $parent_file The parent file of the screen. Typically the $parent_file global.
         */
        public function set_parentage($parent_file)
        {
        }
        /**
         * Adds an option for the screen.
         *
         * Call this in template files after admin.php is loaded and before admin-header.php is loaded
         * to add screen options.
         *
         * @since 3.3.0
         *
         * @param string $option Option ID.
         * @param mixed  $args   Option-dependent arguments.
         */
        public function add_option($option, $args = array())
        {
        }
        /**
         * Remove an option from the screen.
         *
         * @since 3.8.0
         *
         * @param string $option Option ID.
         */
        public function remove_option($option)
        {
        }
        /**
         * Remove all options from the screen.
         *
         * @since 3.8.0
         */
        public function remove_options()
        {
        }
        /**
         * Get the options registered for the screen.
         *
         * @since 3.8.0
         *
         * @return array Options with arguments.
         */
        public function get_options()
        {
        }
        /**
         * Gets the arguments for an option for the screen.
         *
         * @since 3.3.0
         *
         * @param string       $option Option name.
         * @param string|false $key    Optional. Specific array key for when the option is an array.
         *                             Default false.
         * @return string The option value if set, null otherwise.
         */
        public function get_option($option, $key = \false)
        {
        }
        /**
         * Gets the help tabs registered for the screen.
         *
         * @since 3.4.0
         * @since 4.4.0 Help tabs are ordered by their priority.
         *
         * @return array Help tabs with arguments.
         */
        public function get_help_tabs()
        {
        }
        /**
         * Gets the arguments for a help tab.
         *
         * @since 3.4.0
         *
         * @param string $id Help Tab ID.
         * @return array Help tab arguments.
         */
        public function get_help_tab($id)
        {
        }
        /**
         * Add a help tab to the contextual help for the screen.
         *
         * Call this on the `load-$pagenow` hook for the relevant screen,
         * or fetch the `$current_screen` object, or use get_current_screen()
         * and then call the method from the object.
         *
         * You may need to filter `$current_screen` using an if or switch statement
         * to prevent new help tabs from being added to ALL admin screens.
         *
         * @since 3.3.0
         * @since 4.4.0 The `$priority` argument was added.
         *
         * @param array $args {
         *     Array of arguments used to display the help tab.
         *
         *     @type string   $title    Title for the tab. Default false.
         *     @type string   $id       Tab ID. Must be HTML-safe and should be unique for this menu.
         *                              It is NOT allowed to contain any empty spaces. Default false.
         *     @type string   $content  Optional. Help tab content in plain text or HTML. Default empty string.
         *     @type callable $callback Optional. A callback to generate the tab content. Default false.
         *     @type int      $priority Optional. The priority of the tab, used for ordering. Default 10.
         * }
         */
        public function add_help_tab($args)
        {
        }
        /**
         * Removes a help tab from the contextual help for the screen.
         *
         * @since 3.3.0
         *
         * @param string $id The help tab ID.
         */
        public function remove_help_tab($id)
        {
        }
        /**
         * Removes all help tabs from the contextual help for the screen.
         *
         * @since 3.3.0
         */
        public function remove_help_tabs()
        {
        }
        /**
         * Gets the content from a contextual help sidebar.
         *
         * @since 3.4.0
         *
         * @return string Contents of the help sidebar.
         */
        public function get_help_sidebar()
        {
        }
        /**
         * Add a sidebar to the contextual help for the screen.
         *
         * Call this in template files after admin.php is loaded and before admin-header.php is loaded
         * to add a sidebar to the contextual help.
         *
         * @since 3.3.0
         *
         * @param string $content Sidebar content in plain text or HTML.
         */
        public function set_help_sidebar($content)
        {
        }
        /**
         * Gets the number of layout columns the user has selected.
         *
         * The layout_columns option controls the max number and default number of
         * columns. This method returns the number of columns within that range selected
         * by the user via Screen Options. If no selection has been made, the default
         * provisioned in layout_columns is returned. If the screen does not support
         * selecting the number of layout columns, 0 is returned.
         *
         * @since 3.4.0
         *
         * @return int Number of columns to display.
         */
        public function get_columns()
        {
        }
        /**
         * Get the accessible hidden headings and text used in the screen.
         *
         * @since 4.4.0
         *
         * @see set_screen_reader_content() For more information on the array format.
         *
         * @return array An associative array of screen reader text strings.
         */
        public function get_screen_reader_content()
        {
        }
        /**
         * Get a screen reader text string.
         *
         * @since 4.4.0
         *
         * @param string $key Screen reader text array named key.
         * @return string Screen reader text string.
         */
        public function get_screen_reader_text($key)
        {
        }
        /**
         * Add accessible hidden headings and text for the screen.
         *
         * @since 4.4.0
         *
         * @param array $content {
         *     An associative array of screen reader text strings.
         *
         *     @type string $heading_views      Screen reader text for the filter links heading.
         *                                      Default 'Filter items list'.
         *     @type string $heading_pagination Screen reader text for the pagination heading.
         *                                      Default 'Items list navigation'.
         *     @type string $heading_list       Screen reader text for the items list heading.
         *                                      Default 'Items list'.
         * }
         */
        public function set_screen_reader_content($content = array())
        {
        }
        /**
         * Remove all the accessible hidden headings and text for the screen.
         *
         * @since 4.4.0
         */
        public function remove_screen_reader_content()
        {
        }
        /**
         * Render the screen's help section.
         *
         * This will trigger the deprecated filters for backward compatibility.
         *
         * @since 3.3.0
         *
         * @global string $screen_layout_columns
         */
        public function render_screen_meta()
        {
        }
        /**
         * @global array $wp_meta_boxes
         *
         * @return bool
         */
        public function show_screen_options()
        {
        }
        /**
         * Render the screen options tab.
         *
         * @since 3.3.0
         *
         * @param array $options {
         *     Options for the tab.
         *
         *     @type bool $wrap Whether the screen-options-wrap div will be included. Defaults to true.
         * }
         */
        public function render_screen_options($options = array())
        {
        }
        /**
         * Render the meta boxes preferences.
         *
         * @since 4.4.0
         *
         * @global array $wp_meta_boxes
         */
        public function render_meta_boxes_preferences()
        {
        }
        /**
         * Render the list table columns preferences.
         *
         * @since 4.4.0
         */
        public function render_list_table_columns_preferences()
        {
        }
        /**
         * Render the option for number of columns on the page
         *
         * @since 3.3.0
         */
        public function render_screen_layout()
        {
        }
        /**
         * Render the items per page option
         *
         * @since 3.3.0
         */
        public function render_per_page_options()
        {
        }
        /**
         * Render the list table view mode preferences.
         *
         * @since 4.4.0
         *
         * @global string $mode List table view mode.
         */
        public function render_view_mode()
        {
        }
        /**
         * Render screen reader text.
         *
         * @since 4.4.0
         *
         * @param string $key The screen reader text array named key.
         * @param string $tag Optional. The HTML tag to wrap the screen reader text. Default h2.
         */
        public function render_screen_reader_content($key = '', $tag = 'h2')
        {
        }
    }
    /**
     * List Table API: WP_Comments_List_Table class
     *
     * @package WordPress
     * @subpackage Administration
     * @since 3.1.0
     */
    /**
     * Core class used to implement displaying comments in a list table.
     *
     * @since 3.1.0
     * @access private
     *
     * @see WP_List_Table
     */
    class WP_Comments_List_Table extends \WP_List_Table
    {
        public $checkbox = \true;
        public $pending_count = array();
        public $extra_items;
        private $user_can;
        /**
         * Constructor.
         *
         * @since 3.1.0
         *
         * @see WP_List_Table::__construct() for more information on default arguments.
         *
         * @global int $post_id
         *
         * @param array $args An associative array of arguments.
         */
        public function __construct($args = array())
        {
        }
        /**
         * Adds avatars to comment author names.
         *
         * @since 3.1.0
         *
         * @param string $name       Comment author name.
         * @param int    $comment_id Comment ID.
         * @return string Avatar with the user name.
         */
        public function floated_admin_avatar($name, $comment_id)
        {
        }
        /**
         * @return bool
         */
        public function ajax_user_can()
        {
        }
        /**
         * @global string $mode           List table view mode.
         * @global int    $post_id
         * @global string $comment_status
         * @global string $comment_type
         * @global string $search
         */
        public function prepare_items()
        {
        }
        /**
         * @param string $comment_status
         * @return int
         */
        public function get_per_page($comment_status = 'all')
        {
        }
        /**
         * @global string $comment_status
         */
        public function no_items()
        {
        }
        /**
         * @global int $post_id
         * @global string $comment_status
         * @global string $comment_type
         */
        protected function get_views()
        {
        }
        /**
         * @global string $comment_status
         *
         * @return array
         */
        protected function get_bulk_actions()
        {
        }
        /**
         * @global string $comment_status
         * @global string $comment_type
         *
         * @param string $which
         */
        protected function extra_tablenav($which)
        {
        }
        /**
         * @return string|false
         */
        public function current_action()
        {
        }
        /**
         * @global int $post_id
         *
         * @return array
         */
        public function get_columns()
        {
        }
        /**
         * Displays a comment type drop-down for filtering on the Comments list table.
         *
         * @since 5.5.0
         * @since 5.6.0 Renamed from `comment_status_dropdown()` to `comment_type_dropdown()`.
         *
         * @param string $comment_type The current comment type slug.
         */
        protected function comment_type_dropdown($comment_type)
        {
        }
        /**
         * @return array
         */
        protected function get_sortable_columns()
        {
        }
        /**
         * Get the name of the default primary column.
         *
         * @since 4.3.0
         *
         * @return string Name of the default primary column, in this case, 'comment'.
         */
        protected function get_default_primary_column_name()
        {
        }
        /**
         * Displays the comments table.
         *
         * Overrides the parent display() method to render extra comments.
         *
         * @since 3.1.0
         */
        public function display()
        {
        }
        /**
         * @global WP_Post    $post    Global post object.
         * @global WP_Comment $comment Global comment object.
         *
         * @param WP_Comment $item
         */
        public function single_row($item)
        {
        }
        /**
         * Generate and display row actions links.
         *
         * @since 4.3.0
         * @since 5.9.0 Renamed `$comment` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @global string $comment_status Status for the current listed comments.
         *
         * @param WP_Comment $item        The comment object.
         * @param string     $column_name Current column name.
         * @param string     $primary     Primary column name.
         * @return string Row actions output for comments. An empty string
         *                if the current column is not the primary column,
         *                or if the current user cannot edit the comment.
         */
        protected function handle_row_actions($item, $column_name, $primary)
        {
        }
        /**
         * @since 5.9.0 Renamed `$comment` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @param WP_Comment $item The comment object.
         */
        public function column_cb($item)
        {
        }
        /**
         * @param WP_Comment $comment The comment object.
         */
        public function column_comment($comment)
        {
        }
        /**
         * @global string $comment_status
         *
         * @param WP_Comment $comment The comment object.
         */
        public function column_author($comment)
        {
        }
        /**
         * @param WP_Comment $comment The comment object.
         */
        public function column_date($comment)
        {
        }
        /**
         * @param WP_Comment $comment The comment object.
         */
        public function column_response($comment)
        {
        }
        /**
         * @since 5.9.0 Renamed `$comment` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @param WP_Comment $item        The comment object.
         * @param string     $column_name The custom column's name.
         */
        public function column_default($item, $column_name)
        {
        }
    }
    /**
     * WordPress Direct Filesystem.
     *
     * @package WordPress
     * @subpackage Filesystem
     */
    /**
     * WordPress Filesystem Class for direct PHP file and folder manipulation.
     *
     * @since 2.5.0
     *
     * @see WP_Filesystem_Base
     */
    class WP_Filesystem_Direct extends \WP_Filesystem_Base
    {
        /**
         * Constructor.
         *
         * @since 2.5.0
         *
         * @param mixed $arg Not used.
         */
        public function __construct($arg)
        {
        }
        /**
         * Reads entire file into a string.
         *
         * @since 2.5.0
         *
         * @param string $file Name of the file to read.
         * @return string|false Read data on success, false on failure.
         */
        public function get_contents($file)
        {
        }
        /**
         * Reads entire file into an array.
         *
         * @since 2.5.0
         *
         * @param string $file Path to the file.
         * @return array|false File contents in an array on success, false on failure.
         */
        public function get_contents_array($file)
        {
        }
        /**
         * Writes a string to a file.
         *
         * @since 2.5.0
         *
         * @param string    $file     Remote path to the file where to write the data.
         * @param string    $contents The data to write.
         * @param int|false $mode     Optional. The file permissions as octal number, usually 0644.
         *                            Default false.
         * @return bool True on success, false on failure.
         */
        public function put_contents($file, $contents, $mode = \false)
        {
        }
        /**
         * Gets the current working directory.
         *
         * @since 2.5.0
         *
         * @return string|false The current working directory on success, false on failure.
         */
        public function cwd()
        {
        }
        /**
         * Changes current directory.
         *
         * @since 2.5.0
         *
         * @param string $dir The new current directory.
         * @return bool True on success, false on failure.
         */
        public function chdir($dir)
        {
        }
        /**
         * Changes the file group.
         *
         * @since 2.5.0
         *
         * @param string     $file      Path to the file.
         * @param string|int $group     A group name or number.
         * @param bool       $recursive Optional. If set to true, changes file group recursively.
         *                              Default false.
         * @return bool True on success, false on failure.
         */
        public function chgrp($file, $group, $recursive = \false)
        {
        }
        /**
         * Changes filesystem permissions.
         *
         * @since 2.5.0
         *
         * @param string    $file      Path to the file.
         * @param int|false $mode      Optional. The permissions as octal number, usually 0644 for files,
         *                             0755 for directories. Default false.
         * @param bool      $recursive Optional. If set to true, changes file permissions recursively.
         *                             Default false.
         * @return bool True on success, false on failure.
         */
        public function chmod($file, $mode = \false, $recursive = \false)
        {
        }
        /**
         * Changes the owner of a file or directory.
         *
         * @since 2.5.0
         *
         * @param string     $file      Path to the file or directory.
         * @param string|int $owner     A user name or number.
         * @param bool       $recursive Optional. If set to true, changes file owner recursively.
         *                              Default false.
         * @return bool True on success, false on failure.
         */
        public function chown($file, $owner, $recursive = \false)
        {
        }
        /**
         * Gets the file owner.
         *
         * @since 2.5.0
         *
         * @param string $file Path to the file.
         * @return string|false Username of the owner on success, false on failure.
         */
        public function owner($file)
        {
        }
        /**
         * Gets the permissions of the specified file or filepath in their octal format.
         *
         * FIXME does not handle errors in fileperms()
         *
         * @since 2.5.0
         *
         * @param string $file Path to the file.
         * @return string Mode of the file (the last 3 digits).
         */
        public function getchmod($file)
        {
        }
        /**
         * Gets the file's group.
         *
         * @since 2.5.0
         *
         * @param string $file Path to the file.
         * @return string|false The group on success, false on failure.
         */
        public function group($file)
        {
        }
        /**
         * Copies a file.
         *
         * @since 2.5.0
         *
         * @param string    $source      Path to the source file.
         * @param string    $destination Path to the destination file.
         * @param bool      $overwrite   Optional. Whether to overwrite the destination file if it exists.
         *                               Default false.
         * @param int|false $mode        Optional. The permissions as octal number, usually 0644 for files,
         *                               0755 for dirs. Default false.
         * @return bool True on success, false on failure.
         */
        public function copy($source, $destination, $overwrite = \false, $mode = \false)
        {
        }
        /**
         * Moves a file.
         *
         * @since 2.5.0
         *
         * @param string $source      Path to the source file.
         * @param string $destination Path to the destination file.
         * @param bool   $overwrite   Optional. Whether to overwrite the destination file if it exists.
         *                            Default false.
         * @return bool True on success, false on failure.
         */
        public function move($source, $destination, $overwrite = \false)
        {
        }
        /**
         * Deletes a file or directory.
         *
         * @since 2.5.0
         *
         * @param string       $file      Path to the file or directory.
         * @param bool         $recursive Optional. If set to true, deletes files and folders recursively.
         *                                Default false.
         * @param string|false $type      Type of resource. 'f' for file, 'd' for directory.
         *                                Default false.
         * @return bool True on success, false on failure.
         */
        public function delete($file, $recursive = \false, $type = \false)
        {
        }
        /**
         * Checks if a file or directory exists.
         *
         * @since 2.5.0
         *
         * @param string $file Path to file or directory.
         * @return bool Whether $file exists or not.
         */
        public function exists($file)
        {
        }
        /**
         * Checks if resource is a file.
         *
         * @since 2.5.0
         *
         * @param string $file File path.
         * @return bool Whether $file is a file.
         */
        public function is_file($file)
        {
        }
        /**
         * Checks if resource is a directory.
         *
         * @since 2.5.0
         *
         * @param string $path Directory path.
         * @return bool Whether $path is a directory.
         */
        public function is_dir($path)
        {
        }
        /**
         * Checks if a file is readable.
         *
         * @since 2.5.0
         *
         * @param string $file Path to file.
         * @return bool Whether $file is readable.
         */
        public function is_readable($file)
        {
        }
        /**
         * Checks if a file or directory is writable.
         *
         * @since 2.5.0
         *
         * @param string $file Path to file or directory.
         * @return bool Whether $file is writable.
         */
        public function is_writable($file)
        {
        }
        /**
         * Gets the file's last access time.
         *
         * @since 2.5.0
         *
         * @param string $file Path to file.
         * @return int|false Unix timestamp representing last access time, false on failure.
         */
        public function atime($file)
        {
        }
        /**
         * Gets the file modification time.
         *
         * @since 2.5.0
         *
         * @param string $file Path to file.
         * @return int|false Unix timestamp representing modification time, false on failure.
         */
        public function mtime($file)
        {
        }
        /**
         * Gets the file size (in bytes).
         *
         * @since 2.5.0
         *
         * @param string $file Path to file.
         * @return int|false Size of the file in bytes on success, false on failure.
         */
        public function size($file)
        {
        }
        /**
         * Sets the access and modification times of a file.
         *
         * Note: If $file doesn't exist, it will be created.
         *
         * @since 2.5.0
         *
         * @param string $file  Path to file.
         * @param int    $time  Optional. Modified time to set for file.
         *                      Default 0.
         * @param int    $atime Optional. Access time to set for file.
         *                      Default 0.
         * @return bool True on success, false on failure.
         */
        public function touch($file, $time = 0, $atime = 0)
        {
        }
        /**
         * Creates a directory.
         *
         * @since 2.5.0
         *
         * @param string           $path  Path for new directory.
         * @param int|false        $chmod Optional. The permissions as octal number (or false to skip chmod).
         *                                Default false.
         * @param string|int|false $chown Optional. A user name or number (or false to skip chown).
         *                                Default false.
         * @param string|int|false $chgrp Optional. A group name or number (or false to skip chgrp).
         *                                Default false.
         * @return bool True on success, false on failure.
         */
        public function mkdir($path, $chmod = \false, $chown = \false, $chgrp = \false)
        {
        }
        /**
         * Deletes a directory.
         *
         * @since 2.5.0
         *
         * @param string $path      Path to directory.
         * @param bool   $recursive Optional. Whether to recursively remove files/directories.
         *                          Default false.
         * @return bool True on success, false on failure.
         */
        public function rmdir($path, $recursive = \false)
        {
        }
        /**
         * Gets details for files in a directory or a specific file.
         *
         * @since 2.5.0
         *
         * @param string $path           Path to directory or file.
         * @param bool   $include_hidden Optional. Whether to include details of hidden ("." prefixed) files.
         *                               Default true.
         * @param bool   $recursive      Optional. Whether to recursively include file details in nested directories.
         *                               Default false.
         * @return array|false {
         *     Array of files. False if unable to list directory contents.
         *
         *     @type string $name        Name of the file or directory.
         *     @type string $perms       *nix representation of permissions.
         *     @type string $permsn      Octal representation of permissions.
         *     @type string $owner       Owner name or ID.
         *     @type int    $size        Size of file in bytes.
         *     @type int    $lastmodunix Last modified unix timestamp.
         *     @type mixed  $lastmod     Last modified month (3 letter) and day (without leading 0).
         *     @type int    $time        Last modified time.
         *     @type string $type        Type of resource. 'f' for file, 'd' for directory.
         *     @type mixed  $files       If a directory and `$recursive` is true, contains another array of files.
         * }
         */
        public function dirlist($path, $include_hidden = \true, $recursive = \false)
        {
        }
    }
    /**
     * Upgrade API: Language_Pack_Upgrader class
     *
     * @package WordPress
     * @subpackage Upgrader
     * @since 4.6.0
     */
    /**
     * Core class used for updating/installing language packs (translations)
     * for plugins, themes, and core.
     *
     * @since 3.7.0
     * @since 4.6.0 Moved to its own file from wp-admin/includes/class-wp-upgrader.php.
     *
     * @see WP_Upgrader
     */
    class Language_Pack_Upgrader extends \WP_Upgrader
    {
        /**
         * Result of the language pack upgrade.
         *
         * @since 3.7.0
         * @var array|WP_Error $result
         * @see WP_Upgrader::$result
         */
        public $result;
        /**
         * Whether a bulk upgrade/installation is being performed.
         *
         * @since 3.7.0
         * @var bool $bulk
         */
        public $bulk = \true;
        /**
         * Asynchronously upgrades language packs after other upgrades have been made.
         *
         * Hooked to the {@see 'upgrader_process_complete'} action by default.
         *
         * @since 3.7.0
         *
         * @param false|WP_Upgrader $upgrader Optional. WP_Upgrader instance or false. If `$upgrader` is
         *                                    a Language_Pack_Upgrader instance, the method will bail to
         *                                    avoid recursion. Otherwise unused. Default false.
         */
        public static function async_upgrade($upgrader = \false)
        {
        }
        /**
         * Initialize the upgrade strings.
         *
         * @since 3.7.0
         */
        public function upgrade_strings()
        {
        }
        /**
         * Upgrade a language pack.
         *
         * @since 3.7.0
         *
         * @param string|false $update Optional. Whether an update offer is available. Default false.
         * @param array        $args   Optional. Other optional arguments, see
         *                             Language_Pack_Upgrader::bulk_upgrade(). Default empty array.
         * @return array|bool|WP_Error The result of the upgrade, or a WP_Error object instead.
         */
        public function upgrade($update = \false, $args = array())
        {
        }
        /**
         * Bulk upgrade language packs.
         *
         * @since 3.7.0
         *
         * @global WP_Filesystem_Base $wp_filesystem WordPress filesystem subclass.
         *
         * @param object[] $language_updates Optional. Array of language packs to update. @see wp_get_translation_updates().
         *                                   Default empty array.
         * @param array    $args {
         *     Other arguments for upgrading multiple language packs. Default empty array.
         *
         *     @type bool $clear_update_cache Whether to clear the update cache when done.
         *                                    Default true.
         * }
         * @return array|bool|WP_Error Will return an array of results, or true if there are no updates,
         *                             false or WP_Error for initial errors.
         */
        public function bulk_upgrade($language_updates = array(), $args = array())
        {
        }
        /**
         * Checks that the package source contains .mo and .po files.
         *
         * Hooked to the {@see 'upgrader_source_selection'} filter by
         * Language_Pack_Upgrader::bulk_upgrade().
         *
         * @since 3.7.0
         *
         * @global WP_Filesystem_Base $wp_filesystem WordPress filesystem subclass.
         *
         * @param string|WP_Error $source        The path to the downloaded package source.
         * @param string          $remote_source Remote file source location.
         * @return string|WP_Error The source as passed, or a WP_Error object on failure.
         */
        public function check_package($source, $remote_source)
        {
        }
        /**
         * Get the name of an item being updated.
         *
         * @since 3.7.0
         *
         * @param object $update The data for an update.
         * @return string The name of the item being updated.
         */
        public function get_name_for_update($update)
        {
        }
        /**
         * Clears existing translations where this item is going to be installed into.
         *
         * @since 5.1.0
         *
         * @global WP_Filesystem_Base $wp_filesystem WordPress filesystem subclass.
         *
         * @param string $remote_destination The location on the remote filesystem to be cleared.
         * @return bool|WP_Error True upon success, WP_Error on failure.
         */
        public function clear_destination($remote_destination)
        {
        }
    }
    /**
     * Upgrader API: Theme_Upgrader_Skin class
     *
     * @package WordPress
     * @subpackage Upgrader
     * @since 4.6.0
     */
    /**
     * Theme Upgrader Skin for WordPress Theme Upgrades.
     *
     * @since 2.8.0
     * @since 4.6.0 Moved to its own file from wp-admin/includes/class-wp-upgrader-skins.php.
     *
     * @see WP_Upgrader_Skin
     */
    class Theme_Upgrader_Skin extends \WP_Upgrader_Skin
    {
        /**
         * Holds the theme slug in the Theme Directory.
         *
         * @since 2.8.0
         *
         * @var string
         */
        public $theme = '';
        /**
         * Constructor.
         *
         * Sets up the theme upgrader skin.
         *
         * @since 2.8.0
         *
         * @param array $args Optional. The theme upgrader skin arguments to
         *                    override default options. Default empty array.
         */
        public function __construct($args = array())
        {
        }
        /**
         * Action to perform following a single theme update.
         *
         * @since 2.8.0
         */
        public function after()
        {
        }
    }
    /**
     * List Table API: WP_Post_Comments_List_Table class
     *
     * @package WordPress
     * @subpackage Administration
     * @since 4.4.0
     */
    /**
     * Core class used to implement displaying post comments in a list table.
     *
     * @since 3.1.0
     * @access private
     *
     * @see WP_Comments_List_Table
     */
    class WP_Post_Comments_List_Table extends \WP_Comments_List_Table
    {
        /**
         * @return array
         */
        protected function get_column_info()
        {
        }
        /**
         * @return array
         */
        protected function get_table_classes()
        {
        }
        /**
         * @param bool $output_empty
         */
        public function display($output_empty = \false)
        {
        }
        /**
         * @param bool $comment_status
         * @return int
         */
        public function get_per_page($comment_status = \false)
        {
        }
    }
    /**
     * WP_Importer base class
     */
    class WP_Importer
    {
        /**
         * Class Constructor
         */
        public function __construct()
        {
        }
        /**
         * Returns array with imported permalinks from WordPress database
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param string $importer_name
         * @param string $blog_id
         * @return array
         */
        public function get_imported_posts($importer_name, $blog_id)
        {
        }
        /**
         * Return count of imported permalinks from WordPress database
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param string $importer_name
         * @param string $blog_id
         * @return int
         */
        public function count_imported_posts($importer_name, $blog_id)
        {
        }
        /**
         * Set array with imported comments from WordPress database
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param string $blog_id
         * @return array
         */
        public function get_imported_comments($blog_id)
        {
        }
        /**
         * @param int $blog_id
         * @return int|void
         */
        public function set_blog($blog_id)
        {
        }
        /**
         * @param int $user_id
         * @return int|void
         */
        public function set_user($user_id)
        {
        }
        /**
         * Sort by strlen, longest string first
         *
         * @param string $a
         * @param string $b
         * @return int
         */
        public function cmpr_strlen($a, $b)
        {
        }
        /**
         * GET URL
         *
         * @param string $url
         * @param string $username
         * @param string $password
         * @param bool   $head
         * @return array
         */
        public function get_page($url, $username = '', $password = '', $head = \false)
        {
        }
        /**
         * Bump up the request timeout for http requests
         *
         * @param int $val
         * @return int
         */
        public function bump_request_timeout($val)
        {
        }
        /**
         * Check if user has exceeded disk quota
         *
         * @return bool
         */
        public function is_user_over_quota()
        {
        }
        /**
         * Replace newlines, tabs, and multiple spaces with a single space.
         *
         * @param string $text
         * @return string
         */
        public function min_whitespace($text)
        {
        }
        /**
         * Resets global variables that grow out of control during imports.
         *
         * @since 3.0.0
         *
         * @global wpdb  $wpdb       WordPress database abstraction object.
         * @global int[] $wp_actions
         */
        public function stop_the_insanity()
        {
        }
    }
    /**
     * List Table API: WP_Posts_List_Table class
     *
     * @package WordPress
     * @subpackage Administration
     * @since 3.1.0
     */
    /**
     * Core class used to implement displaying posts in a list table.
     *
     * @since 3.1.0
     * @access private
     *
     * @see WP_List_Table
     */
    class WP_Posts_List_Table extends \WP_List_Table
    {
        /**
         * Whether the items should be displayed hierarchically or linearly.
         *
         * @since 3.1.0
         * @var bool
         */
        protected $hierarchical_display;
        /**
         * Holds the number of pending comments for each post.
         *
         * @since 3.1.0
         * @var array
         */
        protected $comment_pending_count;
        /**
         * Holds the number of posts for this user.
         *
         * @since 3.1.0
         * @var int
         */
        private $user_posts_count;
        /**
         * Holds the number of posts which are sticky.
         *
         * @since 3.1.0
         * @var int
         */
        private $sticky_posts_count = 0;
        private $is_trash;
        /**
         * Current level for output.
         *
         * @since 4.3.0
         * @var int
         */
        protected $current_level = 0;
        /**
         * Constructor.
         *
         * @since 3.1.0
         *
         * @see WP_List_Table::__construct() for more information on default arguments.
         *
         * @global WP_Post_Type $post_type_object
         * @global wpdb         $wpdb             WordPress database abstraction object.
         *
         * @param array $args An associative array of arguments.
         */
        public function __construct($args = array())
        {
        }
        /**
         * Sets whether the table layout should be hierarchical or not.
         *
         * @since 4.2.0
         *
         * @param bool $display Whether the table layout should be hierarchical.
         */
        public function set_hierarchical_display($display)
        {
        }
        /**
         * @return bool
         */
        public function ajax_user_can()
        {
        }
        /**
         * @global string   $mode             List table view mode.
         * @global array    $avail_post_stati
         * @global WP_Query $wp_query         WordPress Query object.
         * @global int      $per_page
         */
        public function prepare_items()
        {
        }
        /**
         * @return bool
         */
        public function has_items()
        {
        }
        /**
         */
        public function no_items()
        {
        }
        /**
         * Determine if the current view is the "All" view.
         *
         * @since 4.2.0
         *
         * @return bool Whether the current view is the "All" view.
         */
        protected function is_base_request()
        {
        }
        /**
         * Helper to create links to edit.php with params.
         *
         * @since 4.4.0
         *
         * @param string[] $args      Associative array of URL parameters for the link.
         * @param string   $link_text Link text.
         * @param string   $css_class Optional. Class attribute. Default empty string.
         * @return string The formatted link string.
         */
        protected function get_edit_link($args, $link_text, $css_class = '')
        {
        }
        /**
         * @global array $locked_post_status This seems to be deprecated.
         * @global array $avail_post_stati
         * @return array
         */
        protected function get_views()
        {
        }
        /**
         * @return array
         */
        protected function get_bulk_actions()
        {
        }
        /**
         * Displays a categories drop-down for filtering on the Posts list table.
         *
         * @since 4.6.0
         *
         * @global int $cat Currently selected category.
         *
         * @param string $post_type Post type slug.
         */
        protected function categories_dropdown($post_type)
        {
        }
        /**
         * Displays a formats drop-down for filtering items.
         *
         * @since 5.2.0
         * @access protected
         *
         * @param string $post_type Post type slug.
         */
        protected function formats_dropdown($post_type)
        {
        }
        /**
         * @param string $which
         */
        protected function extra_tablenav($which)
        {
        }
        /**
         * @return string
         */
        public function current_action()
        {
        }
        /**
         * @global string $mode List table view mode.
         *
         * @return array
         */
        protected function get_table_classes()
        {
        }
        /**
         * @return array
         */
        public function get_columns()
        {
        }
        /**
         * @return array
         */
        protected function get_sortable_columns()
        {
        }
        /**
         * @global WP_Query $wp_query WordPress Query object.
         * @global int $per_page
         * @param array $posts
         * @param int   $level
         */
        public function display_rows($posts = array(), $level = 0)
        {
        }
        /**
         * @param array $posts
         * @param int   $level
         */
        private function _display_rows($posts, $level = 0)
        {
        }
        /**
         * @global wpdb    $wpdb WordPress database abstraction object.
         * @global WP_Post $post Global post object.
         * @param array $pages
         * @param int   $pagenum
         * @param int   $per_page
         */
        private function _display_rows_hierarchical($pages, $pagenum = 1, $per_page = 20)
        {
        }
        /**
         * Given a top level page ID, display the nested hierarchy of sub-pages
         * together with paging support
         *
         * @since 3.1.0 (Standalone function exists since 2.6.0)
         * @since 4.2.0 Added the `$to_display` parameter.
         *
         * @param array $children_pages
         * @param int   $count
         * @param int   $parent_page
         * @param int   $level
         * @param int   $pagenum
         * @param int   $per_page
         * @param array $to_display List of pages to be displayed. Passed by reference.
         */
        private function _page_rows(&$children_pages, &$count, $parent_page, $level, $pagenum, $per_page, &$to_display)
        {
        }
        /**
         * Handles the checkbox column output.
         *
         * @since 4.3.0
         * @since 5.9.0 Renamed `$post` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @param WP_Post $item The current WP_Post object.
         */
        public function column_cb($item)
        {
        }
        /**
         * @since 4.3.0
         *
         * @param WP_Post $post
         * @param string  $classes
         * @param string  $data
         * @param string  $primary
         */
        protected function _column_title($post, $classes, $data, $primary)
        {
        }
        /**
         * Handles the title column output.
         *
         * @since 4.3.0
         *
         * @global string $mode List table view mode.
         *
         * @param WP_Post $post The current WP_Post object.
         */
        public function column_title($post)
        {
        }
        /**
         * Handles the post date column output.
         *
         * @since 4.3.0
         *
         * @global string $mode List table view mode.
         *
         * @param WP_Post $post The current WP_Post object.
         */
        public function column_date($post)
        {
        }
        /**
         * Handles the comments column output.
         *
         * @since 4.3.0
         *
         * @param WP_Post $post The current WP_Post object.
         */
        public function column_comments($post)
        {
        }
        /**
         * Handles the post author column output.
         *
         * @since 4.3.0
         *
         * @param WP_Post $post The current WP_Post object.
         */
        public function column_author($post)
        {
        }
        /**
         * Handles the default column output.
         *
         * @since 4.3.0
         * @since 5.9.0 Renamed `$post` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @param WP_Post $item        The current WP_Post object.
         * @param string  $column_name The current column name.
         */
        public function column_default($item, $column_name)
        {
        }
        /**
         * @global WP_Post $post Global post object.
         *
         * @param int|WP_Post $post
         * @param int         $level
         */
        public function single_row($post, $level = 0)
        {
        }
        /**
         * Gets the name of the default primary column.
         *
         * @since 4.3.0
         *
         * @return string Name of the default primary column, in this case, 'title'.
         */
        protected function get_default_primary_column_name()
        {
        }
        /**
         * Generates and displays row action links.
         *
         * @since 4.3.0
         * @since 5.9.0 Renamed `$post` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @param WP_Post $item        Post being acted upon.
         * @param string  $column_name Current column name.
         * @param string  $primary     Primary column name.
         * @return string Row actions output for posts, or an empty string
         *                if the current column is not the primary column.
         */
        protected function handle_row_actions($item, $column_name, $primary)
        {
        }
        /**
         * Outputs the hidden row displayed when inline editing
         *
         * @since 3.1.0
         *
         * @global string $mode List table view mode.
         */
        public function inline_edit()
        {
        }
    }
    /**
     * List Table API: WP_Plugins_List_Table class
     *
     * @package WordPress
     * @subpackage Administration
     * @since 3.1.0
     */
    /**
     * Core class used to implement displaying installed plugins in a list table.
     *
     * @since 3.1.0
     * @access private
     *
     * @see WP_List_Table
     */
    class WP_Plugins_List_Table extends \WP_List_Table
    {
        /**
         * Whether to show the auto-updates UI.
         *
         * @since 5.5.0
         *
         * @var bool True if auto-updates UI is to be shown, false otherwise.
         */
        protected $show_autoupdates = \true;
        /**
         * Constructor.
         *
         * @since 3.1.0
         *
         * @see WP_List_Table::__construct() for more information on default arguments.
         *
         * @global string $status
         * @global int    $page
         *
         * @param array $args An associative array of arguments.
         */
        public function __construct($args = array())
        {
        }
        /**
         * @return array
         */
        protected function get_table_classes()
        {
        }
        /**
         * @return bool
         */
        public function ajax_user_can()
        {
        }
        /**
         * @global string $status
         * @global array  $plugins
         * @global array  $totals
         * @global int    $page
         * @global string $orderby
         * @global string $order
         * @global string $s
         */
        public function prepare_items()
        {
        }
        /**
         * @global string $s URL encoded search term.
         *
         * @param array $plugin
         * @return bool
         */
        public function _search_callback($plugin)
        {
        }
        /**
         * @global string $orderby
         * @global string $order
         * @param array $plugin_a
         * @param array $plugin_b
         * @return int
         */
        public function _order_callback($plugin_a, $plugin_b)
        {
        }
        /**
         * @global array $plugins
         */
        public function no_items()
        {
        }
        /**
         * Displays the search box.
         *
         * @since 4.6.0
         *
         * @param string $text     The 'submit' button label.
         * @param string $input_id ID attribute value for the search input field.
         */
        public function search_box($text, $input_id)
        {
        }
        /**
         * @global string $status
         * @return array
         */
        public function get_columns()
        {
        }
        /**
         * @return array
         */
        protected function get_sortable_columns()
        {
        }
        /**
         * @global array $totals
         * @global string $status
         * @return array
         */
        protected function get_views()
        {
        }
        /**
         * @global string $status
         * @return array
         */
        protected function get_bulk_actions()
        {
        }
        /**
         * @global string $status
         * @param string $which
         */
        public function bulk_actions($which = '')
        {
        }
        /**
         * @global string $status
         * @param string $which
         */
        protected function extra_tablenav($which)
        {
        }
        /**
         * @return string
         */
        public function current_action()
        {
        }
        /**
         * @global string $status
         */
        public function display_rows()
        {
        }
        /**
         * @global string $status
         * @global int $page
         * @global string $s
         * @global array $totals
         *
         * @param array $item
         */
        public function single_row($item)
        {
        }
        /**
         * Gets the name of the primary column for this specific list table.
         *
         * @since 4.3.0
         *
         * @return string Unalterable name for the primary column, in this case, 'name'.
         */
        protected function get_primary_column_name()
        {
        }
    }
    /**
     * Upgrade API: File_Upload_Upgrader class
     *
     * @package WordPress
     * @subpackage Upgrader
     * @since 4.6.0
     */
    /**
     * Core class used for handling file uploads.
     *
     * This class handles the upload process and passes it as if it's a local file
     * to the Upgrade/Installer functions.
     *
     * @since 2.8.0
     * @since 4.6.0 Moved to its own file from wp-admin/includes/class-wp-upgrader.php.
     */
    class File_Upload_Upgrader
    {
        /**
         * The full path to the file package.
         *
         * @since 2.8.0
         * @var string $package
         */
        public $package;
        /**
         * The name of the file.
         *
         * @since 2.8.0
         * @var string $filename
         */
        public $filename;
        /**
         * The ID of the attachment post for this file.
         *
         * @since 3.3.0
         * @var int $id
         */
        public $id = 0;
        /**
         * Construct the upgrader for a form.
         *
         * @since 2.8.0
         *
         * @param string $form      The name of the form the file was uploaded from.
         * @param string $urlholder The name of the `GET` parameter that holds the filename.
         */
        public function __construct($form, $urlholder)
        {
        }
        /**
         * Delete the attachment/uploaded file.
         *
         * @since 3.2.2
         *
         * @return bool Whether the cleanup was successful.
         */
        public function cleanup()
        {
        }
    }
    /**
     * Administration API: WP_Internal_Pointers class
     *
     * @package WordPress
     * @subpackage Administration
     * @since 4.4.0
     */
    /**
     * Core class used to implement an internal admin pointers API.
     *
     * @since 3.3.0
     */
    final class WP_Internal_Pointers
    {
        /**
         * Initializes the new feature pointers.
         *
         * @since 3.3.0
         *
         * All pointers can be disabled using the following:
         *     remove_action( 'admin_enqueue_scripts', array( 'WP_Internal_Pointers', 'enqueue_scripts' ) );
         *
         * Individual pointers (e.g. wp390_widgets) can be disabled using the following:
         *
         *    function yourprefix_remove_pointers() {
         *        remove_action(
         *            'admin_print_footer_scripts',
         *            array( 'WP_Internal_Pointers', 'pointer_wp390_widgets' )
         *        );
         *    }
         *    add_action( 'admin_enqueue_scripts', 'yourprefix_remove_pointers', 11 );
         *
         * @param string $hook_suffix The current admin page.
         */
        public static function enqueue_scripts($hook_suffix)
        {
        }
        /**
         * Print the pointer JavaScript data.
         *
         * @since 3.3.0
         *
         * @param string $pointer_id The pointer ID.
         * @param string $selector The HTML elements, on which the pointer should be attached.
         * @param array  $args Arguments to be passed to the pointer JS (see wp-pointer.js).
         */
        private static function print_js($pointer_id, $selector, $args)
        {
        }
        public static function pointer_wp330_toolbar()
        {
        }
        public static function pointer_wp330_media_uploader()
        {
        }
        public static function pointer_wp330_saving_widgets()
        {
        }
        public static function pointer_wp340_customize_current_theme_link()
        {
        }
        public static function pointer_wp340_choose_image_from_library()
        {
        }
        public static function pointer_wp350_media()
        {
        }
        public static function pointer_wp360_revisions()
        {
        }
        public static function pointer_wp360_locks()
        {
        }
        public static function pointer_wp390_widgets()
        {
        }
        public static function pointer_wp410_dfw()
        {
        }
        public static function pointer_wp496_privacy()
        {
        }
        /**
         * Prevents new users from seeing existing 'new feature' pointers.
         *
         * @since 3.3.0
         *
         * @param int $user_id User ID.
         */
        public static function dismiss_pointers_for_new_users($user_id)
        {
        }
    }
    /**
     * List Table API: WP_Users_List_Table class
     *
     * @package WordPress
     * @subpackage Administration
     * @since 3.1.0
     */
    /**
     * Core class used to implement displaying users in a list table.
     *
     * @since 3.1.0
     * @access private
     *
     * @see WP_List_Table
     */
    class WP_Users_List_Table extends \WP_List_Table
    {
        /**
         * Site ID to generate the Users list table for.
         *
         * @since 3.1.0
         * @var int
         */
        public $site_id;
        /**
         * Whether or not the current Users list table is for Multisite.
         *
         * @since 3.1.0
         * @var bool
         */
        public $is_site_users;
        /**
         * Constructor.
         *
         * @since 3.1.0
         *
         * @see WP_List_Table::__construct() for more information on default arguments.
         *
         * @param array $args An associative array of arguments.
         */
        public function __construct($args = array())
        {
        }
        /**
         * Check the current user's permissions.
         *
         * @since 3.1.0
         *
         * @return bool
         */
        public function ajax_user_can()
        {
        }
        /**
         * Prepare the users list for display.
         *
         * @since 3.1.0
         *
         * @global string $role
         * @global string $usersearch
         */
        public function prepare_items()
        {
        }
        /**
         * Output 'no users' message.
         *
         * @since 3.1.0
         */
        public function no_items()
        {
        }
        /**
         * Return an associative array listing all the views that can be used
         * with this table.
         *
         * Provides a list of roles and user count for that role for easy
         * Filtersing of the user table.
         *
         * @since 3.1.0
         *
         * @global string $role
         *
         * @return string[] An array of HTML links keyed by their view.
         */
        protected function get_views()
        {
        }
        /**
         * Retrieve an associative array of bulk actions available on this table.
         *
         * @since 3.1.0
         *
         * @return array Array of bulk action labels keyed by their action.
         */
        protected function get_bulk_actions()
        {
        }
        /**
         * Output the controls to allow user roles to be changed in bulk.
         *
         * @since 3.1.0
         *
         * @param string $which Whether this is being invoked above ("top")
         *                      or below the table ("bottom").
         */
        protected function extra_tablenav($which)
        {
        }
        /**
         * Capture the bulk action required, and return it.
         *
         * Overridden from the base class implementation to capture
         * the role change drop-down.
         *
         * @since 3.1.0
         *
         * @return string The bulk action required.
         */
        public function current_action()
        {
        }
        /**
         * Get a list of columns for the list table.
         *
         * @since 3.1.0
         *
         * @return string[] Array of column titles keyed by their column name.
         */
        public function get_columns()
        {
        }
        /**
         * Get a list of sortable columns for the list table.
         *
         * @since 3.1.0
         *
         * @return array Array of sortable columns.
         */
        protected function get_sortable_columns()
        {
        }
        /**
         * Generate the list table rows.
         *
         * @since 3.1.0
         */
        public function display_rows()
        {
        }
        /**
         * Generate HTML for a single row on the users.php admin panel.
         *
         * @since 3.1.0
         * @since 4.2.0 The `$style` parameter was deprecated.
         * @since 4.4.0 The `$role` parameter was deprecated.
         *
         * @param WP_User $user_object The current user object.
         * @param string  $style       Deprecated. Not used.
         * @param string  $role        Deprecated. Not used.
         * @param int     $numposts    Optional. Post count to display for this user. Defaults
         *                             to zero, as in, a new user has made zero posts.
         * @return string Output for a single row.
         */
        public function single_row($user_object, $style = '', $role = '', $numposts = 0)
        {
        }
        /**
         * Gets the name of the default primary column.
         *
         * @since 4.3.0
         *
         * @return string Name of the default primary column, in this case, 'username'.
         */
        protected function get_default_primary_column_name()
        {
        }
        /**
         * Returns an array of translated user role names for a given user object.
         *
         * @since 4.4.0
         *
         * @param WP_User $user_object The WP_User object.
         * @return string[] An array of user role names keyed by role.
         */
        protected function get_role_list($user_object)
        {
        }
    }
    /**
     * Upgrader API: Automatic_Upgrader_Skin class
     *
     * @package WordPress
     * @subpackage Upgrader
     * @since 4.6.0
     */
    /**
     * Upgrader Skin for Automatic WordPress Upgrades.
     *
     * This skin is designed to be used when no output is intended, all output
     * is captured and stored for the caller to process and log/email/discard.
     *
     * @since 3.7.0
     * @since 4.6.0 Moved to its own file from wp-admin/includes/class-wp-upgrader-skins.php.
     *
     * @see Bulk_Upgrader_Skin
     */
    class Automatic_Upgrader_Skin extends \WP_Upgrader_Skin
    {
        protected $messages = array();
        /**
         * Determines whether the upgrader needs FTP/SSH details in order to connect
         * to the filesystem.
         *
         * @since 3.7.0
         * @since 4.6.0 The `$context` parameter default changed from `false` to an empty string.
         *
         * @see request_filesystem_credentials()
         *
         * @param bool|WP_Error $error                        Optional. Whether the current request has failed to connect,
         *                                                    or an error object. Default false.
         * @param string        $context                      Optional. Full path to the directory that is tested
         *                                                    for being writable. Default empty.
         * @param bool          $allow_relaxed_file_ownership Optional. Whether to allow Group/World writable. Default false.
         * @return bool True on success, false on failure.
         */
        public function request_filesystem_credentials($error = \false, $context = '', $allow_relaxed_file_ownership = \false)
        {
        }
        /**
         * Retrieves the upgrade messages.
         *
         * @since 3.7.0
         *
         * @return string[] Messages during an upgrade.
         */
        public function get_upgrade_messages()
        {
        }
        /**
         * Stores a message about the upgrade.
         *
         * @since 3.7.0
         * @since 5.9.0 Renamed `$data` to `$feedback` for PHP 8 named parameter support.
         *
         * @param string|array|WP_Error $feedback Message data.
         * @param mixed                 ...$args  Optional text replacements.
         */
        public function feedback($feedback, ...$args)
        {
        }
        /**
         * Creates a new output buffer.
         *
         * @since 3.7.0
         */
        public function header()
        {
        }
        /**
         * Retrieves the buffered content, deletes the buffer, and processes the output.
         *
         * @since 3.7.0
         */
        public function footer()
        {
        }
    }
    /**
     * Upgrader API: WP_Ajax_Upgrader_Skin class
     *
     * @package WordPress
     * @subpackage Upgrader
     * @since 4.6.0
     */
    /**
     * Upgrader Skin for Ajax WordPress upgrades.
     *
     * This skin is designed to be used for Ajax updates.
     *
     * @since 4.6.0
     *
     * @see Automatic_Upgrader_Skin
     */
    class WP_Ajax_Upgrader_Skin extends \Automatic_Upgrader_Skin
    {
        /**
         * Holds the WP_Error object.
         *
         * @since 4.6.0
         *
         * @var null|WP_Error
         */
        protected $errors = \null;
        /**
         * Constructor.
         *
         * Sets up the WordPress Ajax upgrader skin.
         *
         * @since 4.6.0
         *
         * @see WP_Upgrader_Skin::__construct()
         *
         * @param array $args Optional. The WordPress Ajax upgrader skin arguments to
         *                    override default options. See WP_Upgrader_Skin::__construct().
         *                    Default empty array.
         */
        public function __construct($args = array())
        {
        }
        /**
         * Retrieves the list of errors.
         *
         * @since 4.6.0
         *
         * @return WP_Error Errors during an upgrade.
         */
        public function get_errors()
        {
        }
        /**
         * Retrieves a string for error messages.
         *
         * @since 4.6.0
         *
         * @return string Error messages during an upgrade.
         */
        public function get_error_messages()
        {
        }
        /**
         * Stores an error message about the upgrade.
         *
         * @since 4.6.0
         * @since 5.3.0 Formalized the existing `...$args` parameter by adding it
         *              to the function signature.
         *
         * @param string|WP_Error $errors  Errors.
         * @param mixed           ...$args Optional text replacements.
         */
        public function error($errors, ...$args)
        {
        }
        /**
         * Stores a message about the upgrade.
         *
         * @since 4.6.0
         * @since 5.3.0 Formalized the existing `...$args` parameter by adding it
         *              to the function signature.
         * @since 5.9.0 Renamed `$data` to `$feedback` for PHP 8 named parameter support.
         *
         * @param string|array|WP_Error $feedback Message data.
         * @param mixed                 ...$args  Optional text replacements.
         */
        public function feedback($feedback, ...$args)
        {
        }
    }
    /**
     * List Table API: WP_MS_Themes_List_Table class
     *
     * @package WordPress
     * @subpackage Administration
     * @since 3.1.0
     */
    /**
     * Core class used to implement displaying themes in a list table for the network admin.
     *
     * @since 3.1.0
     * @access private
     *
     * @see WP_List_Table
     */
    class WP_MS_Themes_List_Table extends \WP_List_Table
    {
        public $site_id;
        public $is_site_themes;
        private $has_items;
        /**
         * Whether to show the auto-updates UI.
         *
         * @since 5.5.0
         *
         * @var bool True if auto-updates UI is to be shown, false otherwise.
         */
        protected $show_autoupdates = \true;
        /**
         * Constructor.
         *
         * @since 3.1.0
         *
         * @see WP_List_Table::__construct() for more information on default arguments.
         *
         * @global string $status
         * @global int    $page
         *
         * @param array $args An associative array of arguments.
         */
        public function __construct($args = array())
        {
        }
        /**
         * @return array
         */
        protected function get_table_classes()
        {
        }
        /**
         * @return bool
         */
        public function ajax_user_can()
        {
        }
        /**
         * @global string $status
         * @global array $totals
         * @global int $page
         * @global string $orderby
         * @global string $order
         * @global string $s
         */
        public function prepare_items()
        {
        }
        /**
         * @param WP_Theme $theme
         * @return bool
         */
        public function _search_callback($theme)
        {
        }
        // Not used by any core columns.
        /**
         * @global string $orderby
         * @global string $order
         * @param array $theme_a
         * @param array $theme_b
         * @return int
         */
        public function _order_callback($theme_a, $theme_b)
        {
        }
        /**
         */
        public function no_items()
        {
        }
        /**
         * @return array
         */
        public function get_columns()
        {
        }
        /**
         * @return array
         */
        protected function get_sortable_columns()
        {
        }
        /**
         * Gets the name of the primary column.
         *
         * @since 4.3.0
         *
         * @return string Unalterable name of the primary column name, in this case, 'name'.
         */
        protected function get_primary_column_name()
        {
        }
        /**
         * @global array $totals
         * @global string $status
         * @return array
         */
        protected function get_views()
        {
        }
        /**
         * @global string $status
         *
         * @return array
         */
        protected function get_bulk_actions()
        {
        }
        /**
         */
        public function display_rows()
        {
        }
        /**
         * Handles the checkbox column output.
         *
         * @since 4.3.0
         * @since 5.9.0 Renamed `$theme` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @param WP_Theme $item The current WP_Theme object.
         */
        public function column_cb($item)
        {
        }
        /**
         * Handles the name column output.
         *
         * @since 4.3.0
         *
         * @global string $status
         * @global int    $page
         * @global string $s
         *
         * @param WP_Theme $theme The current WP_Theme object.
         */
        public function column_name($theme)
        {
        }
        /**
         * Handles the description column output.
         *
         * @since 4.3.0
         *
         * @global string $status
         * @global array  $totals
         *
         * @param WP_Theme $theme The current WP_Theme object.
         */
        public function column_description($theme)
        {
        }
        /**
         * Handles the auto-updates column output.
         *
         * @since 5.5.0
         *
         * @global string $status
         * @global int  $page
         *
         * @param WP_Theme $theme The current WP_Theme object.
         */
        public function column_autoupdates($theme)
        {
        }
        /**
         * Handles default column output.
         *
         * @since 4.3.0
         * @since 5.9.0 Renamed `$theme` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @param WP_Theme $item        The current WP_Theme object.
         * @param string   $column_name The current column name.
         */
        public function column_default($item, $column_name)
        {
        }
        /**
         * Handles the output for a single table row.
         *
         * @since 4.3.0
         *
         * @param WP_Theme $item The current WP_Theme object.
         */
        public function single_row_columns($item)
        {
        }
        /**
         * @global string $status
         * @global array  $totals
         *
         * @param WP_Theme $theme
         */
        public function single_row($theme)
        {
        }
    }
    /**
     * Upgrader API: Bulk_Plugin_Upgrader_Skin class
     *
     * @package WordPress
     * @subpackage Upgrader
     * @since 4.6.0
     */
    /**
     * Bulk Theme Upgrader Skin for WordPress Theme Upgrades.
     *
     * @since 3.0.0
     * @since 4.6.0 Moved to its own file from wp-admin/includes/class-wp-upgrader-skins.php.
     *
     * @see Bulk_Upgrader_Skin
     */
    class Bulk_Theme_Upgrader_Skin extends \Bulk_Upgrader_Skin
    {
        public $theme_info = array();
        // Theme_Upgrader::bulk_upgrade() will fill this in.
        public function add_strings()
        {
        }
        /**
         * @param string $title
         */
        public function before($title = '')
        {
        }
        /**
         * @param string $title
         */
        public function after($title = '')
        {
        }
        /**
         */
        public function bulk_footer()
        {
        }
    }
    /**
     * WordPress User Search class.
     *
     * @since 2.1.0
     * @deprecated 3.1.0 Use WP_User_Query
     */
    class WP_User_Search
    {
        /**
         * {@internal Missing Description}}
         *
         * @since 2.1.0
         * @access private
         * @var mixed
         */
        var $results;
        /**
         * {@internal Missing Description}}
         *
         * @since 2.1.0
         * @access private
         * @var string
         */
        var $search_term;
        /**
         * Page number.
         *
         * @since 2.1.0
         * @access private
         * @var int
         */
        var $page;
        /**
         * Role name that users have.
         *
         * @since 2.5.0
         * @access private
         * @var string
         */
        var $role;
        /**
         * Raw page number.
         *
         * @since 2.1.0
         * @access private
         * @var int|bool
         */
        var $raw_page;
        /**
         * Amount of users to display per page.
         *
         * @since 2.1.0
         * @access public
         * @var int
         */
        var $users_per_page = 50;
        /**
         * {@internal Missing Description}}
         *
         * @since 2.1.0
         * @access private
         * @var int
         */
        var $first_user;
        /**
         * {@internal Missing Description}}
         *
         * @since 2.1.0
         * @access private
         * @var int
         */
        var $last_user;
        /**
         * {@internal Missing Description}}
         *
         * @since 2.1.0
         * @access private
         * @var string
         */
        var $query_limit;
        /**
         * {@internal Missing Description}}
         *
         * @since 3.0.0
         * @access private
         * @var string
         */
        var $query_orderby;
        /**
         * {@internal Missing Description}}
         *
         * @since 3.0.0
         * @access private
         * @var string
         */
        var $query_from;
        /**
         * {@internal Missing Description}}
         *
         * @since 3.0.0
         * @access private
         * @var string
         */
        var $query_where;
        /**
         * {@internal Missing Description}}
         *
         * @since 2.1.0
         * @access private
         * @var int
         */
        var $total_users_for_query = 0;
        /**
         * {@internal Missing Description}}
         *
         * @since 2.1.0
         * @access private
         * @var bool
         */
        var $too_many_total_users = \false;
        /**
         * {@internal Missing Description}}
         *
         * @since 2.1.0
         * @access private
         * @var WP_Error
         */
        var $search_errors;
        /**
         * {@internal Missing Description}}
         *
         * @since 2.7.0
         * @access private
         * @var string
         */
        var $paging_text;
        /**
         * PHP5 Constructor - Sets up the object properties.
         *
         * @since 2.1.0
         *
         * @param string $search_term Search terms string.
         * @param int $page Optional. Page ID.
         * @param string $role Role name.
         * @return WP_User_Search
         */
        function __construct($search_term = '', $page = '', $role = '')
        {
        }
        /**
         * PHP4 Constructor - Sets up the object properties.
         *
         * @since 2.1.0
         *
         * @param string $search_term Search terms string.
         * @param int $page Optional. Page ID.
         * @param string $role Role name.
         * @return WP_User_Search
         */
        public function WP_User_Search($search_term = '', $page = '', $role = '')
        {
        }
        /**
         * Prepares the user search query (legacy).
         *
         * @since 2.1.0
         * @access public
         */
        public function prepare_query()
        {
        }
        /**
         * Executes the user search query.
         *
         * @since 2.1.0
         * @access public
         */
        public function query()
        {
        }
        /**
         * Prepares variables for use in templates.
         *
         * @since 2.1.0
         * @access public
         */
        function prepare_vars_for_template_usage()
        {
        }
        /**
         * Handles paging for the user search query.
         *
         * @since 2.1.0
         * @access public
         */
        public function do_paging()
        {
        }
        /**
         * Retrieves the user search query results.
         *
         * @since 2.1.0
         * @access public
         *
         * @return array
         */
        public function get_results()
        {
        }
        /**
         * Displaying paging text.
         *
         * @see do_paging() Builds paging text.
         *
         * @since 2.1.0
         * @access public
         */
        function page_links()
        {
        }
        /**
         * Whether paging is enabled.
         *
         * @see do_paging() Builds paging text.
         *
         * @since 2.1.0
         * @access public
         *
         * @return bool
         */
        function results_are_paged()
        {
        }
        /**
         * Whether there are search terms.
         *
         * @since 2.1.0
         * @access public
         *
         * @return bool
         */
        function is_search()
        {
        }
    }
    /**
     * Previous class for list table for privacy data export requests.
     *
     * @since 4.9.6
     * @deprecated 5.3.0
     */
    class WP_Privacy_Data_Export_Requests_Table extends \WP_Privacy_Data_Export_Requests_List_Table
    {
        function __construct($args)
        {
        }
    }
    /**
     * Previous class for list table for privacy data erasure requests.
     *
     * @since 4.9.6
     * @deprecated 5.3.0
     */
    class WP_Privacy_Data_Removal_Requests_Table extends \WP_Privacy_Data_Removal_Requests_List_Table
    {
        function __construct($args)
        {
        }
    }
    /**
     * The custom header image script.
     *
     * @package WordPress
     * @subpackage Administration
     */
    /**
     * The custom header image class.
     *
     * @since 2.1.0
     */
    class Custom_Image_Header
    {
        /**
         * Callback for administration header.
         *
         * @var callable
         * @since 2.1.0
         */
        public $admin_header_callback;
        /**
         * Callback for header div.
         *
         * @var callable
         * @since 3.0.0
         */
        public $admin_image_div_callback;
        /**
         * Holds default headers.
         *
         * @var array
         * @since 3.0.0
         */
        public $default_headers = array();
        /**
         * Used to trigger a success message when settings updated and set to true.
         *
         * @since 3.0.0
         * @var bool
         */
        private $updated;
        /**
         * Constructor - Register administration header callback.
         *
         * @since 2.1.0
         * @param callable $admin_header_callback
         * @param callable $admin_image_div_callback Optional custom image div output callback.
         */
        public function __construct($admin_header_callback, $admin_image_div_callback = '')
        {
        }
        /**
         * Set up the hooks for the Custom Header admin page.
         *
         * @since 2.1.0
         */
        public function init()
        {
        }
        /**
         * Adds contextual help.
         *
         * @since 3.0.0
         */
        public function help()
        {
        }
        /**
         * Get the current step.
         *
         * @since 2.6.0
         *
         * @return int Current step.
         */
        public function step()
        {
        }
        /**
         * Set up the enqueue for the JavaScript files.
         *
         * @since 2.1.0
         */
        public function js_includes()
        {
        }
        /**
         * Set up the enqueue for the CSS files
         *
         * @since 2.7.0
         */
        public function css_includes()
        {
        }
        /**
         * Execute custom header modification.
         *
         * @since 2.6.0
         */
        public function take_action()
        {
        }
        /**
         * Process the default headers
         *
         * @since 3.0.0
         *
         * @global array $_wp_default_headers
         */
        public function process_default_headers()
        {
        }
        /**
         * Display UI for selecting one of several default headers.
         *
         * Show the random image option if this theme has multiple header images.
         * Random image option is on by default if no header has been set.
         *
         * @since 3.0.0
         *
         * @param string $type The header type. One of 'default' (for the Uploaded Images control)
         *                     or 'uploaded' (for the Uploaded Images control).
         */
        public function show_header_selector($type = 'default')
        {
        }
        /**
         * Execute JavaScript depending on step.
         *
         * @since 2.1.0
         */
        public function js()
        {
        }
        /**
         * Display JavaScript based on Step 1 and 3.
         *
         * @since 2.6.0
         */
        public function js_1()
        {
        }
        /**
         * Display JavaScript based on Step 2.
         *
         * @since 2.6.0
         */
        public function js_2()
        {
        }
        /**
         * Display first step of custom header image page.
         *
         * @since 2.1.0
         */
        public function step_1()
        {
        }
        /**
         * Display second step of custom header image page.
         *
         * @since 2.1.0
         */
        public function step_2()
        {
        }
        /**
         * Upload the file to be cropped in the second step.
         *
         * @since 3.4.0
         */
        public function step_2_manage_upload()
        {
        }
        /**
         * Display third step of custom header image page.
         *
         * @since 2.1.0
         * @since 4.4.0 Switched to using wp_get_attachment_url() instead of the guid
         *              for retrieving the header image URL.
         */
        public function step_3()
        {
        }
        /**
         * Display last step of custom header image page.
         *
         * @since 2.1.0
         */
        public function finished()
        {
        }
        /**
         * Display the page based on the current step.
         *
         * @since 2.1.0
         */
        public function admin_page()
        {
        }
        /**
         * Unused since 3.5.0.
         *
         * @since 3.4.0
         *
         * @param array $form_fields
         * @return array $form_fields
         */
        public function attachment_fields_to_edit($form_fields)
        {
        }
        /**
         * Unused since 3.5.0.
         *
         * @since 3.4.0
         *
         * @param array $tabs
         * @return array $tabs
         */
        public function filter_upload_tabs($tabs)
        {
        }
        /**
         * Choose a header image, selected from existing uploaded and default headers,
         * or provide an array of uploaded header data (either new, or from media library).
         *
         * @since 3.4.0
         *
         * @param mixed $choice Which header image to select. Allows for values of 'random-default-image',
         *  for randomly cycling among the default images; 'random-uploaded-image', for randomly cycling
         *  among the uploaded images; the key of a default image registered for that theme; and
         *  the key of an image uploaded for that theme (the attachment ID of the image).
         *  Or an array of arguments: attachment_id, url, width, height. All are required.
         */
        public final function set_header_image($choice)
        {
        }
        /**
         * Remove a header image.
         *
         * @since 3.4.0
         */
        public final function remove_header_image()
        {
        }
        /**
         * Reset a header image to the default image for the theme.
         *
         * This method does not do anything if the theme does not have a default header image.
         *
         * @since 3.4.0
         */
        public final function reset_header_image()
        {
        }
        /**
         * Calculate width and height based on what the currently selected theme supports.
         *
         * @since 3.9.0
         *
         * @param array $dimensions
         * @return array dst_height and dst_width of header image.
         */
        public final function get_header_dimensions($dimensions)
        {
        }
        /**
         * Create an attachment 'object'.
         *
         * @since 3.9.0
         *
         * @param string $cropped              Cropped image URL.
         * @param int    $parent_attachment_id Attachment ID of parent image.
         * @return array An array with attachment object data.
         */
        public final function create_attachment_object($cropped, $parent_attachment_id)
        {
        }
        /**
         * Insert an attachment and its metadata.
         *
         * @since 3.9.0
         *
         * @param array  $attachment An array with attachment object data.
         * @param string $cropped    File path to cropped image.
         * @return int Attachment ID.
         */
        public final function insert_attachment($attachment, $cropped)
        {
        }
        /**
         * Gets attachment uploaded by Media Manager, crops it, then saves it as a
         * new object. Returns JSON-encoded object details.
         *
         * @since 3.9.0
         */
        public function ajax_header_crop()
        {
        }
        /**
         * Given an attachment ID for a header image, updates its "last used"
         * timestamp to now.
         *
         * Triggered when the user tries adds a new header image from the
         * Media Manager, even if s/he doesn't save that change.
         *
         * @since 3.9.0
         */
        public function ajax_header_add()
        {
        }
        /**
         * Given an attachment ID for a header image, unsets it as a user-uploaded
         * header image for the active theme.
         *
         * Triggered when the user clicks the overlay "X" button next to each image
         * choice in the Customizer's Header tool.
         *
         * @since 3.9.0
         */
        public function ajax_header_remove()
        {
        }
        /**
         * Updates the last-used postmeta on a header image attachment after saving a new header image via the Customizer.
         *
         * @since 3.9.0
         *
         * @param WP_Customize_Manager $wp_customize Customize manager.
         */
        public function customize_set_last_used($wp_customize)
        {
        }
        /**
         * Gets the details of default header images if defined.
         *
         * @since 3.9.0
         *
         * @return array Default header images.
         */
        public function get_default_header_images()
        {
        }
        /**
         * Gets the previously uploaded header images.
         *
         * @since 3.9.0
         *
         * @return array Uploaded header images.
         */
        public function get_uploaded_header_images()
        {
        }
        /**
         * Get the ID of a previous crop from the same base image.
         *
         * @since 4.9.0
         *
         * @param array $attachment An array with a cropped attachment object data.
         * @return int|false An attachment ID if one exists. False if none.
         */
        public function get_previous_crop($attachment)
        {
        }
    }
    /**
     * Navigation Menu API: Walker_Nav_Menu_Edit class
     *
     * @package WordPress
     * @subpackage Administration
     * @since 4.4.0
     */
    /**
     * Create HTML list of nav menu input items.
     *
     * @since 3.0.0
     *
     * @see Walker_Nav_Menu
     */
    class Walker_Nav_Menu_Edit extends \Walker_Nav_Menu
    {
        /**
         * Starts the list before the elements are added.
         *
         * @see Walker_Nav_Menu::start_lvl()
         *
         * @since 3.0.0
         *
         * @param string   $output Passed by reference.
         * @param int      $depth  Depth of menu item. Used for padding.
         * @param stdClass $args   Not used.
         */
        public function start_lvl(&$output, $depth = 0, $args = \null)
        {
        }
        /**
         * Ends the list of after the elements are added.
         *
         * @see Walker_Nav_Menu::end_lvl()
         *
         * @since 3.0.0
         *
         * @param string   $output Passed by reference.
         * @param int      $depth  Depth of menu item. Used for padding.
         * @param stdClass $args   Not used.
         */
        public function end_lvl(&$output, $depth = 0, $args = \null)
        {
        }
        /**
         * Start the element output.
         *
         * @see Walker_Nav_Menu::start_el()
         * @since 3.0.0
         * @since 5.9.0 Renamed `$item` to `$data_object` and `$id` to `$current_object_id`
         *              to match parent class for PHP 8 named parameter support.
         *
         * @global int $_wp_nav_menu_max_depth
         *
         * @param string   $output            Used to append additional content (passed by reference).
         * @param WP_Post  $data_object       Menu item data object.
         * @param int      $depth             Depth of menu item. Used for padding.
         * @param stdClass $args              Not used.
         * @param int      $current_object_id Optional. ID of the current menu item. Default 0.
         */
        public function start_el(&$output, $data_object, $depth = 0, $args = \null, $current_object_id = 0)
        {
        }
    }
    /**
     * Upgrader API: Plugin_Upgrader_Skin class
     *
     * @package WordPress
     * @subpackage Upgrader
     * @since 4.6.0
     */
    /**
     * Plugin Upgrader Skin for WordPress Plugin Upgrades.
     *
     * @since 2.8.0
     * @since 4.6.0 Moved to its own file from wp-admin/includes/class-wp-upgrader-skins.php.
     *
     * @see WP_Upgrader_Skin
     */
    class Plugin_Upgrader_Skin extends \WP_Upgrader_Skin
    {
        /**
         * Holds the plugin slug in the Plugin Directory.
         *
         * @since 2.8.0
         *
         * @var string
         */
        public $plugin = '';
        /**
         * Whether the plugin is active.
         *
         * @since 2.8.0
         *
         * @var bool
         */
        public $plugin_active = \false;
        /**
         * Whether the plugin is active for the entire network.
         *
         * @since 2.8.0
         *
         * @var bool
         */
        public $plugin_network_active = \false;
        /**
         * Constructor.
         *
         * Sets up the plugin upgrader skin.
         *
         * @since 2.8.0
         *
         * @param array $args Optional. The plugin upgrader skin arguments to
         *                    override default options. Default empty array.
         */
        public function __construct($args = array())
        {
        }
        /**
         * Action to perform following a single plugin update.
         *
         * @since 2.8.0
         */
        public function after()
        {
        }
    }
    /**
     * WordPress FTP Sockets Filesystem.
     *
     * @package WordPress
     * @subpackage Filesystem
     */
    /**
     * WordPress Filesystem Class for implementing FTP Sockets.
     *
     * @since 2.5.0
     *
     * @see WP_Filesystem_Base
     */
    class WP_Filesystem_ftpsockets extends \WP_Filesystem_Base
    {
        /**
         * @since 2.5.0
         * @var ftp
         */
        public $ftp;
        /**
         * Constructor.
         *
         * @since 2.5.0
         *
         * @param array $opt
         */
        public function __construct($opt = '')
        {
        }
        /**
         * Connects filesystem.
         *
         * @since 2.5.0
         *
         * @return bool True on success, false on failure.
         */
        public function connect()
        {
        }
        /**
         * Reads entire file into a string.
         *
         * @since 2.5.0
         *
         * @param string $file Name of the file to read.
         * @return string|false Read data on success, false if no temporary file could be opened,
         *                      or if the file couldn't be retrieved.
         */
        public function get_contents($file)
        {
        }
        /**
         * Reads entire file into an array.
         *
         * @since 2.5.0
         *
         * @param string $file Path to the file.
         * @return array|false File contents in an array on success, false on failure.
         */
        public function get_contents_array($file)
        {
        }
        /**
         * Writes a string to a file.
         *
         * @since 2.5.0
         *
         * @param string    $file     Remote path to the file where to write the data.
         * @param string    $contents The data to write.
         * @param int|false $mode     Optional. The file permissions as octal number, usually 0644.
         *                            Default false.
         * @return bool True on success, false on failure.
         */
        public function put_contents($file, $contents, $mode = \false)
        {
        }
        /**
         * Gets the current working directory.
         *
         * @since 2.5.0
         *
         * @return string|false The current working directory on success, false on failure.
         */
        public function cwd()
        {
        }
        /**
         * Changes current directory.
         *
         * @since 2.5.0
         *
         * @param string $dir The new current directory.
         * @return bool True on success, false on failure.
         */
        public function chdir($dir)
        {
        }
        /**
         * Changes filesystem permissions.
         *
         * @since 2.5.0
         *
         * @param string    $file      Path to the file.
         * @param int|false $mode      Optional. The permissions as octal number, usually 0644 for files,
         *                             0755 for directories. Default false.
         * @param bool      $recursive Optional. If set to true, changes file permissions recursively.
         *                             Default false.
         * @return bool True on success, false on failure.
         */
        public function chmod($file, $mode = \false, $recursive = \false)
        {
        }
        /**
         * Gets the file owner.
         *
         * @since 2.5.0
         *
         * @param string $file Path to the file.
         * @return string|false Username of the owner on success, false on failure.
         */
        public function owner($file)
        {
        }
        /**
         * Gets the permissions of the specified file or filepath in their octal format.
         *
         * @since 2.5.0
         *
         * @param string $file Path to the file.
         * @return string Mode of the file (the last 3 digits).
         */
        public function getchmod($file)
        {
        }
        /**
         * Gets the file's group.
         *
         * @since 2.5.0
         *
         * @param string $file Path to the file.
         * @return string|false The group on success, false on failure.
         */
        public function group($file)
        {
        }
        /**
         * Copies a file.
         *
         * @since 2.5.0
         *
         * @param string    $source      Path to the source file.
         * @param string    $destination Path to the destination file.
         * @param bool      $overwrite   Optional. Whether to overwrite the destination file if it exists.
         *                               Default false.
         * @param int|false $mode        Optional. The permissions as octal number, usually 0644 for files,
         *                               0755 for dirs. Default false.
         * @return bool True on success, false on failure.
         */
        public function copy($source, $destination, $overwrite = \false, $mode = \false)
        {
        }
        /**
         * Moves a file.
         *
         * @since 2.5.0
         *
         * @param string $source      Path to the source file.
         * @param string $destination Path to the destination file.
         * @param bool   $overwrite   Optional. Whether to overwrite the destination file if it exists.
         *                            Default false.
         * @return bool True on success, false on failure.
         */
        public function move($source, $destination, $overwrite = \false)
        {
        }
        /**
         * Deletes a file or directory.
         *
         * @since 2.5.0
         *
         * @param string       $file      Path to the file or directory.
         * @param bool         $recursive Optional. If set to true, deletes files and folders recursively.
         *                                Default false.
         * @param string|false $type      Type of resource. 'f' for file, 'd' for directory.
         *                                Default false.
         * @return bool True on success, false on failure.
         */
        public function delete($file, $recursive = \false, $type = \false)
        {
        }
        /**
         * Checks if a file or directory exists.
         *
         * @since 2.5.0
         *
         * @param string $file Path to file or directory.
         * @return bool Whether $file exists or not.
         */
        public function exists($file)
        {
        }
        /**
         * Checks if resource is a file.
         *
         * @since 2.5.0
         *
         * @param string $file File path.
         * @return bool Whether $file is a file.
         */
        public function is_file($file)
        {
        }
        /**
         * Checks if resource is a directory.
         *
         * @since 2.5.0
         *
         * @param string $path Directory path.
         * @return bool Whether $path is a directory.
         */
        public function is_dir($path)
        {
        }
        /**
         * Checks if a file is readable.
         *
         * @since 2.5.0
         *
         * @param string $file Path to file.
         * @return bool Whether $file is readable.
         */
        public function is_readable($file)
        {
        }
        /**
         * Checks if a file or directory is writable.
         *
         * @since 2.5.0
         *
         * @param string $file Path to file or directory.
         * @return bool Whether $file is writable.
         */
        public function is_writable($file)
        {
        }
        /**
         * Gets the file's last access time.
         *
         * @since 2.5.0
         *
         * @param string $file Path to file.
         * @return int|false Unix timestamp representing last access time, false on failure.
         */
        public function atime($file)
        {
        }
        /**
         * Gets the file modification time.
         *
         * @since 2.5.0
         *
         * @param string $file Path to file.
         * @return int|false Unix timestamp representing modification time, false on failure.
         */
        public function mtime($file)
        {
        }
        /**
         * Gets the file size (in bytes).
         *
         * @since 2.5.0
         *
         * @param string $file Path to file.
         * @return int|false Size of the file in bytes on success, false on failure.
         */
        public function size($file)
        {
        }
        /**
         * Sets the access and modification times of a file.
         *
         * Note: If $file doesn't exist, it will be created.
         *
         * @since 2.5.0
         *
         * @param string $file  Path to file.
         * @param int    $time  Optional. Modified time to set for file.
         *                      Default 0.
         * @param int    $atime Optional. Access time to set for file.
         *                      Default 0.
         * @return bool True on success, false on failure.
         */
        public function touch($file, $time = 0, $atime = 0)
        {
        }
        /**
         * Creates a directory.
         *
         * @since 2.5.0
         *
         * @param string           $path  Path for new directory.
         * @param int|false        $chmod Optional. The permissions as octal number (or false to skip chmod).
         *                                Default false.
         * @param string|int|false $chown Optional. A user name or number (or false to skip chown).
         *                                Default false.
         * @param string|int|false $chgrp Optional. A group name or number (or false to skip chgrp).
         *                                Default false.
         * @return bool True on success, false on failure.
         */
        public function mkdir($path, $chmod = \false, $chown = \false, $chgrp = \false)
        {
        }
        /**
         * Deletes a directory.
         *
         * @since 2.5.0
         *
         * @param string $path      Path to directory.
         * @param bool   $recursive Optional. Whether to recursively remove files/directories.
         *                          Default false.
         * @return bool True on success, false on failure.
         */
        public function rmdir($path, $recursive = \false)
        {
        }
        /**
         * Gets details for files in a directory or a specific file.
         *
         * @since 2.5.0
         *
         * @param string $path           Path to directory or file.
         * @param bool   $include_hidden Optional. Whether to include details of hidden ("." prefixed) files.
         *                               Default true.
         * @param bool   $recursive      Optional. Whether to recursively include file details in nested directories.
         *                               Default false.
         * @return array|false {
         *     Array of files. False if unable to list directory contents.
         *
         *     @type string $name        Name of the file or directory.
         *     @type string $perms       *nix representation of permissions.
         *     @type string $permsn      Octal representation of permissions.
         *     @type string $owner       Owner name or ID.
         *     @type int    $size        Size of file in bytes.
         *     @type int    $lastmodunix Last modified unix timestamp.
         *     @type mixed  $lastmod     Last modified month (3 letter) and day (without leading 0).
         *     @type int    $time        Last modified time.
         *     @type string $type        Type of resource. 'f' for file, 'd' for directory.
         *     @type mixed  $files       If a directory and `$recursive` is true, contains another array of files.
         * }
         */
        public function dirlist($path = '.', $include_hidden = \true, $recursive = \false)
        {
        }
        /**
         * Destructor.
         *
         * @since 2.5.0
         */
        public function __destruct()
        {
        }
    }
    /**
     * Upgrade API: Plugin_Upgrader class
     *
     * @package WordPress
     * @subpackage Upgrader
     * @since 4.6.0
     */
    /**
     * Core class used for upgrading/installing plugins.
     *
     * It is designed to upgrade/install plugins from a local zip, remote zip URL,
     * or uploaded zip file.
     *
     * @since 2.8.0
     * @since 4.6.0 Moved to its own file from wp-admin/includes/class-wp-upgrader.php.
     *
     * @see WP_Upgrader
     */
    class Plugin_Upgrader extends \WP_Upgrader
    {
        /**
         * Plugin upgrade result.
         *
         * @since 2.8.0
         * @var array|WP_Error $result
         *
         * @see WP_Upgrader::$result
         */
        public $result;
        /**
         * Whether a bulk upgrade/installation is being performed.
         *
         * @since 2.9.0
         * @var bool $bulk
         */
        public $bulk = \false;
        /**
         * New plugin info.
         *
         * @since 5.5.0
         * @var array $new_plugin_data
         *
         * @see check_package()
         */
        public $new_plugin_data = array();
        /**
         * Initialize the upgrade strings.
         *
         * @since 2.8.0
         */
        public function upgrade_strings()
        {
        }
        /**
         * Initialize the installation strings.
         *
         * @since 2.8.0
         */
        public function install_strings()
        {
        }
        /**
         * Install a plugin package.
         *
         * @since 2.8.0
         * @since 3.7.0 The `$args` parameter was added, making clearing the plugin update cache optional.
         *
         * @param string $package The full local path or URI of the package.
         * @param array  $args {
         *     Optional. Other arguments for installing a plugin package. Default empty array.
         *
         *     @type bool $clear_update_cache Whether to clear the plugin updates cache if successful.
         *                                    Default true.
         * }
         * @return bool|WP_Error True if the installation was successful, false or a WP_Error otherwise.
         */
        public function install($package, $args = array())
        {
        }
        /**
         * Upgrade a plugin.
         *
         * @since 2.8.0
         * @since 3.7.0 The `$args` parameter was added, making clearing the plugin update cache optional.
         *
         * @param string $plugin Path to the plugin file relative to the plugins directory.
         * @param array  $args {
         *     Optional. Other arguments for upgrading a plugin package. Default empty array.
         *
         *     @type bool $clear_update_cache Whether to clear the plugin updates cache if successful.
         *                                    Default true.
         * }
         * @return bool|WP_Error True if the upgrade was successful, false or a WP_Error object otherwise.
         */
        public function upgrade($plugin, $args = array())
        {
        }
        /**
         * Bulk upgrade several plugins at once.
         *
         * @since 2.8.0
         * @since 3.7.0 The `$args` parameter was added, making clearing the plugin update cache optional.
         *
         * @param string[] $plugins Array of paths to plugin files relative to the plugins directory.
         * @param array    $args {
         *     Optional. Other arguments for upgrading several plugins at once.
         *
         *     @type bool $clear_update_cache Whether to clear the plugin updates cache if successful. Default true.
         * }
         * @return array|false An array of results indexed by plugin file, or false if unable to connect to the filesystem.
         */
        public function bulk_upgrade($plugins, $args = array())
        {
        }
        /**
         * Checks that the source package contains a valid plugin.
         *
         * Hooked to the {@see 'upgrader_source_selection'} filter by Plugin_Upgrader::install().
         *
         * @since 3.3.0
         *
         * @global WP_Filesystem_Base $wp_filesystem WordPress filesystem subclass.
         * @global string             $wp_version    The WordPress version string.
         *
         * @param string $source The path to the downloaded package source.
         * @return string|WP_Error The source as passed, or a WP_Error object on failure.
         */
        public function check_package($source)
        {
        }
        /**
         * Retrieve the path to the file that contains the plugin info.
         *
         * This isn't used internally in the class, but is called by the skins.
         *
         * @since 2.8.0
         *
         * @return string|false The full path to the main plugin file, or false.
         */
        public function plugin_info()
        {
        }
        /**
         * Deactivates a plugin before it is upgraded.
         *
         * Hooked to the {@see 'upgrader_pre_install'} filter by Plugin_Upgrader::upgrade().
         *
         * @since 2.8.0
         * @since 4.1.0 Added a return value.
         *
         * @param bool|WP_Error $response The installation response before the installation has started.
         * @param array         $plugin   Plugin package arguments.
         * @return bool|WP_Error The original `$response` parameter or WP_Error.
         */
        public function deactivate_plugin_before_upgrade($response, $plugin)
        {
        }
        /**
         * Turns on maintenance mode before attempting to background update an active plugin.
         *
         * Hooked to the {@see 'upgrader_pre_install'} filter by Plugin_Upgrader::upgrade().
         *
         * @since 5.4.0
         *
         * @param bool|WP_Error $response The installation response before the installation has started.
         * @param array         $plugin   Plugin package arguments.
         * @return bool|WP_Error The original `$response` parameter or WP_Error.
         */
        public function active_before($response, $plugin)
        {
        }
        /**
         * Turns off maintenance mode after upgrading an active plugin.
         *
         * Hooked to the {@see 'upgrader_post_install'} filter by Plugin_Upgrader::upgrade().
         *
         * @since 5.4.0
         *
         * @param bool|WP_Error $response The installation response after the installation has finished.
         * @param array         $plugin   Plugin package arguments.
         * @return bool|WP_Error The original `$response` parameter or WP_Error.
         */
        public function active_after($response, $plugin)
        {
        }
        /**
         * Deletes the old plugin during an upgrade.
         *
         * Hooked to the {@see 'upgrader_clear_destination'} filter by
         * Plugin_Upgrader::upgrade() and Plugin_Upgrader::bulk_upgrade().
         *
         * @since 2.8.0
         *
         * @global WP_Filesystem_Base $wp_filesystem WordPress filesystem subclass.
         *
         * @param bool|WP_Error $removed            Whether the destination was cleared.
         *                                          True on success, WP_Error on failure.
         * @param string        $local_destination  The local package destination.
         * @param string        $remote_destination The remote package destination.
         * @param array         $plugin             Extra arguments passed to hooked filters.
         * @return bool|WP_Error
         */
        public function delete_old_plugin($removed, $local_destination, $remote_destination, $plugin)
        {
        }
    }
    /**
     * Upgrade API: Core_Upgrader class
     *
     * @package WordPress
     * @subpackage Upgrader
     * @since 4.6.0
     */
    /**
     * Core class used for updating core.
     *
     * It allows for WordPress to upgrade itself in combination with
     * the wp-admin/includes/update-core.php file.
     *
     * @since 2.8.0
     * @since 4.6.0 Moved to its own file from wp-admin/includes/class-wp-upgrader.php.
     *
     * @see WP_Upgrader
     */
    class Core_Upgrader extends \WP_Upgrader
    {
        /**
         * Initialize the upgrade strings.
         *
         * @since 2.8.0
         */
        public function upgrade_strings()
        {
        }
        /**
         * Upgrade WordPress core.
         *
         * @since 2.8.0
         *
         * @global WP_Filesystem_Base $wp_filesystem                WordPress filesystem subclass.
         * @global callable           $_wp_filesystem_direct_method
         *
         * @param object $current Response object for whether WordPress is current.
         * @param array  $args {
         *     Optional. Arguments for upgrading WordPress core. Default empty array.
         *
         *     @type bool $pre_check_md5    Whether to check the file checksums before
         *                                  attempting the upgrade. Default true.
         *     @type bool $attempt_rollback Whether to attempt to rollback the chances if
         *                                  there is a problem. Default false.
         *     @type bool $do_rollback      Whether to perform this "upgrade" as a rollback.
         *                                  Default false.
         * }
         * @return string|false|WP_Error New WordPress version on success, false or WP_Error on failure.
         */
        public function upgrade($current, $args = array())
        {
        }
        /**
         * Determines if this WordPress Core version should update to an offered version or not.
         *
         * @since 3.7.0
         *
         * @param string $offered_ver The offered version, of the format x.y.z.
         * @return bool True if we should update to the offered version, otherwise false.
         */
        public static function should_update_to_version($offered_ver)
        {
        }
        /**
         * Compare the disk file checksums against the expected checksums.
         *
         * @since 3.7.0
         *
         * @global string $wp_version       The WordPress version string.
         * @global string $wp_local_package Locale code of the package.
         *
         * @return bool True if the checksums match, otherwise false.
         */
        public function check_files()
        {
        }
    }
    /**
     * Administration: Community Events class.
     *
     * @package WordPress
     * @subpackage Administration
     * @since 4.8.0
     */
    /**
     * Class WP_Community_Events.
     *
     * A client for api.wordpress.org/events.
     *
     * @since 4.8.0
     */
    class WP_Community_Events
    {
        /**
         * ID for a WordPress user account.
         *
         * @since 4.8.0
         *
         * @var int
         */
        protected $user_id = 0;
        /**
         * Stores location data for the user.
         *
         * @since 4.8.0
         *
         * @var false|array
         */
        protected $user_location = \false;
        /**
         * Constructor for WP_Community_Events.
         *
         * @since 4.8.0
         *
         * @param int        $user_id       WP user ID.
         * @param false|array $user_location {
         *     Stored location data for the user. false to pass no location.
         *
         *     @type string $description The name of the location
         *     @type string $latitude    The latitude in decimal degrees notation, without the degree
         *                               symbol. e.g.: 47.615200.
         *     @type string $longitude   The longitude in decimal degrees notation, without the degree
         *                               symbol. e.g.: -122.341100.
         *     @type string $country     The ISO 3166-1 alpha-2 country code. e.g.: BR
         * }
         */
        public function __construct($user_id, $user_location = \false)
        {
        }
        /**
         * Gets data about events near a particular location.
         *
         * Cached events will be immediately returned if the `user_location` property
         * is set for the current user, and cached events exist for that location.
         *
         * Otherwise, this method sends a request to the w.org Events API with location
         * data. The API will send back a recognized location based on the data, along
         * with nearby events.
         *
         * The browser's request for events is proxied with this method, rather
         * than having the browser make the request directly to api.wordpress.org,
         * because it allows results to be cached server-side and shared with other
         * users and sites in the network. This makes the process more efficient,
         * since increasing the number of visits that get cached data means users
         * don't have to wait as often; if the user's browser made the request
         * directly, it would also need to make a second request to WP in order to
         * pass the data for caching. Having WP make the request also introduces
         * the opportunity to anonymize the IP before sending it to w.org, which
         * mitigates possible privacy concerns.
         *
         * @since 4.8.0
         * @since 5.5.2 Response no longer contains formatted date field. They're added
         *              in `wp.communityEvents.populateDynamicEventFields()` now.
         *
         * @param string $location_search Optional. City name to help determine the location.
         *                                e.g., "Seattle". Default empty string.
         * @param string $timezone        Optional. Timezone to help determine the location.
         *                                Default empty string.
         * @return array|WP_Error A WP_Error on failure; an array with location and events on
         *                        success.
         */
        public function get_events($location_search = '', $timezone = '')
        {
        }
        /**
         * Builds an array of args to use in an HTTP request to the w.org Events API.
         *
         * @since 4.8.0
         *
         * @param string $search   Optional. City search string. Default empty string.
         * @param string $timezone Optional. Timezone string. Default empty string.
         * @return array The request args.
         */
        protected function get_request_args($search = '', $timezone = '')
        {
        }
        /**
         * Determines the user's actual IP address and attempts to partially
         * anonymize an IP address by converting it to a network ID.
         *
         * Geolocating the network ID usually returns a similar location as the
         * actual IP, but provides some privacy for the user.
         *
         * $_SERVER['REMOTE_ADDR'] cannot be used in all cases, such as when the user
         * is making their request through a proxy, or when the web server is behind
         * a proxy. In those cases, $_SERVER['REMOTE_ADDR'] is set to the proxy address rather
         * than the user's actual address.
         *
         * Modified from https://stackoverflow.com/a/2031935/450127, MIT license.
         * Modified from https://github.com/geertw/php-ip-anonymizer, MIT license.
         *
         * SECURITY WARNING: This function is _NOT_ intended to be used in
         * circumstances where the authenticity of the IP address matters. This does
         * _NOT_ guarantee that the returned address is valid or accurate, and it can
         * be easily spoofed.
         *
         * @since 4.8.0
         *
         * @return string|false The anonymized address on success; the given address
         *                      or false on failure.
         */
        public static function get_unsafe_client_ip()
        {
        }
        /**
         * Test if two pairs of latitude/longitude coordinates match each other.
         *
         * @since 4.8.0
         *
         * @param array $a The first pair, with indexes 'latitude' and 'longitude'.
         * @param array $b The second pair, with indexes 'latitude' and 'longitude'.
         * @return bool True if they match, false if they don't.
         */
        protected function coordinates_match($a, $b)
        {
        }
        /**
         * Generates a transient key based on user location.
         *
         * This could be reduced to a one-liner in the calling functions, but it's
         * intentionally a separate function because it's called from multiple
         * functions, and having it abstracted keeps the logic consistent and DRY,
         * which is less prone to errors.
         *
         * @since 4.8.0
         *
         * @param array $location Should contain 'latitude' and 'longitude' indexes.
         * @return string|false Transient key on success, false on failure.
         */
        protected function get_events_transient_key($location)
        {
        }
        /**
         * Caches an array of events data from the Events API.
         *
         * @since 4.8.0
         *
         * @param array     $events     Response body from the API request.
         * @param int|false $expiration Optional. Amount of time to cache the events. Defaults to false.
         * @return bool true if events were cached; false if not.
         */
        protected function cache_events($events, $expiration = \false)
        {
        }
        /**
         * Gets cached events.
         *
         * @since 4.8.0
         * @since 5.5.2 Response no longer contains formatted date field. They're added
         *              in `wp.communityEvents.populateDynamicEventFields()` now.
         *
         * @return array|false An array containing `location` and `events` items
         *                     on success, false on failure.
         */
        public function get_cached_events()
        {
        }
        /**
         * Adds formatted date and time items for each event in an API response.
         *
         * This has to be called after the data is pulled from the cache, because
         * the cached events are shared by all users. If it was called before storing
         * the cache, then all users would see the events in the localized data/time
         * of the user who triggered the cache refresh, rather than their own.
         *
         * @since 4.8.0
         * @deprecated 5.6.0 No longer used in core.
         *
         * @param array $response_body The response which contains the events.
         * @return array The response with dates and times formatted.
         */
        protected function format_event_data_time($response_body)
        {
        }
        /**
         * Prepares the event list for presentation.
         *
         * Discards expired events, and makes WordCamps "sticky." Attendees need more
         * advanced notice about WordCamps than they do for meetups, so camps should
         * appear in the list sooner. If a WordCamp is coming up, the API will "stick"
         * it in the response, even if it wouldn't otherwise appear. When that happens,
         * the event will be at the end of the list, and will need to be moved into a
         * higher position, so that it doesn't get trimmed off.
         *
         * @since 4.8.0
         * @since 4.9.7 Stick a WordCamp to the final list.
         * @since 5.5.2 Accepts and returns only the events, rather than an entire HTTP response.
         * @since 6.0.0 Decode HTML entities from the event title.
         *
         * @param array $events The events that will be prepared.
         * @return array The response body with events trimmed.
         */
        protected function trim_events(array $events)
        {
        }
        /**
         * Logs responses to Events API requests.
         *
         * @since 4.8.0
         * @deprecated 4.9.0 Use a plugin instead. See #41217 for an example.
         *
         * @param string $message A description of what occurred.
         * @param array  $details Details that provide more context for the
         *                        log entry.
         */
        protected function maybe_log_events_response($message, $details)
        {
        }
    }
    /**
     * HTTP API: WP_Http_Curl class
     *
     * @package WordPress
     * @subpackage HTTP
     * @since 4.4.0
     */
    /**
     * Core class used to integrate Curl as an HTTP transport.
     *
     * HTTP request method uses Curl extension to retrieve the url.
     *
     * Requires the Curl extension to be installed.
     *
     * @since 2.7.0
     */
    class WP_Http_Curl
    {
        /**
         * Temporary header storage for during requests.
         *
         * @since 3.2.0
         * @var string
         */
        private $headers = '';
        /**
         * Temporary body storage for during requests.
         *
         * @since 3.6.0
         * @var string
         */
        private $body = '';
        /**
         * The maximum amount of data to receive from the remote server.
         *
         * @since 3.6.0
         * @var int|false
         */
        private $max_body_length = \false;
        /**
         * The file resource used for streaming to file.
         *
         * @since 3.6.0
         * @var resource|false
         */
        private $stream_handle = \false;
        /**
         * The total bytes written in the current request.
         *
         * @since 4.1.0
         * @var int
         */
        private $bytes_written_total = 0;
        /**
         * Send a HTTP request to a URI using cURL extension.
         *
         * @since 2.7.0
         *
         * @param string       $url  The request URL.
         * @param string|array $args Optional. Override the defaults.
         * @return array|WP_Error Array containing 'headers', 'body', 'response', 'cookies', 'filename'. A WP_Error instance upon error
         */
        public function request($url, $args = array())
        {
        }
        /**
         * Grabs the headers of the cURL request.
         *
         * Each header is sent individually to this callback, so we append to the `$header` property
         * for temporary storage
         *
         * @since 3.2.0
         *
         * @param resource $handle  cURL handle.
         * @param string   $headers cURL request headers.
         * @return int Length of the request headers.
         */
        private function stream_headers($handle, $headers)
        {
        }
        /**
         * Grabs the body of the cURL request.
         *
         * The contents of the document are passed in chunks, so we append to the `$body`
         * property for temporary storage. Returning a length shorter than the length of
         * `$data` passed in will cause cURL to abort the request with `CURLE_WRITE_ERROR`.
         *
         * @since 3.6.0
         *
         * @param resource $handle  cURL handle.
         * @param string   $data    cURL request body.
         * @return int Total bytes of data written.
         */
        private function stream_body($handle, $data)
        {
        }
        /**
         * Determines whether this class can be used for retrieving a URL.
         *
         * @since 2.7.0
         *
         * @param array $args Optional. Array of request arguments. Default empty array.
         * @return bool False means this class can not be used, true means it can.
         */
        public static function test($args = array())
        {
        }
    }
    /**
     * API for easily embedding rich media such as videos and images into content.
     *
     * @package WordPress
     * @subpackage Embed
     * @since 2.9.0
     */
    class WP_Embed
    {
        public $handlers = array();
        public $post_ID;
        public $usecache = \true;
        public $linkifunknown = \true;
        public $last_attr = array();
        public $last_url = '';
        /**
         * When a URL cannot be embedded, return false instead of returning a link
         * or the URL.
         *
         * Bypasses the {@see 'embed_maybe_make_link'} filter.
         *
         * @var bool
         */
        public $return_false_on_fail = \false;
        /**
         * Constructor
         */
        public function __construct()
        {
        }
        /**
         * Processes the [embed] shortcode.
         *
         * Since the [embed] shortcode needs to be run earlier than other shortcodes,
         * this function removes all existing shortcodes, registers the [embed] shortcode,
         * calls do_shortcode(), and then re-registers the old shortcodes.
         *
         * @global array $shortcode_tags
         *
         * @param string $content Content to parse.
         * @return string Content with shortcode parsed.
         */
        public function run_shortcode($content)
        {
        }
        /**
         * If a post/page was saved, then output JavaScript to make
         * an Ajax request that will call WP_Embed::cache_oembed().
         */
        public function maybe_run_ajax_cache()
        {
        }
        /**
         * Registers an embed handler.
         *
         * Do not use this function directly, use wp_embed_register_handler() instead.
         *
         * This function should probably also only be used for sites that do not support oEmbed.
         *
         * @param string   $id       An internal ID/name for the handler. Needs to be unique.
         * @param string   $regex    The regex that will be used to see if this handler should be used for a URL.
         * @param callable $callback The callback function that will be called if the regex is matched.
         * @param int      $priority Optional. Used to specify the order in which the registered handlers will be tested.
         *                           Lower numbers correspond with earlier testing, and handlers with the same priority are
         *                           tested in the order in which they were added to the action. Default 10.
         */
        public function register_handler($id, $regex, $callback, $priority = 10)
        {
        }
        /**
         * Unregisters a previously-registered embed handler.
         *
         * Do not use this function directly, use wp_embed_unregister_handler() instead.
         *
         * @param string $id       The handler ID that should be removed.
         * @param int    $priority Optional. The priority of the handler to be removed (default: 10).
         */
        public function unregister_handler($id, $priority = 10)
        {
        }
        /**
         * Returns embed HTML for a given URL from embed handlers.
         *
         * Attempts to convert a URL into embed HTML by checking the URL
         * against the regex of the registered embed handlers.
         *
         * @since 5.5.0
         *
         * @param array  $attr {
         *     Shortcode attributes. Optional.
         *
         *     @type int $width  Width of the embed in pixels.
         *     @type int $height Height of the embed in pixels.
         * }
         * @param string $url The URL attempting to be embedded.
         * @return string|false The embed HTML on success, false otherwise.
         */
        public function get_embed_handler_html($attr, $url)
        {
        }
        /**
         * The do_shortcode() callback function.
         *
         * Attempts to convert a URL into embed HTML. Starts by checking the URL against the regex of
         * the registered embed handlers. If none of the regex matches and it's enabled, then the URL
         * will be given to the WP_oEmbed class.
         *
         * @param array  $attr {
         *     Shortcode attributes. Optional.
         *
         *     @type int $width  Width of the embed in pixels.
         *     @type int $height Height of the embed in pixels.
         * }
         * @param string $url The URL attempting to be embedded.
         * @return string|false The embed HTML on success, otherwise the original URL.
         *                      `->maybe_make_link()` can return false on failure.
         */
        public function shortcode($attr, $url = '')
        {
        }
        /**
         * Deletes all oEmbed caches. Unused by core as of 4.0.0.
         *
         * @param int $post_ID Post ID to delete the caches for.
         */
        public function delete_oembed_caches($post_ID)
        {
        }
        /**
         * Triggers a caching of all oEmbed results.
         *
         * @param int $post_ID Post ID to do the caching for.
         */
        public function cache_oembed($post_ID)
        {
        }
        /**
         * Passes any unlinked URLs that are on their own line to WP_Embed::shortcode() for potential embedding.
         *
         * @see WP_Embed::autoembed_callback()
         *
         * @param string $content The content to be searched.
         * @return string Potentially modified $content.
         */
        public function autoembed($content)
        {
        }
        /**
         * Callback function for WP_Embed::autoembed().
         *
         * @param array $matches A regex match array.
         * @return string The embed HTML on success, otherwise the original URL.
         */
        public function autoembed_callback($matches)
        {
        }
        /**
         * Conditionally makes a hyperlink based on an internal class variable.
         *
         * @param string $url URL to potentially be linked.
         * @return string|false Linked URL or the original URL. False if 'return_false_on_fail' is true.
         */
        public function maybe_make_link($url)
        {
        }
        /**
         * Finds the oEmbed cache post ID for a given cache key.
         *
         * @since 4.9.0
         *
         * @param string $cache_key oEmbed cache key.
         * @return int|null Post ID on success, null on failure.
         */
        public function find_oembed_post_id($cache_key)
        {
        }
    }
    /**
     * mail_fetch/setup.php
     *
     * Copyright (c) 1999-2011 CDI (cdi@thewebmasters.net) All Rights Reserved
     * Modified by Philippe Mingo 2001-2009 mingo@rotedic.com
     * An RFC 1939 compliant wrapper class for the POP3 protocol.
     *
     * Licensed under the GNU GPL. For full terms see the file COPYING.
     *
     * POP3 class
     *
     * @copyright 1999-2011 The SquirrelMail Project Team
     * @license http://opensource.org/licenses/gpl-license.php GNU Public License
     * @package plugins
     * @subpackage mail_fetch
     */
    class POP3
    {
        var $ERROR = '';
        //  Error string.
        var $TIMEOUT = 60;
        //  Default timeout before giving up on a
        //  network operation.
        var $COUNT = -1;
        //  Mailbox msg count
        var $BUFFER = 512;
        //  Socket buffer for socket fgets() calls.
        //  Per RFC 1939 the returned line a POP3
        //  server can send is 512 bytes.
        var $FP = '';
        //  The connection to the server's
        //  file descriptor
        var $MAILSERVER = '';
        // Set this to hard code the server name
        var $DEBUG = \FALSE;
        // set to true to echo pop3
        // commands and responses to error_log
        // this WILL log passwords!
        var $BANNER = '';
        //  Holds the banner returned by the
        //  pop server - used for apop()
        var $ALLOWAPOP = \FALSE;
        //  Allow or disallow apop()
        //  This must be set to true
        //  manually
        /**
         * PHP5 constructor.
         */
        function __construct($server = '', $timeout = '')
        {
        }
        /**
         * PHP4 constructor.
         */
        public function POP3($server = '', $timeout = '')
        {
        }
        function update_timer()
        {
        }
        function connect($server, $port = 110)
        {
        }
        function user($user = "")
        {
        }
        function pass($pass = "")
        {
        }
        function apop($login, $pass)
        {
        }
        function login($login = "", $pass = "")
        {
        }
        function top($msgNum, $numLines = "0")
        {
        }
        function pop_list($msgNum = "")
        {
        }
        function get($msgNum)
        {
        }
        function last($type = "count")
        {
        }
        function reset()
        {
        }
        function send_cmd($cmd = "")
        {
        }
        function quit()
        {
        }
        function popstat()
        {
        }
        function uidl($msgNum = "")
        {
        }
        function delete($msgNum = "")
        {
        }
        //  *********************************************************
        //  The following methods are internal to the class.
        function is_ok($cmd = "")
        {
        }
        function strip_clf($text = "")
        {
        }
        function parse_banner($server_text)
        {
        }
    }
    /**
     * Blocks API: WP_Block_Patterns_Registry class
     *
     * @package WordPress
     * @subpackage Blocks
     * @since 5.5.0
     */
    /**
     * Class used for interacting with block patterns.
     *
     * @since 5.5.0
     */
    final class WP_Block_Patterns_Registry
    {
        /**
         * Registered block patterns array.
         *
         * @since 5.5.0
         * @var array[]
         */
        private $registered_patterns = array();
        /**
         * Patterns registered outside the `init` action.
         *
         * @since 6.0.0
         * @var array[]
         */
        private $registered_patterns_outside_init = array();
        /**
         * Container for the main instance of the class.
         *
         * @since 5.5.0
         * @var WP_Block_Patterns_Registry|null
         */
        private static $instance = \null;
        /**
         * Registers a block pattern.
         *
         * @since 5.5.0
         * @since 5.8.0 Added support for the `blockTypes` property.
         *
         * @param string $pattern_name       Block pattern name including namespace.
         * @param array  $pattern_properties {
         *     List of properties for the block pattern.
         *
         *     @type string $title         Required. A human-readable title for the pattern.
         *     @type string $content       Required. Block HTML markup for the pattern.
         *     @type string $description   Optional. Visually hidden text used to describe the pattern in the
         *                                 inserter. A description is optional, but is strongly
         *                                 encouraged when the title does not fully describe what the
         *                                 pattern does. The description will help users discover the
         *                                 pattern while searching.
         *     @type int    $viewportWidth Optional. The intended width of the pattern to allow for a scaled
         *                                 preview within the pattern inserter.
         *     @type array  $categories    Optional. A list of registered pattern categories used to group block
         *                                 patterns. Block patterns can be shown on multiple categories.
         *                                 A category must be registered separately in order to be used
         *                                 here.
         *     @type array  $blockTypes    Optional. A list of block names including namespace that could use
         *                                 the block pattern in certain contexts (placeholder, transforms).
         *                                 The block pattern is available in the block editor inserter
         *                                 regardless of this list of block names.
         *                                 Certain blocks support further specificity besides the block name
         *                                 (e.g. for `core/template-part` you can specify areas
         *                                 like `core/template-part/header` or `core/template-part/footer`).
         *     @type array  $keywords      Optional. A list of aliases or keywords that help users discover the
         *                                 pattern while searching.
         * }
         * @return bool True if the pattern was registered with success and false otherwise.
         */
        public function register($pattern_name, $pattern_properties)
        {
        }
        /**
         * Unregisters a block pattern.
         *
         * @since 5.5.0
         *
         * @param string $pattern_name Block pattern name including namespace.
         * @return bool True if the pattern was unregistered with success and false otherwise.
         */
        public function unregister($pattern_name)
        {
        }
        /**
         * Retrieves an array containing the properties of a registered block pattern.
         *
         * @since 5.5.0
         *
         * @param string $pattern_name Block pattern name including namespace.
         * @return array Registered pattern properties.
         */
        public function get_registered($pattern_name)
        {
        }
        /**
         * Retrieves all registered block patterns.
         *
         * @since 5.5.0
         *
         * @param bool $outside_init_only Return only patterns registered outside the `init` action.
         * @return array[] Array of arrays containing the registered block patterns properties,
         *                 and per style.
         */
        public function get_all_registered($outside_init_only = \false)
        {
        }
        /**
         * Checks if a block pattern is registered.
         *
         * @since 5.5.0
         *
         * @param string $pattern_name Block pattern name including namespace.
         * @return bool True if the pattern is registered, false otherwise.
         */
        public function is_registered($pattern_name)
        {
        }
        /**
         * Utility method to retrieve the main instance of the class.
         *
         * The instance will be created if it does not exist yet.
         *
         * @since 5.5.0
         *
         * @return WP_Block_Patterns_Registry The main instance.
         */
        public static function get_instance()
        {
        }
    }
    /**
     * HTTP API: WP_Http_Encoding class
     *
     * @package WordPress
     * @subpackage HTTP
     * @since 4.4.0
     */
    /**
     * Core class used to implement deflate and gzip transfer encoding support for HTTP requests.
     *
     * Includes RFC 1950, RFC 1951, and RFC 1952.
     *
     * @since 2.8.0
     */
    class WP_Http_Encoding
    {
        /**
         * Compress raw string using the deflate format.
         *
         * Supports the RFC 1951 standard.
         *
         * @since 2.8.0
         *
         * @param string $raw      String to compress.
         * @param int    $level    Optional. Compression level, 9 is highest. Default 9.
         * @param string $supports Optional, not used. When implemented it will choose
         *                         the right compression based on what the server supports.
         * @return string|false Compressed string on success, false on failure.
         */
        public static function compress($raw, $level = 9, $supports = \null)
        {
        }
        /**
         * Decompression of deflated string.
         *
         * Will attempt to decompress using the RFC 1950 standard, and if that fails
         * then the RFC 1951 standard deflate will be attempted. Finally, the RFC
         * 1952 standard gzip decode will be attempted. If all fail, then the
         * original compressed string will be returned.
         *
         * @since 2.8.0
         *
         * @param string $compressed String to decompress.
         * @param int    $length     The optional length of the compressed data.
         * @return string|false Decompressed string on success, false on failure.
         */
        public static function decompress($compressed, $length = \null)
        {
        }
        /**
         * Decompression of deflated string while staying compatible with the majority of servers.
         *
         * Certain Servers will return deflated data with headers which PHP's gzinflate()
         * function cannot handle out of the box. The following function has been created from
         * various snippets on the gzinflate() PHP documentation.
         *
         * Warning: Magic numbers within. Due to the potential different formats that the compressed
         * data may be returned in, some "magic offsets" are needed to ensure proper decompression
         * takes place. For a simple pragmatic way to determine the magic offset in use, see:
         * https://core.trac.wordpress.org/ticket/18273
         *
         * @since 2.8.1
         *
         * @link https://core.trac.wordpress.org/ticket/18273
         * @link https://www.php.net/manual/en/function.gzinflate.php#70875
         * @link https://www.php.net/manual/en/function.gzinflate.php#77336
         *
         * @param string $gz_data String to decompress.
         * @return string|false Decompressed string on success, false on failure.
         */
        public static function compatible_gzinflate($gz_data)
        {
        }
        /**
         * What encoding types to accept and their priority values.
         *
         * @since 2.8.0
         *
         * @param string $url
         * @param array  $args
         * @return string Types of encoding to accept.
         */
        public static function accept_encoding($url, $args)
        {
        }
        /**
         * What encoding the content used when it was compressed to send in the headers.
         *
         * @since 2.8.0
         *
         * @return string Content-Encoding string to send in the header.
         */
        public static function content_encoding()
        {
        }
        /**
         * Whether the content be decoded based on the headers.
         *
         * @since 2.8.0
         *
         * @param array|string $headers All of the available headers.
         * @return bool
         */
        public static function should_decode($headers)
        {
        }
        /**
         * Whether decompression and compression are supported by the PHP version.
         *
         * Each function is tested instead of checking for the zlib extension, to
         * ensure that the functions all exist in the PHP version and aren't
         * disabled.
         *
         * @since 2.8.0
         *
         * @return bool
         */
        public static function is_available()
        {
        }
    }
    /**
     * Query API: WP_Query class
     *
     * @package WordPress
     * @subpackage Query
     * @since 4.7.0
     */
    /**
     * The WordPress Query class.
     *
     * @link https://developer.wordpress.org/reference/classes/wp_query/
     *
     * @since 1.5.0
     * @since 4.5.0 Removed the `$comments_popup` property.
     */
    class WP_Query
    {
        /**
         * Query vars set by the user.
         *
         * @since 1.5.0
         * @var array
         */
        public $query;
        /**
         * Query vars, after parsing.
         *
         * @since 1.5.0
         * @var array
         */
        public $query_vars = array();
        /**
         * Taxonomy query, as passed to get_tax_sql().
         *
         * @since 3.1.0
         * @var WP_Tax_Query A taxonomy query instance.
         */
        public $tax_query;
        /**
         * Metadata query container.
         *
         * @since 3.2.0
         * @var WP_Meta_Query A meta query instance.
         */
        public $meta_query = \false;
        /**
         * Date query container.
         *
         * @since 3.7.0
         * @var WP_Date_Query A date query instance.
         */
        public $date_query = \false;
        /**
         * Holds the data for a single object that is queried.
         *
         * Holds the contents of a post, page, category, attachment.
         *
         * @since 1.5.0
         * @var WP_Term|WP_Post_Type|WP_Post|WP_User|null
         */
        public $queried_object;
        /**
         * The ID of the queried object.
         *
         * @since 1.5.0
         * @var int
         */
        public $queried_object_id;
        /**
         * SQL for the database query.
         *
         * @since 2.0.1
         * @var string
         */
        public $request;
        /**
         * Array of post objects or post IDs.
         *
         * @since 1.5.0
         * @var WP_Post[]|int[]
         */
        public $posts;
        /**
         * The number of posts for the current query.
         *
         * @since 1.5.0
         * @var int
         */
        public $post_count = 0;
        /**
         * Index of the current item in the loop.
         *
         * @since 1.5.0
         * @var int
         */
        public $current_post = -1;
        /**
         * Whether the loop has started and the caller is in the loop.
         *
         * @since 2.0.0
         * @var bool
         */
        public $in_the_loop = \false;
        /**
         * The current post.
         *
         * This property does not get populated when the `fields` argument is set to
         * `ids` or `id=>parent`.
         *
         * @since 1.5.0
         * @var WP_Post|null
         */
        public $post;
        /**
         * The list of comments for current post.
         *
         * @since 2.2.0
         * @var WP_Comment[]
         */
        public $comments;
        /**
         * The number of comments for the posts.
         *
         * @since 2.2.0
         * @var int
         */
        public $comment_count = 0;
        /**
         * The index of the comment in the comment loop.
         *
         * @since 2.2.0
         * @var int
         */
        public $current_comment = -1;
        /**
         * Current comment object.
         *
         * @since 2.2.0
         * @var WP_Comment
         */
        public $comment;
        /**
         * The number of found posts for the current query.
         *
         * If limit clause was not used, equals $post_count.
         *
         * @since 2.1.0
         * @var int
         */
        public $found_posts = 0;
        /**
         * The number of pages.
         *
         * @since 2.1.0
         * @var int
         */
        public $max_num_pages = 0;
        /**
         * The number of comment pages.
         *
         * @since 2.7.0
         * @var int
         */
        public $max_num_comment_pages = 0;
        /**
         * Signifies whether the current query is for a single post.
         *
         * @since 1.5.0
         * @var bool
         */
        public $is_single = \false;
        /**
         * Signifies whether the current query is for a preview.
         *
         * @since 2.0.0
         * @var bool
         */
        public $is_preview = \false;
        /**
         * Signifies whether the current query is for a page.
         *
         * @since 1.5.0
         * @var bool
         */
        public $is_page = \false;
        /**
         * Signifies whether the current query is for an archive.
         *
         * @since 1.5.0
         * @var bool
         */
        public $is_archive = \false;
        /**
         * Signifies whether the current query is for a date archive.
         *
         * @since 1.5.0
         * @var bool
         */
        public $is_date = \false;
        /**
         * Signifies whether the current query is for a year archive.
         *
         * @since 1.5.0
         * @var bool
         */
        public $is_year = \false;
        /**
         * Signifies whether the current query is for a month archive.
         *
         * @since 1.5.0
         * @var bool
         */
        public $is_month = \false;
        /**
         * Signifies whether the current query is for a day archive.
         *
         * @since 1.5.0
         * @var bool
         */
        public $is_day = \false;
        /**
         * Signifies whether the current query is for a specific time.
         *
         * @since 1.5.0
         * @var bool
         */
        public $is_time = \false;
        /**
         * Signifies whether the current query is for an author archive.
         *
         * @since 1.5.0
         * @var bool
         */
        public $is_author = \false;
        /**
         * Signifies whether the current query is for a category archive.
         *
         * @since 1.5.0
         * @var bool
         */
        public $is_category = \false;
        /**
         * Signifies whether the current query is for a tag archive.
         *
         * @since 2.3.0
         * @var bool
         */
        public $is_tag = \false;
        /**
         * Signifies whether the current query is for a taxonomy archive.
         *
         * @since 2.5.0
         * @var bool
         */
        public $is_tax = \false;
        /**
         * Signifies whether the current query is for a search.
         *
         * @since 1.5.0
         * @var bool
         */
        public $is_search = \false;
        /**
         * Signifies whether the current query is for a feed.
         *
         * @since 1.5.0
         * @var bool
         */
        public $is_feed = \false;
        /**
         * Signifies whether the current query is for a comment feed.
         *
         * @since 2.2.0
         * @var bool
         */
        public $is_comment_feed = \false;
        /**
         * Signifies whether the current query is for trackback endpoint call.
         *
         * @since 1.5.0
         * @var bool
         */
        public $is_trackback = \false;
        /**
         * Signifies whether the current query is for the site homepage.
         *
         * @since 1.5.0
         * @var bool
         */
        public $is_home = \false;
        /**
         * Signifies whether the current query is for the Privacy Policy page.
         *
         * @since 5.2.0
         * @var bool
         */
        public $is_privacy_policy = \false;
        /**
         * Signifies whether the current query couldn't find anything.
         *
         * @since 1.5.0
         * @var bool
         */
        public $is_404 = \false;
        /**
         * Signifies whether the current query is for an embed.
         *
         * @since 4.4.0
         * @var bool
         */
        public $is_embed = \false;
        /**
         * Signifies whether the current query is for a paged result and not for the first page.
         *
         * @since 1.5.0
         * @var bool
         */
        public $is_paged = \false;
        /**
         * Signifies whether the current query is for an administrative interface page.
         *
         * @since 1.5.0
         * @var bool
         */
        public $is_admin = \false;
        /**
         * Signifies whether the current query is for an attachment page.
         *
         * @since 2.0.0
         * @var bool
         */
        public $is_attachment = \false;
        /**
         * Signifies whether the current query is for an existing single post of any post type
         * (post, attachment, page, custom post types).
         *
         * @since 2.1.0
         * @var bool
         */
        public $is_singular = \false;
        /**
         * Signifies whether the current query is for the robots.txt file.
         *
         * @since 2.1.0
         * @var bool
         */
        public $is_robots = \false;
        /**
         * Signifies whether the current query is for the favicon.ico file.
         *
         * @since 5.4.0
         * @var bool
         */
        public $is_favicon = \false;
        /**
         * Signifies whether the current query is for the page_for_posts page.
         *
         * Basically, the homepage if the option isn't set for the static homepage.
         *
         * @since 2.1.0
         * @var bool
         */
        public $is_posts_page = \false;
        /**
         * Signifies whether the current query is for a post type archive.
         *
         * @since 3.1.0
         * @var bool
         */
        public $is_post_type_archive = \false;
        /**
         * Stores the ->query_vars state like md5(serialize( $this->query_vars ) ) so we know
         * whether we have to re-parse because something has changed
         *
         * @since 3.1.0
         * @var bool|string
         */
        private $query_vars_hash = \false;
        /**
         * Whether query vars have changed since the initial parse_query() call. Used to catch modifications to query vars made
         * via pre_get_posts hooks.
         *
         * @since 3.1.1
         */
        private $query_vars_changed = \true;
        /**
         * Set if post thumbnails are cached
         *
         * @since 3.2.0
         * @var bool
         */
        public $thumbnails_cached = \false;
        /**
         * Controls whether an attachment query should include filenames or not.
         *
         * @since 6.0.3
         * @var bool
         */
        protected $allow_query_attachment_by_filename = \false;
        /**
         * Cached list of search stopwords.
         *
         * @since 3.7.0
         * @var array
         */
        private $stopwords;
        private $compat_fields = array('query_vars_hash', 'query_vars_changed');
        private $compat_methods = array('init_query_flags', 'parse_tax_query');
        /**
         * Resets query flags to false.
         *
         * The query flags are what page info WordPress was able to figure out.
         *
         * @since 2.0.0
         */
        private function init_query_flags()
        {
        }
        /**
         * Initiates object properties and sets default values.
         *
         * @since 1.5.0
         */
        public function init()
        {
        }
        /**
         * Reparse the query vars.
         *
         * @since 1.5.0
         */
        public function parse_query_vars()
        {
        }
        /**
         * Fills in the query variables, which do not exist within the parameter.
         *
         * @since 2.1.0
         * @since 4.5.0 Removed the `comments_popup` public query variable.
         *
         * @param array $query_vars Defined query variables.
         * @return array Complete query variables with undefined ones filled in empty.
         */
        public function fill_query_vars($query_vars)
        {
        }
        /**
         * Parse a query string and set query type booleans.
         *
         * @since 1.5.0
         * @since 4.2.0 Introduced the ability to order by specific clauses of a `$meta_query`, by passing the clause's
         *              array key to `$orderby`.
         * @since 4.4.0 Introduced `$post_name__in` and `$title` parameters. `$s` was updated to support excluded
         *              search terms, by prepending a hyphen.
         * @since 4.5.0 Removed the `$comments_popup` parameter.
         *              Introduced the `$comment_status` and `$ping_status` parameters.
         *              Introduced `RAND(x)` syntax for `$orderby`, which allows an integer seed value to random sorts.
         * @since 4.6.0 Added 'post_name__in' support for `$orderby`. Introduced the `$lazy_load_term_meta` argument.
         * @since 4.9.0 Introduced the `$comment_count` parameter.
         * @since 5.1.0 Introduced the `$meta_compare_key` parameter.
         * @since 5.3.0 Introduced the `$meta_type_key` parameter.
         *
         * @param string|array $query {
         *     Optional. Array or string of Query parameters.
         *
         *     @type int             $attachment_id           Attachment post ID. Used for 'attachment' post_type.
         *     @type int|string      $author                  Author ID, or comma-separated list of IDs.
         *     @type string          $author_name             User 'user_nicename'.
         *     @type int[]           $author__in              An array of author IDs to query from.
         *     @type int[]           $author__not_in          An array of author IDs not to query from.
         *     @type bool            $cache_results           Whether to cache post information. Default true.
         *     @type int|string      $cat                     Category ID or comma-separated list of IDs (this or any children).
         *     @type int[]           $category__and           An array of category IDs (AND in).
         *     @type int[]           $category__in            An array of category IDs (OR in, no children).
         *     @type int[]           $category__not_in        An array of category IDs (NOT in).
         *     @type string          $category_name           Use category slug (not name, this or any children).
         *     @type array|int       $comment_count           Filter results by comment count. Provide an integer to match
         *                                                    comment count exactly. Provide an array with integer 'value'
         *                                                    and 'compare' operator ('=', '!=', '>', '>=', '<', '<=' ) to
         *                                                    compare against comment_count in a specific way.
         *     @type string          $comment_status          Comment status.
         *     @type int             $comments_per_page       The number of comments to return per page.
         *                                                    Default 'comments_per_page' option.
         *     @type array           $date_query              An associative array of WP_Date_Query arguments.
         *                                                    See WP_Date_Query::__construct().
         *     @type int             $day                     Day of the month. Default empty. Accepts numbers 1-31.
         *     @type bool            $exact                   Whether to search by exact keyword. Default false.
         *     @type string          $fields                  Post fields to query for. Accepts:
         *                                                    - '' Returns an array of complete post objects (`WP_Post[]`).
         *                                                    - 'ids' Returns an array of post IDs (`int[]`).
         *                                                    - 'id=>parent' Returns an associative array of parent post IDs,
         *                                                      keyed by post ID (`int[]`).
         *                                                    Default ''.
         *     @type int             $hour                    Hour of the day. Default empty. Accepts numbers 0-23.
         *     @type int|bool        $ignore_sticky_posts     Whether to ignore sticky posts or not. Setting this to false
         *                                                    excludes stickies from 'post__in'. Accepts 1|true, 0|false.
         *                                                    Default false.
         *     @type int             $m                       Combination YearMonth. Accepts any four-digit year and month
         *                                                    numbers 1-12. Default empty.
         *     @type string|string[] $meta_key                Meta key or keys to filter by.
         *     @type string|string[] $meta_value              Meta value or values to filter by.
         *     @type string          $meta_compare            MySQL operator used for comparing the meta value.
         *                                                    See WP_Meta_Query::__construct for accepted values and default value.
         *     @type string          $meta_compare_key        MySQL operator used for comparing the meta key.
         *                                                    See WP_Meta_Query::__construct for accepted values and default value.
         *     @type string          $meta_type               MySQL data type that the meta_value column will be CAST to for comparisons.
         *                                                    See WP_Meta_Query::__construct for accepted values and default value.
         *     @type string          $meta_type_key           MySQL data type that the meta_key column will be CAST to for comparisons.
         *                                                    See WP_Meta_Query::__construct for accepted values and default value.
         *     @type array           $meta_query              An associative array of WP_Meta_Query arguments.
         *                                                    See WP_Meta_Query::__construct for accepted values.
         *     @type int             $menu_order              The menu order of the posts.
         *     @type int             $minute                  Minute of the hour. Default empty. Accepts numbers 0-59.
         *     @type int             $monthnum                The two-digit month. Default empty. Accepts numbers 1-12.
         *     @type string          $name                    Post slug.
         *     @type bool            $nopaging                Show all posts (true) or paginate (false). Default false.
         *     @type bool            $no_found_rows           Whether to skip counting the total rows found. Enabling can improve
         *                                                    performance. Default false.
         *     @type int             $offset                  The number of posts to offset before retrieval.
         *     @type string          $order                   Designates ascending or descending order of posts. Default 'DESC'.
         *                                                    Accepts 'ASC', 'DESC'.
         *     @type string|array    $orderby                 Sort retrieved posts by parameter. One or more options may be passed.
         *                                                    To use 'meta_value', or 'meta_value_num', 'meta_key=keyname' must be
         *                                                    also be defined. To sort by a specific `$meta_query` clause, use that
         *                                                    clause's array key. Accepts:
         *                                                    - 'none'
         *                                                    - 'name'
         *                                                    - 'author'
         *                                                    - 'date'
         *                                                    - 'title'
         *                                                    - 'modified'
         *                                                    - 'menu_order'
         *                                                    - 'parent'
         *                                                    - 'ID'
         *                                                    - 'rand'
         *                                                    - 'relevance'
         *                                                    - 'RAND(x)' (where 'x' is an integer seed value)
         *                                                    - 'comment_count'
         *                                                    - 'meta_value'
         *                                                    - 'meta_value_num'
         *                                                    - 'post__in'
         *                                                    - 'post_name__in'
         *                                                    - 'post_parent__in'
         *                                                    - The array keys of `$meta_query`.
         *                                                    Default is 'date', except when a search is being performed, when
         *                                                    the default is 'relevance'.
         *     @type int             $p                       Post ID.
         *     @type int             $page                    Show the number of posts that would show up on page X of a
         *                                                    static front page.
         *     @type int             $paged                   The number of the current page.
         *     @type int             $page_id                 Page ID.
         *     @type string          $pagename                Page slug.
         *     @type string          $perm                    Show posts if user has the appropriate capability.
         *     @type string          $ping_status             Ping status.
         *     @type int[]           $post__in                An array of post IDs to retrieve, sticky posts will be included.
         *     @type int[]           $post__not_in            An array of post IDs not to retrieve. Note: a string of comma-
         *                                                    separated IDs will NOT work.
         *     @type string          $post_mime_type          The mime type of the post. Used for 'attachment' post_type.
         *     @type string[]        $post_name__in           An array of post slugs that results must match.
         *     @type int             $post_parent             Page ID to retrieve child pages for. Use 0 to only retrieve
         *                                                    top-level pages.
         *     @type int[]           $post_parent__in         An array containing parent page IDs to query child pages from.
         *     @type int[]           $post_parent__not_in     An array containing parent page IDs not to query child pages from.
         *     @type string|string[] $post_type               A post type slug (string) or array of post type slugs.
         *                                                    Default 'any' if using 'tax_query'.
         *     @type string|string[] $post_status             A post status (string) or array of post statuses.
         *     @type int             $posts_per_page          The number of posts to query for. Use -1 to request all posts.
         *     @type int             $posts_per_archive_page  The number of posts to query for by archive page. Overrides
         *                                                    'posts_per_page' when is_archive(), or is_search() are true.
         *     @type string          $s                       Search keyword(s). Prepending a term with a hyphen will
         *                                                    exclude posts matching that term. Eg, 'pillow -sofa' will
         *                                                    return posts containing 'pillow' but not 'sofa'. The
         *                                                    character used for exclusion can be modified using the
         *                                                    the 'wp_query_search_exclusion_prefix' filter.
         *     @type int             $second                  Second of the minute. Default empty. Accepts numbers 0-59.
         *     @type bool            $sentence                Whether to search by phrase. Default false.
         *     @type bool            $suppress_filters        Whether to suppress filters. Default false.
         *     @type string          $tag                     Tag slug. Comma-separated (either), Plus-separated (all).
         *     @type int[]           $tag__and                An array of tag IDs (AND in).
         *     @type int[]           $tag__in                 An array of tag IDs (OR in).
         *     @type int[]           $tag__not_in             An array of tag IDs (NOT in).
         *     @type int             $tag_id                  Tag id or comma-separated list of IDs.
         *     @type string[]        $tag_slug__and           An array of tag slugs (AND in).
         *     @type string[]        $tag_slug__in            An array of tag slugs (OR in). unless 'ignore_sticky_posts' is
         *                                                    true. Note: a string of comma-separated IDs will NOT work.
         *     @type array           $tax_query               An associative array of WP_Tax_Query arguments.
         *                                                    See WP_Tax_Query->__construct().
         *     @type string          $title                   Post title.
         *     @type bool            $update_post_meta_cache  Whether to update the post meta cache. Default true.
         *     @type bool            $update_post_term_cache  Whether to update the post term cache. Default true.
         *     @type bool            $lazy_load_term_meta     Whether to lazy-load term meta. Setting to false will
         *                                                    disable cache priming for term meta, so that each
         *                                                    get_term_meta() call will hit the database.
         *                                                    Defaults to the value of `$update_post_term_cache`.
         *     @type int             $w                       The week number of the year. Default empty. Accepts numbers 0-53.
         *     @type int             $year                    The four-digit year. Default empty. Accepts any four-digit year.
         * }
         */
        public function parse_query($query = '')
        {
        }
        /**
         * Parses various taxonomy related query vars.
         *
         * For BC, this method is not marked as protected. See [28987].
         *
         * @since 3.1.0
         *
         * @param array $q The query variables. Passed by reference.
         */
        public function parse_tax_query(&$q)
        {
        }
        /**
         * Generates SQL for the WHERE clause based on passed search terms.
         *
         * @since 3.7.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param array $q Query variables.
         * @return string WHERE clause.
         */
        protected function parse_search(&$q)
        {
        }
        /**
         * Check if the terms are suitable for searching.
         *
         * Uses an array of stopwords (terms) that are excluded from the separate
         * term matching when searching for posts. The list of English stopwords is
         * the approximate search engines list, and is translatable.
         *
         * @since 3.7.0
         *
         * @param string[] $terms Array of terms to check.
         * @return string[] Terms that are not stopwords.
         */
        protected function parse_search_terms($terms)
        {
        }
        /**
         * Retrieve stopwords used when parsing search terms.
         *
         * @since 3.7.0
         *
         * @return string[] Stopwords.
         */
        protected function get_search_stopwords()
        {
        }
        /**
         * Generates SQL for the ORDER BY condition based on passed search terms.
         *
         * @since 3.7.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param array $q Query variables.
         * @return string ORDER BY clause.
         */
        protected function parse_search_order(&$q)
        {
        }
        /**
         * Converts the given orderby alias (if allowed) to a properly-prefixed value.
         *
         * @since 4.0.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param string $orderby Alias for the field to order by.
         * @return string|false Table-prefixed value to used in the ORDER clause. False otherwise.
         */
        protected function parse_orderby($orderby)
        {
        }
        /**
         * Parse an 'order' query variable and cast it to ASC or DESC as necessary.
         *
         * @since 4.0.0
         *
         * @param string $order The 'order' query variable.
         * @return string The sanitized 'order' query variable.
         */
        protected function parse_order($order)
        {
        }
        /**
         * Sets the 404 property and saves whether query is feed.
         *
         * @since 2.0.0
         */
        public function set_404()
        {
        }
        /**
         * Retrieves the value of a query variable.
         *
         * @since 1.5.0
         * @since 3.9.0 The `$default_value` argument was introduced.
         *
         * @param string $query_var     Query variable key.
         * @param mixed  $default_value Optional. Value to return if the query variable is not set. Default empty string.
         * @return mixed Contents of the query variable.
         */
        public function get($query_var, $default_value = '')
        {
        }
        /**
         * Sets the value of a query variable.
         *
         * @since 1.5.0
         *
         * @param string $query_var Query variable key.
         * @param mixed  $value     Query variable value.
         */
        public function set($query_var, $value)
        {
        }
        /**
         * Retrieves an array of posts based on query variables.
         *
         * There are a few filters and actions that can be used to modify the post
         * database query.
         *
         * @since 1.5.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @return WP_Post[]|int[] Array of post objects or post IDs.
         */
        public function get_posts()
        {
        }
        /**
         * Set up the amount of found posts and the number of pages (if limit clause was used)
         * for the current query.
         *
         * @since 3.5.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param array  $q      Query variables.
         * @param string $limits LIMIT clauses of the query.
         */
        private function set_found_posts($q, $limits)
        {
        }
        /**
         * Set up the next post and iterate current post index.
         *
         * @since 1.5.0
         *
         * @return WP_Post Next post.
         */
        public function next_post()
        {
        }
        /**
         * Sets up the current post.
         *
         * Retrieves the next post, sets up the post, sets the 'in the loop'
         * property to true.
         *
         * @since 1.5.0
         *
         * @global WP_Post $post Global post object.
         */
        public function the_post()
        {
        }
        /**
         * Determines whether there are more posts available in the loop.
         *
         * Calls the {@see 'loop_end'} action when the loop is complete.
         *
         * @since 1.5.0
         *
         * @return bool True if posts are available, false if end of the loop.
         */
        public function have_posts()
        {
        }
        /**
         * Rewind the posts and reset post index.
         *
         * @since 1.5.0
         */
        public function rewind_posts()
        {
        }
        /**
         * Iterate current comment index and return WP_Comment object.
         *
         * @since 2.2.0
         *
         * @return WP_Comment Comment object.
         */
        public function next_comment()
        {
        }
        /**
         * Sets up the current comment.
         *
         * @since 2.2.0
         *
         * @global WP_Comment $comment Global comment object.
         */
        public function the_comment()
        {
        }
        /**
         * Whether there are more comments available.
         *
         * Automatically rewinds comments when finished.
         *
         * @since 2.2.0
         *
         * @return bool True if comments are available, false if no more comments.
         */
        public function have_comments()
        {
        }
        /**
         * Rewind the comments, resets the comment index and comment to first.
         *
         * @since 2.2.0
         */
        public function rewind_comments()
        {
        }
        /**
         * Sets up the WordPress query by parsing query string.
         *
         * @since 1.5.0
         *
         * @see WP_Query::parse_query() for all available arguments.
         *
         * @param string|array $query URL query string or array of query arguments.
         * @return WP_Post[]|int[] Array of post objects or post IDs.
         */
        public function query($query)
        {
        }
        /**
         * Retrieves the currently queried object.
         *
         * If queried object is not set, then the queried object will be set from
         * the category, tag, taxonomy, posts page, single post, page, or author
         * query variable. After it is set up, it will be returned.
         *
         * @since 1.5.0
         *
         * @return WP_Term|WP_Post_Type|WP_Post|WP_User|null The queried object.
         */
        public function get_queried_object()
        {
        }
        /**
         * Retrieves the ID of the currently queried object.
         *
         * @since 1.5.0
         *
         * @return int
         */
        public function get_queried_object_id()
        {
        }
        /**
         * Constructor.
         *
         * Sets up the WordPress query, if parameter is not empty.
         *
         * @since 1.5.0
         *
         * @see WP_Query::parse_query() for all available arguments.
         *
         * @param string|array $query URL query string or array of vars.
         */
        public function __construct($query = '')
        {
        }
        /**
         * Make private properties readable for backward compatibility.
         *
         * @since 4.0.0
         *
         * @param string $name Property to get.
         * @return mixed Property.
         */
        public function __get($name)
        {
        }
        /**
         * Make private properties checkable for backward compatibility.
         *
         * @since 4.0.0
         *
         * @param string $name Property to check if set.
         * @return bool Whether the property is set.
         */
        public function __isset($name)
        {
        }
        /**
         * Make private/protected methods readable for backward compatibility.
         *
         * @since 4.0.0
         *
         * @param string $name      Method to call.
         * @param array  $arguments Arguments to pass when calling.
         * @return mixed|false Return value of the callback, false otherwise.
         */
        public function __call($name, $arguments)
        {
        }
        /**
         * Is the query for an existing archive page?
         *
         * Archive pages include category, tag, author, date, custom post type,
         * and custom taxonomy based archives.
         *
         * @since 3.1.0
         *
         * @see WP_Query::is_category()
         * @see WP_Query::is_tag()
         * @see WP_Query::is_author()
         * @see WP_Query::is_date()
         * @see WP_Query::is_post_type_archive()
         * @see WP_Query::is_tax()
         *
         * @return bool Whether the query is for an existing archive page.
         */
        public function is_archive()
        {
        }
        /**
         * Is the query for an existing post type archive page?
         *
         * @since 3.1.0
         *
         * @param string|string[] $post_types Optional. Post type or array of posts types
         *                                    to check against. Default empty.
         * @return bool Whether the query is for an existing post type archive page.
         */
        public function is_post_type_archive($post_types = '')
        {
        }
        /**
         * Is the query for an existing attachment page?
         *
         * @since 3.1.0
         *
         * @param int|string|int[]|string[] $attachment Optional. Attachment ID, title, slug, or array of such
         *                                              to check against. Default empty.
         * @return bool Whether the query is for an existing attachment page.
         */
        public function is_attachment($attachment = '')
        {
        }
        /**
         * Is the query for an existing author archive page?
         *
         * If the $author parameter is specified, this function will additionally
         * check if the query is for one of the authors specified.
         *
         * @since 3.1.0
         *
         * @param int|string|int[]|string[] $author Optional. User ID, nickname, nicename, or array of such
         *                                          to check against. Default empty.
         * @return bool Whether the query is for an existing author archive page.
         */
        public function is_author($author = '')
        {
        }
        /**
         * Is the query for an existing category archive page?
         *
         * If the $category parameter is specified, this function will additionally
         * check if the query is for one of the categories specified.
         *
         * @since 3.1.0
         *
         * @param int|string|int[]|string[] $category Optional. Category ID, name, slug, or array of such
         *                                            to check against. Default empty.
         * @return bool Whether the query is for an existing category archive page.
         */
        public function is_category($category = '')
        {
        }
        /**
         * Is the query for an existing tag archive page?
         *
         * If the $tag parameter is specified, this function will additionally
         * check if the query is for one of the tags specified.
         *
         * @since 3.1.0
         *
         * @param int|string|int[]|string[] $tag Optional. Tag ID, name, slug, or array of such
         *                                       to check against. Default empty.
         * @return bool Whether the query is for an existing tag archive page.
         */
        public function is_tag($tag = '')
        {
        }
        /**
         * Is the query for an existing custom taxonomy archive page?
         *
         * If the $taxonomy parameter is specified, this function will additionally
         * check if the query is for that specific $taxonomy.
         *
         * If the $term parameter is specified in addition to the $taxonomy parameter,
         * this function will additionally check if the query is for one of the terms
         * specified.
         *
         * @since 3.1.0
         *
         * @global WP_Taxonomy[] $wp_taxonomies Registered taxonomies.
         *
         * @param string|string[]           $taxonomy Optional. Taxonomy slug or slugs to check against.
         *                                            Default empty.
         * @param int|string|int[]|string[] $term     Optional. Term ID, name, slug, or array of such
         *                                            to check against. Default empty.
         * @return bool Whether the query is for an existing custom taxonomy archive page.
         *              True for custom taxonomy archive pages, false for built-in taxonomies
         *              (category and tag archives).
         */
        public function is_tax($taxonomy = '', $term = '')
        {
        }
        /**
         * Whether the current URL is within the comments popup window.
         *
         * @since 3.1.0
         * @deprecated 4.5.0
         *
         * @return false Always returns false.
         */
        public function is_comments_popup()
        {
        }
        /**
         * Is the query for an existing date archive?
         *
         * @since 3.1.0
         *
         * @return bool Whether the query is for an existing date archive.
         */
        public function is_date()
        {
        }
        /**
         * Is the query for an existing day archive?
         *
         * @since 3.1.0
         *
         * @return bool Whether the query is for an existing day archive.
         */
        public function is_day()
        {
        }
        /**
         * Is the query for a feed?
         *
         * @since 3.1.0
         *
         * @param string|string[] $feeds Optional. Feed type or array of feed types
         *                                         to check against. Default empty.
         * @return bool Whether the query is for a feed.
         */
        public function is_feed($feeds = '')
        {
        }
        /**
         * Is the query for a comments feed?
         *
         * @since 3.1.0
         *
         * @return bool Whether the query is for a comments feed.
         */
        public function is_comment_feed()
        {
        }
        /**
         * Is the query for the front page of the site?
         *
         * This is for what is displayed at your site's main URL.
         *
         * Depends on the site's "Front page displays" Reading Settings 'show_on_front' and 'page_on_front'.
         *
         * If you set a static page for the front page of your site, this function will return
         * true when viewing that page.
         *
         * Otherwise the same as @see WP_Query::is_home()
         *
         * @since 3.1.0
         *
         * @return bool Whether the query is for the front page of the site.
         */
        public function is_front_page()
        {
        }
        /**
         * Is the query for the blog homepage?
         *
         * This is the page which shows the time based blog content of your site.
         *
         * Depends on the site's "Front page displays" Reading Settings 'show_on_front' and 'page_for_posts'.
         *
         * If you set a static page for the front page of your site, this function will return
         * true only on the page you set as the "Posts page".
         *
         * @since 3.1.0
         *
         * @see WP_Query::is_front_page()
         *
         * @return bool Whether the query is for the blog homepage.
         */
        public function is_home()
        {
        }
        /**
         * Is the query for the Privacy Policy page?
         *
         * This is the page which shows the Privacy Policy content of your site.
         *
         * Depends on the site's "Change your Privacy Policy page" Privacy Settings 'wp_page_for_privacy_policy'.
         *
         * This function will return true only on the page you set as the "Privacy Policy page".
         *
         * @since 5.2.0
         *
         * @return bool Whether the query is for the Privacy Policy page.
         */
        public function is_privacy_policy()
        {
        }
        /**
         * Is the query for an existing month archive?
         *
         * @since 3.1.0
         *
         * @return bool Whether the query is for an existing month archive.
         */
        public function is_month()
        {
        }
        /**
         * Is the query for an existing single page?
         *
         * If the $page parameter is specified, this function will additionally
         * check if the query is for one of the pages specified.
         *
         * @since 3.1.0
         *
         * @see WP_Query::is_single()
         * @see WP_Query::is_singular()
         *
         * @param int|string|int[]|string[] $page Optional. Page ID, title, slug, path, or array of such
         *                                        to check against. Default empty.
         * @return bool Whether the query is for an existing single page.
         */
        public function is_page($page = '')
        {
        }
        /**
         * Is the query for a paged result and not for the first page?
         *
         * @since 3.1.0
         *
         * @return bool Whether the query is for a paged result.
         */
        public function is_paged()
        {
        }
        /**
         * Is the query for a post or page preview?
         *
         * @since 3.1.0
         *
         * @return bool Whether the query is for a post or page preview.
         */
        public function is_preview()
        {
        }
        /**
         * Is the query for the robots.txt file?
         *
         * @since 3.1.0
         *
         * @return bool Whether the query is for the robots.txt file.
         */
        public function is_robots()
        {
        }
        /**
         * Is the query for the favicon.ico file?
         *
         * @since 5.4.0
         *
         * @return bool Whether the query is for the favicon.ico file.
         */
        public function is_favicon()
        {
        }
        /**
         * Is the query for a search?
         *
         * @since 3.1.0
         *
         * @return bool Whether the query is for a search.
         */
        public function is_search()
        {
        }
        /**
         * Is the query for an existing single post?
         *
         * Works for any post type excluding pages.
         *
         * If the $post parameter is specified, this function will additionally
         * check if the query is for one of the Posts specified.
         *
         * @since 3.1.0
         *
         * @see WP_Query::is_page()
         * @see WP_Query::is_singular()
         *
         * @param int|string|int[]|string[] $post Optional. Post ID, title, slug, path, or array of such
         *                                        to check against. Default empty.
         * @return bool Whether the query is for an existing single post.
         */
        public function is_single($post = '')
        {
        }
        /**
         * Is the query for an existing single post of any post type (post, attachment, page,
         * custom post types)?
         *
         * If the $post_types parameter is specified, this function will additionally
         * check if the query is for one of the Posts Types specified.
         *
         * @since 3.1.0
         *
         * @see WP_Query::is_page()
         * @see WP_Query::is_single()
         *
         * @param string|string[] $post_types Optional. Post type or array of post types
         *                                    to check against. Default empty.
         * @return bool Whether the query is for an existing single post
         *              or any of the given post types.
         */
        public function is_singular($post_types = '')
        {
        }
        /**
         * Is the query for a specific time?
         *
         * @since 3.1.0
         *
         * @return bool Whether the query is for a specific time.
         */
        public function is_time()
        {
        }
        /**
         * Is the query for a trackback endpoint call?
         *
         * @since 3.1.0
         *
         * @return bool Whether the query is for a trackback endpoint call.
         */
        public function is_trackback()
        {
        }
        /**
         * Is the query for an existing year archive?
         *
         * @since 3.1.0
         *
         * @return bool Whether the query is for an existing year archive.
         */
        public function is_year()
        {
        }
        /**
         * Is the query a 404 (returns no results)?
         *
         * @since 3.1.0
         *
         * @return bool Whether the query is a 404 error.
         */
        public function is_404()
        {
        }
        /**
         * Is the query for an embedded post?
         *
         * @since 4.4.0
         *
         * @return bool Whether the query is for an embedded post.
         */
        public function is_embed()
        {
        }
        /**
         * Is the query the main query?
         *
         * @since 3.3.0
         *
         * @global WP_Query $wp_query WordPress Query object.
         *
         * @return bool Whether the query is the main query.
         */
        public function is_main_query()
        {
        }
        /**
         * Set up global post data.
         *
         * @since 4.1.0
         * @since 4.4.0 Added the ability to pass a post ID to `$post`.
         *
         * @global int     $id
         * @global WP_User $authordata
         * @global string  $currentday
         * @global string  $currentmonth
         * @global int     $page
         * @global array   $pages
         * @global int     $multipage
         * @global int     $more
         * @global int     $numpages
         *
         * @param WP_Post|object|int $post WP_Post instance or Post ID/object.
         * @return true True when finished.
         */
        public function setup_postdata($post)
        {
        }
        /**
         * Generate post data.
         *
         * @since 5.2.0
         *
         * @param WP_Post|object|int $post WP_Post instance or Post ID/object.
         * @return array|false Elements of post or false on failure.
         */
        public function generate_postdata($post)
        {
        }
        /**
         * After looping through a nested query, this function
         * restores the $post global to the current post in this query.
         *
         * @since 3.7.0
         *
         * @global WP_Post $post Global post object.
         */
        public function reset_postdata()
        {
        }
        /**
         * Lazyload term meta for posts in the loop.
         *
         * @since 4.4.0
         * @deprecated 4.5.0 See wp_queue_posts_for_term_meta_lazyload().
         *
         * @param mixed $check
         * @param int   $term_id
         * @return mixed
         */
        public function lazyload_term_meta($check, $term_id)
        {
        }
        /**
         * Lazyload comment meta for comments in the loop.
         *
         * @since 4.4.0
         * @deprecated 4.5.0 See wp_queue_comments_for_comment_meta_lazyload().
         *
         * @param mixed $check
         * @param int   $comment_id
         * @return mixed
         */
        public function lazyload_comment_meta($check, $comment_id)
        {
        }
    }
    /**
     * Locale API: WP_Locale class
     *
     * @package WordPress
     * @subpackage i18n
     * @since 4.6.0
     */
    /**
     * Core class used to store translated data for a locale.
     *
     * @since 2.1.0
     * @since 4.6.0 Moved to its own file from wp-includes/locale.php.
     */
    class WP_Locale
    {
        /**
         * Stores the translated strings for the full weekday names.
         *
         * @since 2.1.0
         * @var string[]
         */
        public $weekday;
        /**
         * Stores the translated strings for the one character weekday names.
         *
         * There is a hack to make sure that Tuesday and Thursday, as well
         * as Sunday and Saturday, don't conflict. See init() method for more.
         *
         * @see WP_Locale::init() for how to handle the hack.
         *
         * @since 2.1.0
         * @var string[]
         */
        public $weekday_initial;
        /**
         * Stores the translated strings for the abbreviated weekday names.
         *
         * @since 2.1.0
         * @var string[]
         */
        public $weekday_abbrev;
        /**
         * Stores the translated strings for the full month names.
         *
         * @since 2.1.0
         * @var string[]
         */
        public $month;
        /**
         * Stores the translated strings for the month names in genitive case, if the locale specifies.
         *
         * @since 4.4.0
         * @var string[]
         */
        public $month_genitive;
        /**
         * Stores the translated strings for the abbreviated month names.
         *
         * @since 2.1.0
         * @var string[]
         */
        public $month_abbrev;
        /**
         * Stores the translated strings for 'am' and 'pm'.
         *
         * Also the capitalized versions.
         *
         * @since 2.1.0
         * @var string[]
         */
        public $meridiem;
        /**
         * The text direction of the locale language.
         *
         * Default is left to right 'ltr'.
         *
         * @since 2.1.0
         * @var string
         */
        public $text_direction = 'ltr';
        /**
         * The thousands separator and decimal point values used for localizing numbers.
         *
         * @since 2.3.0
         * @var array
         */
        public $number_format;
        /**
         * The separator string used for localizing list item separator.
         *
         * @since 6.0.0
         * @var string
         */
        public $list_item_separator;
        /**
         * Constructor which calls helper methods to set up object variables.
         *
         * @since 2.1.0
         */
        public function __construct()
        {
        }
        /**
         * Sets up the translated strings and object properties.
         *
         * The method creates the translatable strings for various
         * calendar elements. Which allows for specifying locale
         * specific calendar names and text direction.
         *
         * @since 2.1.0
         *
         * @global string $text_direction
         * @global string $wp_version     The WordPress version string.
         */
        public function init()
        {
        }
        /**
         * Retrieves the full translated weekday word.
         *
         * Week starts on translated Sunday and can be fetched
         * by using 0 (zero). So the week starts with 0 (zero)
         * and ends on Saturday with is fetched by using 6 (six).
         *
         * @since 2.1.0
         *
         * @param int $weekday_number 0 for Sunday through 6 Saturday.
         * @return string Full translated weekday.
         */
        public function get_weekday($weekday_number)
        {
        }
        /**
         * Retrieves the translated weekday initial.
         *
         * The weekday initial is retrieved by the translated
         * full weekday word. When translating the weekday initial
         * pay attention to make sure that the starting letter does
         * not conflict.
         *
         * @since 2.1.0
         *
         * @param string $weekday_name Full translated weekday word.
         * @return string Translated weekday initial.
         */
        public function get_weekday_initial($weekday_name)
        {
        }
        /**
         * Retrieves the translated weekday abbreviation.
         *
         * The weekday abbreviation is retrieved by the translated
         * full weekday word.
         *
         * @since 2.1.0
         *
         * @param string $weekday_name Full translated weekday word.
         * @return string Translated weekday abbreviation.
         */
        public function get_weekday_abbrev($weekday_name)
        {
        }
        /**
         * Retrieves the full translated month by month number.
         *
         * The $month_number parameter has to be a string
         * because it must have the '0' in front of any number
         * that is less than 10. Starts from '01' and ends at
         * '12'.
         *
         * You can use an integer instead and it will add the
         * '0' before the numbers less than 10 for you.
         *
         * @since 2.1.0
         *
         * @param string|int $month_number '01' through '12'.
         * @return string Translated full month name.
         */
        public function get_month($month_number)
        {
        }
        /**
         * Retrieves translated version of month abbreviation string.
         *
         * The $month_name parameter is expected to be the translated or
         * translatable version of the month.
         *
         * @since 2.1.0
         *
         * @param string $month_name Translated month to get abbreviated version.
         * @return string Translated abbreviated month.
         */
        public function get_month_abbrev($month_name)
        {
        }
        /**
         * Retrieves translated version of meridiem string.
         *
         * The $meridiem parameter is expected to not be translated.
         *
         * @since 2.1.0
         *
         * @param string $meridiem Either 'am', 'pm', 'AM', or 'PM'. Not translated version.
         * @return string Translated version
         */
        public function get_meridiem($meridiem)
        {
        }
        /**
         * Global variables are deprecated.
         *
         * For backward compatibility only.
         *
         * @deprecated For backward compatibility only.
         *
         * @global array $weekday
         * @global array $weekday_initial
         * @global array $weekday_abbrev
         * @global array $month
         * @global array $month_abbrev
         *
         * @since 2.1.0
         */
        public function register_globals()
        {
        }
        /**
         * Checks if current locale is RTL.
         *
         * @since 3.0.0
         * @return bool Whether locale is RTL.
         */
        public function is_rtl()
        {
        }
        /**
         * Registers date/time format strings for general POT.
         *
         * Private, unused method to add some date/time formats translated
         * on wp-admin/options-general.php to the general POT that would
         * otherwise be added to the admin POT.
         *
         * @since 3.6.0
         */
        public function _strings_for_pot()
        {
        }
        /**
         * Retrieves the localized list item separator.
         *
         * @since 6.0.0
         *
         * @return string Localized list item separator.
         */
        public function get_list_item_separator()
        {
        }
    }
    /**
     * Comment API: WP_Comment_Query class
     *
     * @package WordPress
     * @subpackage Comments
     * @since 4.4.0
     */
    /**
     * Core class used for querying comments.
     *
     * @since 3.1.0
     *
     * @see WP_Comment_Query::__construct() for accepted arguments.
     */
    class WP_Comment_Query
    {
        /**
         * SQL for database query.
         *
         * @since 4.0.1
         * @var string
         */
        public $request;
        /**
         * Metadata query container
         *
         * @since 3.5.0
         * @var WP_Meta_Query A meta query instance.
         */
        public $meta_query = \false;
        /**
         * Metadata query clauses.
         *
         * @since 4.4.0
         * @var array
         */
        protected $meta_query_clauses;
        /**
         * SQL query clauses.
         *
         * @since 4.4.0
         * @var array
         */
        protected $sql_clauses = array('select' => '', 'from' => '', 'where' => array(), 'groupby' => '', 'orderby' => '', 'limits' => '');
        /**
         * SQL WHERE clause.
         *
         * Stored after the {@see 'comments_clauses'} filter is run on the compiled WHERE sub-clauses.
         *
         * @since 4.4.2
         * @var string
         */
        protected $filtered_where_clause;
        /**
         * Date query container
         *
         * @since 3.7.0
         * @var WP_Date_Query A date query instance.
         */
        public $date_query = \false;
        /**
         * Query vars set by the user.
         *
         * @since 3.1.0
         * @var array
         */
        public $query_vars;
        /**
         * Default values for query vars.
         *
         * @since 4.2.0
         * @var array
         */
        public $query_var_defaults;
        /**
         * List of comments located by the query.
         *
         * @since 4.0.0
         * @var int[]|WP_Comment[]
         */
        public $comments;
        /**
         * The amount of found comments for the current query.
         *
         * @since 4.4.0
         * @var int
         */
        public $found_comments = 0;
        /**
         * The number of pages.
         *
         * @since 4.4.0
         * @var int
         */
        public $max_num_pages = 0;
        /**
         * Make private/protected methods readable for backward compatibility.
         *
         * @since 4.0.0
         *
         * @param string $name      Method to call.
         * @param array  $arguments Arguments to pass when calling.
         * @return mixed|false Return value of the callback, false otherwise.
         */
        public function __call($name, $arguments)
        {
        }
        /**
         * Constructor.
         *
         * Sets up the comment query, based on the query vars passed.
         *
         * @since 4.2.0
         * @since 4.4.0 `$parent__in` and `$parent__not_in` were added.
         * @since 4.4.0 Order by `comment__in` was added. `$update_comment_meta_cache`, `$no_found_rows`,
         *              `$hierarchical`, and `$update_comment_post_cache` were added.
         * @since 4.5.0 Introduced the `$author_url` argument.
         * @since 4.6.0 Introduced the `$cache_domain` argument.
         * @since 4.9.0 Introduced the `$paged` argument.
         * @since 5.1.0 Introduced the `$meta_compare_key` argument.
         * @since 5.3.0 Introduced the `$meta_type_key` argument.
         *
         * @param string|array $query {
         *     Optional. Array or query string of comment query parameters. Default empty.
         *
         *     @type string          $author_email              Comment author email address. Default empty.
         *     @type string          $author_url                Comment author URL. Default empty.
         *     @type int[]           $author__in                Array of author IDs to include comments for. Default empty.
         *     @type int[]           $author__not_in            Array of author IDs to exclude comments for. Default empty.
         *     @type int[]           $comment__in               Array of comment IDs to include. Default empty.
         *     @type int[]           $comment__not_in           Array of comment IDs to exclude. Default empty.
         *     @type bool            $count                     Whether to return a comment count (true) or array of
         *                                                      comment objects (false). Default false.
         *     @type array           $date_query                Date query clauses to limit comments by. See WP_Date_Query.
         *                                                      Default null.
         *     @type string          $fields                    Comment fields to return. Accepts 'ids' for comment IDs
         *                                                      only or empty for all fields. Default empty.
         *     @type int             $ID                        Currently unused.
         *     @type array           $include_unapproved        Array of IDs or email addresses of users whose unapproved
         *                                                      comments will be returned by the query regardless of
         *                                                      `$status`. Default empty.
         *     @type int             $karma                     Karma score to retrieve matching comments for.
         *                                                      Default empty.
         *     @type string|string[] $meta_key                  Meta key or keys to filter by.
         *     @type string|string[] $meta_value                Meta value or values to filter by.
         *     @type string          $meta_compare              MySQL operator used for comparing the meta value.
         *                                                      See WP_Meta_Query::__construct for accepted values and default value.
         *     @type string          $meta_compare_key          MySQL operator used for comparing the meta key.
         *                                                      See WP_Meta_Query::__construct for accepted values and default value.
         *     @type string          $meta_type                 MySQL data type that the meta_value column will be CAST to for comparisons.
         *                                                      See WP_Meta_Query::__construct for accepted values and default value.
         *     @type string          $meta_type_key             MySQL data type that the meta_key column will be CAST to for comparisons.
         *                                                      See WP_Meta_Query::__construct for accepted values and default value.
         *     @type array           $meta_query                An associative array of WP_Meta_Query arguments.
         *                                                      See WP_Meta_Query::__construct for accepted values.
         *     @type int             $number                    Maximum number of comments to retrieve.
         *                                                      Default empty (no limit).
         *     @type int             $paged                     When used with `$number`, defines the page of results to return.
         *                                                      When used with `$offset`, `$offset` takes precedence. Default 1.
         *     @type int             $offset                    Number of comments to offset the query. Used to build
         *                                                      LIMIT clause. Default 0.
         *     @type bool            $no_found_rows             Whether to disable the `SQL_CALC_FOUND_ROWS` query.
         *                                                      Default: true.
         *     @type string|array    $orderby                   Comment status or array of statuses. To use 'meta_value'
         *                                                      or 'meta_value_num', `$meta_key` must also be defined.
         *                                                      To sort by a specific `$meta_query` clause, use that
         *                                                      clause's array key. Accepts:
         *                                                      - 'comment_agent'
         *                                                      - 'comment_approved'
         *                                                      - 'comment_author'
         *                                                      - 'comment_author_email'
         *                                                      - 'comment_author_IP'
         *                                                      - 'comment_author_url'
         *                                                      - 'comment_content'
         *                                                      - 'comment_date'
         *                                                      - 'comment_date_gmt'
         *                                                      - 'comment_ID'
         *                                                      - 'comment_karma'
         *                                                      - 'comment_parent'
         *                                                      - 'comment_post_ID'
         *                                                      - 'comment_type'
         *                                                      - 'user_id'
         *                                                      - 'comment__in'
         *                                                      - 'meta_value'
         *                                                      - 'meta_value_num'
         *                                                      - The value of `$meta_key`
         *                                                      - The array keys of `$meta_query`
         *                                                      - false, an empty array, or 'none' to disable `ORDER BY` clause.
         *                                                      Default: 'comment_date_gmt'.
         *     @type string          $order                     How to order retrieved comments. Accepts 'ASC', 'DESC'.
         *                                                      Default: 'DESC'.
         *     @type int             $parent                    Parent ID of comment to retrieve children of.
         *                                                      Default empty.
         *     @type int[]           $parent__in                Array of parent IDs of comments to retrieve children for.
         *                                                      Default empty.
         *     @type int[]           $parent__not_in            Array of parent IDs of comments *not* to retrieve
         *                                                      children for. Default empty.
         *     @type int[]           $post_author__in           Array of author IDs to retrieve comments for.
         *                                                      Default empty.
         *     @type int[]           $post_author__not_in       Array of author IDs *not* to retrieve comments for.
         *                                                      Default empty.
         *     @type int             $post_ID                   Currently unused.
         *     @type int             $post_id                   Limit results to those affiliated with a given post ID.
         *                                                      Default 0.
         *     @type int[]           $post__in                  Array of post IDs to include affiliated comments for.
         *                                                      Default empty.
         *     @type int[]           $post__not_in              Array of post IDs to exclude affiliated comments for.
         *                                                      Default empty.
         *     @type int             $post_author               Post author ID to limit results by. Default empty.
         *     @type string|string[] $post_status               Post status or array of post statuses to retrieve
         *                                                      affiliated comments for. Pass 'any' to match any value.
         *                                                      Default empty.
         *     @type string|string[] $post_type                 Post type or array of post types to retrieve affiliated
         *                                                      comments for. Pass 'any' to match any value. Default empty.
         *     @type string          $post_name                 Post name to retrieve affiliated comments for.
         *                                                      Default empty.
         *     @type int             $post_parent               Post parent ID to retrieve affiliated comments for.
         *                                                      Default empty.
         *     @type string          $search                    Search term(s) to retrieve matching comments for.
         *                                                      Default empty.
         *     @type string|array    $status                    Comment statuses to limit results by. Accepts an array
         *                                                      or space/comma-separated list of 'hold' (`comment_status=0`),
         *                                                      'approve' (`comment_status=1`), 'all', or a custom
         *                                                      comment status. Default 'all'.
         *     @type string|string[] $type                      Include comments of a given type, or array of types.
         *                                                      Accepts 'comment', 'pings' (includes 'pingback' and
         *                                                      'trackback'), or any custom type string. Default empty.
         *     @type string[]        $type__in                  Include comments from a given array of comment types.
         *                                                      Default empty.
         *     @type string[]        $type__not_in              Exclude comments from a given array of comment types.
         *                                                      Default empty.
         *     @type int             $user_id                   Include comments for a specific user ID. Default empty.
         *     @type bool|string     $hierarchical              Whether to include comment descendants in the results.
         *                                                      - 'threaded' returns a tree, with each comment's children
         *                                                        stored in a `children` property on the `WP_Comment` object.
         *                                                      - 'flat' returns a flat array of found comments plus
         *                                                        their children.
         *                                                      - Boolean `false` leaves out descendants.
         *                                                      The parameter is ignored (forced to `false`) when
         *                                                      `$fields` is 'ids' or 'counts'. Accepts 'threaded',
         *                                                      'flat', or false. Default: false.
         *     @type string          $cache_domain              Unique cache key to be produced when this query is stored in
         *                                                      an object cache. Default is 'core'.
         *     @type bool            $update_comment_meta_cache Whether to prime the metadata cache for found comments.
         *                                                      Default true.
         *     @type bool            $update_comment_post_cache Whether to prime the cache for comment posts.
         *                                                      Default false.
         * }
         */
        public function __construct($query = '')
        {
        }
        /**
         * Parse arguments passed to the comment query with default query parameters.
         *
         * @since 4.2.0 Extracted from WP_Comment_Query::query().
         *
         * @param string|array $query WP_Comment_Query arguments. See WP_Comment_Query::__construct()
         */
        public function parse_query($query = '')
        {
        }
        /**
         * Sets up the WordPress query for retrieving comments.
         *
         * @since 3.1.0
         * @since 4.1.0 Introduced 'comment__in', 'comment__not_in', 'post_author__in',
         *              'post_author__not_in', 'author__in', 'author__not_in', 'post__in',
         *              'post__not_in', 'include_unapproved', 'type__in', and 'type__not_in'
         *              arguments to $query_vars.
         * @since 4.2.0 Moved parsing to WP_Comment_Query::parse_query().
         *
         * @param string|array $query Array or URL query string of parameters.
         * @return array|int List of comments, or number of comments when 'count' is passed as a query var.
         */
        public function query($query)
        {
        }
        /**
         * Get a list of comments matching the query vars.
         *
         * @since 4.2.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @return int|int[]|WP_Comment[] List of comments or number of found comments if `$count` argument is true.
         */
        public function get_comments()
        {
        }
        /**
         * Used internally to get a list of comment IDs matching the query vars.
         *
         * @since 4.4.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @return int|array A single count of comment IDs if a count query. An array of comment IDs if a full query.
         */
        protected function get_comment_ids()
        {
        }
        /**
         * Populates found_comments and max_num_pages properties for the current
         * query if the limit clause was used.
         *
         * @since 4.6.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         */
        private function set_found_comments()
        {
        }
        /**
         * Fetch descendants for located comments.
         *
         * Instead of calling `get_children()` separately on each child comment, we do a single set of queries to fetch
         * the descendant trees for all matched top-level comments.
         *
         * @since 4.4.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param WP_Comment[] $comments Array of top-level comments whose descendants should be filled in.
         * @return array
         */
        protected function fill_descendants($comments)
        {
        }
        /**
         * Used internally to generate an SQL string for searching across multiple columns.
         *
         * @since 3.1.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param string   $search  Search string.
         * @param string[] $columns Array of columns to search.
         * @return string Search SQL.
         */
        protected function get_search_sql($search, $columns)
        {
        }
        /**
         * Parse and sanitize 'orderby' keys passed to the comment query.
         *
         * @since 4.2.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param string $orderby Alias for the field to order by.
         * @return string|false Value to used in the ORDER clause. False otherwise.
         */
        protected function parse_orderby($orderby)
        {
        }
        /**
         * Parse an 'order' query variable and cast it to ASC or DESC as necessary.
         *
         * @since 4.2.0
         *
         * @param string $order The 'order' query variable.
         * @return string The sanitized 'order' query variable.
         */
        protected function parse_order($order)
        {
        }
    }
    /**
     * Dependencies API: WP_Dependencies base class
     *
     * @since 2.6.0
     *
     * @package WordPress
     * @subpackage Dependencies
     */
    /**
     * Core base class extended to register items.
     *
     * @since 2.6.0
     *
     * @see _WP_Dependency
     */
    class WP_Dependencies
    {
        /**
         * An array of all registered dependencies keyed by handle.
         *
         * @since 2.6.8
         *
         * @var _WP_Dependency[]
         */
        public $registered = array();
        /**
         * An array of handles of queued dependencies.
         *
         * @since 2.6.8
         *
         * @var string[]
         */
        public $queue = array();
        /**
         * An array of handles of dependencies to queue.
         *
         * @since 2.6.0
         *
         * @var string[]
         */
        public $to_do = array();
        /**
         * An array of handles of dependencies already queued.
         *
         * @since 2.6.0
         *
         * @var string[]
         */
        public $done = array();
        /**
         * An array of additional arguments passed when a handle is registered.
         *
         * Arguments are appended to the item query string.
         *
         * @since 2.6.0
         *
         * @var array
         */
        public $args = array();
        /**
         * An array of dependency groups to enqueue.
         *
         * Each entry is keyed by handle and represents the integer group level or boolean
         * false if the handle has no group.
         *
         * @since 2.8.0
         *
         * @var (int|false)[]
         */
        public $groups = array();
        /**
         * A handle group to enqueue.
         *
         * @since 2.8.0
         *
         * @deprecated 4.5.0
         * @var int
         */
        public $group = 0;
        /**
         * Cached lookup array of flattened queued items and dependencies.
         *
         * @since 5.4.0
         *
         * @var array
         */
        private $all_queued_deps;
        /**
         * List of assets enqueued before details were registered.
         *
         * @since 5.9.0
         *
         * @var array
         */
        private $queued_before_register = array();
        /**
         * Processes the items and dependencies.
         *
         * Processes the items passed to it or the queue, and their dependencies.
         *
         * @since 2.6.0
         * @since 2.8.0 Added the `$group` parameter.
         *
         * @param string|string[]|false $handles Optional. Items to be processed: queue (false),
         *                                       single item (string), or multiple items (array of strings).
         *                                       Default false.
         * @param int|false             $group   Optional. Group level: level (int), no group (false).
         * @return string[] Array of handles of items that have been processed.
         */
        public function do_items($handles = \false, $group = \false)
        {
        }
        /**
         * Processes a dependency.
         *
         * @since 2.6.0
         * @since 5.5.0 Added the `$group` parameter.
         *
         * @param string    $handle Name of the item. Should be unique.
         * @param int|false $group  Optional. Group level: level (int), no group (false).
         *                          Default false.
         * @return bool True on success, false if not set.
         */
        public function do_item($handle, $group = \false)
        {
        }
        /**
         * Determines dependencies.
         *
         * Recursively builds an array of items to process taking
         * dependencies into account. Does NOT catch infinite loops.
         *
         * @since 2.1.0
         * @since 2.6.0 Moved from `WP_Scripts`.
         * @since 2.8.0 Added the `$group` parameter.
         *
         * @param string|string[] $handles   Item handle (string) or item handles (array of strings).
         * @param bool            $recursion Optional. Internal flag that function is calling itself.
         *                                   Default false.
         * @param int|false       $group     Optional. Group level: level (int), no group (false).
         *                                   Default false.
         * @return bool True on success, false on failure.
         */
        public function all_deps($handles, $recursion = \false, $group = \false)
        {
        }
        /**
         * Register an item.
         *
         * Registers the item if no item of that name already exists.
         *
         * @since 2.1.0
         * @since 2.6.0 Moved from `WP_Scripts`.
         *
         * @param string           $handle Name of the item. Should be unique.
         * @param string|bool      $src    Full URL of the item, or path of the item relative
         *                                 to the WordPress root directory. If source is set to false,
         *                                 item is an alias of other items it depends on.
         * @param string[]         $deps   Optional. An array of registered item handles this item depends on.
         *                                 Default empty array.
         * @param string|bool|null $ver    Optional. String specifying item version number, if it has one,
         *                                 which is added to the URL as a query string for cache busting purposes.
         *                                 If version is set to false, a version number is automatically added
         *                                 equal to current installed WordPress version.
         *                                 If set to null, no version is added.
         * @param mixed            $args   Optional. Custom property of the item. NOT the class property $args.
         *                                 Examples: $media, $in_footer.
         * @return bool Whether the item has been registered. True on success, false on failure.
         */
        public function add($handle, $src, $deps = array(), $ver = \false, $args = \null)
        {
        }
        /**
         * Add extra item data.
         *
         * Adds data to a registered item.
         *
         * @since 2.6.0
         *
         * @param string $handle Name of the item. Should be unique.
         * @param string $key    The data key.
         * @param mixed  $value  The data value.
         * @return bool True on success, false on failure.
         */
        public function add_data($handle, $key, $value)
        {
        }
        /**
         * Get extra item data.
         *
         * Gets data associated with a registered item.
         *
         * @since 3.3.0
         *
         * @param string $handle Name of the item. Should be unique.
         * @param string $key    The data key.
         * @return mixed Extra item data (string), false otherwise.
         */
        public function get_data($handle, $key)
        {
        }
        /**
         * Un-register an item or items.
         *
         * @since 2.1.0
         * @since 2.6.0 Moved from `WP_Scripts`.
         *
         * @param string|string[] $handles Item handle (string) or item handles (array of strings).
         */
        public function remove($handles)
        {
        }
        /**
         * Queue an item or items.
         *
         * Decodes handles and arguments, then queues handles and stores
         * arguments in the class property $args. For example in extending
         * classes, $args is appended to the item url as a query string.
         * Note $args is NOT the $args property of items in the $registered array.
         *
         * @since 2.1.0
         * @since 2.6.0 Moved from `WP_Scripts`.
         *
         * @param string|string[] $handles Item handle (string) or item handles (array of strings).
         */
        public function enqueue($handles)
        {
        }
        /**
         * Dequeue an item or items.
         *
         * Decodes handles and arguments, then dequeues handles
         * and removes arguments from the class property $args.
         *
         * @since 2.1.0
         * @since 2.6.0 Moved from `WP_Scripts`.
         *
         * @param string|string[] $handles Item handle (string) or item handles (array of strings).
         */
        public function dequeue($handles)
        {
        }
        /**
         * Recursively search the passed dependency tree for a handle.
         *
         * @since 4.0.0
         *
         * @param string[] $queue  An array of queued _WP_Dependency handles.
         * @param string   $handle Name of the item. Should be unique.
         * @return bool Whether the handle is found after recursively searching the dependency tree.
         */
        protected function recurse_deps($queue, $handle)
        {
        }
        /**
         * Query the list for an item.
         *
         * @since 2.1.0
         * @since 2.6.0 Moved from `WP_Scripts`.
         *
         * @param string $handle Name of the item. Should be unique.
         * @param string $status Optional. Status of the item to query. Default 'registered'.
         * @return bool|_WP_Dependency Found, or object Item data.
         */
        public function query($handle, $status = 'registered')
        {
        }
        /**
         * Set item group, unless already in a lower group.
         *
         * @since 2.8.0
         *
         * @param string    $handle    Name of the item. Should be unique.
         * @param bool      $recursion Internal flag that calling function was called recursively.
         * @param int|false $group     Group level: level (int), no group (false).
         * @return bool Not already in the group or a lower group.
         */
        public function set_group($handle, $recursion, $group)
        {
        }
    }
    /**
     * WordPress Error API.
     *
     * @package WordPress
     */
    /**
     * WordPress Error class.
     *
     * Container for checking for WordPress errors and error messages. Return
     * WP_Error and use is_wp_error() to check if this class is returned. Many
     * core WordPress functions pass this class in the event of an error and
     * if not handled properly will result in code errors.
     *
     * @since 2.1.0
     */
    class WP_Error
    {
        /**
         * Stores the list of errors.
         *
         * @since 2.1.0
         * @var array
         */
        public $errors = array();
        /**
         * Stores the most recently added data for each error code.
         *
         * @since 2.1.0
         * @var array
         */
        public $error_data = array();
        /**
         * Stores previously added data added for error codes, oldest-to-newest by code.
         *
         * @since 5.6.0
         * @var array[]
         */
        protected $additional_data = array();
        /**
         * Initializes the error.
         *
         * If `$code` is empty, the other parameters will be ignored.
         * When `$code` is not empty, `$message` will be used even if
         * it is empty. The `$data` parameter will be used only if it
         * is not empty.
         *
         * Though the class is constructed with a single error code and
         * message, multiple codes can be added using the `add()` method.
         *
         * @since 2.1.0
         *
         * @param string|int $code    Error code.
         * @param string     $message Error message.
         * @param mixed      $data    Optional. Error data.
         */
        public function __construct($code = '', $message = '', $data = '')
        {
        }
        /**
         * Retrieves all error codes.
         *
         * @since 2.1.0
         *
         * @return array List of error codes, if available.
         */
        public function get_error_codes()
        {
        }
        /**
         * Retrieves the first error code available.
         *
         * @since 2.1.0
         *
         * @return string|int Empty string, if no error codes.
         */
        public function get_error_code()
        {
        }
        /**
         * Retrieves all error messages, or the error messages for the given error code.
         *
         * @since 2.1.0
         *
         * @param string|int $code Optional. Retrieve messages matching code, if exists.
         * @return string[] Error strings on success, or empty array if there are none.
         */
        public function get_error_messages($code = '')
        {
        }
        /**
         * Gets a single error message.
         *
         * This will get the first message available for the code. If no code is
         * given then the first code available will be used.
         *
         * @since 2.1.0
         *
         * @param string|int $code Optional. Error code to retrieve message.
         * @return string The error message.
         */
        public function get_error_message($code = '')
        {
        }
        /**
         * Retrieves the most recently added error data for an error code.
         *
         * @since 2.1.0
         *
         * @param string|int $code Optional. Error code.
         * @return mixed Error data, if it exists.
         */
        public function get_error_data($code = '')
        {
        }
        /**
         * Verifies if the instance contains errors.
         *
         * @since 5.1.0
         *
         * @return bool If the instance contains errors.
         */
        public function has_errors()
        {
        }
        /**
         * Adds an error or appends an additional message to an existing error.
         *
         * @since 2.1.0
         *
         * @param string|int $code    Error code.
         * @param string     $message Error message.
         * @param mixed      $data    Optional. Error data.
         */
        public function add($code, $message, $data = '')
        {
        }
        /**
         * Adds data to an error with the given code.
         *
         * @since 2.1.0
         * @since 5.6.0 Errors can now contain more than one item of error data. {@see WP_Error::$additional_data}.
         *
         * @param mixed      $data Error data.
         * @param string|int $code Error code.
         */
        public function add_data($data, $code = '')
        {
        }
        /**
         * Retrieves all error data for an error code in the order in which the data was added.
         *
         * @since 5.6.0
         *
         * @param string|int $code Error code.
         * @return mixed[] Array of error data, if it exists.
         */
        public function get_all_error_data($code = '')
        {
        }
        /**
         * Removes the specified error.
         *
         * This function removes all error messages associated with the specified
         * error code, along with any error data for that code.
         *
         * @since 4.1.0
         *
         * @param string|int $code Error code.
         */
        public function remove($code)
        {
        }
        /**
         * Merges the errors in the given error object into this one.
         *
         * @since 5.6.0
         *
         * @param WP_Error $error Error object to merge.
         */
        public function merge_from(\WP_Error $error)
        {
        }
        /**
         * Exports the errors in this object into the given one.
         *
         * @since 5.6.0
         *
         * @param WP_Error $error Error object to export into.
         */
        public function export_to(\WP_Error $error)
        {
        }
        /**
         * Copies errors from one WP_Error instance to another.
         *
         * @since 5.6.0
         *
         * @param WP_Error $from The WP_Error to copy from.
         * @param WP_Error $to   The WP_Error to copy to.
         */
        protected static function copy_errors(\WP_Error $from, \WP_Error $to)
        {
        }
    }
    /**
     * Blocks API: WP_Block_Type class
     *
     * @package WordPress
     * @subpackage Blocks
     * @since 5.0.0
     */
    /**
     * Core class representing a block type.
     *
     * @since 5.0.0
     *
     * @see register_block_type()
     */
    class WP_Block_Type
    {
        /**
         * Block API version.
         *
         * @since 5.6.0
         * @var int
         */
        public $api_version = 1;
        /**
         * Block type key.
         *
         * @since 5.0.0
         * @var string
         */
        public $name;
        /**
         * Human-readable block type label.
         *
         * @since 5.5.0
         * @var string
         */
        public $title = '';
        /**
         * Block type category classification, used in search interfaces
         * to arrange block types by category.
         *
         * @since 5.5.0
         * @var string|null
         */
        public $category = \null;
        /**
         * Setting parent lets a block require that it is only available
         * when nested within the specified blocks.
         *
         * @since 5.5.0
         * @var array|null
         */
        public $parent = \null;
        /**
         * Setting ancestor makes a block available only inside the specified
         * block types at any position of the ancestor's block subtree.
         *
         * @since 6.0.0
         * @var array|null
         */
        public $ancestor = \null;
        /**
         * Block type icon.
         *
         * @since 5.5.0
         * @var string|null
         */
        public $icon = \null;
        /**
         * A detailed block type description.
         *
         * @since 5.5.0
         * @var string
         */
        public $description = '';
        /**
         * Additional keywords to produce block type as result
         * in search interfaces.
         *
         * @since 5.5.0
         * @var string[]
         */
        public $keywords = array();
        /**
         * The translation textdomain.
         *
         * @since 5.5.0
         * @var string|null
         */
        public $textdomain = \null;
        /**
         * Alternative block styles.
         *
         * @since 5.5.0
         * @var array
         */
        public $styles = array();
        /**
         * Block variations.
         *
         * @since 5.8.0
         * @var array
         */
        public $variations = array();
        /**
         * Supported features.
         *
         * @since 5.5.0
         * @var array|null
         */
        public $supports = \null;
        /**
         * Structured data for the block preview.
         *
         * @since 5.5.0
         * @var array|null
         */
        public $example = \null;
        /**
         * Block type render callback.
         *
         * @since 5.0.0
         * @var callable
         */
        public $render_callback = \null;
        /**
         * Block type attributes property schemas.
         *
         * @since 5.0.0
         * @var array|null
         */
        public $attributes = \null;
        /**
         * Context values inherited by blocks of this type.
         *
         * @since 5.5.0
         * @var array
         */
        public $uses_context = array();
        /**
         * Context provided by blocks of this type.
         *
         * @since 5.5.0
         * @var array|null
         */
        public $provides_context = \null;
        /**
         * Block type editor only script handle.
         *
         * @since 5.0.0
         * @var string|null
         */
        public $editor_script = \null;
        /**
         * Block type front end and editor script handle.
         *
         * @since 5.0.0
         * @var string|null
         */
        public $script = \null;
        /**
         * Block type front end only script handle.
         *
         * @since 5.9.0
         * @var string|null
         */
        public $view_script = \null;
        /**
         * Block type editor only style handle.
         *
         * @since 5.0.0
         * @var string|null
         */
        public $editor_style = \null;
        /**
         * Block type front end and editor style handle.
         *
         * @since 5.0.0
         * @var string|null
         */
        public $style = \null;
        /**
         * Attributes supported by every block.
         *
         * @since 6.0.0
         * @var array
         */
        const GLOBAL_ATTRIBUTES = array('lock' => array('type' => 'object'));
        /**
         * Constructor.
         *
         * Will populate object properties from the provided arguments.
         *
         * @since 5.0.0
         * @since 5.5.0 Added the `title`, `category`, `parent`, `icon`, `description`,
         *              `keywords`, `textdomain`, `styles`, `supports`, `example`,
         *              `uses_context`, and `provides_context` properties.
         * @since 5.6.0 Added the `api_version` property.
         * @since 5.8.0 Added the `variations` property.
         * @since 5.9.0 Added the `view_script` property.
         * @since 6.0.0 Added the `ancestor` property.
         *
         * @see register_block_type()
         *
         * @param string       $block_type Block type name including namespace.
         * @param array|string $args       {
         *     Optional. Array or string of arguments for registering a block type. Any arguments may be defined,
         *     however the ones described below are supported by default. Default empty array.
         *
         *     @type string        $api_version      Block API version.
         *     @type string        $title            Human-readable block type label.
         *     @type string|null   $category         Block type category classification, used in
         *                                           search interfaces to arrange block types by category.
         *     @type array|null    $parent           Setting parent lets a block require that it is only
         *                                           available when nested within the specified blocks.
         *     @type array|null    $ancestor         Setting ancestor makes a block available only inside the specified
         *                                           block types at any position of the ancestor's block subtree.
         *     @type string|null   $icon             Block type icon.
         *     @type string        $description      A detailed block type description.
         *     @type string[]      $keywords         Additional keywords to produce block type as
         *                                           result in search interfaces.
         *     @type string|null   $textdomain       The translation textdomain.
         *     @type array         $styles           Alternative block styles.
         *     @type array         $variations       Block variations.
         *     @type array|null    $supports         Supported features.
         *     @type array|null    $example          Structured data for the block preview.
         *     @type callable|null $render_callback  Block type render callback.
         *     @type array|null    $attributes       Block type attributes property schemas.
         *     @type array         $uses_context     Context values inherited by blocks of this type.
         *     @type array|null    $provides_context Context provided by blocks of this type.
         *     @type string|null   $editor_script    Block type editor only script handle.
         *     @type string|null   $script           Block type front end and editor script handle.
         *     @type string|null   $view_script      Block type front end only script handle.
         *     @type string|null   $editor_style     Block type editor only style handle.
         *     @type string|null   $style            Block type front end and editor style handle.
         * }
         */
        public function __construct($block_type, $args = array())
        {
        }
        /**
         * Renders the block type output for given attributes.
         *
         * @since 5.0.0
         *
         * @param array  $attributes Optional. Block attributes. Default empty array.
         * @param string $content    Optional. Block content. Default empty string.
         * @return string Rendered block type output.
         */
        public function render($attributes = array(), $content = '')
        {
        }
        /**
         * Returns true if the block type is dynamic, or false otherwise. A dynamic
         * block is one which defers its rendering to occur on-demand at runtime.
         *
         * @since 5.0.0
         *
         * @return bool Whether block type is dynamic.
         */
        public function is_dynamic()
        {
        }
        /**
         * Validates attributes against the current block schema, populating
         * defaulted and missing values.
         *
         * @since 5.0.0
         *
         * @param array $attributes Original block attributes.
         * @return array Prepared block attributes.
         */
        public function prepare_attributes_for_render($attributes)
        {
        }
        /**
         * Sets block type properties.
         *
         * @since 5.0.0
         *
         * @param array|string $args Array or string of arguments for registering a block type.
         *                           See WP_Block_Type::__construct() for information on accepted arguments.
         */
        public function set_props($args)
        {
        }
        /**
         * Get all available block attributes including possible layout attribute from Columns block.
         *
         * @since 5.0.0
         *
         * @return array Array of attributes.
         */
        public function get_attributes()
        {
        }
    }
    /**
     * User API: WP_Roles class
     *
     * @package WordPress
     * @subpackage Users
     * @since 4.4.0
     */
    /**
     * Core class used to implement a user roles API.
     *
     * The role option is simple, the structure is organized by role name that store
     * the name in value of the 'name' key. The capabilities are stored as an array
     * in the value of the 'capability' key.
     *
     *     array (
     *          'rolename' => array (
     *              'name' => 'rolename',
     *              'capabilities' => array()
     *          )
     *     )
     *
     * @since 2.0.0
     */
    class WP_Roles
    {
        /**
         * List of roles and capabilities.
         *
         * @since 2.0.0
         * @var array[]
         */
        public $roles;
        /**
         * List of the role objects.
         *
         * @since 2.0.0
         * @var WP_Role[]
         */
        public $role_objects = array();
        /**
         * List of role names.
         *
         * @since 2.0.0
         * @var string[]
         */
        public $role_names = array();
        /**
         * Option name for storing role list.
         *
         * @since 2.0.0
         * @var string
         */
        public $role_key;
        /**
         * Whether to use the database for retrieval and storage.
         *
         * @since 2.1.0
         * @var bool
         */
        public $use_db = \true;
        /**
         * The site ID the roles are initialized for.
         *
         * @since 4.9.0
         * @var int
         */
        protected $site_id = 0;
        /**
         * Constructor
         *
         * @since 2.0.0
         * @since 4.9.0 The `$site_id` argument was added.
         *
         * @global array $wp_user_roles Used to set the 'roles' property value.
         *
         * @param int $site_id Site ID to initialize roles for. Default is the current site.
         */
        public function __construct($site_id = \null)
        {
        }
        /**
         * Make private/protected methods readable for backward compatibility.
         *
         * @since 4.0.0
         *
         * @param string $name      Method to call.
         * @param array  $arguments Arguments to pass when calling.
         * @return mixed|false Return value of the callback, false otherwise.
         */
        public function __call($name, $arguments)
        {
        }
        /**
         * Set up the object properties.
         *
         * The role key is set to the current prefix for the $wpdb object with
         * 'user_roles' appended. If the $wp_user_roles global is set, then it will
         * be used and the role option will not be updated or used.
         *
         * @since 2.1.0
         * @deprecated 4.9.0 Use WP_Roles::for_site()
         */
        protected function _init()
        {
        }
        /**
         * Reinitialize the object
         *
         * Recreates the role objects. This is typically called only by switch_to_blog()
         * after switching wpdb to a new site ID.
         *
         * @since 3.5.0
         * @deprecated 4.7.0 Use WP_Roles::for_site()
         */
        public function reinit()
        {
        }
        /**
         * Add role name with capabilities to list.
         *
         * Updates the list of roles, if the role doesn't already exist.
         *
         * The capabilities are defined in the following format `array( 'read' => true );`
         * To explicitly deny a role a capability you set the value for that capability to false.
         *
         * @since 2.0.0
         *
         * @param string $role         Role name.
         * @param string $display_name Role display name.
         * @param bool[] $capabilities List of capabilities keyed by the capability name,
         *                             e.g. array( 'edit_posts' => true, 'delete_posts' => false ).
         * @return WP_Role|void WP_Role object, if role is added.
         */
        public function add_role($role, $display_name, $capabilities = array())
        {
        }
        /**
         * Remove role by name.
         *
         * @since 2.0.0
         *
         * @param string $role Role name.
         */
        public function remove_role($role)
        {
        }
        /**
         * Add capability to role.
         *
         * @since 2.0.0
         *
         * @param string $role  Role name.
         * @param string $cap   Capability name.
         * @param bool   $grant Optional. Whether role is capable of performing capability.
         *                      Default true.
         */
        public function add_cap($role, $cap, $grant = \true)
        {
        }
        /**
         * Remove capability from role.
         *
         * @since 2.0.0
         *
         * @param string $role Role name.
         * @param string $cap  Capability name.
         */
        public function remove_cap($role, $cap)
        {
        }
        /**
         * Retrieve role object by name.
         *
         * @since 2.0.0
         *
         * @param string $role Role name.
         * @return WP_Role|null WP_Role object if found, null if the role does not exist.
         */
        public function get_role($role)
        {
        }
        /**
         * Retrieve list of role names.
         *
         * @since 2.0.0
         *
         * @return string[] List of role names.
         */
        public function get_names()
        {
        }
        /**
         * Whether role name is currently in the list of available roles.
         *
         * @since 2.0.0
         *
         * @param string $role Role name to look up.
         * @return bool
         */
        public function is_role($role)
        {
        }
        /**
         * Initializes all of the available roles.
         *
         * @since 4.9.0
         */
        public function init_roles()
        {
        }
        /**
         * Sets the site to operate on. Defaults to the current site.
         *
         * @since 4.9.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param int $site_id Site ID to initialize roles for. Default is the current site.
         */
        public function for_site($site_id = \null)
        {
        }
        /**
         * Gets the ID of the site for which roles are currently initialized.
         *
         * @since 4.9.0
         *
         * @return int Site ID.
         */
        public function get_site_id()
        {
        }
        /**
         * Gets the available roles data.
         *
         * @since 4.9.0
         *
         * @global array $wp_user_roles Used to set the 'roles' property value.
         *
         * @return array Roles array.
         */
        protected function get_roles_data()
        {
        }
    }
    /**
     * A class to render Diffs in different formats.
     *
     * This class renders the diff in classic diff format. It is intended that
     * this class be customized via inheritance, to obtain fancier outputs.
     *
     * Copyright 2004-2010 The Horde Project (http://www.horde.org/)
     *
     * See the enclosed file COPYING for license information (LGPL). If you did
     * not receive this file, see http://opensource.org/licenses/lgpl-license.php.
     *
     * @package Text_Diff
     */
    class Text_Diff_Renderer
    {
        /**
         * Number of leading context "lines" to preserve.
         *
         * This should be left at zero for this class, but subclasses may want to
         * set this to other values.
         */
        var $_leading_context_lines = 0;
        /**
         * Number of trailing context "lines" to preserve.
         *
         * This should be left at zero for this class, but subclasses may want to
         * set this to other values.
         */
        var $_trailing_context_lines = 0;
        /**
         * Constructor.
         */
        function __construct($params = array())
        {
        }
        /**
         * PHP4 constructor.
         */
        public function Text_Diff_Renderer($params = array())
        {
        }
        /**
         * Get any renderer parameters.
         *
         * @return array  All parameters of this renderer object.
         */
        function getParams()
        {
        }
        /**
         * Renders a diff.
         *
         * @param Text_Diff $diff  A Text_Diff object.
         *
         * @return string  The formatted output.
         */
        function render($diff)
        {
        }
        function _block($xbeg, $xlen, $ybeg, $ylen, &$edits)
        {
        }
        function _startDiff()
        {
        }
        function _endDiff()
        {
        }
        function _blockHeader($xbeg, $xlen, $ybeg, $ylen)
        {
        }
        function _startBlock($header)
        {
        }
        function _endBlock()
        {
        }
        function _lines($lines, $prefix = ' ')
        {
        }
        function _context($lines)
        {
        }
        function _added($lines)
        {
        }
        function _deleted($lines)
        {
        }
        function _changed($orig, $final)
        {
        }
    }
    /**
     * "Inline" diff renderer.
     *
     * This class renders diffs in the Wiki-style "inline" format.
     *
     * @author  Ciprian Popovici
     * @package Text_Diff
     */
    class Text_Diff_Renderer_inline extends \Text_Diff_Renderer
    {
        /**
         * Number of leading context "lines" to preserve.
         *
         * @var integer
         */
        var $_leading_context_lines = 10000;
        /**
         * Number of trailing context "lines" to preserve.
         *
         * @var integer
         */
        var $_trailing_context_lines = 10000;
        /**
         * Prefix for inserted text.
         *
         * @var string
         */
        var $_ins_prefix = '<ins>';
        /**
         * Suffix for inserted text.
         *
         * @var string
         */
        var $_ins_suffix = '</ins>';
        /**
         * Prefix for deleted text.
         *
         * @var string
         */
        var $_del_prefix = '<del>';
        /**
         * Suffix for deleted text.
         *
         * @var string
         */
        var $_del_suffix = '</del>';
        /**
         * Header for each change block.
         *
         * @var string
         */
        var $_block_header = '';
        /**
         * Whether to split down to character-level.
         *
         * @var boolean
         */
        var $_split_characters = \false;
        /**
         * What are we currently splitting on? Used to recurse to show word-level
         * or character-level changes.
         *
         * @var string
         */
        var $_split_level = 'lines';
        function _blockHeader($xbeg, $xlen, $ybeg, $ylen)
        {
        }
        function _startBlock($header)
        {
        }
        function _lines($lines, $prefix = ' ', $encode = \true)
        {
        }
        function _added($lines)
        {
        }
        function _deleted($lines, $words = \false)
        {
        }
        function _changed($orig, $final)
        {
        }
        function _splitOnWords($string, $newlineEscape = "\n")
        {
        }
        function _encode(&$string)
        {
        }
    }
    /**
     * Diff API: WP_Text_Diff_Renderer_inline class
     *
     * @package WordPress
     * @subpackage Diff
     * @since 4.7.0
     */
    /**
     * Better word splitting than the PEAR package provides.
     *
     * @since 2.6.0
     * @uses Text_Diff_Renderer_inline Extends
     */
    class WP_Text_Diff_Renderer_inline extends \Text_Diff_Renderer_inline
    {
        /**
         * @ignore
         * @since 2.6.0
         *
         * @param string $string
         * @param string $newlineEscape
         * @return string
         */
        public function _splitOnWords($string, $newlineEscape = "\n")
        {
        }
    }
    /**
     * Blocks API: WP_Block_Editor_Context class
     *
     * @package WordPress
     * @since 5.8.0
     */
    /**
     * Contains information about a block editor being rendered.
     *
     * @since 5.8.0
     */
    final class WP_Block_Editor_Context
    {
        /**
         * String that identifies the block editor being rendered. Can be one of:
         *
         * - `'core/edit-post'`         - The post editor at `/wp-admin/edit.php`.
         * - `'core/edit-widgets'`      - The widgets editor at `/wp-admin/widgets.php`.
         * - `'core/customize-widgets'` - The widgets editor at `/wp-admin/customize.php`.
         * - `'core/edit-site'`         - The site editor at `/wp-admin/site-editor.php`.
         *
         * Defaults to 'core/edit-post'.
         *
         * @since 6.0.0
         *
         * @var string
         */
        public $name = 'core/edit-post';
        /**
         * The post being edited by the block editor. Optional.
         *
         * @since 5.8.0
         *
         * @var WP_Post|null
         */
        public $post = \null;
        /**
         * Constructor.
         *
         * Populates optional properties for a given block editor context.
         *
         * @since 5.8.0
         *
         * @param array $settings The list of optional settings to expose in a given context.
         */
        public function __construct(array $settings = array())
        {
        }
    }
    /**
     * Comment API: WP_Comment class
     *
     * @package WordPress
     * @subpackage Comments
     * @since 4.4.0
     */
    /**
     * Core class used to organize comments as instantiated objects with defined members.
     *
     * @since 4.4.0
     */
    final class WP_Comment
    {
        /**
         * Comment ID.
         *
         * A numeric string, for compatibility reasons.
         *
         * @since 4.4.0
         * @var string
         */
        public $comment_ID;
        /**
         * ID of the post the comment is associated with.
         *
         * A numeric string, for compatibility reasons.
         *
         * @since 4.4.0
         * @var string
         */
        public $comment_post_ID = 0;
        /**
         * Comment author name.
         *
         * @since 4.4.0
         * @var string
         */
        public $comment_author = '';
        /**
         * Comment author email address.
         *
         * @since 4.4.0
         * @var string
         */
        public $comment_author_email = '';
        /**
         * Comment author URL.
         *
         * @since 4.4.0
         * @var string
         */
        public $comment_author_url = '';
        /**
         * Comment author IP address (IPv4 format).
         *
         * @since 4.4.0
         * @var string
         */
        public $comment_author_IP = '';
        /**
         * Comment date in YYYY-MM-DD HH:MM:SS format.
         *
         * @since 4.4.0
         * @var string
         */
        public $comment_date = '0000-00-00 00:00:00';
        /**
         * Comment GMT date in YYYY-MM-DD HH::MM:SS format.
         *
         * @since 4.4.0
         * @var string
         */
        public $comment_date_gmt = '0000-00-00 00:00:00';
        /**
         * Comment content.
         *
         * @since 4.4.0
         * @var string
         */
        public $comment_content;
        /**
         * Comment karma count.
         *
         * A numeric string, for compatibility reasons.
         *
         * @since 4.4.0
         * @var string
         */
        public $comment_karma = 0;
        /**
         * Comment approval status.
         *
         * @since 4.4.0
         * @var string
         */
        public $comment_approved = '1';
        /**
         * Comment author HTTP user agent.
         *
         * @since 4.4.0
         * @var string
         */
        public $comment_agent = '';
        /**
         * Comment type.
         *
         * @since 4.4.0
         * @since 5.5.0 Default value changed to `comment`.
         * @var string
         */
        public $comment_type = 'comment';
        /**
         * Parent comment ID.
         *
         * A numeric string, for compatibility reasons.
         *
         * @since 4.4.0
         * @var string
         */
        public $comment_parent = 0;
        /**
         * Comment author ID.
         *
         * A numeric string, for compatibility reasons.
         *
         * @since 4.4.0
         * @var string
         */
        public $user_id = 0;
        /**
         * Comment children.
         *
         * @since 4.4.0
         * @var array
         */
        protected $children;
        /**
         * Whether children have been populated for this comment object.
         *
         * @since 4.4.0
         * @var bool
         */
        protected $populated_children = \false;
        /**
         * Post fields.
         *
         * @since 4.4.0
         * @var array
         */
        protected $post_fields = array('post_author', 'post_date', 'post_date_gmt', 'post_content', 'post_title', 'post_excerpt', 'post_status', 'comment_status', 'ping_status', 'post_name', 'to_ping', 'pinged', 'post_modified', 'post_modified_gmt', 'post_content_filtered', 'post_parent', 'guid', 'menu_order', 'post_type', 'post_mime_type', 'comment_count');
        /**
         * Retrieves a WP_Comment instance.
         *
         * @since 4.4.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param int $id Comment ID.
         * @return WP_Comment|false Comment object, otherwise false.
         */
        public static function get_instance($id)
        {
        }
        /**
         * Constructor.
         *
         * Populates properties with object vars.
         *
         * @since 4.4.0
         *
         * @param WP_Comment $comment Comment object.
         */
        public function __construct($comment)
        {
        }
        /**
         * Convert object to array.
         *
         * @since 4.4.0
         *
         * @return array Object as array.
         */
        public function to_array()
        {
        }
        /**
         * Get the children of a comment.
         *
         * @since 4.4.0
         *
         * @param array $args {
         *     Array of arguments used to pass to get_comments() and determine format.
         *
         *     @type string $format        Return value format. 'tree' for a hierarchical tree, 'flat' for a flattened array.
         *                                 Default 'tree'.
         *     @type string $status        Comment status to limit results by. Accepts 'hold' (`comment_status=0`),
         *                                 'approve' (`comment_status=1`), 'all', or a custom comment status.
         *                                 Default 'all'.
         *     @type string $hierarchical  Whether to include comment descendants in the results.
         *                                 'threaded' returns a tree, with each comment's children
         *                                 stored in a `children` property on the `WP_Comment` object.
         *                                 'flat' returns a flat array of found comments plus their children.
         *                                 Pass `false` to leave out descendants.
         *                                 The parameter is ignored (forced to `false`) when `$fields` is 'ids' or 'counts'.
         *                                 Accepts 'threaded', 'flat', or false. Default: 'threaded'.
         *     @type string|array $orderby Comment status or array of statuses. To use 'meta_value'
         *                                 or 'meta_value_num', `$meta_key` must also be defined.
         *                                 To sort by a specific `$meta_query` clause, use that
         *                                 clause's array key. Accepts 'comment_agent',
         *                                 'comment_approved', 'comment_author',
         *                                 'comment_author_email', 'comment_author_IP',
         *                                 'comment_author_url', 'comment_content', 'comment_date',
         *                                 'comment_date_gmt', 'comment_ID', 'comment_karma',
         *                                 'comment_parent', 'comment_post_ID', 'comment_type',
         *                                 'user_id', 'comment__in', 'meta_value', 'meta_value_num',
         *                                 the value of $meta_key, and the array keys of
         *                                 `$meta_query`. Also accepts false, an empty array, or
         *                                 'none' to disable `ORDER BY` clause.
         * }
         * @return WP_Comment[] Array of `WP_Comment` objects.
         */
        public function get_children($args = array())
        {
        }
        /**
         * Add a child to the comment.
         *
         * Used by `WP_Comment_Query` when bulk-filling descendants.
         *
         * @since 4.4.0
         *
         * @param WP_Comment $child Child comment.
         */
        public function add_child(\WP_Comment $child)
        {
        }
        /**
         * Get a child comment by ID.
         *
         * @since 4.4.0
         *
         * @param int $child_id ID of the child.
         * @return WP_Comment|false Returns the comment object if found, otherwise false.
         */
        public function get_child($child_id)
        {
        }
        /**
         * Set the 'populated_children' flag.
         *
         * This flag is important for ensuring that calling `get_children()` on a childless comment will not trigger
         * unneeded database queries.
         *
         * @since 4.4.0
         *
         * @param bool $set Whether the comment's children have already been populated.
         */
        public function populated_children($set)
        {
        }
        /**
         * Check whether a non-public property is set.
         *
         * If `$name` matches a post field, the comment post will be loaded and the post's value checked.
         *
         * @since 4.4.0
         *
         * @param string $name Property name.
         * @return bool
         */
        public function __isset($name)
        {
        }
        /**
         * Magic getter.
         *
         * If `$name` matches a post field, the comment post will be loaded and the post's value returned.
         *
         * @since 4.4.0
         *
         * @param string $name
         * @return mixed
         */
        public function __get($name)
        {
        }
    }
    /**
     * Facilitates adding of the WordPress editor as used on the Write and Edit screens.
     *
     * @package WordPress
     * @since 3.3.0
     *
     * Private, not included by default. See wp_editor() in wp-includes/general-template.php.
     */
    final class _WP_Editors
    {
        public static $mce_locale;
        private static $mce_settings = array();
        private static $qt_settings = array();
        private static $plugins = array();
        private static $qt_buttons = array();
        private static $ext_plugins;
        private static $baseurl;
        private static $first_init;
        private static $this_tinymce = \false;
        private static $this_quicktags = \false;
        private static $has_tinymce = \false;
        private static $has_quicktags = \false;
        private static $has_medialib = \false;
        private static $editor_buttons_css = \true;
        private static $drag_drop_upload = \false;
        private static $translation;
        private static $tinymce_scripts_printed = \false;
        private static $link_dialog_printed = \false;
        private function __construct()
        {
        }
        /**
         * Parse default arguments for the editor instance.
         *
         * @since 3.3.0
         *
         * @param string $editor_id HTML ID for the textarea and TinyMCE and Quicktags instances.
         *                          Should not contain square brackets.
         * @param array  $settings {
         *     Array of editor arguments.
         *
         *     @type bool       $wpautop           Whether to use wpautop(). Default true.
         *     @type bool       $media_buttons     Whether to show the Add Media/other media buttons.
         *     @type string     $default_editor    When both TinyMCE and Quicktags are used, set which
         *                                         editor is shown on page load. Default empty.
         *     @type bool       $drag_drop_upload  Whether to enable drag & drop on the editor uploading. Default false.
         *                                         Requires the media modal.
         *     @type string     $textarea_name     Give the textarea a unique name here. Square brackets
         *                                         can be used here. Default $editor_id.
         *     @type int        $textarea_rows     Number rows in the editor textarea. Default 20.
         *     @type string|int $tabindex          Tabindex value to use. Default empty.
         *     @type string     $tabfocus_elements The previous and next element ID to move the focus to
         *                                         when pressing the Tab key in TinyMCE. Default ':prev,:next'.
         *     @type string     $editor_css        Intended for extra styles for both Visual and Text editors.
         *                                         Should include `<style>` tags, and can use "scoped". Default empty.
         *     @type string     $editor_class      Extra classes to add to the editor textarea element. Default empty.
         *     @type bool       $teeny             Whether to output the minimal editor config. Examples include
         *                                         Press This and the Comment editor. Default false.
         *     @type bool       $dfw               Deprecated in 4.1. Unused.
         *     @type bool|array $tinymce           Whether to load TinyMCE. Can be used to pass settings directly to
         *                                         TinyMCE using an array. Default true.
         *     @type bool|array $quicktags         Whether to load Quicktags. Can be used to pass settings directly to
         *                                         Quicktags using an array. Default true.
         * }
         * @return array Parsed arguments array.
         */
        public static function parse_settings($editor_id, $settings)
        {
        }
        /**
         * Outputs the HTML for a single instance of the editor.
         *
         * @since 3.3.0
         *
         * @param string $content   Initial content for the editor.
         * @param string $editor_id HTML ID for the textarea and TinyMCE and Quicktags instances.
         *                          Should not contain square brackets.
         * @param array  $settings  See _WP_Editors::parse_settings() for description.
         */
        public static function editor($content, $editor_id, $settings = array())
        {
        }
        /**
         * @since 3.3.0
         *
         * @param string $editor_id Unique editor identifier, e.g. 'content'.
         * @param array  $set       Array of editor arguments.
         */
        public static function editor_settings($editor_id, $set)
        {
        }
        /**
         * @since 3.3.0
         *
         * @param array $init
         * @return string
         */
        private static function _parse_init($init)
        {
        }
        /**
         * @since 3.3.0
         *
         * @param bool $default_scripts Optional. Whether default scripts should be enqueued. Default false.
         */
        public static function enqueue_scripts($default_scripts = \false)
        {
        }
        /**
         * Enqueue all editor scripts.
         * For use when the editor is going to be initialized after page load.
         *
         * @since 4.8.0
         */
        public static function enqueue_default_editor()
        {
        }
        /**
         * Print (output) all editor scripts and default settings.
         * For use when the editor is going to be initialized after page load.
         *
         * @since 4.8.0
         */
        public static function print_default_editor_scripts()
        {
        }
        /**
         * Returns the TinyMCE locale.
         *
         * @since 4.8.0
         *
         * @return string
         */
        public static function get_mce_locale()
        {
        }
        /**
         * Returns the TinyMCE base URL.
         *
         * @since 4.8.0
         *
         * @return string
         */
        public static function get_baseurl()
        {
        }
        /**
         * Returns the default TinyMCE settings.
         * Doesn't include plugins, buttons, editor selector.
         *
         * @since 4.8.0
         *
         * @global string $tinymce_version
         *
         * @return array
         */
        private static function default_settings()
        {
        }
        /**
         * @since 4.7.0
         *
         * @return array
         */
        private static function get_translation()
        {
        }
        /**
         * Translates the default TinyMCE strings and returns them as JSON encoded object ready to be loaded with tinymce.addI18n(),
         * or as JS snippet that should run after tinymce.js is loaded.
         *
         * @since 3.9.0
         *
         * @param string $mce_locale The locale used for the editor.
         * @param bool   $json_only  Optional. Whether to include the JavaScript calls to tinymce.addI18n() and
         *                           tinymce.ScriptLoader.markDone().
         * @return string Translation object, JSON encoded.
         */
        public static function wp_mce_translation($mce_locale = '', $json_only = \false)
        {
        }
        /**
         * Force uncompressed TinyMCE when a custom theme has been defined.
         *
         * The compressed TinyMCE file cannot deal with custom themes, so this makes
         * sure that we use the uncompressed TinyMCE file if a theme is defined.
         * Even if we are on a production environment.
         *
         * @since 5.0.0
         */
        public static function force_uncompressed_tinymce()
        {
        }
        /**
         * Print (output) the main TinyMCE scripts.
         *
         * @since 4.8.0
         *
         * @global bool $concatenate_scripts
         */
        public static function print_tinymce_scripts()
        {
        }
        /**
         * Print (output) the TinyMCE configuration and initialization scripts.
         *
         * @since 3.3.0
         *
         * @global string $tinymce_version
         */
        public static function editor_js()
        {
        }
        /**
         * Outputs the HTML for distraction-free writing mode.
         *
         * @since 3.2.0
         * @deprecated 4.3.0
         */
        public static function wp_fullscreen_html()
        {
        }
        /**
         * Performs post queries for internal linking.
         *
         * @since 3.1.0
         *
         * @param array $args Optional. Accepts 'pagenum' and 's' (search) arguments.
         * @return array|false $results {
         *     An array of associative arrays of query results, false if there are none.
         *
         *     @type array ...$0 {
         *         @type int    $ID        Post ID.
         *         @type string $title     The trimmed, escaped post title.
         *         @type string $permalink Post permalink.
         *         @type string $info      A 'Y/m/d'-formatted date for 'post' post type,
         *                                 the 'singular_name' post type label otherwise.
         *     }
         * }
         */
        public static function wp_link_query($args = array())
        {
        }
        /**
         * Dialog for internal linking.
         *
         * @since 3.1.0
         */
        public static function wp_link_dialog()
        {
        }
    }
    /**
     * Taxonomy API: Walker_Category class
     *
     * @package WordPress
     * @subpackage Template
     * @since 4.4.0
     */
    /**
     * Core class used to create an HTML list of categories.
     *
     * @since 2.1.0
     *
     * @see Walker
     */
    class Walker_Category extends \Walker
    {
        /**
         * What the class handles.
         *
         * @since 2.1.0
         * @var string
         *
         * @see Walker::$tree_type
         */
        public $tree_type = 'category';
        /**
         * Database fields to use.
         *
         * @since 2.1.0
         * @var string[]
         *
         * @see Walker::$db_fields
         * @todo Decouple this
         */
        public $db_fields = array('parent' => 'parent', 'id' => 'term_id');
        /**
         * Starts the list before the elements are added.
         *
         * @since 2.1.0
         *
         * @see Walker::start_lvl()
         *
         * @param string $output Used to append additional content. Passed by reference.
         * @param int    $depth  Optional. Depth of category. Used for tab indentation. Default 0.
         * @param array  $args   Optional. An array of arguments. Will only append content if style argument
         *                       value is 'list'. See wp_list_categories(). Default empty array.
         */
        public function start_lvl(&$output, $depth = 0, $args = array())
        {
        }
        /**
         * Ends the list of after the elements are added.
         *
         * @since 2.1.0
         *
         * @see Walker::end_lvl()
         *
         * @param string $output Used to append additional content. Passed by reference.
         * @param int    $depth  Optional. Depth of category. Used for tab indentation. Default 0.
         * @param array  $args   Optional. An array of arguments. Will only append content if style argument
         *                       value is 'list'. See wp_list_categories(). Default empty array.
         */
        public function end_lvl(&$output, $depth = 0, $args = array())
        {
        }
        /**
         * Starts the element output.
         *
         * @since 2.1.0
         * @since 5.9.0 Renamed `$category` to `$data_object` and `$id` to `$current_object_id`
         *              to match parent class for PHP 8 named parameter support.
         *
         * @see Walker::start_el()
         *
         * @param string  $output            Used to append additional content (passed by reference).
         * @param WP_Term $data_object       Category data object.
         * @param int     $depth             Optional. Depth of category in reference to parents. Default 0.
         * @param array   $args              Optional. An array of arguments. See wp_list_categories().
         *                                   Default empty array.
         * @param int     $current_object_id Optional. ID of the current category. Default 0.
         */
        public function start_el(&$output, $data_object, $depth = 0, $args = array(), $current_object_id = 0)
        {
        }
        /**
         * Ends the element output, if needed.
         *
         * @since 2.1.0
         * @since 5.9.0 Renamed `$page` to `$data_object` to match parent class for PHP 8 named parameter support.
         *
         * @see Walker::end_el()
         *
         * @param string $output      Used to append additional content (passed by reference).
         * @param object $data_object Category data object. Not used.
         * @param int    $depth       Optional. Depth of category. Not used.
         * @param array  $args        Optional. An array of arguments. Only uses 'list' for whether should
         *                            append to output. See wp_list_categories(). Default empty array.
         */
        public function end_el(&$output, $data_object, $depth = 0, $args = array())
        {
        }
    }
    /**
     * Error Protection API: WP_Recovery_Mode_Key_Service class
     *
     * @package WordPress
     * @since 5.2.0
     */
    /**
     * Core class used to generate and validate keys used to enter Recovery Mode.
     *
     * @since 5.2.0
     */
    final class WP_Recovery_Mode_Key_Service
    {
        /**
         * The option name used to store the keys.
         *
         * @since 5.2.0
         * @var string
         */
        private $option_name = 'recovery_keys';
        /**
         * Creates a recovery mode token.
         *
         * @since 5.2.0
         *
         * @return string A random string to identify its associated key in storage.
         */
        public function generate_recovery_mode_token()
        {
        }
        /**
         * Creates a recovery mode key.
         *
         * @since 5.2.0
         *
         * @global PasswordHash $wp_hasher
         *
         * @param string $token A token generated by {@see generate_recovery_mode_token()}.
         * @return string Recovery mode key.
         */
        public function generate_and_store_recovery_mode_key($token)
        {
        }
        /**
         * Verifies if the recovery mode key is correct.
         *
         * Recovery mode keys can only be used once; the key will be consumed in the process.
         *
         * @since 5.2.0
         *
         * @param string $token The token used when generating the given key.
         * @param string $key   The unhashed key.
         * @param int    $ttl   Time in seconds for the key to be valid for.
         * @return true|WP_Error True on success, error object on failure.
         */
        public function validate_recovery_mode_key($token, $key, $ttl)
        {
        }
        /**
         * Removes expired recovery mode keys.
         *
         * @since 5.2.0
         *
         * @param int $ttl Time in seconds for the keys to be valid for.
         */
        public function clean_expired_keys($ttl)
        {
        }
        /**
         * Removes a used recovery key.
         *
         * @since 5.2.0
         *
         * @param string $token The token used when generating a recovery mode key.
         */
        private function remove_key($token)
        {
        }
        /**
         * Gets the recovery key records.
         *
         * @since 5.2.0
         *
         * @return array Associative array of $token => $data pairs, where $data has keys 'hashed_key'
         *               and 'created_at'.
         */
        private function get_keys()
        {
        }
        /**
         * Updates the recovery key records.
         *
         * @since 5.2.0
         *
         * @param array $keys Associative array of $token => $data pairs, where $data has keys 'hashed_key'
         *                    and 'created_at'.
         * @return bool True on success, false on failure.
         */
        private function update_keys(array $keys)
        {
        }
    }
    /**
     * Blocks API: WP_Block_Pattern_Categories_Registry class
     *
     * @package WordPress
     * @subpackage Blocks
     * @since 5.5.0
     */
    /**
     * Class used for interacting with block pattern categories.
     */
    final class WP_Block_Pattern_Categories_Registry
    {
        /**
         * Registered block pattern categories array.
         *
         * @since 5.5.0
         * @var array[]
         */
        private $registered_categories = array();
        /**
         * Pattern categories registered outside the `init` action.
         *
         * @since 6.0.0
         * @var array[]
         */
        private $registered_categories_outside_init = array();
        /**
         * Container for the main instance of the class.
         *
         * @since 5.5.0
         * @var WP_Block_Pattern_Categories_Registry|null
         */
        private static $instance = \null;
        /**
         * Registers a pattern category.
         *
         * @since 5.5.0
         *
         * @param string $category_name       Pattern category name including namespace.
         * @param array  $category_properties {
         *     List of properties for the block pattern category.
         *
         *     @type string $label Required. A human-readable label for the pattern category.
         * }
         * @return bool True if the pattern was registered with success and false otherwise.
         */
        public function register($category_name, $category_properties)
        {
        }
        /**
         * Unregisters a pattern category.
         *
         * @since 5.5.0
         *
         * @param string $category_name Pattern category name including namespace.
         * @return bool True if the pattern was unregistered with success and false otherwise.
         */
        public function unregister($category_name)
        {
        }
        /**
         * Retrieves an array containing the properties of a registered pattern category.
         *
         * @since 5.5.0
         *
         * @param string $category_name Pattern category name including namespace.
         * @return array Registered pattern properties.
         */
        public function get_registered($category_name)
        {
        }
        /**
         * Retrieves all registered pattern categories.
         *
         * @since 5.5.0
         *
         * @param bool $outside_init_only Return only categories registered outside the `init` action.
         * @return array[] Array of arrays containing the registered pattern categories properties.
         */
        public function get_all_registered($outside_init_only = \false)
        {
        }
        /**
         * Checks if a pattern category is registered.
         *
         * @since 5.5.0
         *
         * @param string $category_name Pattern category name including namespace.
         * @return bool True if the pattern category is registered, false otherwise.
         */
        public function is_registered($category_name)
        {
        }
        /**
         * Utility method to retrieve the main instance of the class.
         *
         * The instance will be created if it does not exist yet.
         *
         * @since 5.5.0
         *
         * @return WP_Block_Pattern_Categories_Registry The main instance.
         */
        public static function get_instance()
        {
        }
    }
    /**
     * Network API: WP_Network class
     *
     * @package WordPress
     * @subpackage Multisite
     * @since 4.4.0
     */
    /**
     * Core class used for interacting with a multisite network.
     *
     * This class is used during load to populate the `$current_site` global and
     * setup the current network.
     *
     * This class is most useful in WordPress multi-network installations where the
     * ability to interact with any network of sites is required.
     *
     * @since 4.4.0
     *
     * @property int $id
     * @property int $site_id
     */
    class WP_Network
    {
        /**
         * Network ID.
         *
         * @since 4.4.0
         * @since 4.6.0 Converted from public to private to explicitly enable more intuitive
         *              access via magic methods. As part of the access change, the type was
         *              also changed from `string` to `int`.
         * @var int
         */
        private $id;
        /**
         * Domain of the network.
         *
         * @since 4.4.0
         * @var string
         */
        public $domain = '';
        /**
         * Path of the network.
         *
         * @since 4.4.0
         * @var string
         */
        public $path = '';
        /**
         * The ID of the network's main site.
         *
         * Named "blog" vs. "site" for legacy reasons. A main site is mapped to
         * the network when the network is created.
         *
         * A numeric string, for compatibility reasons.
         *
         * @since 4.4.0
         * @var string
         */
        private $blog_id = '0';
        /**
         * Domain used to set cookies for this network.
         *
         * @since 4.4.0
         * @var string
         */
        public $cookie_domain = '';
        /**
         * Name of this network.
         *
         * Named "site" vs. "network" for legacy reasons.
         *
         * @since 4.4.0
         * @var string
         */
        public $site_name = '';
        /**
         * Retrieve a network from the database by its ID.
         *
         * @since 4.4.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param int $network_id The ID of the network to retrieve.
         * @return WP_Network|false The network's object if found. False if not.
         */
        public static function get_instance($network_id)
        {
        }
        /**
         * Create a new WP_Network object.
         *
         * Will populate object properties from the object provided and assign other
         * default properties based on that information.
         *
         * @since 4.4.0
         *
         * @param WP_Network|object $network A network object.
         */
        public function __construct($network)
        {
        }
        /**
         * Getter.
         *
         * Allows current multisite naming conventions when getting properties.
         *
         * @since 4.6.0
         *
         * @param string $key Property to get.
         * @return mixed Value of the property. Null if not available.
         */
        public function __get($key)
        {
        }
        /**
         * Isset-er.
         *
         * Allows current multisite naming conventions when checking for properties.
         *
         * @since 4.6.0
         *
         * @param string $key Property to check if set.
         * @return bool Whether the property is set.
         */
        public function __isset($key)
        {
        }
        /**
         * Setter.
         *
         * Allows current multisite naming conventions while setting properties.
         *
         * @since 4.6.0
         *
         * @param string $key   Property to set.
         * @param mixed  $value Value to assign to the property.
         */
        public function __set($key, $value)
        {
        }
        /**
         * Returns the main site ID for the network.
         *
         * Internal method used by the magic getter for the 'blog_id' and 'site_id'
         * properties.
         *
         * @since 4.9.0
         *
         * @return int The ID of the main site.
         */
        private function get_main_site_id()
        {
        }
        /**
         * Set the site name assigned to the network if one has not been populated.
         *
         * @since 4.4.0
         */
        private function _set_site_name()
        {
        }
        /**
         * Set the cookie domain based on the network domain if one has
         * not been populated.
         *
         * @todo What if the domain of the network doesn't match the current site?
         *
         * @since 4.4.0
         */
        private function _set_cookie_domain()
        {
        }
        /**
         * Retrieve the closest matching network for a domain and path.
         *
         * This will not necessarily return an exact match for a domain and path. Instead, it
         * breaks the domain and path into pieces that are then used to match the closest
         * possibility from a query.
         *
         * The intent of this method is to match a network during bootstrap for a
         * requested site address.
         *
         * @since 4.4.0
         *
         * @param string   $domain   Domain to check.
         * @param string   $path     Path to check.
         * @param int|null $segments Path segments to use. Defaults to null, or the full path.
         * @return WP_Network|false Network object if successful. False when no network is found.
         */
        public static function get_by_path($domain = '', $path = '', $segments = \null)
        {
        }
    }
    /**
     * WordPress environment setup class.
     *
     * @package WordPress
     * @since 2.0.0
     */
    class WP
    {
        /**
         * Public query variables.
         *
         * Long list of public query variables.
         *
         * @since 2.0.0
         * @var string[]
         */
        public $public_query_vars = array('m', 'p', 'posts', 'w', 'cat', 'withcomments', 'withoutcomments', 's', 'search', 'exact', 'sentence', 'calendar', 'page', 'paged', 'more', 'tb', 'pb', 'author', 'order', 'orderby', 'year', 'monthnum', 'day', 'hour', 'minute', 'second', 'name', 'category_name', 'tag', 'feed', 'author_name', 'pagename', 'page_id', 'error', 'attachment', 'attachment_id', 'subpost', 'subpost_id', 'preview', 'robots', 'favicon', 'taxonomy', 'term', 'cpage', 'post_type', 'embed');
        /**
         * Private query variables.
         *
         * Long list of private query variables.
         *
         * @since 2.0.0
         * @var string[]
         */
        public $private_query_vars = array('offset', 'posts_per_page', 'posts_per_archive_page', 'showposts', 'nopaging', 'post_type', 'post_status', 'category__in', 'category__not_in', 'category__and', 'tag__in', 'tag__not_in', 'tag__and', 'tag_slug__in', 'tag_slug__and', 'tag_id', 'post_mime_type', 'perm', 'comments_per_page', 'post__in', 'post__not_in', 'post_parent', 'post_parent__in', 'post_parent__not_in', 'title', 'fields');
        /**
         * Extra query variables set by the user.
         *
         * @since 2.1.0
         * @var array
         */
        public $extra_query_vars = array();
        /**
         * Query variables for setting up the WordPress Query Loop.
         *
         * @since 2.0.0
         * @var array
         */
        public $query_vars = array();
        /**
         * String parsed to set the query variables.
         *
         * @since 2.0.0
         * @var string
         */
        public $query_string = '';
        /**
         * The request path, e.g. 2015/05/06.
         *
         * @since 2.0.0
         * @var string
         */
        public $request = '';
        /**
         * Rewrite rule the request matched.
         *
         * @since 2.0.0
         * @var string
         */
        public $matched_rule = '';
        /**
         * Rewrite query the request matched.
         *
         * @since 2.0.0
         * @var string
         */
        public $matched_query = '';
        /**
         * Whether already did the permalink.
         *
         * @since 2.0.0
         * @var bool
         */
        public $did_permalink = \false;
        /**
         * Adds a query variable to the list of public query variables.
         *
         * @since 2.1.0
         *
         * @param string $qv Query variable name.
         */
        public function add_query_var($qv)
        {
        }
        /**
         * Removes a query variable from a list of public query variables.
         *
         * @since 4.5.0
         *
         * @param string $name Query variable name.
         */
        public function remove_query_var($name)
        {
        }
        /**
         * Sets the value of a query variable.
         *
         * @since 2.3.0
         *
         * @param string $key   Query variable name.
         * @param mixed  $value Query variable value.
         */
        public function set_query_var($key, $value)
        {
        }
        /**
         * Parses the request to find the correct WordPress query.
         *
         * Sets up the query variables based on the request. There are also many
         * filters and actions that can be used to further manipulate the result.
         *
         * @since 2.0.0
         * @since 6.0.0 A return value was added.
         *
         * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
         *
         * @param array|string $extra_query_vars Set the extra query variables.
         * @return bool Whether the request was parsed.
         */
        public function parse_request($extra_query_vars = '')
        {
        }
        /**
         * Sends additional HTTP headers for caching, content type, etc.
         *
         * Sets the Content-Type header. Sets the 'error' status (if passed) and optionally exits.
         * If showing a feed, it will also send Last-Modified, ETag, and 304 status if needed.
         *
         * @since 2.0.0
         * @since 4.4.0 `X-Pingback` header is added conditionally after posts have been queried in handle_404().
         */
        public function send_headers()
        {
        }
        /**
         * Sets the query string property based off of the query variable property.
         *
         * The {@see 'query_string'} filter is deprecated, but still works. Plugins should
         * use the {@see 'request'} filter instead.
         *
         * @since 2.0.0
         */
        public function build_query_string()
        {
        }
        /**
         * Set up the WordPress Globals.
         *
         * The query_vars property will be extracted to the GLOBALS. So care should
         * be taken when naming global variables that might interfere with the
         * WordPress environment.
         *
         * @since 2.0.0
         *
         * @global WP_Query     $wp_query     WordPress Query object.
         * @global string       $query_string Query string for the loop.
         * @global array        $posts        The found posts.
         * @global WP_Post|null $post         The current post, if available.
         * @global string       $request      The SQL statement for the request.
         * @global int          $more         Only set, if single page or post.
         * @global int          $single       If single page or post. Only set, if single page or post.
         * @global WP_User      $authordata   Only set, if author archive.
         */
        public function register_globals()
        {
        }
        /**
         * Set up the current user.
         *
         * @since 2.0.0
         */
        public function init()
        {
        }
        /**
         * Set up the Loop based on the query variables.
         *
         * @since 2.0.0
         *
         * @global WP_Query $wp_the_query WordPress Query object.
         */
        public function query_posts()
        {
        }
        /**
         * Set the Headers for 404, if nothing is found for requested URL.
         *
         * Issue a 404 if a request doesn't match any posts and doesn't match any object
         * (e.g. an existing-but-empty category, tag, author) and a 404 was not already issued,
         * and if the request was not a search or the homepage.
         *
         * Otherwise, issue a 200.
         *
         * This sets headers after posts have been queried. handle_404() really means "handle status".
         * By inspecting the result of querying posts, seemingly successful requests can be switched to
         * a 404 so that canonical redirection logic can kick in.
         *
         * @since 2.0.0
         *
         * @global WP_Query $wp_query WordPress Query object.
         */
        public function handle_404()
        {
        }
        /**
         * Sets up all of the variables required by the WordPress environment.
         *
         * The action {@see 'wp'} has one parameter that references the WP object. It
         * allows for accessing the properties and methods to further manipulate the
         * object.
         *
         * @since 2.0.0
         *
         * @param string|array $query_args Passed to parse_request().
         */
        public function main($query_args = '')
        {
        }
    }
    /**
     * API for fetching the HTML to embed remote content based on a provided URL
     *
     * Used internally by the WP_Embed class, but is designed to be generic.
     *
     * @link https://wordpress.org/support/article/embeds/
     * @link http://oembed.com/
     *
     * @package WordPress
     * @subpackage oEmbed
     */
    /**
     * Core class used to implement oEmbed functionality.
     *
     * @since 2.9.0
     */
    class WP_oEmbed
    {
        /**
         * A list of oEmbed providers.
         *
         * @since 2.9.0
         * @var array
         */
        public $providers = array();
        /**
         * A list of an early oEmbed providers.
         *
         * @since 4.0.0
         * @var array
         */
        public static $early_providers = array();
        /**
         * A list of private/protected methods, used for backward compatibility.
         *
         * @since 4.2.0
         * @var array
         */
        private $compat_methods = array('_fetch_with_format', '_parse_json', '_parse_xml', '_parse_xml_body');
        /**
         * Constructor.
         *
         * @since 2.9.0
         */
        public function __construct()
        {
        }
        /**
         * Exposes private/protected methods for backward compatibility.
         *
         * @since 4.0.0
         *
         * @param string $name      Method to call.
         * @param array  $arguments Arguments to pass when calling.
         * @return mixed|false Return value of the callback, false otherwise.
         */
        public function __call($name, $arguments)
        {
        }
        /**
         * Takes a URL and returns the corresponding oEmbed provider's URL, if there is one.
         *
         * @since 4.0.0
         *
         * @see WP_oEmbed::discover()
         *
         * @param string       $url  The URL to the content.
         * @param string|array $args {
         *     Optional. Additional provider arguments. Default empty.
         *
         *     @type bool $discover Optional. Determines whether to attempt to discover link tags
         *                          at the given URL for an oEmbed provider when the provider URL
         *                          is not found in the built-in providers list. Default true.
         * }
         * @return string|false The oEmbed provider URL on success, false on failure.
         */
        public function get_provider($url, $args = '')
        {
        }
        /**
         * Adds an oEmbed provider.
         *
         * The provider is added just-in-time when wp_oembed_add_provider() is called before
         * the {@see 'plugins_loaded'} hook.
         *
         * The just-in-time addition is for the benefit of the {@see 'oembed_providers'} filter.
         *
         * @since 4.0.0
         *
         * @see wp_oembed_add_provider()
         *
         * @param string $format   Format of URL that this provider can handle. You can use
         *                         asterisks as wildcards.
         * @param string $provider The URL to the oEmbed provider..
         * @param bool   $regex    Optional. Whether the $format parameter is in a regex format.
         *                         Default false.
         */
        public static function _add_provider_early($format, $provider, $regex = \false)
        {
        }
        /**
         * Removes an oEmbed provider.
         *
         * The provider is removed just-in-time when wp_oembed_remove_provider() is called before
         * the {@see 'plugins_loaded'} hook.
         *
         * The just-in-time removal is for the benefit of the {@see 'oembed_providers'} filter.
         *
         * @since 4.0.0
         *
         * @see wp_oembed_remove_provider()
         *
         * @param string $format The format of URL that this provider can handle. You can use
         *                       asterisks as wildcards.
         */
        public static function _remove_provider_early($format)
        {
        }
        /**
         * Takes a URL and attempts to return the oEmbed data.
         *
         * @see WP_oEmbed::fetch()
         *
         * @since 4.8.0
         *
         * @param string       $url  The URL to the content that should be attempted to be embedded.
         * @param string|array $args Optional. Additional arguments for retrieving embed HTML.
         *                           See wp_oembed_get() for accepted arguments. Default empty.
         * @return object|false The result in the form of an object on success, false on failure.
         */
        public function get_data($url, $args = '')
        {
        }
        /**
         * The do-it-all function that takes a URL and attempts to return the HTML.
         *
         * @see WP_oEmbed::fetch()
         * @see WP_oEmbed::data2html()
         *
         * @since 2.9.0
         *
         * @param string       $url  The URL to the content that should be attempted to be embedded.
         * @param string|array $args Optional. Additional arguments for retrieving embed HTML.
         *                           See wp_oembed_get() for accepted arguments. Default empty.
         * @return string|false The UNSANITIZED (and potentially unsafe) HTML that should be used to embed
         *                      on success, false on failure.
         */
        public function get_html($url, $args = '')
        {
        }
        /**
         * Attempts to discover link tags at the given URL for an oEmbed provider.
         *
         * @since 2.9.0
         *
         * @param string $url The URL that should be inspected for discovery `<link>` tags.
         * @return string|false The oEmbed provider URL on success, false on failure.
         */
        public function discover($url)
        {
        }
        /**
         * Connects to a oEmbed provider and returns the result.
         *
         * @since 2.9.0
         *
         * @param string       $provider The URL to the oEmbed provider.
         * @param string       $url      The URL to the content that is desired to be embedded.
         * @param string|array $args     Optional. Additional arguments for retrieving embed HTML.
         *                               See wp_oembed_get() for accepted arguments. Default empty.
         * @return object|false The result in the form of an object on success, false on failure.
         */
        public function fetch($provider, $url, $args = '')
        {
        }
        /**
         * Fetches result from an oEmbed provider for a specific format and complete provider URL
         *
         * @since 3.0.0
         *
         * @param string $provider_url_with_args URL to the provider with full arguments list (url, maxheight, etc.)
         * @param string $format                 Format to use.
         * @return object|false|WP_Error The result in the form of an object on success, false on failure.
         */
        private function _fetch_with_format($provider_url_with_args, $format)
        {
        }
        /**
         * Parses a json response body.
         *
         * @since 3.0.0
         *
         * @param string $response_body
         * @return object|false
         */
        private function _parse_json($response_body)
        {
        }
        /**
         * Parses an XML response body.
         *
         * @since 3.0.0
         *
         * @param string $response_body
         * @return object|false
         */
        private function _parse_xml($response_body)
        {
        }
        /**
         * Serves as a helper function for parsing an XML response body.
         *
         * @since 3.6.0
         *
         * @param string $response_body
         * @return stdClass|false
         */
        private function _parse_xml_body($response_body)
        {
        }
        /**
         * Converts a data object from WP_oEmbed::fetch() and returns the HTML.
         *
         * @since 2.9.0
         *
         * @param object $data A data object result from an oEmbed provider.
         * @param string $url  The URL to the content that is desired to be embedded.
         * @return string|false The HTML needed to embed on success, false on failure.
         */
        public function data2html($data, $url)
        {
        }
        /**
         * Strips any new lines from the HTML.
         *
         * @since 2.9.0 as strip_scribd_newlines()
         * @since 3.0.0
         *
         * @param string $html Existing HTML.
         * @param object $data Data object from WP_oEmbed::data2html()
         * @param string $url The original URL passed to oEmbed.
         * @return string Possibly modified $html
         */
        public function _strip_newlines($html, $data, $url)
        {
        }
    }
    /**
     * Sitemaps: WP_Sitemaps_Provider class
     *
     * This class is a base class for other sitemap providers to extend and contains shared functionality.
     *
     * @package WordPress
     * @subpackage Sitemaps
     * @since 5.5.0
     */
    /**
     * Class WP_Sitemaps_Provider.
     *
     * @since 5.5.0
     */
    abstract class WP_Sitemaps_Provider
    {
        /**
         * Provider name.
         *
         * This will also be used as the public-facing name in URLs.
         *
         * @since 5.5.0
         *
         * @var string
         */
        protected $name = '';
        /**
         * Object type name (e.g. 'post', 'term', 'user').
         *
         * @since 5.5.0
         *
         * @var string
         */
        protected $object_type = '';
        /**
         * Gets a URL list for a sitemap.
         *
         * @since 5.5.0
         *
         * @param int    $page_num       Page of results.
         * @param string $object_subtype Optional. Object subtype name. Default empty.
         * @return array[] Array of URL information for a sitemap.
         */
        public abstract function get_url_list($page_num, $object_subtype = '');
        /**
         * Gets the max number of pages available for the object type.
         *
         * @since 5.5.0
         *
         * @param string $object_subtype Optional. Object subtype. Default empty.
         * @return int Total number of pages.
         */
        public abstract function get_max_num_pages($object_subtype = '');
        /**
         * Gets data about each sitemap type.
         *
         * @since 5.5.0
         *
         * @return array[] Array of sitemap types including object subtype name and number of pages.
         */
        public function get_sitemap_type_data()
        {
        }
        /**
         * Lists sitemap pages exposed by this provider.
         *
         * The returned data is used to populate the sitemap entries of the index.
         *
         * @since 5.5.0
         *
         * @return array[] Array of sitemap entries.
         */
        public function get_sitemap_entries()
        {
        }
        /**
         * Gets the URL of a sitemap entry.
         *
         * @since 5.5.0
         *
         * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
         *
         * @param string $name The name of the sitemap.
         * @param int    $page The page of the sitemap.
         * @return string The composed URL for a sitemap entry.
         */
        public function get_sitemap_url($name, $page)
        {
        }
        /**
         * Returns the list of supported object subtypes exposed by the provider.
         *
         * @since 5.5.0
         *
         * @return array List of object subtypes objects keyed by their name.
         */
        public function get_object_subtypes()
        {
        }
    }
    /**
     * Sitemaps: WP_Sitemaps_Posts class
     *
     * Builds the sitemaps for the 'post' object type.
     *
     * @package WordPress
     * @subpackage Sitemaps
     * @since 5.5.0
     */
    /**
     * Posts XML sitemap provider.
     *
     * @since 5.5.0
     */
    class WP_Sitemaps_Posts extends \WP_Sitemaps_Provider
    {
        /**
         * WP_Sitemaps_Posts constructor.
         *
         * @since 5.5.0
         */
        public function __construct()
        {
        }
        /**
         * Returns the public post types, which excludes nav_items and similar types.
         * Attachments are also excluded. This includes custom post types with public = true.
         *
         * @since 5.5.0
         *
         * @return WP_Post_Type[] Array of registered post type objects keyed by their name.
         */
        public function get_object_subtypes()
        {
        }
        /**
         * Gets a URL list for a post type sitemap.
         *
         * @since 5.5.0
         * @since 5.9.0 Renamed `$post_type` to `$object_subtype` to match parent class
         *              for PHP 8 named parameter support.
         *
         * @param int    $page_num       Page of results.
         * @param string $object_subtype Optional. Post type name. Default empty.
         *
         * @return array[] Array of URL information for a sitemap.
         */
        public function get_url_list($page_num, $object_subtype = '')
        {
        }
        /**
         * Gets the max number of pages available for the object type.
         *
         * @since 5.5.0
         * @since 5.9.0 Renamed `$post_type` to `$object_subtype` to match parent class
         *              for PHP 8 named parameter support.
         *
         * @param string $object_subtype Optional. Post type name. Default empty.
         * @return int Total number of pages.
         */
        public function get_max_num_pages($object_subtype = '')
        {
        }
        /**
         * Returns the query args for retrieving posts to list in the sitemap.
         *
         * @since 5.5.0
         *
         * @param string $post_type Post type name.
         * @return array Array of WP_Query arguments.
         */
        protected function get_posts_query_args($post_type)
        {
        }
    }
    /**
     * Sitemaps: WP_Sitemaps_Users class
     *
     * Builds the sitemaps for the 'user' object type.
     *
     * @package WordPress
     * @subpackage Sitemaps
     * @since 5.5.0
     */
    /**
     * Users XML sitemap provider.
     *
     * @since 5.5.0
     */
    class WP_Sitemaps_Users extends \WP_Sitemaps_Provider
    {
        /**
         * WP_Sitemaps_Users constructor.
         *
         * @since 5.5.0
         */
        public function __construct()
        {
        }
        /**
         * Gets a URL list for a user sitemap.
         *
         * @since 5.5.0
         *
         * @param int    $page_num       Page of results.
         * @param string $object_subtype Optional. Not applicable for Users but
         *                               required for compatibility with the parent
         *                               provider class. Default empty.
         * @return array[] Array of URL information for a sitemap.
         */
        public function get_url_list($page_num, $object_subtype = '')
        {
        }
        /**
         * Gets the max number of pages available for the object type.
         *
         * @since 5.5.0
         *
         * @see WP_Sitemaps_Provider::max_num_pages
         *
         * @param string $object_subtype Optional. Not applicable for Users but
         *                               required for compatibility with the parent
         *                               provider class. Default empty.
         * @return int Total page count.
         */
        public function get_max_num_pages($object_subtype = '')
        {
        }
        /**
         * Returns the query args for retrieving users to list in the sitemap.
         *
         * @since 5.5.0
         *
         * @return array Array of WP_User_Query arguments.
         */
        protected function get_users_query_args()
        {
        }
    }
    /**
     * Sitemaps: WP_Sitemaps_Taxonomies class
     *
     * Builds the sitemaps for the 'taxonomy' object type.
     *
     * @package WordPress
     * @subpackage Sitemaps
     * @since 5.5.0
     */
    /**
     * Taxonomies XML sitemap provider.
     *
     * @since 5.5.0
     */
    class WP_Sitemaps_Taxonomies extends \WP_Sitemaps_Provider
    {
        /**
         * WP_Sitemaps_Taxonomies constructor.
         *
         * @since 5.5.0
         */
        public function __construct()
        {
        }
        /**
         * Returns all public, registered taxonomies.
         *
         * @since 5.5.0
         *
         * @return WP_Taxonomy[] Array of registered taxonomy objects keyed by their name.
         */
        public function get_object_subtypes()
        {
        }
        /**
         * Gets a URL list for a taxonomy sitemap.
         *
         * @since 5.5.0
         * @since 5.9.0 Renamed `$taxonomy` to `$object_subtype` to match parent class
         *              for PHP 8 named parameter support.
         *
         * @param int    $page_num       Page of results.
         * @param string $object_subtype Optional. Taxonomy name. Default empty.
         * @return array[] Array of URL information for a sitemap.
         */
        public function get_url_list($page_num, $object_subtype = '')
        {
        }
        /**
         * Gets the max number of pages available for the object type.
         *
         * @since 5.5.0
         * @since 5.9.0 Renamed `$taxonomy` to `$object_subtype` to match parent class
         *              for PHP 8 named parameter support.
         *
         * @param string $object_subtype Optional. Taxonomy name. Default empty.
         * @return int Total number of pages.
         */
        public function get_max_num_pages($object_subtype = '')
        {
        }
        /**
         * Returns the query args for retrieving taxonomy terms to list in the sitemap.
         *
         * @since 5.5.0
         *
         * @param string $taxonomy Taxonomy name.
         * @return array Array of WP_Term_Query arguments.
         */
        protected function get_taxonomies_query_args($taxonomy)
        {
        }
    }
    /**
     * Sitemaps: WP_Sitemaps class
     *
     * This is the main class integrating all other classes.
     *
     * @package WordPress
     * @subpackage Sitemaps
     * @since 5.5.0
     */
    /**
     * Class WP_Sitemaps.
     *
     * @since 5.5.0
     */
    class WP_Sitemaps
    {
        /**
         * The main index of supported sitemaps.
         *
         * @since 5.5.0
         *
         * @var WP_Sitemaps_Index
         */
        public $index;
        /**
         * The main registry of supported sitemaps.
         *
         * @since 5.5.0
         *
         * @var WP_Sitemaps_Registry
         */
        public $registry;
        /**
         * An instance of the renderer class.
         *
         * @since 5.5.0
         *
         * @var WP_Sitemaps_Renderer
         */
        public $renderer;
        /**
         * WP_Sitemaps constructor.
         *
         * @since 5.5.0
         */
        public function __construct()
        {
        }
        /**
         * Initiates all sitemap functionality.
         *
         * If sitemaps are disabled, only the rewrite rules will be registered
         * by this method, in order to properly send 404s.
         *
         * @since 5.5.0
         */
        public function init()
        {
        }
        /**
         * Determines whether sitemaps are enabled or not.
         *
         * @since 5.5.0
         *
         * @return bool Whether sitemaps are enabled.
         */
        public function sitemaps_enabled()
        {
        }
        /**
         * Registers and sets up the functionality for all supported sitemaps.
         *
         * @since 5.5.0
         */
        public function register_sitemaps()
        {
        }
        /**
         * Registers sitemap rewrite tags and routing rules.
         *
         * @since 5.5.0
         */
        public function register_rewrites()
        {
        }
        /**
         * Renders sitemap templates based on rewrite rules.
         *
         * @since 5.5.0
         *
         * @global WP_Query $wp_query WordPress Query object.
         */
        public function render_sitemaps()
        {
        }
        /**
         * Redirects a URL to the wp-sitemap.xml
         *
         * @since 5.5.0
         *
         * @param bool     $bypass Pass-through of the pre_handle_404 filter value.
         * @param WP_Query $query  The WP_Query object.
         * @return bool Bypass value.
         */
        public function redirect_sitemapxml($bypass, $query)
        {
        }
        /**
         * Adds the sitemap index to robots.txt.
         *
         * @since 5.5.0
         *
         * @param string $output robots.txt output.
         * @param bool   $public Whether the site is public.
         * @return string The robots.txt output.
         */
        public function add_robots($output, $public)
        {
        }
    }
    /**
     * Sitemaps: WP_Sitemaps_Registry class
     *
     * Handles registering sitemap providers.
     *
     * @package WordPress
     * @subpackage Sitemaps
     * @since 5.5.0
     */
    /**
     * Class WP_Sitemaps_Registry.
     *
     * @since 5.5.0
     */
    class WP_Sitemaps_Registry
    {
        /**
         * Registered sitemap providers.
         *
         * @since 5.5.0
         *
         * @var WP_Sitemaps_Provider[] Array of registered sitemap providers.
         */
        private $providers = array();
        /**
         * Adds a new sitemap provider.
         *
         * @since 5.5.0
         *
         * @param string               $name     Name of the sitemap provider.
         * @param WP_Sitemaps_Provider $provider Instance of a WP_Sitemaps_Provider.
         * @return bool Whether the provider was added successfully.
         */
        public function add_provider($name, \WP_Sitemaps_Provider $provider)
        {
        }
        /**
         * Returns a single registered sitemap provider.
         *
         * @since 5.5.0
         *
         * @param string $name Sitemap provider name.
         * @return WP_Sitemaps_Provider|null Sitemap provider if it exists, null otherwise.
         */
        public function get_provider($name)
        {
        }
        /**
         * Returns all registered sitemap providers.
         *
         * @since 5.5.0
         *
         * @return WP_Sitemaps_Provider[] Array of sitemap providers.
         */
        public function get_providers()
        {
        }
    }
    /**
     * Sitemaps: WP_Sitemaps_Stylesheet class
     *
     * This class provides the XSL stylesheets to style all sitemaps.
     *
     * @package WordPress
     * @subpackage Sitemaps
     * @since 5.5.0
     */
    /**
     * Stylesheet provider class.
     *
     * @since 5.5.0
     */
    class WP_Sitemaps_Stylesheet
    {
        /**
         * Renders the XSL stylesheet depending on whether it's the sitemap index or not.
         *
         * @param string $type Stylesheet type. Either 'sitemap' or 'index'.
         */
        public function render_stylesheet($type)
        {
        }
        /**
         * Returns the escaped XSL for all sitemaps, except index.
         *
         * @since 5.5.0
         */
        public function get_sitemap_stylesheet()
        {
        }
        /**
         * Returns the escaped XSL for the index sitemaps.
         *
         * @since 5.5.0
         */
        public function get_sitemap_index_stylesheet()
        {
        }
        /**
         * Gets the CSS to be included in sitemap XSL stylesheets.
         *
         * @since 5.5.0
         *
         * @return string The CSS.
         */
        public function get_stylesheet_css()
        {
        }
    }
    /**
     * Sitemaps: WP_Sitemaps_Renderer class
     *
     * Responsible for rendering Sitemaps data to XML in accordance with sitemap protocol.
     *
     * @package WordPress
     * @subpackage Sitemaps
     * @since 5.5.0
     */
    /**
     * Class WP_Sitemaps_Renderer
     *
     * @since 5.5.0
     */
    class WP_Sitemaps_Renderer
    {
        /**
         * XSL stylesheet for styling a sitemap for web browsers.
         *
         * @since 5.5.0
         *
         * @var string
         */
        protected $stylesheet = '';
        /**
         * XSL stylesheet for styling a sitemap for web browsers.
         *
         * @since 5.5.0
         *
         * @var string
         */
        protected $stylesheet_index = '';
        /**
         * WP_Sitemaps_Renderer constructor.
         *
         * @since 5.5.0
         */
        public function __construct()
        {
        }
        /**
         * Gets the URL for the sitemap stylesheet.
         *
         * @since 5.5.0
         *
         * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
         *
         * @return string The sitemap stylesheet URL.
         */
        public function get_sitemap_stylesheet_url()
        {
        }
        /**
         * Gets the URL for the sitemap index stylesheet.
         *
         * @since 5.5.0
         *
         * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
         *
         * @return string The sitemap index stylesheet URL.
         */
        public function get_sitemap_index_stylesheet_url()
        {
        }
        /**
         * Renders a sitemap index.
         *
         * @since 5.5.0
         *
         * @param array $sitemaps Array of sitemap URLs.
         */
        public function render_index($sitemaps)
        {
        }
        /**
         * Gets XML for a sitemap index.
         *
         * @since 5.5.0
         *
         * @param array $sitemaps Array of sitemap URLs.
         * @return string|false A well-formed XML string for a sitemap index. False on error.
         */
        public function get_sitemap_index_xml($sitemaps)
        {
        }
        /**
         * Renders a sitemap.
         *
         * @since 5.5.0
         *
         * @param array $url_list Array of URLs for a sitemap.
         */
        public function render_sitemap($url_list)
        {
        }
        /**
         * Gets XML for a sitemap.
         *
         * @since 5.5.0
         *
         * @param array $url_list Array of URLs for a sitemap.
         * @return string|false A well-formed XML string for a sitemap index. False on error.
         */
        public function get_sitemap_xml($url_list)
        {
        }
        /**
         * Checks for the availability of the SimpleXML extension and errors if missing.
         *
         * @since 5.5.0
         */
        private function check_for_simple_xml_availability()
        {
        }
    }
    /**
     * Sitemaps: WP_Sitemaps_Index class.
     *
     * Generates the sitemap index.
     *
     * @package WordPress
     * @subpackage Sitemaps
     * @since 5.5.0
     */
    /**
     * Class WP_Sitemaps_Index.
     * Builds the sitemap index page that lists the links to all of the sitemaps.
     *
     * @since 5.5.0
     */
    class WP_Sitemaps_Index
    {
        /**
         * The main registry of supported sitemaps.
         *
         * @since 5.5.0
         * @var WP_Sitemaps_Registry
         */
        protected $registry;
        /**
         * Maximum number of sitemaps to include in an index.
         *
         * @since 5.5.0
         *
         * @var int Maximum number of sitemaps.
         */
        private $max_sitemaps = 50000;
        /**
         * WP_Sitemaps_Index constructor.
         *
         * @since 5.5.0
         *
         * @param WP_Sitemaps_Registry $registry Sitemap provider registry.
         */
        public function __construct(\WP_Sitemaps_Registry $registry)
        {
        }
        /**
         * Gets a sitemap list for the index.
         *
         * @since 5.5.0
         *
         * @return array[] Array of all sitemaps.
         */
        public function get_sitemap_list()
        {
        }
        /**
         * Builds the URL for the sitemap index.
         *
         * @since 5.5.0
         *
         * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
         *
         * @return string The sitemap index URL.
         */
        public function get_index_url()
        {
        }
    }
    /**
     * Blocks API: WP_Block_Template class
     *
     * @package WordPress
     * @since 5.8.0
     */
    /**
     * Class representing a block template.
     *
     * @since 5.8.0
     */
    class WP_Block_Template
    {
        /**
         * Type: wp_template.
         *
         * @since 5.8.0
         * @var string
         */
        public $type;
        /**
         * Theme.
         *
         * @since 5.8.0
         * @var string
         */
        public $theme;
        /**
         * Template slug.
         *
         * @since 5.8.0
         * @var string
         */
        public $slug;
        /**
         * ID.
         *
         * @since 5.8.0
         * @var string
         */
        public $id;
        /**
         * Title.
         *
         * @since 5.8.0
         * @var string
         */
        public $title = '';
        /**
         * Content.
         *
         * @since 5.8.0
         * @var string
         */
        public $content = '';
        /**
         * Description.
         *
         * @since 5.8.0
         * @var string
         */
        public $description = '';
        /**
         * Source of the content. `theme` and `custom` is used for now.
         *
         * @since 5.8.0
         * @var string
         */
        public $source = 'theme';
        /**
         * Origin of the content when the content has been customized.
         * When customized, origin takes on the value of source and source becomes
         * 'custom'.
         *
         * @since 5.9.0
         * @var string
         */
        public $origin;
        /**
         * Post ID.
         *
         * @since 5.8.0
         * @var int|null
         */
        public $wp_id;
        /**
         * Template Status.
         *
         * @since 5.8.0
         * @var string
         */
        public $status;
        /**
         * Whether a template is, or is based upon, an existing template file.
         *
         * @since 5.8.0
         * @var bool
         */
        public $has_theme_file;
        /**
         * Whether a template is a custom template.
         *
         * @since 5.9.0
         *
         * @var bool
         */
        public $is_custom = \true;
        /**
         * Author.
         *
         * A value of 0 means no author.
         *
         * @since 5.9.0
         * @var int
         */
        public $author;
        /**
         * Post types.
         *
         * @since 5.9.0
         * @var array
         */
        public $post_types;
        /**
         * Area.
         *
         * @since 5.9.0
         * @var string
         */
        public $area;
    }
    /**
     * Dependencies API: _WP_Dependency class
     *
     * @since 4.7.0
     *
     * @package WordPress
     * @subpackage Dependencies
     */
    /**
     * Class _WP_Dependency
     *
     * Helper class to register a handle and associated data.
     *
     * @access private
     * @since 2.6.0
     */
    class _WP_Dependency
    {
        /**
         * The handle name.
         *
         * @since 2.6.0
         * @var string
         */
        public $handle;
        /**
         * The handle source.
         *
         * @since 2.6.0
         * @var string
         */
        public $src;
        /**
         * An array of handle dependencies.
         *
         * @since 2.6.0
         * @var string[]
         */
        public $deps = array();
        /**
         * The handle version.
         *
         * Used for cache-busting.
         *
         * @since 2.6.0
         * @var bool|string
         */
        public $ver = \false;
        /**
         * Additional arguments for the handle.
         *
         * @since 2.6.0
         * @var array
         */
        public $args = \null;
        // Custom property, such as $in_footer or $media.
        /**
         * Extra data to supply to the handle.
         *
         * @since 2.6.0
         * @var array
         */
        public $extra = array();
        /**
         * Translation textdomain set for this dependency.
         *
         * @since 5.0.0
         * @var string
         */
        public $textdomain;
        /**
         * Translation path set for this dependency.
         *
         * @since 5.0.0
         * @var string
         */
        public $translations_path;
        /**
         * Setup dependencies.
         *
         * @since 2.6.0
         * @since 5.3.0 Formalized the existing `...$args` parameter by adding it
         *              to the function signature.
         *
         * @param mixed ...$args Dependency information.
         */
        public function __construct(...$args)
        {
        }
        /**
         * Add handle data.
         *
         * @since 2.6.0
         *
         * @param string $name The data key to add.
         * @param mixed  $data The data value to add.
         * @return bool False if not scalar, true otherwise.
         */
        public function add_data($name, $data)
        {
        }
        /**
         * Sets the translation domain for this dependency.
         *
         * @since 5.0.0
         *
         * @param string $domain The translation textdomain.
         * @param string $path   Optional. The full file path to the directory containing translation files.
         * @return bool False if $domain is not a string, true otherwise.
         */
        public function set_translations($domain, $path = \null)
        {
        }
    }
    /**
     * Meta API: WP_Meta_Query class
     *
     * @package WordPress
     * @subpackage Meta
     * @since 4.4.0
     */
    /**
     * Core class used to implement meta queries for the Meta API.
     *
     * Used for generating SQL clauses that filter a primary query according to metadata keys and values.
     *
     * WP_Meta_Query is a helper that allows primary query classes, such as WP_Query and WP_User_Query,
     *
     * to filter their results by object metadata, by generating `JOIN` and `WHERE` subclauses to be attached
     * to the primary SQL query string.
     *
     * @since 3.2.0
     */
    class WP_Meta_Query
    {
        /**
         * Array of metadata queries.
         *
         * See WP_Meta_Query::__construct() for information on meta query arguments.
         *
         * @since 3.2.0
         * @var array
         */
        public $queries = array();
        /**
         * The relation between the queries. Can be one of 'AND' or 'OR'.
         *
         * @since 3.2.0
         * @var string
         */
        public $relation;
        /**
         * Database table to query for the metadata.
         *
         * @since 4.1.0
         * @var string
         */
        public $meta_table;
        /**
         * Column in meta_table that represents the ID of the object the metadata belongs to.
         *
         * @since 4.1.0
         * @var string
         */
        public $meta_id_column;
        /**
         * Database table that where the metadata's objects are stored (eg $wpdb->users).
         *
         * @since 4.1.0
         * @var string
         */
        public $primary_table;
        /**
         * Column in primary_table that represents the ID of the object.
         *
         * @since 4.1.0
         * @var string
         */
        public $primary_id_column;
        /**
         * A flat list of table aliases used in JOIN clauses.
         *
         * @since 4.1.0
         * @var array
         */
        protected $table_aliases = array();
        /**
         * A flat list of clauses, keyed by clause 'name'.
         *
         * @since 4.2.0
         * @var array
         */
        protected $clauses = array();
        /**
         * Whether the query contains any OR relations.
         *
         * @since 4.3.0
         * @var bool
         */
        protected $has_or_relation = \false;
        /**
         * Constructor.
         *
         * @since 3.2.0
         * @since 4.2.0 Introduced support for naming query clauses by associative array keys.
         * @since 5.1.0 Introduced `$compare_key` clause parameter, which enables LIKE key matches.
         * @since 5.3.0 Increased the number of operators available to `$compare_key`. Introduced `$type_key`,
         *              which enables the `$key` to be cast to a new data type for comparisons.
         *
         * @param array $meta_query {
         *     Array of meta query clauses. When first-order clauses or sub-clauses use strings as
         *     their array keys, they may be referenced in the 'orderby' parameter of the parent query.
         *
         *     @type string $relation Optional. The MySQL keyword used to join the clauses of the query.
         *                            Accepts 'AND' or 'OR'. Default 'AND'.
         *     @type array  ...$0 {
         *         Optional. An array of first-order clause parameters, or another fully-formed meta query.
         *
         *         @type string|string[] $key         Meta key or keys to filter by.
         *         @type string          $compare_key MySQL operator used for comparing the $key. Accepts:
         *                                            - '='
         *                                            - '!='
         *                                            - 'LIKE'
         *                                            - 'NOT LIKE'
         *                                            - 'IN'
         *                                            - 'NOT IN'
         *                                            - 'REGEXP'
         *                                            - 'NOT REGEXP'
         *                                            - 'RLIKE',
         *                                            - 'EXISTS' (alias of '=')
         *                                            - 'NOT EXISTS' (alias of '!=')
         *                                            Default is 'IN' when `$key` is an array, '=' otherwise.
         *         @type string          $type_key    MySQL data type that the meta_key column will be CAST to for
         *                                            comparisons. Accepts 'BINARY' for case-sensitive regular expression
         *                                            comparisons. Default is ''.
         *         @type string|string[] $value       Meta value or values to filter by.
         *         @type string          $compare     MySQL operator used for comparing the $value. Accepts:
         *                                            - '=',
         *                                            - '!='
         *                                            - '>'
         *                                            - '>='
         *                                            - '<'
         *                                            - '<='
         *                                            - 'LIKE'
         *                                            - 'NOT LIKE'
         *                                            - 'IN'
         *                                            - 'NOT IN'
         *                                            - 'BETWEEN'
         *                                            - 'NOT BETWEEN'
         *                                            - 'REGEXP'
         *                                            - 'NOT REGEXP'
         *                                            - 'RLIKE'
         *                                            - 'EXISTS'
         *                                            - 'NOT EXISTS'
         *                                            Default is 'IN' when `$value` is an array, '=' otherwise.
         *         @type string          $type        MySQL data type that the meta_value column will be CAST to for
         *                                            comparisons. Accepts:
         *                                            - 'NUMERIC'
         *                                            - 'BINARY'
         *                                            - 'CHAR'
         *                                            - 'DATE'
         *                                            - 'DATETIME'
         *                                            - 'DECIMAL'
         *                                            - 'SIGNED'
         *                                            - 'TIME'
         *                                            - 'UNSIGNED'
         *                                            Default is 'CHAR'.
         *     }
         * }
         */
        public function __construct($meta_query = \false)
        {
        }
        /**
         * Ensure the 'meta_query' argument passed to the class constructor is well-formed.
         *
         * Eliminates empty items and ensures that a 'relation' is set.
         *
         * @since 4.1.0
         *
         * @param array $queries Array of query clauses.
         * @return array Sanitized array of query clauses.
         */
        public function sanitize_query($queries)
        {
        }
        /**
         * Determine whether a query clause is first-order.
         *
         * A first-order meta query clause is one that has either a 'key' or
         * a 'value' array key.
         *
         * @since 4.1.0
         *
         * @param array $query Meta query arguments.
         * @return bool Whether the query clause is a first-order clause.
         */
        protected function is_first_order_clause($query)
        {
        }
        /**
         * Constructs a meta query based on 'meta_*' query vars
         *
         * @since 3.2.0
         *
         * @param array $qv The query variables
         */
        public function parse_query_vars($qv)
        {
        }
        /**
         * Return the appropriate alias for the given meta type if applicable.
         *
         * @since 3.7.0
         *
         * @param string $type MySQL type to cast meta_value.
         * @return string MySQL type.
         */
        public function get_cast_for_type($type = '')
        {
        }
        /**
         * Generates SQL clauses to be appended to a main query.
         *
         * @since 3.2.0
         *
         * @param string $type              Type of meta. Possible values include but are not limited
         *                                  to 'post', 'comment', 'blog', 'term', and 'user'.
         * @param string $primary_table     Database table where the object being filtered is stored (eg wp_users).
         * @param string $primary_id_column ID column for the filtered object in $primary_table.
         * @param object $context           Optional. The main query object that corresponds to the type, for
         *                                  example a `WP_Query`, `WP_User_Query`, or `WP_Site_Query`.
         * @return string[]|false {
         *     Array containing JOIN and WHERE SQL clauses to append to the main query,
         *     or false if no table exists for the requested meta type.
         *
         *     @type string $join  SQL fragment to append to the main JOIN clause.
         *     @type string $where SQL fragment to append to the main WHERE clause.
         * }
         */
        public function get_sql($type, $primary_table, $primary_id_column, $context = \null)
        {
        }
        /**
         * Generate SQL clauses to be appended to a main query.
         *
         * Called by the public WP_Meta_Query::get_sql(), this method is abstracted
         * out to maintain parity with the other Query classes.
         *
         * @since 4.1.0
         *
         * @return string[] {
         *     Array containing JOIN and WHERE SQL clauses to append to the main query.
         *
         *     @type string $join  SQL fragment to append to the main JOIN clause.
         *     @type string $where SQL fragment to append to the main WHERE clause.
         * }
         */
        protected function get_sql_clauses()
        {
        }
        /**
         * Generate SQL clauses for a single query array.
         *
         * If nested subqueries are found, this method recurses the tree to
         * produce the properly nested SQL.
         *
         * @since 4.1.0
         *
         * @param array $query Query to parse (passed by reference).
         * @param int   $depth Optional. Number of tree levels deep we currently are.
         *                     Used to calculate indentation. Default 0.
         * @return string[] {
         *     Array containing JOIN and WHERE SQL clauses to append to a single query array.
         *
         *     @type string $join  SQL fragment to append to the main JOIN clause.
         *     @type string $where SQL fragment to append to the main WHERE clause.
         * }
         */
        protected function get_sql_for_query(&$query, $depth = 0)
        {
        }
        /**
         * Generate SQL JOIN and WHERE clauses for a first-order query clause.
         *
         * "First-order" means that it's an array with a 'key' or 'value'.
         *
         * @since 4.1.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param array  $clause       Query clause (passed by reference).
         * @param array  $parent_query Parent query array.
         * @param string $clause_key   Optional. The array key used to name the clause in the original `$meta_query`
         *                             parameters. If not provided, a key will be generated automatically.
         * @return string[] {
         *     Array containing JOIN and WHERE SQL clauses to append to a first-order query.
         *
         *     @type string $join  SQL fragment to append to the main JOIN clause.
         *     @type string $where SQL fragment to append to the main WHERE clause.
         * }
         */
        public function get_sql_for_clause(&$clause, $parent_query, $clause_key = '')
        {
        }
        /**
         * Get a flattened list of sanitized meta clauses.
         *
         * This array should be used for clause lookup, as when the table alias and CAST type must be determined for
         * a value of 'orderby' corresponding to a meta clause.
         *
         * @since 4.2.0
         *
         * @return array Meta clauses.
         */
        public function get_clauses()
        {
        }
        /**
         * Identify an existing table alias that is compatible with the current
         * query clause.
         *
         * We avoid unnecessary table joins by allowing each clause to look for
         * an existing table alias that is compatible with the query that it
         * needs to perform.
         *
         * An existing alias is compatible if (a) it is a sibling of `$clause`
         * (ie, it's under the scope of the same relation), and (b) the combination
         * of operator and relation between the clauses allows for a shared table join.
         * In the case of WP_Meta_Query, this only applies to 'IN' clauses that are
         * connected by the relation 'OR'.
         *
         * @since 4.1.0
         *
         * @param array $clause       Query clause.
         * @param array $parent_query Parent query of $clause.
         * @return string|false Table alias if found, otherwise false.
         */
        protected function find_compatible_table_alias($clause, $parent_query)
        {
        }
        /**
         * Checks whether the current query has any OR relations.
         *
         * In some cases, the presence of an OR relation somewhere in the query will require
         * the use of a `DISTINCT` or `GROUP BY` keyword in the `SELECT` clause. The current
         * method can be used in these cases to determine whether such a clause is necessary.
         *
         * @since 4.3.0
         *
         * @return bool True if the query contains any `OR` relations, otherwise false.
         */
        public function has_or_relation()
        {
        }
    }
    /**
     * Widget API: WP_Widget_Factory class
     *
     * @package WordPress
     * @subpackage Widgets
     * @since 4.4.0
     */
    /**
     * Singleton that registers and instantiates WP_Widget classes.
     *
     * @since 2.8.0
     * @since 4.4.0 Moved to its own file from wp-includes/widgets.php
     */
    class WP_Widget_Factory
    {
        /**
         * Widgets array.
         *
         * @since 2.8.0
         * @var array
         */
        public $widgets = array();
        /**
         * PHP5 constructor.
         *
         * @since 4.3.0
         */
        public function __construct()
        {
        }
        /**
         * PHP4 constructor.
         *
         * @since 2.8.0
         * @deprecated 4.3.0 Use __construct() instead.
         *
         * @see WP_Widget_Factory::__construct()
         */
        public function WP_Widget_Factory()
        {
        }
        /**
         * Registers a widget subclass.
         *
         * @since 2.8.0
         * @since 4.6.0 Updated the `$widget` parameter to also accept a WP_Widget instance object
         *              instead of simply a `WP_Widget` subclass name.
         *
         * @param string|WP_Widget $widget Either the name of a `WP_Widget` subclass or an instance of a `WP_Widget` subclass.
         */
        public function register($widget)
        {
        }
        /**
         * Un-registers a widget subclass.
         *
         * @since 2.8.0
         * @since 4.6.0 Updated the `$widget` parameter to also accept a WP_Widget instance object
         *              instead of simply a `WP_Widget` subclass name.
         *
         * @param string|WP_Widget $widget Either the name of a `WP_Widget` subclass or an instance of a `WP_Widget` subclass.
         */
        public function unregister($widget)
        {
        }
        /**
         * Serves as a utility method for adding widgets to the registered widgets global.
         *
         * @since 2.8.0
         *
         * @global array $wp_registered_widgets
         */
        public function _register_widgets()
        {
        }
        /**
         * Returns the registered WP_Widget object for the given widget type.
         *
         * @since 5.8.0
         *
         * @param string $id_base Widget type ID.
         * @return WP_Widget|null
         */
        public function get_widget_object($id_base)
        {
        }
        /**
         * Returns the registered key for the given widget type.
         *
         * @since 5.8.0
         *
         * @param string $id_base Widget type ID.
         * @return string
         */
        public function get_widget_key($id_base)
        {
        }
    }
    /**
     * Base WordPress Image Editor
     *
     * @package WordPress
     * @subpackage Image_Editor
     */
    /**
     * Base image editor class from which implementations extend
     *
     * @since 3.5.0
     */
    abstract class WP_Image_Editor
    {
        protected $file = \null;
        protected $size = \null;
        protected $mime_type = \null;
        protected $output_mime_type = \null;
        protected $default_mime_type = 'image/jpeg';
        protected $quality = \false;
        // Deprecated since 5.8.1. See get_default_quality() below.
        protected $default_quality = 82;
        /**
         * Each instance handles a single file.
         *
         * @param string $file Path to the file to load.
         */
        public function __construct($file)
        {
        }
        /**
         * Checks to see if current environment supports the editor chosen.
         * Must be overridden in a subclass.
         *
         * @since 3.5.0
         *
         * @abstract
         *
         * @param array $args
         * @return bool
         */
        public static function test($args = array())
        {
        }
        /**
         * Checks to see if editor supports the mime-type specified.
         * Must be overridden in a subclass.
         *
         * @since 3.5.0
         *
         * @abstract
         *
         * @param string $mime_type
         * @return bool
         */
        public static function supports_mime_type($mime_type)
        {
        }
        /**
         * Loads image from $this->file into editor.
         *
         * @since 3.5.0
         * @abstract
         *
         * @return true|WP_Error True if loaded; WP_Error on failure.
         */
        public abstract function load();
        /**
         * Saves current image to file.
         *
         * @since 3.5.0
         * @abstract
         *
         * @param string $destfilename Optional. Destination filename. Default null.
         * @param string $mime_type    Optional. The mime-type. Default null.
         * @return array|WP_Error {'path'=>string, 'file'=>string, 'width'=>int, 'height'=>int, 'mime-type'=>string}
         */
        public abstract function save($destfilename = \null, $mime_type = \null);
        /**
         * Resizes current image.
         *
         * At minimum, either a height or width must be provided.
         * If one of the two is set to null, the resize will
         * maintain aspect ratio according to the provided dimension.
         *
         * @since 3.5.0
         * @abstract
         *
         * @param int|null $max_w Image width.
         * @param int|null $max_h Image height.
         * @param bool     $crop
         * @return true|WP_Error
         */
        public abstract function resize($max_w, $max_h, $crop = \false);
        /**
         * Resize multiple images from a single source.
         *
         * @since 3.5.0
         * @abstract
         *
         * @param array $sizes {
         *     An array of image size arrays. Default sizes are 'small', 'medium', 'large'.
         *
         *     @type array ...$0 {
         *         @type int  $width  Image width.
         *         @type int  $height Image height.
         *         @type bool $crop   Optional. Whether to crop the image. Default false.
         *     }
         * }
         * @return array An array of resized images metadata by size.
         */
        public abstract function multi_resize($sizes);
        /**
         * Crops Image.
         *
         * @since 3.5.0
         * @abstract
         *
         * @param int  $src_x   The start x position to crop from.
         * @param int  $src_y   The start y position to crop from.
         * @param int  $src_w   The width to crop.
         * @param int  $src_h   The height to crop.
         * @param int  $dst_w   Optional. The destination width.
         * @param int  $dst_h   Optional. The destination height.
         * @param bool $src_abs Optional. If the source crop points are absolute.
         * @return true|WP_Error
         */
        public abstract function crop($src_x, $src_y, $src_w, $src_h, $dst_w = \null, $dst_h = \null, $src_abs = \false);
        /**
         * Rotates current image counter-clockwise by $angle.
         *
         * @since 3.5.0
         * @abstract
         *
         * @param float $angle
         * @return true|WP_Error
         */
        public abstract function rotate($angle);
        /**
         * Flips current image.
         *
         * @since 3.5.0
         * @abstract
         *
         * @param bool $horz Flip along Horizontal Axis
         * @param bool $vert Flip along Vertical Axis
         * @return true|WP_Error
         */
        public abstract function flip($horz, $vert);
        /**
         * Streams current image to browser.
         *
         * @since 3.5.0
         * @abstract
         *
         * @param string $mime_type The mime type of the image.
         * @return true|WP_Error True on success, WP_Error object on failure.
         */
        public abstract function stream($mime_type = \null);
        /**
         * Gets dimensions of image.
         *
         * @since 3.5.0
         *
         * @return int[] {
         *     Dimensions of the image.
         *
         *     @type int $width  The image width.
         *     @type int $height The image height.
         * }
         */
        public function get_size()
        {
        }
        /**
         * Sets current image size.
         *
         * @since 3.5.0
         *
         * @param int $width
         * @param int $height
         * @return true
         */
        protected function update_size($width = \null, $height = \null)
        {
        }
        /**
         * Gets the Image Compression quality on a 1-100% scale.
         *
         * @since 4.0.0
         *
         * @return int Compression Quality. Range: [1,100]
         */
        public function get_quality()
        {
        }
        /**
         * Sets Image Compression quality on a 1-100% scale.
         *
         * @since 3.5.0
         *
         * @param int $quality Compression Quality. Range: [1,100]
         * @return true|WP_Error True if set successfully; WP_Error on failure.
         */
        public function set_quality($quality = \null)
        {
        }
        /**
         * Returns the default compression quality setting for the mime type.
         *
         * @since 5.8.1
         *
         * @param string $mime_type
         * @return int The default quality setting for the mime type.
         */
        protected function get_default_quality($mime_type)
        {
        }
        /**
         * Returns preferred mime-type and extension based on provided
         * file's extension and mime, or current file's extension and mime.
         *
         * Will default to $this->default_mime_type if requested is not supported.
         *
         * Provides corrected filename only if filename is provided.
         *
         * @since 3.5.0
         *
         * @param string $filename
         * @param string $mime_type
         * @return array { filename|null, extension, mime-type }
         */
        protected function get_output_format($filename = \null, $mime_type = \null)
        {
        }
        /**
         * Builds an output filename based on current file, and adding proper suffix
         *
         * @since 3.5.0
         *
         * @param string $suffix
         * @param string $dest_path
         * @param string $extension
         * @return string filename
         */
        public function generate_filename($suffix = \null, $dest_path = \null, $extension = \null)
        {
        }
        /**
         * Builds and returns proper suffix for file based on height and width.
         *
         * @since 3.5.0
         *
         * @return string|false suffix
         */
        public function get_suffix()
        {
        }
        /**
         * Check if a JPEG image has EXIF Orientation tag and rotate it if needed.
         *
         * @since 5.3.0
         *
         * @return bool|WP_Error True if the image was rotated. False if not rotated (no EXIF data or the image doesn't need to be rotated).
         *                       WP_Error if error while rotating.
         */
        public function maybe_exif_rotate()
        {
        }
        /**
         * Either calls editor's save function or handles file as a stream.
         *
         * @since 3.5.0
         *
         * @param string   $filename
         * @param callable $callback
         * @param array    $arguments
         * @return bool
         */
        protected function make_image($filename, $callback, $arguments)
        {
        }
        /**
         * Returns first matched mime-type from extension,
         * as mapped from wp_get_mime_types()
         *
         * @since 3.5.0
         *
         * @param string $extension
         * @return string|false
         */
        protected static function get_mime_type($extension = \null)
        {
        }
        /**
         * Returns first matched extension from Mime-type,
         * as mapped from wp_get_mime_types()
         *
         * @since 3.5.0
         *
         * @param string $mime_type
         * @return string|false
         */
        protected static function get_extension($mime_type = \null)
        {
        }
    }
    /**
     * WordPress GD Image Editor
     *
     * @package WordPress
     * @subpackage Image_Editor
     */
    /**
     * WordPress Image Editor Class for Image Manipulation through GD
     *
     * @since 3.5.0
     *
     * @see WP_Image_Editor
     */
    class WP_Image_Editor_GD extends \WP_Image_Editor
    {
        /**
         * GD Resource.
         *
         * @var resource|GdImage
         */
        protected $image;
        public function __destruct()
        {
        }
        /**
         * Checks to see if current environment supports GD.
         *
         * @since 3.5.0
         *
         * @param array $args
         * @return bool
         */
        public static function test($args = array())
        {
        }
        /**
         * Checks to see if editor supports the mime-type specified.
         *
         * @since 3.5.0
         *
         * @param string $mime_type
         * @return bool
         */
        public static function supports_mime_type($mime_type)
        {
        }
        /**
         * Loads image from $this->file into new GD Resource.
         *
         * @since 3.5.0
         *
         * @return true|WP_Error True if loaded successfully; WP_Error on failure.
         */
        public function load()
        {
        }
        /**
         * Sets or updates current image size.
         *
         * @since 3.5.0
         *
         * @param int $width
         * @param int $height
         * @return true
         */
        protected function update_size($width = \false, $height = \false)
        {
        }
        /**
         * Resizes current image.
         *
         * Wraps `::_resize()` which returns a GD resource or GdImage instance.
         *
         * At minimum, either a height or width must be provided. If one of the two is set
         * to null, the resize will maintain aspect ratio according to the provided dimension.
         *
         * @since 3.5.0
         *
         * @param int|null $max_w Image width.
         * @param int|null $max_h Image height.
         * @param bool     $crop
         * @return true|WP_Error
         */
        public function resize($max_w, $max_h, $crop = \false)
        {
        }
        /**
         * @param int        $max_w
         * @param int        $max_h
         * @param bool|array $crop
         * @return resource|GdImage|WP_Error
         */
        protected function _resize($max_w, $max_h, $crop = \false)
        {
        }
        /**
         * Create multiple smaller images from a single source.
         *
         * Attempts to create all sub-sizes and returns the meta data at the end. This
         * may result in the server running out of resources. When it fails there may be few
         * "orphaned" images left over as the meta data is never returned and saved.
         *
         * As of 5.3.0 the preferred way to do this is with `make_subsize()`. It creates
         * the new images one at a time and allows for the meta data to be saved after
         * each new image is created.
         *
         * @since 3.5.0
         *
         * @param array $sizes {
         *     An array of image size data arrays.
         *
         *     Either a height or width must be provided.
         *     If one of the two is set to null, the resize will
         *     maintain aspect ratio according to the source image.
         *
         *     @type array ...$0 {
         *         Array of height, width values, and whether to crop.
         *
         *         @type int  $width  Image width. Optional if `$height` is specified.
         *         @type int  $height Image height. Optional if `$width` is specified.
         *         @type bool $crop   Optional. Whether to crop the image. Default false.
         *     }
         * }
         * @return array An array of resized images' metadata by size.
         */
        public function multi_resize($sizes)
        {
        }
        /**
         * Create an image sub-size and return the image meta data value for it.
         *
         * @since 5.3.0
         *
         * @param array $size_data {
         *     Array of size data.
         *
         *     @type int  $width  The maximum width in pixels.
         *     @type int  $height The maximum height in pixels.
         *     @type bool $crop   Whether to crop the image to exact dimensions.
         * }
         * @return array|WP_Error The image data array for inclusion in the `sizes` array in the image meta,
         *                        WP_Error object on error.
         */
        public function make_subsize($size_data)
        {
        }
        /**
         * Crops Image.
         *
         * @since 3.5.0
         *
         * @param int  $src_x   The start x position to crop from.
         * @param int  $src_y   The start y position to crop from.
         * @param int  $src_w   The width to crop.
         * @param int  $src_h   The height to crop.
         * @param int  $dst_w   Optional. The destination width.
         * @param int  $dst_h   Optional. The destination height.
         * @param bool $src_abs Optional. If the source crop points are absolute.
         * @return true|WP_Error
         */
        public function crop($src_x, $src_y, $src_w, $src_h, $dst_w = \null, $dst_h = \null, $src_abs = \false)
        {
        }
        /**
         * Rotates current image counter-clockwise by $angle.
         * Ported from image-edit.php
         *
         * @since 3.5.0
         *
         * @param float $angle
         * @return true|WP_Error
         */
        public function rotate($angle)
        {
        }
        /**
         * Flips current image.
         *
         * @since 3.5.0
         *
         * @param bool $horz Flip along Horizontal Axis.
         * @param bool $vert Flip along Vertical Axis.
         * @return true|WP_Error
         */
        public function flip($horz, $vert)
        {
        }
        /**
         * Saves current in-memory image to file.
         *
         * @since 3.5.0
         * @since 5.9.0 Renamed `$filename` to `$destfilename` to match parent class
         *              for PHP 8 named parameter support.
         *
         * @param string|null $destfilename Optional. Destination filename. Default null.
         * @param string|null $mime_type    Optional. The mime-type. Default null.
         * @return array|WP_Error {'path'=>string, 'file'=>string, 'width'=>int, 'height'=>int, 'mime-type'=>string}
         */
        public function save($destfilename = \null, $mime_type = \null)
        {
        }
        /**
         * @param resource|GdImage $image
         * @param string|null      $filename
         * @param string|null      $mime_type
         * @return array|WP_Error
         */
        protected function _save($image, $filename = \null, $mime_type = \null)
        {
        }
        /**
         * Returns stream of current image.
         *
         * @since 3.5.0
         *
         * @param string $mime_type The mime type of the image.
         * @return bool True on success, false on failure.
         */
        public function stream($mime_type = \null)
        {
        }
        /**
         * Either calls editor's save function or handles file as a stream.
         *
         * @since 3.5.0
         *
         * @param string   $filename
         * @param callable $callback
         * @param array    $arguments
         * @return bool
         */
        protected function make_image($filename, $callback, $arguments)
        {
        }
    }
    /**
     * Rewrite API: WP_Rewrite class
     *
     * @package WordPress
     * @subpackage Rewrite
     * @since 1.5.0
     */
    /**
     * Core class used to implement a rewrite component API.
     *
     * The WordPress Rewrite class writes the rewrite module rules to the .htaccess
     * file. It also handles parsing the request to get the correct setup for the
     * WordPress Query class.
     *
     * The Rewrite along with WP class function as a front controller for WordPress.
     * You can add rules to trigger your page view and processing using this
     * component. The full functionality of a front controller does not exist,
     * meaning you can't define how the template files load based on the rewrite
     * rules.
     *
     * @since 1.5.0
     */
    class WP_Rewrite
    {
        /**
         * Permalink structure for posts.
         *
         * @since 1.5.0
         * @var string
         */
        public $permalink_structure;
        /**
         * Whether to add trailing slashes.
         *
         * @since 2.2.0
         * @var bool
         */
        public $use_trailing_slashes;
        /**
         * Base for the author permalink structure (example.com/$author_base/authorname).
         *
         * @since 1.5.0
         * @var string
         */
        public $author_base = 'author';
        /**
         * Permalink structure for author archives.
         *
         * @since 1.5.0
         * @var string
         */
        public $author_structure;
        /**
         * Permalink structure for date archives.
         *
         * @since 1.5.0
         * @var string
         */
        public $date_structure;
        /**
         * Permalink structure for pages.
         *
         * @since 1.5.0
         * @var string
         */
        public $page_structure;
        /**
         * Base of the search permalink structure (example.com/$search_base/query).
         *
         * @since 1.5.0
         * @var string
         */
        public $search_base = 'search';
        /**
         * Permalink structure for searches.
         *
         * @since 1.5.0
         * @var string
         */
        public $search_structure;
        /**
         * Comments permalink base.
         *
         * @since 1.5.0
         * @var string
         */
        public $comments_base = 'comments';
        /**
         * Pagination permalink base.
         *
         * @since 3.1.0
         * @var string
         */
        public $pagination_base = 'page';
        /**
         * Comments pagination permalink base.
         *
         * @since 4.2.0
         * @var string
         */
        public $comments_pagination_base = 'comment-page';
        /**
         * Feed permalink base.
         *
         * @since 1.5.0
         * @var string
         */
        public $feed_base = 'feed';
        /**
         * Comments feed permalink structure.
         *
         * @since 1.5.0
         * @var string
         */
        public $comment_feed_structure;
        /**
         * Feed request permalink structure.
         *
         * @since 1.5.0
         * @var string
         */
        public $feed_structure;
        /**
         * The static portion of the post permalink structure.
         *
         * If the permalink structure is "/archive/%post_id%" then the front
         * is "/archive/". If the permalink structure is "/%year%/%postname%/"
         * then the front is "/".
         *
         * @since 1.5.0
         * @var string
         *
         * @see WP_Rewrite::init()
         */
        public $front;
        /**
         * The prefix for all permalink structures.
         *
         * If PATHINFO/index permalinks are in use then the root is the value of
         * `WP_Rewrite::$index` with a trailing slash appended. Otherwise the root
         * will be empty.
         *
         * @since 1.5.0
         * @var string
         *
         * @see WP_Rewrite::init()
         * @see WP_Rewrite::using_index_permalinks()
         */
        public $root = '';
        /**
         * The name of the index file which is the entry point to all requests.
         *
         * @since 1.5.0
         * @var string
         */
        public $index = 'index.php';
        /**
         * Variable name to use for regex matches in the rewritten query.
         *
         * @since 1.5.0
         * @var string
         */
        public $matches = '';
        /**
         * Rewrite rules to match against the request to find the redirect or query.
         *
         * @since 1.5.0
         * @var array
         */
        public $rules;
        /**
         * Additional rules added external to the rewrite class.
         *
         * Those not generated by the class, see add_rewrite_rule().
         *
         * @since 2.1.0
         * @var array
         */
        public $extra_rules = array();
        /**
         * Additional rules that belong at the beginning to match first.
         *
         * Those not generated by the class, see add_rewrite_rule().
         *
         * @since 2.3.0
         * @var array
         */
        public $extra_rules_top = array();
        /**
         * Rules that don't redirect to WordPress' index.php.
         *
         * These rules are written to the mod_rewrite portion of the .htaccess,
         * and are added by add_external_rule().
         *
         * @since 2.1.0
         * @var array
         */
        public $non_wp_rules = array();
        /**
         * Extra permalink structures, e.g. categories, added by add_permastruct().
         *
         * @since 2.1.0
         * @var array
         */
        public $extra_permastructs = array();
        /**
         * Endpoints (like /trackback/) added by add_rewrite_endpoint().
         *
         * @since 2.1.0
         * @var array
         */
        public $endpoints;
        /**
         * Whether to write every mod_rewrite rule for WordPress into the .htaccess file.
         *
         * This is off by default, turning it on might print a lot of rewrite rules
         * to the .htaccess file.
         *
         * @since 2.0.0
         * @var bool
         *
         * @see WP_Rewrite::mod_rewrite_rules()
         */
        public $use_verbose_rules = \false;
        /**
         * Could post permalinks be confused with those of pages?
         *
         * If the first rewrite tag in the post permalink structure is one that could
         * also match a page name (e.g. %postname% or %author%) then this flag is
         * set to true. Prior to WordPress 3.3 this flag indicated that every page
         * would have a set of rules added to the top of the rewrite rules array.
         * Now it tells WP::parse_request() to check if a URL matching the page
         * permastruct is actually a page before accepting it.
         *
         * @since 2.5.0
         * @var bool
         *
         * @see WP_Rewrite::init()
         */
        public $use_verbose_page_rules = \true;
        /**
         * Rewrite tags that can be used in permalink structures.
         *
         * These are translated into the regular expressions stored in
         * `WP_Rewrite::$rewritereplace` and are rewritten to the query
         * variables listed in WP_Rewrite::$queryreplace.
         *
         * Additional tags can be added with add_rewrite_tag().
         *
         * @since 1.5.0
         * @var string[]
         */
        public $rewritecode = array('%year%', '%monthnum%', '%day%', '%hour%', '%minute%', '%second%', '%postname%', '%post_id%', '%author%', '%pagename%', '%search%');
        /**
         * Regular expressions to be substituted into rewrite rules in place
         * of rewrite tags, see WP_Rewrite::$rewritecode.
         *
         * @since 1.5.0
         * @var string[]
         */
        public $rewritereplace = array('([0-9]{4})', '([0-9]{1,2})', '([0-9]{1,2})', '([0-9]{1,2})', '([0-9]{1,2})', '([0-9]{1,2})', '([^/]+)', '([0-9]+)', '([^/]+)', '([^/]+?)', '(.+)');
        /**
         * Query variables that rewrite tags map to, see WP_Rewrite::$rewritecode.
         *
         * @since 1.5.0
         * @var string[]
         */
        public $queryreplace = array('year=', 'monthnum=', 'day=', 'hour=', 'minute=', 'second=', 'name=', 'p=', 'author_name=', 'pagename=', 's=');
        /**
         * Supported default feeds.
         *
         * @since 1.5.0
         * @var string[]
         */
        public $feeds = array('feed', 'rdf', 'rss', 'rss2', 'atom');
        /**
         * Determines whether permalinks are being used.
         *
         * This can be either rewrite module or permalink in the HTTP query string.
         *
         * @since 1.5.0
         *
         * @return bool True, if permalinks are enabled.
         */
        public function using_permalinks()
        {
        }
        /**
         * Determines whether permalinks are being used and rewrite module is not enabled.
         *
         * Means that permalink links are enabled and index.php is in the URL.
         *
         * @since 1.5.0
         *
         * @return bool Whether permalink links are enabled and index.php is in the URL.
         */
        public function using_index_permalinks()
        {
        }
        /**
         * Determines whether permalinks are being used and rewrite module is enabled.
         *
         * Using permalinks and index.php is not in the URL.
         *
         * @since 1.5.0
         *
         * @return bool Whether permalink links are enabled and index.php is NOT in the URL.
         */
        public function using_mod_rewrite_permalinks()
        {
        }
        /**
         * Indexes for matches for usage in preg_*() functions.
         *
         * The format of the string is, with empty matches property value, '$NUM'.
         * The 'NUM' will be replaced with the value in the $number parameter. With
         * the matches property not empty, the value of the returned string will
         * contain that value of the matches property. The format then will be
         * '$MATCHES[NUM]', with MATCHES as the value in the property and NUM the
         * value of the $number parameter.
         *
         * @since 1.5.0
         *
         * @param int $number Index number.
         * @return string
         */
        public function preg_index($number)
        {
        }
        /**
         * Retrieves all page and attachments for pages URIs.
         *
         * The attachments are for those that have pages as parents and will be
         * retrieved.
         *
         * @since 2.5.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @return array Array of page URIs as first element and attachment URIs as second element.
         */
        public function page_uri_index()
        {
        }
        /**
         * Retrieves all of the rewrite rules for pages.
         *
         * @since 1.5.0
         *
         * @return string[] Page rewrite rules.
         */
        public function page_rewrite_rules()
        {
        }
        /**
         * Retrieves date permalink structure, with year, month, and day.
         *
         * The permalink structure for the date, if not set already depends on the
         * permalink structure. It can be one of three formats. The first is year,
         * month, day; the second is day, month, year; and the last format is month,
         * day, year. These are matched against the permalink structure for which
         * one is used. If none matches, then the default will be used, which is
         * year, month, day.
         *
         * Prevents post ID and date permalinks from overlapping. In the case of
         * post_id, the date permalink will be prepended with front permalink with
         * 'date/' before the actual permalink to form the complete date permalink
         * structure.
         *
         * @since 1.5.0
         *
         * @return string|false Date permalink structure on success, false on failure.
         */
        public function get_date_permastruct()
        {
        }
        /**
         * Retrieves the year permalink structure without month and day.
         *
         * Gets the date permalink structure and strips out the month and day
         * permalink structures.
         *
         * @since 1.5.0
         *
         * @return string|false Year permalink structure on success, false on failure.
         */
        public function get_year_permastruct()
        {
        }
        /**
         * Retrieves the month permalink structure without day and with year.
         *
         * Gets the date permalink structure and strips out the day permalink
         * structures. Keeps the year permalink structure.
         *
         * @since 1.5.0
         *
         * @return string|false Year/Month permalink structure on success, false on failure.
         */
        public function get_month_permastruct()
        {
        }
        /**
         * Retrieves the day permalink structure with month and year.
         *
         * Keeps date permalink structure with all year, month, and day.
         *
         * @since 1.5.0
         *
         * @return string|false Year/Month/Day permalink structure on success, false on failure.
         */
        public function get_day_permastruct()
        {
        }
        /**
         * Retrieves the permalink structure for categories.
         *
         * If the category_base property has no value, then the category structure
         * will have the front property value, followed by 'category', and finally
         * '%category%'. If it does, then the root property will be used, along with
         * the category_base property value.
         *
         * @since 1.5.0
         *
         * @return string|false Category permalink structure on success, false on failure.
         */
        public function get_category_permastruct()
        {
        }
        /**
         * Retrieve the permalink structure for tags.
         *
         * If the tag_base property has no value, then the tag structure will have
         * the front property value, followed by 'tag', and finally '%tag%'. If it
         * does, then the root property will be used, along with the tag_base
         * property value.
         *
         * @since 2.3.0
         *
         * @return string|false Tag permalink structure on success, false on failure.
         */
        public function get_tag_permastruct()
        {
        }
        /**
         * Retrieves an extra permalink structure by name.
         *
         * @since 2.5.0
         *
         * @param string $name Permalink structure name.
         * @return string|false Permalink structure string on success, false on failure.
         */
        public function get_extra_permastruct($name)
        {
        }
        /**
         * Retrieves the author permalink structure.
         *
         * The permalink structure is front property, author base, and finally
         * '/%author%'. Will set the author_structure property and then return it
         * without attempting to set the value again.
         *
         * @since 1.5.0
         *
         * @return string|false Author permalink structure on success, false on failure.
         */
        public function get_author_permastruct()
        {
        }
        /**
         * Retrieves the search permalink structure.
         *
         * The permalink structure is root property, search base, and finally
         * '/%search%'. Will set the search_structure property and then return it
         * without attempting to set the value again.
         *
         * @since 1.5.0
         *
         * @return string|false Search permalink structure on success, false on failure.
         */
        public function get_search_permastruct()
        {
        }
        /**
         * Retrieves the page permalink structure.
         *
         * The permalink structure is root property, and '%pagename%'. Will set the
         * page_structure property and then return it without attempting to set the
         * value again.
         *
         * @since 1.5.0
         *
         * @return string|false Page permalink structure on success, false on failure.
         */
        public function get_page_permastruct()
        {
        }
        /**
         * Retrieves the feed permalink structure.
         *
         * The permalink structure is root property, feed base, and finally
         * '/%feed%'. Will set the feed_structure property and then return it
         * without attempting to set the value again.
         *
         * @since 1.5.0
         *
         * @return string|false Feed permalink structure on success, false on failure.
         */
        public function get_feed_permastruct()
        {
        }
        /**
         * Retrieves the comment feed permalink structure.
         *
         * The permalink structure is root property, comment base property, feed
         * base and finally '/%feed%'. Will set the comment_feed_structure property
         * and then return it without attempting to set the value again.
         *
         * @since 1.5.0
         *
         * @return string|false Comment feed permalink structure on success, false on failure.
         */
        public function get_comment_feed_permastruct()
        {
        }
        /**
         * Adds or updates existing rewrite tags (e.g. %postname%).
         *
         * If the tag already exists, replace the existing pattern and query for
         * that tag, otherwise add the new tag.
         *
         * @since 1.5.0
         *
         * @see WP_Rewrite::$rewritecode
         * @see WP_Rewrite::$rewritereplace
         * @see WP_Rewrite::$queryreplace
         *
         * @param string $tag   Name of the rewrite tag to add or update.
         * @param string $regex Regular expression to substitute the tag for in rewrite rules.
         * @param string $query String to append to the rewritten query. Must end in '='.
         */
        public function add_rewrite_tag($tag, $regex, $query)
        {
        }
        /**
         * Removes an existing rewrite tag.
         *
         * @since 4.5.0
         *
         * @see WP_Rewrite::$rewritecode
         * @see WP_Rewrite::$rewritereplace
         * @see WP_Rewrite::$queryreplace
         *
         * @param string $tag Name of the rewrite tag to remove.
         */
        public function remove_rewrite_tag($tag)
        {
        }
        /**
         * Generates rewrite rules from a permalink structure.
         *
         * The main WP_Rewrite function for building the rewrite rule list. The
         * contents of the function is a mix of black magic and regular expressions,
         * so best just ignore the contents and move to the parameters.
         *
         * @since 1.5.0
         *
         * @param string $permalink_structure The permalink structure.
         * @param int    $ep_mask             Optional. Endpoint mask defining what endpoints are added to the structure.
         *                                    Accepts a mask of:
         *                                    - `EP_ALL`
         *                                    - `EP_NONE`
         *                                    - `EP_ALL_ARCHIVES`
         *                                    - `EP_ATTACHMENT`
         *                                    - `EP_AUTHORS`
         *                                    - `EP_CATEGORIES`
         *                                    - `EP_COMMENTS`
         *                                    - `EP_DATE`
         *                                    - `EP_DAY`
         *                                    - `EP_MONTH`
         *                                    - `EP_PAGES`
         *                                    - `EP_PERMALINK`
         *                                    - `EP_ROOT`
         *                                    - `EP_SEARCH`
         *                                    - `EP_TAGS`
         *                                    - `EP_YEAR`
         *                                    Default `EP_NONE`.
         * @param bool   $paged               Optional. Whether archive pagination rules should be added for the structure.
         *                                    Default true.
         * @param bool   $feed                Optional Whether feed rewrite rules should be added for the structure.
         *                                    Default true.
         * @param bool   $forcomments         Optional. Whether the feed rules should be a query for a comments feed.
         *                                    Default false.
         * @param bool   $walk_dirs           Optional. Whether the 'directories' making up the structure should be walked
         *                                    over and rewrite rules built for each in-turn. Default true.
         * @param bool   $endpoints           Optional. Whether endpoints should be applied to the generated rewrite rules.
         *                                    Default true.
         * @return string[] Array of rewrite rules keyed by their regex pattern.
         */
        public function generate_rewrite_rules($permalink_structure, $ep_mask = \EP_NONE, $paged = \true, $feed = \true, $forcomments = \false, $walk_dirs = \true, $endpoints = \true)
        {
        }
        /**
         * Generates rewrite rules with permalink structure and walking directory only.
         *
         * Shorten version of WP_Rewrite::generate_rewrite_rules() that allows for shorter
         * list of parameters. See the method for longer description of what generating
         * rewrite rules does.
         *
         * @since 1.5.0
         *
         * @see WP_Rewrite::generate_rewrite_rules() See for long description and rest of parameters.
         *
         * @param string $permalink_structure The permalink structure to generate rules.
         * @param bool   $walk_dirs           Optional. Whether to create list of directories to walk over.
         *                                    Default false.
         * @return array
         */
        public function generate_rewrite_rule($permalink_structure, $walk_dirs = \false)
        {
        }
        /**
         * Constructs rewrite matches and queries from permalink structure.
         *
         * Runs the action {@see 'generate_rewrite_rules'} with the parameter that is an
         * reference to the current WP_Rewrite instance to further manipulate the
         * permalink structures and rewrite rules. Runs the {@see 'rewrite_rules_array'}
         * filter on the full rewrite rule array.
         *
         * There are two ways to manipulate the rewrite rules, one by hooking into
         * the {@see 'generate_rewrite_rules'} action and gaining full control of the
         * object or just manipulating the rewrite rule array before it is passed
         * from the function.
         *
         * @since 1.5.0
         *
         * @return string[] An associative array of matches and queries.
         */
        public function rewrite_rules()
        {
        }
        /**
         * Retrieves the rewrite rules.
         *
         * The difference between this method and WP_Rewrite::rewrite_rules() is that
         * this method stores the rewrite rules in the 'rewrite_rules' option and retrieves
         * it. This prevents having to process all of the permalinks to get the rewrite rules
         * in the form of caching.
         *
         * @since 1.5.0
         *
         * @return string[] Array of rewrite rules keyed by their regex pattern.
         */
        public function wp_rewrite_rules()
        {
        }
        /**
         * Retrieves mod_rewrite-formatted rewrite rules to write to .htaccess.
         *
         * Does not actually write to the .htaccess file, but creates the rules for
         * the process that will.
         *
         * Will add the non_wp_rules property rules to the .htaccess file before
         * the WordPress rewrite rules one.
         *
         * @since 1.5.0
         *
         * @return string
         */
        public function mod_rewrite_rules()
        {
        }
        /**
         * Retrieves IIS7 URL Rewrite formatted rewrite rules to write to web.config file.
         *
         * Does not actually write to the web.config file, but creates the rules for
         * the process that will.
         *
         * @since 2.8.0
         *
         * @param bool $add_parent_tags Optional. Whether to add parent tags to the rewrite rule sets.
         *                              Default false.
         * @return string IIS7 URL rewrite rule sets.
         */
        public function iis7_url_rewrite_rules($add_parent_tags = \false)
        {
        }
        /**
         * Adds a rewrite rule that transforms a URL structure to a set of query vars.
         *
         * Any value in the $after parameter that isn't 'bottom' will result in the rule
         * being placed at the top of the rewrite rules.
         *
         * @since 2.1.0
         * @since 4.4.0 Array support was added to the `$query` parameter.
         *
         * @param string       $regex Regular expression to match request against.
         * @param string|array $query The corresponding query vars for this rewrite rule.
         * @param string       $after Optional. Priority of the new rule. Accepts 'top'
         *                            or 'bottom'. Default 'bottom'.
         */
        public function add_rule($regex, $query, $after = 'bottom')
        {
        }
        /**
         * Adds a rewrite rule that doesn't correspond to index.php.
         *
         * @since 2.1.0
         *
         * @param string $regex Regular expression to match request against.
         * @param string $query The corresponding query vars for this rewrite rule.
         */
        public function add_external_rule($regex, $query)
        {
        }
        /**
         * Adds an endpoint, like /trackback/.
         *
         * @since 2.1.0
         * @since 3.9.0 $query_var parameter added.
         * @since 4.3.0 Added support for skipping query var registration by passing `false` to `$query_var`.
         *
         * @see add_rewrite_endpoint() for full documentation.
         * @global WP $wp Current WordPress environment instance.
         *
         * @param string      $name      Name of the endpoint.
         * @param int         $places    Endpoint mask describing the places the endpoint should be added.
         *                               Accepts a mask of:
         *                               - `EP_ALL`
         *                               - `EP_NONE`
         *                               - `EP_ALL_ARCHIVES`
         *                               - `EP_ATTACHMENT`
         *                               - `EP_AUTHORS`
         *                               - `EP_CATEGORIES`
         *                               - `EP_COMMENTS`
         *                               - `EP_DATE`
         *                               - `EP_DAY`
         *                               - `EP_MONTH`
         *                               - `EP_PAGES`
         *                               - `EP_PERMALINK`
         *                               - `EP_ROOT`
         *                               - `EP_SEARCH`
         *                               - `EP_TAGS`
         *                               - `EP_YEAR`
         * @param string|bool $query_var Optional. Name of the corresponding query variable. Pass `false` to
         *                               skip registering a query_var for this endpoint. Defaults to the
         *                               value of `$name`.
         */
        public function add_endpoint($name, $places, $query_var = \true)
        {
        }
        /**
         * Adds a new permalink structure.
         *
         * A permalink structure (permastruct) is an abstract definition of a set of rewrite rules;
         * it is an easy way of expressing a set of regular expressions that rewrite to a set of
         * query strings. The new permastruct is added to the WP_Rewrite::$extra_permastructs array.
         *
         * When the rewrite rules are built by WP_Rewrite::rewrite_rules(), all of these extra
         * permastructs are passed to WP_Rewrite::generate_rewrite_rules() which transforms them
         * into the regular expressions that many love to hate.
         *
         * The `$args` parameter gives you control over how WP_Rewrite::generate_rewrite_rules()
         * works on the new permastruct.
         *
         * @since 2.5.0
         *
         * @param string $name   Name for permalink structure.
         * @param string $struct Permalink structure (e.g. category/%category%)
         * @param array  $args   {
         *     Optional. Arguments for building rewrite rules based on the permalink structure.
         *     Default empty array.
         *
         *     @type bool $with_front  Whether the structure should be prepended with `WP_Rewrite::$front`.
         *                             Default true.
         *     @type int  $ep_mask     The endpoint mask defining which endpoints are added to the structure.
         *                             Accepts a mask of:
         *                             - `EP_ALL`
         *                             - `EP_NONE`
         *                             - `EP_ALL_ARCHIVES`
         *                             - `EP_ATTACHMENT`
         *                             - `EP_AUTHORS`
         *                             - `EP_CATEGORIES`
         *                             - `EP_COMMENTS`
         *                             - `EP_DATE`
         *                             - `EP_DAY`
         *                             - `EP_MONTH`
         *                             - `EP_PAGES`
         *                             - `EP_PERMALINK`
         *                             - `EP_ROOT`
         *                             - `EP_SEARCH`
         *                             - `EP_TAGS`
         *                             - `EP_YEAR`
         *                             Default `EP_NONE`.
         *     @type bool $paged       Whether archive pagination rules should be added for the structure.
         *                             Default true.
         *     @type bool $feed        Whether feed rewrite rules should be added for the structure. Default true.
         *     @type bool $forcomments Whether the feed rules should be a query for a comments feed. Default false.
         *     @type bool $walk_dirs   Whether the 'directories' making up the structure should be walked over
         *                             and rewrite rules built for each in-turn. Default true.
         *     @type bool $endpoints   Whether endpoints should be applied to the generated rules. Default true.
         * }
         */
        public function add_permastruct($name, $struct, $args = array())
        {
        }
        /**
         * Removes a permalink structure.
         *
         * @since 4.5.0
         *
         * @param string $name Name for permalink structure.
         */
        public function remove_permastruct($name)
        {
        }
        /**
         * Removes rewrite rules and then recreate rewrite rules.
         *
         * Calls WP_Rewrite::wp_rewrite_rules() after removing the 'rewrite_rules' option.
         * If the function named 'save_mod_rewrite_rules' exists, it will be called.
         *
         * @since 2.0.1
         *
         * @param bool $hard Whether to update .htaccess (hard flush) or just update rewrite_rules option (soft flush). Default is true (hard).
         */
        public function flush_rules($hard = \true)
        {
        }
        /**
         * Sets up the object's properties.
         *
         * The 'use_verbose_page_rules' object property will be set to true if the
         * permalink structure begins with one of the following: '%postname%', '%category%',
         * '%tag%', or '%author%'.
         *
         * @since 1.5.0
         */
        public function init()
        {
        }
        /**
         * Sets the main permalink structure for the site.
         *
         * Will update the 'permalink_structure' option, if there is a difference
         * between the current permalink structure and the parameter value. Calls
         * WP_Rewrite::init() after the option is updated.
         *
         * Fires the {@see 'permalink_structure_changed'} action once the init call has
         * processed passing the old and new values
         *
         * @since 1.5.0
         *
         * @param string $permalink_structure Permalink structure.
         */
        public function set_permalink_structure($permalink_structure)
        {
        }
        /**
         * Sets the category base for the category permalink.
         *
         * Will update the 'category_base' option, if there is a difference between
         * the current category base and the parameter value. Calls WP_Rewrite::init()
         * after the option is updated.
         *
         * @since 1.5.0
         *
         * @param string $category_base Category permalink structure base.
         */
        public function set_category_base($category_base)
        {
        }
        /**
         * Sets the tag base for the tag permalink.
         *
         * Will update the 'tag_base' option, if there is a difference between the
         * current tag base and the parameter value. Calls WP_Rewrite::init() after
         * the option is updated.
         *
         * @since 2.3.0
         *
         * @param string $tag_base Tag permalink structure base.
         */
        public function set_tag_base($tag_base)
        {
        }
        /**
         * Constructor - Calls init(), which runs setup.
         *
         * @since 1.5.0
         */
        public function __construct()
        {
        }
    }
    /**
     * IXR_Server
     *
     * @package IXR
     * @since 1.5.0
     */
    class IXR_Server
    {
        var $data;
        var $callbacks = array();
        var $message;
        var $capabilities;
        /**
         * PHP5 constructor.
         */
        function __construct($callbacks = \false, $data = \false, $wait = \false)
        {
        }
        /**
         * PHP4 constructor.
         */
        public function IXR_Server($callbacks = \false, $data = \false, $wait = \false)
        {
        }
        function serve($data = \false)
        {
        }
        function call($methodname, $args)
        {
        }
        function error($error, $message = \false)
        {
        }
        function output($xml)
        {
        }
        function hasMethod($method)
        {
        }
        function setCapabilities()
        {
        }
        function getCapabilities($args)
        {
        }
        function setCallbacks()
        {
        }
        function listMethods($args)
        {
        }
        function multiCall($methodcalls)
        {
        }
    }
    /**
     * IXR_Request
     *
     * @package IXR
     * @since 1.5.0
     */
    class IXR_Request
    {
        var $method;
        var $args;
        var $xml;
        /**
         * PHP5 constructor.
         */
        function __construct($method, $args)
        {
        }
        /**
         * PHP4 constructor.
         */
        public function IXR_Request($method, $args)
        {
        }
        function getLength()
        {
        }
        function getXml()
        {
        }
    }
    /**
     * IXR_IntrospectionServer
     *
     * @package IXR
     * @since 1.5.0
     */
    class IXR_IntrospectionServer extends \IXR_Server
    {
        var $signatures;
        var $help;
        /**
         * PHP5 constructor.
         */
        function __construct()
        {
        }
        /**
         * PHP4 constructor.
         */
        public function IXR_IntrospectionServer()
        {
        }
        function addCallback($method, $callback, $args, $help)
        {
        }
        function call($methodname, $args)
        {
        }
        function methodSignature($method)
        {
        }
        function methodHelp($method)
        {
        }
    }
    /**
     * IXR_Base64
     *
     * @package IXR
     * @since 1.5.0
     */
    class IXR_Base64
    {
        var $data;
        /**
         * PHP5 constructor.
         */
        function __construct($data)
        {
        }
        /**
         * PHP4 constructor.
         */
        public function IXR_Base64($data)
        {
        }
        function getXml()
        {
        }
    }
    /**
     * IXR_Client
     *
     * @package IXR
     * @since 1.5.0
     *
     */
    class IXR_Client
    {
        var $server;
        var $port;
        var $path;
        var $useragent;
        var $response;
        var $message = \false;
        var $debug = \false;
        var $timeout;
        var $headers = array();
        // Storage place for an error message
        var $error = \false;
        /**
         * PHP5 constructor.
         */
        function __construct($server, $path = \false, $port = 80, $timeout = 15)
        {
        }
        /**
         * PHP4 constructor.
         */
        public function IXR_Client($server, $path = \false, $port = 80, $timeout = 15)
        {
        }
        /**
         * @since 1.5.0
         * @since 5.5.0 Formalized the existing `...$args` parameter by adding it
         *              to the function signature.
         *
         * @return bool
         */
        function query(...$args)
        {
        }
        function getResponse()
        {
        }
        function isError()
        {
        }
        function getErrorCode()
        {
        }
        function getErrorMessage()
        {
        }
    }
    /**
     * IXR_Value
     *
     * @package IXR
     * @since 1.5.0
     */
    class IXR_Value
    {
        var $data;
        var $type;
        /**
         * PHP5 constructor.
         */
        function __construct($data, $type = \false)
        {
        }
        /**
         * PHP4 constructor.
         */
        public function IXR_Value($data, $type = \false)
        {
        }
        function calculateType()
        {
        }
        function getXml()
        {
        }
        /**
         * Checks whether or not the supplied array is a struct or not
         *
         * @param array $array
         * @return bool
         */
        function isStruct($array)
        {
        }
    }
    /**
     * IXR_ClientMulticall
     *
     * @package IXR
     * @since 1.5.0
     */
    class IXR_ClientMulticall extends \IXR_Client
    {
        var $calls = array();
        /**
         * PHP5 constructor.
         */
        function __construct($server, $path = \false, $port = 80)
        {
        }
        /**
         * PHP4 constructor.
         */
        public function IXR_ClientMulticall($server, $path = \false, $port = 80)
        {
        }
        /**
         * @since 1.5.0
         * @since 5.5.0 Formalized the existing `...$args` parameter by adding it
         *              to the function signature.
         */
        function addCall(...$args)
        {
        }
        /**
         * @since 1.5.0
         * @since 5.5.0 Formalized the existing `...$args` parameter by adding it
         *              to the function signature.
         *
         * @return bool
         */
        function query(...$args)
        {
        }
    }
    /**
     * IXR_Error
     *
     * @package IXR
     * @since 1.5.0
     */
    class IXR_Error
    {
        var $code;
        var $message;
        /**
         * PHP5 constructor.
         */
        function __construct($code, $message)
        {
        }
        /**
         * PHP4 constructor.
         */
        public function IXR_Error($code, $message)
        {
        }
        function getXml()
        {
        }
    }
    /**
     * IXR_Date
     *
     * @package IXR
     * @since 1.5.0
     */
    class IXR_Date
    {
        var $year;
        var $month;
        var $day;
        var $hour;
        var $minute;
        var $second;
        var $timezone;
        /**
         * PHP5 constructor.
         */
        function __construct($time)
        {
        }
        /**
         * PHP4 constructor.
         */
        public function IXR_Date($time)
        {
        }
        function parseTimestamp($timestamp)
        {
        }
        function parseIso($iso)
        {
        }
        function getIso()
        {
        }
        function getXml()
        {
        }
        function getTimestamp()
        {
        }
    }
    /**
     * IXR_MESSAGE
     *
     * @package IXR
     * @since 1.5.0
     *
     */
    class IXR_Message
    {
        var $message = \false;
        var $messageType = \false;
        // methodCall / methodResponse / fault
        var $faultCode = \false;
        var $faultString = \false;
        var $methodName = '';
        var $params = array();
        // Current variable stacks
        var $_arraystructs = array();
        // The stack used to keep track of the current array/struct
        var $_arraystructstypes = array();
        // Stack keeping track of if things are structs or array
        var $_currentStructName = array();
        // A stack as well
        var $_param;
        var $_value;
        var $_currentTag;
        var $_currentTagContents;
        // The XML parser
        var $_parser;
        /**
         * PHP5 constructor.
         */
        function __construct($message)
        {
        }
        /**
         * PHP4 constructor.
         */
        public function IXR_Message($message)
        {
        }
        function parse()
        {
        }
        function tag_open($parser, $tag, $attr)
        {
        }
        function cdata($parser, $cdata)
        {
        }
        function tag_close($parser, $tag)
        {
        }
    }
    /**
     * Atom Syndication Format PHP Library
     *
     * @package AtomLib
     * @link http://code.google.com/p/phpatomlib/
     *
     * @author Elias Torres <elias@torrez.us>
     * @version 0.4
     * @since 2.3.0
     */
    /**
     * Structure that store common Atom Feed Properties
     *
     * @package AtomLib
     */
    class AtomFeed
    {
        /**
         * Stores Links
         * @var array
         * @access public
         */
        var $links = array();
        /**
         * Stores Categories
         * @var array
         * @access public
         */
        var $categories = array();
        /**
         * Stores Entries
         *
         * @var array
         * @access public
         */
        var $entries = array();
    }
    /**
     * Structure that store Atom Entry Properties
     *
     * @package AtomLib
     */
    class AtomEntry
    {
        /**
         * Stores Links
         * @var array
         * @access public
         */
        var $links = array();
        /**
         * Stores Categories
         * @var array
         * @access public
         */
        var $categories = array();
    }
    /**
     * AtomLib Atom Parser API
     *
     * @package AtomLib
     */
    class AtomParser
    {
        var $NS = 'http://www.w3.org/2005/Atom';
        var $ATOM_CONTENT_ELEMENTS = array('content', 'summary', 'title', 'subtitle', 'rights');
        var $ATOM_SIMPLE_ELEMENTS = array('id', 'updated', 'published', 'draft');
        var $debug = \false;
        var $depth = 0;
        var $indent = 2;
        var $in_content;
        var $ns_contexts = array();
        var $ns_decls = array();
        var $content_ns_decls = array();
        var $content_ns_contexts = array();
        var $is_xhtml = \false;
        var $is_html = \false;
        var $is_text = \true;
        var $skipped_div = \false;
        var $FILE = "php://input";
        var $feed;
        var $current;
        /**
         * PHP5 constructor.
         */
        function __construct()
        {
        }
        /**
         * PHP4 constructor.
         */
        public function AtomParser()
        {
        }
        /**
         * Map attributes to key="val"
         *
         * @param string $k Key
         * @param string $v Value
         * @return string
         */
        public static function map_attrs($k, $v)
        {
        }
        /**
         * Map XML namespace to string.
         *
         * @param indexish $p XML Namespace element index
         * @param array $n Two-element array pair. [ 0 => {namespace}, 1 => {url} ]
         * @return string 'xmlns="{url}"' or 'xmlns:{namespace}="{url}"'
         */
        public static function map_xmlns($p, $n)
        {
        }
        function _p($msg)
        {
        }
        function error_handler($log_level, $log_text, $error_file, $error_line)
        {
        }
        function parse()
        {
        }
        function start_element($parser, $name, $attrs)
        {
        }
        function end_element($parser, $name)
        {
        }
        function start_ns($parser, $prefix, $uri)
        {
        }
        function end_ns($parser, $prefix)
        {
        }
        function cdata($parser, $data)
        {
        }
        function _default($parser, $data)
        {
        }
        function ns_to_prefix($qname, $attr = \false)
        {
        }
        function is_declared_content_ns($new_mapping)
        {
        }
        function xml_escape($content)
        {
        }
    }
    /**
     * Widget API: WP_Widget base class
     *
     * @package WordPress
     * @subpackage Widgets
     * @since 4.4.0
     */
    /**
     * Core base class extended to register widgets.
     *
     * This class must be extended for each widget, and WP_Widget::widget() must be overridden.
     *
     * If adding widget options, WP_Widget::update() and WP_Widget::form() should also be overridden.
     *
     * @since 2.8.0
     * @since 4.4.0 Moved to its own file from wp-includes/widgets.php
     */
    class WP_Widget
    {
        /**
         * Root ID for all widgets of this type.
         *
         * @since 2.8.0
         * @var mixed|string
         */
        public $id_base;
        /**
         * Name for this widget type.
         *
         * @since 2.8.0
         * @var string
         */
        public $name;
        /**
         * Option name for this widget type.
         *
         * @since 2.8.0
         * @var string
         */
        public $option_name;
        /**
         * Alt option name for this widget type.
         *
         * @since 2.8.0
         * @var string
         */
        public $alt_option_name;
        /**
         * Option array passed to wp_register_sidebar_widget().
         *
         * @since 2.8.0
         * @var array
         */
        public $widget_options;
        /**
         * Option array passed to wp_register_widget_control().
         *
         * @since 2.8.0
         * @var array
         */
        public $control_options;
        /**
         * Unique ID number of the current instance.
         *
         * @since 2.8.0
         * @var bool|int
         */
        public $number = \false;
        /**
         * Unique ID string of the current instance (id_base-number).
         *
         * @since 2.8.0
         * @var bool|string
         */
        public $id = \false;
        /**
         * Whether the widget data has been updated.
         *
         * Set to true when the data is updated after a POST submit - ensures it does
         * not happen twice.
         *
         * @since 2.8.0
         * @var bool
         */
        public $updated = \false;
        //
        // Member functions that must be overridden by subclasses.
        //
        /**
         * Echoes the widget content.
         *
         * Subclasses should override this function to generate their widget code.
         *
         * @since 2.8.0
         *
         * @param array $args     Display arguments including 'before_title', 'after_title',
         *                        'before_widget', and 'after_widget'.
         * @param array $instance The settings for the particular instance of the widget.
         */
        public function widget($args, $instance)
        {
        }
        /**
         * Updates a particular instance of a widget.
         *
         * This function should check that `$new_instance` is set correctly. The newly-calculated
         * value of `$instance` should be returned. If false is returned, the instance won't be
         * saved/updated.
         *
         * @since 2.8.0
         *
         * @param array $new_instance New settings for this instance as input by the user via
         *                            WP_Widget::form().
         * @param array $old_instance Old settings for this instance.
         * @return array Settings to save or bool false to cancel saving.
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * Outputs the settings update form.
         *
         * @since 2.8.0
         *
         * @param array $instance Current settings.
         * @return string Default return is 'noform'.
         */
        public function form($instance)
        {
        }
        // Functions you'll need to call.
        /**
         * PHP5 constructor.
         *
         * @since 2.8.0
         *
         * @param string $id_base         Optional. Base ID for the widget, lowercase and unique. If left empty,
         *                                a portion of the widget's PHP class name will be used. Has to be unique.
         * @param string $name            Name for the widget displayed on the configuration page.
         * @param array  $widget_options  Optional. Widget options. See wp_register_sidebar_widget() for
         *                                information on accepted arguments. Default empty array.
         * @param array  $control_options Optional. Widget control options. See wp_register_widget_control() for
         *                                information on accepted arguments. Default empty array.
         */
        public function __construct($id_base, $name, $widget_options = array(), $control_options = array())
        {
        }
        /**
         * PHP4 constructor.
         *
         * @since 2.8.0
         * @deprecated 4.3.0 Use __construct() instead.
         *
         * @see WP_Widget::__construct()
         *
         * @param string $id_base         Optional. Base ID for the widget, lowercase and unique. If left empty,
         *                                a portion of the widget's PHP class name will be used. Has to be unique.
         * @param string $name            Name for the widget displayed on the configuration page.
         * @param array  $widget_options  Optional. Widget options. See wp_register_sidebar_widget() for
         *                                information on accepted arguments. Default empty array.
         * @param array  $control_options Optional. Widget control options. See wp_register_widget_control() for
         *                                information on accepted arguments. Default empty array.
         */
        public function WP_Widget($id_base, $name, $widget_options = array(), $control_options = array())
        {
        }
        /**
         * Constructs name attributes for use in form() fields
         *
         * This function should be used in form() methods to create name attributes for fields
         * to be saved by update()
         *
         * @since 2.8.0
         * @since 4.4.0 Array format field names are now accepted.
         *
         * @param string $field_name Field name.
         * @return string Name attribute for `$field_name`.
         */
        public function get_field_name($field_name)
        {
        }
        /**
         * Constructs id attributes for use in WP_Widget::form() fields.
         *
         * This function should be used in form() methods to create id attributes
         * for fields to be saved by WP_Widget::update().
         *
         * @since 2.8.0
         * @since 4.4.0 Array format field IDs are now accepted.
         *
         * @param string $field_name Field name.
         * @return string ID attribute for `$field_name`.
         */
        public function get_field_id($field_name)
        {
        }
        /**
         * Register all widget instances of this widget class.
         *
         * @since 2.8.0
         */
        public function _register()
        {
        }
        /**
         * Sets the internal order number for the widget instance.
         *
         * @since 2.8.0
         *
         * @param int $number The unique order number of this widget instance compared to other
         *                    instances of the same class.
         */
        public function _set($number)
        {
        }
        /**
         * Retrieves the widget display callback.
         *
         * @since 2.8.0
         *
         * @return callable Display callback.
         */
        public function _get_display_callback()
        {
        }
        /**
         * Retrieves the widget update callback.
         *
         * @since 2.8.0
         *
         * @return callable Update callback.
         */
        public function _get_update_callback()
        {
        }
        /**
         * Retrieves the form callback.
         *
         * @since 2.8.0
         *
         * @return callable Form callback.
         */
        public function _get_form_callback()
        {
        }
        /**
         * Determines whether the current request is inside the Customizer preview.
         *
         * If true -- the current request is inside the Customizer preview, then
         * the object cache gets suspended and widgets should check this to decide
         * whether they should store anything persistently to the object cache,
         * to transients, or anywhere else.
         *
         * @since 3.9.0
         *
         * @global WP_Customize_Manager $wp_customize
         *
         * @return bool True if within the Customizer preview, false if not.
         */
        public function is_preview()
        {
        }
        /**
         * Generates the actual widget content (Do NOT override).
         *
         * Finds the instance and calls WP_Widget::widget().
         *
         * @since 2.8.0
         *
         * @param array     $args        Display arguments. See WP_Widget::widget() for information
         *                               on accepted arguments.
         * @param int|array $widget_args {
         *     Optional. Internal order number of the widget instance, or array of multi-widget arguments.
         *     Default 1.
         *
         *     @type int $number Number increment used for multiples of the same widget.
         * }
         */
        public function display_callback($args, $widget_args = 1)
        {
        }
        /**
         * Handles changed settings (Do NOT override).
         *
         * @since 2.8.0
         *
         * @global array $wp_registered_widgets
         *
         * @param int $deprecated Not used.
         */
        public function update_callback($deprecated = 1)
        {
        }
        /**
         * Generates the widget control form (Do NOT override).
         *
         * @since 2.8.0
         *
         * @param int|array $widget_args {
         *     Optional. Internal order number of the widget instance, or array of multi-widget arguments.
         *     Default 1.
         *
         *     @type int $number Number increment used for multiples of the same widget.
         * }
         * @return string|null
         */
        public function form_callback($widget_args = 1)
        {
        }
        /**
         * Registers an instance of the widget class.
         *
         * @since 2.8.0
         *
         * @param int $number Optional. The unique order number of this widget instance
         *                    compared to other instances of the same class. Default -1.
         */
        public function _register_one($number = -1)
        {
        }
        /**
         * Saves the settings for all instances of the widget class.
         *
         * @since 2.8.0
         *
         * @param array $settings Multi-dimensional array of widget instance settings.
         */
        public function save_settings($settings)
        {
        }
        /**
         * Retrieves the settings for all instances of the widget class.
         *
         * @since 2.8.0
         *
         * @return array Multi-dimensional array of widget instance settings.
         */
        public function get_settings()
        {
        }
    }
    /**
     * SimplePie
     *
     * A PHP-Based RSS and Atom Feed Framework.
     * Takes the hard work out of managing a complete RSS/Atom solution.
     *
     * Copyright (c) 2004-2016, Ryan Parman, Sam Sneddon, Ryan McCue, and contributors
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     *
     * 	* Redistributions of source code must retain the above copyright notice, this list of
     * 	  conditions and the following disclaimer.
     *
     * 	* Redistributions in binary form must reproduce the above copyright notice, this list
     * 	  of conditions and the following disclaimer in the documentation and/or other materials
     * 	  provided with the distribution.
     *
     * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used
     * 	  to endorse or promote products derived from this software without specific prior
     * 	  written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
     * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
     * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS
     * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     *
     * @package SimplePie
     * @copyright 2004-2016 Ryan Parman, Sam Sneddon, Ryan McCue
     * @author Ryan Parman
     * @author Sam Sneddon
     * @author Ryan McCue
     * @link http://simplepie.org/ SimplePie
     * @license http://www.opensource.org/licenses/bsd-license.php BSD License
     */
    /**
     * Used for data cleanup and post-processing
     *
     *
     * This class can be overloaded with {@see SimplePie::set_sanitize_class()}
     *
     * @package SimplePie
     * @todo Move to using an actual HTML parser (this will allow tags to be properly stripped, and to switch between HTML and XHTML), this will also make it easier to shorten a string while preserving HTML tags
     */
    class SimplePie_Sanitize
    {
        // Private vars
        var $base;
        // Options
        var $remove_div = \true;
        var $image_handler = '';
        var $strip_htmltags = array('base', 'blink', 'body', 'doctype', 'embed', 'font', 'form', 'frame', 'frameset', 'html', 'iframe', 'input', 'marquee', 'meta', 'noscript', 'object', 'param', 'script', 'style');
        var $encode_instead_of_strip = \false;
        var $strip_attributes = array('bgsound', 'expr', 'id', 'style', 'onclick', 'onerror', 'onfinish', 'onmouseover', 'onmouseout', 'onfocus', 'onblur', 'lowsrc', 'dynsrc');
        var $add_attributes = array('audio' => array('preload' => 'none'), 'iframe' => array('sandbox' => 'allow-scripts allow-same-origin'), 'video' => array('preload' => 'none'));
        var $strip_comments = \false;
        var $output_encoding = 'UTF-8';
        var $enable_cache = \true;
        var $cache_location = './cache';
        var $cache_name_function = 'md5';
        var $timeout = 10;
        var $useragent = '';
        var $force_fsockopen = \false;
        var $replace_url_attributes = \null;
        var $registry;
        /**
         * List of domains for which to force HTTPS.
         * @see SimplePie_Sanitize::set_https_domains()
         * Array is a tree split at DNS levels. Example:
         * array('biz' => true, 'com' => array('example' => true), 'net' => array('example' => array('www' => true)))
         */
        var $https_domains = array();
        public function __construct()
        {
        }
        public function remove_div($enable = \true)
        {
        }
        public function set_image_handler($page = \false)
        {
        }
        public function set_registry(\SimplePie_Registry $registry)
        {
        }
        public function pass_cache_data($enable_cache = \true, $cache_location = './cache', $cache_name_function = 'md5', $cache_class = 'SimplePie_Cache')
        {
        }
        public function pass_file_data($file_class = 'SimplePie_File', $timeout = 10, $useragent = '', $force_fsockopen = \false)
        {
        }
        public function strip_htmltags($tags = array('base', 'blink', 'body', 'doctype', 'embed', 'font', 'form', 'frame', 'frameset', 'html', 'iframe', 'input', 'marquee', 'meta', 'noscript', 'object', 'param', 'script', 'style'))
        {
        }
        public function encode_instead_of_strip($encode = \false)
        {
        }
        public function strip_attributes($attribs = array('bgsound', 'expr', 'id', 'style', 'onclick', 'onerror', 'onfinish', 'onmouseover', 'onmouseout', 'onfocus', 'onblur', 'lowsrc', 'dynsrc'))
        {
        }
        public function add_attributes($attribs = array('audio' => array('preload' => 'none'), 'iframe' => array('sandbox' => 'allow-scripts allow-same-origin'), 'video' => array('preload' => 'none')))
        {
        }
        public function strip_comments($strip = \false)
        {
        }
        public function set_output_encoding($encoding = 'UTF-8')
        {
        }
        /**
         * Set element/attribute key/value pairs of HTML attributes
         * containing URLs that need to be resolved relative to the feed
         *
         * Defaults to |a|@href, |area|@href, |blockquote|@cite, |del|@cite,
         * |form|@action, |img|@longdesc, |img|@src, |input|@src, |ins|@cite,
         * |q|@cite
         *
         * @since 1.0
         * @param array|null $element_attribute Element/attribute key/value pairs, null for default
         */
        public function set_url_replacements($element_attribute = \null)
        {
        }
        /**
         * Set the list of domains for which to force HTTPS.
         * @see SimplePie_Misc::https_url()
         * Example array('biz', 'example.com', 'example.org', 'www.example.net');
         */
        public function set_https_domains($domains)
        {
        }
        /**
         * Check if the domain is in the list of forced HTTPS.
         */
        protected function is_https_domain($domain)
        {
        }
        /**
         * Force HTTPS for selected Web sites.
         */
        public function https_url($url)
        {
        }
        public function sanitize($data, $type, $base = '')
        {
        }
        protected function preprocess($html, $type)
        {
        }
        public function replace_urls($document, $tag, $attributes)
        {
        }
        public function do_strip_htmltags($match)
        {
        }
        protected function strip_tag($tag, $document, $xpath, $type)
        {
        }
        protected function strip_attr($attrib, $xpath)
        {
        }
        protected function add_attr($tag, $valuePairs, $document)
        {
        }
    }
    /**
     * SimplePie
     *
     * A PHP-Based RSS and Atom Feed Framework.
     * Takes the hard work out of managing a complete RSS/Atom solution.
     *
     * Copyright (c) 2004-2016, Ryan Parman, Sam Sneddon, Ryan McCue, and contributors
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     *
     * 	* Redistributions of source code must retain the above copyright notice, this list of
     * 	  conditions and the following disclaimer.
     *
     * 	* Redistributions in binary form must reproduce the above copyright notice, this list
     * 	  of conditions and the following disclaimer in the documentation and/or other materials
     * 	  provided with the distribution.
     *
     * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used
     * 	  to endorse or promote products derived from this software without specific prior
     * 	  written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
     * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
     * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS
     * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     *
     * @package SimplePie
     * @copyright 2004-2016 Ryan Parman, Sam Sneddon, Ryan McCue
     * @author Ryan Parman
     * @author Sam Sneddon
     * @author Ryan McCue
     * @link http://simplepie.org/ SimplePie
     * @license http://www.opensource.org/licenses/bsd-license.php BSD License
     */
    /**
     * Miscellanous utilities
     *
     * @package SimplePie
     */
    class SimplePie_Misc
    {
        public static function time_hms($seconds)
        {
        }
        public static function absolutize_url($relative, $base)
        {
        }
        /**
         * Get a HTML/XML element from a HTML string
         *
         * @deprecated Use DOMDocument instead (parsing HTML with regex is bad!)
         * @param string $realname Element name (including namespace prefix if applicable)
         * @param string $string HTML document
         * @return array
         */
        public static function get_element($realname, $string)
        {
        }
        public static function element_implode($element)
        {
        }
        public static function error($message, $level, $file, $line)
        {
        }
        public static function fix_protocol($url, $http = 1)
        {
        }
        public static function array_merge_recursive($array1, $array2)
        {
        }
        public static function parse_url($url)
        {
        }
        public static function compress_parse_url($scheme = '', $authority = '', $path = '', $query = '', $fragment = '')
        {
        }
        public static function normalize_url($url)
        {
        }
        public static function percent_encoding_normalization($match)
        {
        }
        /**
         * Converts a Windows-1252 encoded string to a UTF-8 encoded string
         *
         * @static
         * @param string $string Windows-1252 encoded string
         * @return string UTF-8 encoded string
         */
        public static function windows_1252_to_utf8($string)
        {
        }
        /**
         * Change a string from one encoding to another
         *
         * @param string $data Raw data in $input encoding
         * @param string $input Encoding of $data
         * @param string $output Encoding you want
         * @return string|boolean False if we can't convert it
         */
        public static function change_encoding($data, $input, $output)
        {
        }
        protected static function change_encoding_mbstring($data, $input, $output)
        {
        }
        protected static function change_encoding_iconv($data, $input, $output)
        {
        }
        /**
         * @param string $data
         * @param string $input
         * @param string $output
         * @return string|false
         */
        protected static function change_encoding_uconverter($data, $input, $output)
        {
        }
        /**
         * Normalize an encoding name
         *
         * This is automatically generated by create.php
         *
         * To generate it, run `php create.php` on the command line, and copy the
         * output to replace this function.
         *
         * @param string $charset Character set to standardise
         * @return string Standardised name
         */
        public static function encoding($charset)
        {
        }
        public static function get_curl_version()
        {
        }
        /**
         * Strip HTML comments
         *
         * @param string $data Data to strip comments from
         * @return string Comment stripped string
         */
        public static function strip_comments($data)
        {
        }
        public static function parse_date($dt)
        {
        }
        /**
         * Decode HTML entities
         *
         * @deprecated Use DOMDocument instead
         * @param string $data Input data
         * @return string Output data
         */
        public static function entities_decode($data)
        {
        }
        /**
         * Remove RFC822 comments
         *
         * @param string $data Data to strip comments from
         * @return string Comment stripped string
         */
        public static function uncomment_rfc822($string)
        {
        }
        public static function parse_mime($mime)
        {
        }
        public static function atom_03_construct_type($attribs)
        {
        }
        public static function atom_10_construct_type($attribs)
        {
        }
        public static function atom_10_content_construct_type($attribs)
        {
        }
        public static function is_isegment_nz_nc($string)
        {
        }
        public static function space_separated_tokens($string)
        {
        }
        /**
         * Converts a unicode codepoint to a UTF-8 character
         *
         * @static
         * @param int $codepoint Unicode codepoint
         * @return string UTF-8 character
         */
        public static function codepoint_to_utf8($codepoint)
        {
        }
        /**
         * Similar to parse_str()
         *
         * Returns an associative array of name/value pairs, where the value is an
         * array of values that have used the same name
         *
         * @static
         * @param string $str The input string.
         * @return array
         */
        public static function parse_str($str)
        {
        }
        /**
         * Detect XML encoding, as per XML 1.0 Appendix F.1
         *
         * @todo Add support for EBCDIC
         * @param string $data XML data
         * @param SimplePie_Registry $registry Class registry
         * @return array Possible encodings
         */
        public static function xml_encoding($data, $registry)
        {
        }
        public static function output_javascript()
        {
        }
        /**
         * Get the SimplePie build timestamp
         *
         * Uses the git index if it exists, otherwise uses the modification time
         * of the newest file.
         */
        public static function get_build()
        {
        }
        /**
         * Format debugging information
         */
        public static function debug(&$sp)
        {
        }
        public static function silence_errors($num, $str)
        {
        }
        /**
         * Sanitize a URL by removing HTTP credentials.
         * @param string $url the URL to sanitize.
         * @return string the same URL without HTTP credentials.
         */
        public static function url_remove_credentials($url)
        {
        }
    }
    /**
     * SimplePie
     *
     * A PHP-Based RSS and Atom Feed Framework.
     * Takes the hard work out of managing a complete RSS/Atom solution.
     *
     * Copyright (c) 2004-2016, Ryan Parman, Sam Sneddon, Ryan McCue, and contributors
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     *
     * 	* Redistributions of source code must retain the above copyright notice, this list of
     * 	  conditions and the following disclaimer.
     *
     * 	* Redistributions in binary form must reproduce the above copyright notice, this list
     * 	  of conditions and the following disclaimer in the documentation and/or other materials
     * 	  provided with the distribution.
     *
     * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used
     * 	  to endorse or promote products derived from this software without specific prior
     * 	  written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
     * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
     * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS
     * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     *
     * @package SimplePie
     * @copyright 2004-2016 Ryan Parman, Sam Sneddon, Ryan McCue
     * @author Ryan Parman
     * @author Sam Sneddon
     * @author Ryan McCue
     * @link http://simplepie.org/ SimplePie
     * @license http://www.opensource.org/licenses/bsd-license.php BSD License
     */
    /**
     * Used for fetching remote files and reading local files
     *
     * Supports HTTP 1.0 via cURL or fsockopen, with spotty HTTP 1.1 support
     *
     * This class can be overloaded with {@see SimplePie::set_file_class()}
     *
     * @package SimplePie
     * @subpackage HTTP
     * @todo Move to properly supporting RFC2616 (HTTP/1.1)
     */
    class SimplePie_File
    {
        var $url;
        var $useragent;
        var $success = \true;
        var $headers = array();
        var $body;
        var $status_code;
        var $redirects = 0;
        var $error;
        var $method = \SIMPLEPIE_FILE_SOURCE_NONE;
        var $permanent_url;
        public function __construct($url, $timeout = 10, $redirects = 5, $headers = \null, $useragent = \null, $force_fsockopen = \false, $curl_options = array())
        {
        }
    }
    /**
     * SimplePie
     *
     * A PHP-Based RSS and Atom Feed Framework.
     * Takes the hard work out of managing a complete RSS/Atom solution.
     *
     * Copyright (c) 2004-2016, Ryan Parman, Sam Sneddon, Ryan McCue, and contributors
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     *
     * 	* Redistributions of source code must retain the above copyright notice, this list of
     * 	  conditions and the following disclaimer.
     *
     * 	* Redistributions in binary form must reproduce the above copyright notice, this list
     * 	  of conditions and the following disclaimer in the documentation and/or other materials
     * 	  provided with the distribution.
     *
     * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used
     * 	  to endorse or promote products derived from this software without specific prior
     * 	  written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
     * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
     * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS
     * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     *
     * @package SimplePie
     * @copyright 2004-2016 Ryan Parman, Sam Sneddon, Ryan McCue
     * @author Ryan Parman
     * @author Sam Sneddon
     * @author Ryan McCue
     * @link http://simplepie.org/ SimplePie
     * @license http://www.opensource.org/licenses/bsd-license.php BSD License
     */
    /**
     * Handles everything related to enclosures (including Media RSS and iTunes RSS)
     *
     * Used by {@see SimplePie_Item::get_enclosure()} and {@see SimplePie_Item::get_enclosures()}
     *
     * This class can be overloaded with {@see SimplePie::set_enclosure_class()}
     *
     * @package SimplePie
     * @subpackage API
     */
    class SimplePie_Enclosure
    {
        /**
         * @var string
         * @see get_bitrate()
         */
        var $bitrate;
        /**
         * @var array
         * @see get_captions()
         */
        var $captions;
        /**
         * @var array
         * @see get_categories()
         */
        var $categories;
        /**
         * @var int
         * @see get_channels()
         */
        var $channels;
        /**
         * @var SimplePie_Copyright
         * @see get_copyright()
         */
        var $copyright;
        /**
         * @var array
         * @see get_credits()
         */
        var $credits;
        /**
         * @var string
         * @see get_description()
         */
        var $description;
        /**
         * @var int
         * @see get_duration()
         */
        var $duration;
        /**
         * @var string
         * @see get_expression()
         */
        var $expression;
        /**
         * @var string
         * @see get_framerate()
         */
        var $framerate;
        /**
         * @var string
         * @see get_handler()
         */
        var $handler;
        /**
         * @var array
         * @see get_hashes()
         */
        var $hashes;
        /**
         * @var string
         * @see get_height()
         */
        var $height;
        /**
         * @deprecated
         * @var null
         */
        var $javascript;
        /**
         * @var array
         * @see get_keywords()
         */
        var $keywords;
        /**
         * @var string
         * @see get_language()
         */
        var $lang;
        /**
         * @var string
         * @see get_length()
         */
        var $length;
        /**
         * @var string
         * @see get_link()
         */
        var $link;
        /**
         * @var string
         * @see get_medium()
         */
        var $medium;
        /**
         * @var string
         * @see get_player()
         */
        var $player;
        /**
         * @var array
         * @see get_ratings()
         */
        var $ratings;
        /**
         * @var array
         * @see get_restrictions()
         */
        var $restrictions;
        /**
         * @var string
         * @see get_sampling_rate()
         */
        var $samplingrate;
        /**
         * @var array
         * @see get_thumbnails()
         */
        var $thumbnails;
        /**
         * @var string
         * @see get_title()
         */
        var $title;
        /**
         * @var string
         * @see get_type()
         */
        var $type;
        /**
         * @var string
         * @see get_width()
         */
        var $width;
        /**
         * Constructor, used to input the data
         *
         * For documentation on all the parameters, see the corresponding
         * properties and their accessors
         *
         * @uses idna_convert If available, this will convert an IDN
         */
        public function __construct($link = \null, $type = \null, $length = \null, $javascript = \null, $bitrate = \null, $captions = \null, $categories = \null, $channels = \null, $copyright = \null, $credits = \null, $description = \null, $duration = \null, $expression = \null, $framerate = \null, $hashes = \null, $height = \null, $keywords = \null, $lang = \null, $medium = \null, $player = \null, $ratings = \null, $restrictions = \null, $samplingrate = \null, $thumbnails = \null, $title = \null, $width = \null)
        {
        }
        /**
         * String-ified version
         *
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * Get the bitrate
         *
         * @return string|null
         */
        public function get_bitrate()
        {
        }
        /**
         * Get a single caption
         *
         * @param int $key
         * @return SimplePie_Caption|null
         */
        public function get_caption($key = 0)
        {
        }
        /**
         * Get all captions
         *
         * @return array|null Array of {@see SimplePie_Caption} objects
         */
        public function get_captions()
        {
        }
        /**
         * Get a single category
         *
         * @param int $key
         * @return SimplePie_Category|null
         */
        public function get_category($key = 0)
        {
        }
        /**
         * Get all categories
         *
         * @return array|null Array of {@see SimplePie_Category} objects
         */
        public function get_categories()
        {
        }
        /**
         * Get the number of audio channels
         *
         * @return int|null
         */
        public function get_channels()
        {
        }
        /**
         * Get the copyright information
         *
         * @return SimplePie_Copyright|null
         */
        public function get_copyright()
        {
        }
        /**
         * Get a single credit
         *
         * @param int $key
         * @return SimplePie_Credit|null
         */
        public function get_credit($key = 0)
        {
        }
        /**
         * Get all credits
         *
         * @return array|null Array of {@see SimplePie_Credit} objects
         */
        public function get_credits()
        {
        }
        /**
         * Get the description of the enclosure
         *
         * @return string|null
         */
        public function get_description()
        {
        }
        /**
         * Get the duration of the enclosure
         *
         * @param bool $convert Convert seconds into hh:mm:ss
         * @return string|int|null 'hh:mm:ss' string if `$convert` was specified, otherwise integer (or null if none found)
         */
        public function get_duration($convert = \false)
        {
        }
        /**
         * Get the expression
         *
         * @return string Probably one of 'sample', 'full', 'nonstop', 'clip'. Defaults to 'full'
         */
        public function get_expression()
        {
        }
        /**
         * Get the file extension
         *
         * @return string|null
         */
        public function get_extension()
        {
        }
        /**
         * Get the framerate (in frames-per-second)
         *
         * @return string|null
         */
        public function get_framerate()
        {
        }
        /**
         * Get the preferred handler
         *
         * @return string|null One of 'flash', 'fmedia', 'quicktime', 'wmedia', 'mp3'
         */
        public function get_handler()
        {
        }
        /**
         * Get a single hash
         *
         * @link http://www.rssboard.org/media-rss#media-hash
         * @param int $key
         * @return string|null Hash as per `media:hash`, prefixed with "$algo:"
         */
        public function get_hash($key = 0)
        {
        }
        /**
         * Get all credits
         *
         * @return array|null Array of strings, see {@see get_hash()}
         */
        public function get_hashes()
        {
        }
        /**
         * Get the height
         *
         * @return string|null
         */
        public function get_height()
        {
        }
        /**
         * Get the language
         *
         * @link http://tools.ietf.org/html/rfc3066
         * @return string|null Language code as per RFC 3066
         */
        public function get_language()
        {
        }
        /**
         * Get a single keyword
         *
         * @param int $key
         * @return string|null
         */
        public function get_keyword($key = 0)
        {
        }
        /**
         * Get all keywords
         *
         * @return array|null Array of strings
         */
        public function get_keywords()
        {
        }
        /**
         * Get length
         *
         * @return float Length in bytes
         */
        public function get_length()
        {
        }
        /**
         * Get the URL
         *
         * @return string|null
         */
        public function get_link()
        {
        }
        /**
         * Get the medium
         *
         * @link http://www.rssboard.org/media-rss#media-content
         * @return string|null Should be one of 'image', 'audio', 'video', 'document', 'executable'
         */
        public function get_medium()
        {
        }
        /**
         * Get the player URL
         *
         * Typically the same as {@see get_permalink()}
         * @return string|null Player URL
         */
        public function get_player()
        {
        }
        /**
         * Get a single rating
         *
         * @param int $key
         * @return SimplePie_Rating|null
         */
        public function get_rating($key = 0)
        {
        }
        /**
         * Get all ratings
         *
         * @return array|null Array of {@see SimplePie_Rating} objects
         */
        public function get_ratings()
        {
        }
        /**
         * Get a single restriction
         *
         * @param int $key
         * @return SimplePie_Restriction|null
         */
        public function get_restriction($key = 0)
        {
        }
        /**
         * Get all restrictions
         *
         * @return array|null Array of {@see SimplePie_Restriction} objects
         */
        public function get_restrictions()
        {
        }
        /**
         * Get the sampling rate (in kHz)
         *
         * @return string|null
         */
        public function get_sampling_rate()
        {
        }
        /**
         * Get the file size (in MiB)
         *
         * @return float|null File size in mebibytes (1048 bytes)
         */
        public function get_size()
        {
        }
        /**
         * Get a single thumbnail
         *
         * @param int $key
         * @return string|null Thumbnail URL
         */
        public function get_thumbnail($key = 0)
        {
        }
        /**
         * Get all thumbnails
         *
         * @return array|null Array of thumbnail URLs
         */
        public function get_thumbnails()
        {
        }
        /**
         * Get the title
         *
         * @return string|null
         */
        public function get_title()
        {
        }
        /**
         * Get mimetype of the enclosure
         *
         * @see get_real_type()
         * @return string|null MIME type
         */
        public function get_type()
        {
        }
        /**
         * Get the width
         *
         * @return string|null
         */
        public function get_width()
        {
        }
        /**
         * Embed the enclosure using `<embed>`
         *
         * @deprecated Use the second parameter to {@see embed} instead
         *
         * @param array|string $options See first paramter to {@see embed}
         * @return string HTML string to output
         */
        public function native_embed($options = '')
        {
        }
        /**
         * Embed the enclosure using Javascript
         *
         * `$options` is an array or comma-separated key:value string, with the
         * following properties:
         *
         * - `alt` (string): Alternate content for when an end-user does not have
         *    the appropriate handler installed or when a file type is
         *    unsupported. Can be any text or HTML. Defaults to blank.
         * - `altclass` (string): If a file type is unsupported, the end-user will
         *    see the alt text (above) linked directly to the content. That link
         *    will have this value as its class name. Defaults to blank.
         * - `audio` (string): This is an image that should be used as a
         *    placeholder for audio files before they're loaded (QuickTime-only).
         *    Can be any relative or absolute URL. Defaults to blank.
         * - `bgcolor` (string): The background color for the media, if not
         *    already transparent. Defaults to `#ffffff`.
         * - `height` (integer): The height of the embedded media. Accepts any
         *    numeric pixel value (such as `360`) or `auto`. Defaults to `auto`,
         *    and it is recommended that you use this default.
         * - `loop` (boolean): Do you want the media to loop when it's done?
         *    Defaults to `false`.
         * - `mediaplayer` (string): The location of the included
         *    `mediaplayer.swf` file. This allows for the playback of Flash Video
         *    (`.flv`) files, and is the default handler for non-Odeo MP3's.
         *    Defaults to blank.
         * - `video` (string): This is an image that should be used as a
         *    placeholder for video files before they're loaded (QuickTime-only).
         *    Can be any relative or absolute URL. Defaults to blank.
         * - `width` (integer): The width of the embedded media. Accepts any
         *    numeric pixel value (such as `480`) or `auto`. Defaults to `auto`,
         *    and it is recommended that you use this default.
         * - `widescreen` (boolean): Is the enclosure widescreen or standard?
         *    This applies only to video enclosures, and will automatically resize
         *    the content appropriately.  Defaults to `false`, implying 4:3 mode.
         *
         * Note: Non-widescreen (4:3) mode with `width` and `height` set to `auto`
         * will default to 480x360 video resolution.  Widescreen (16:9) mode with
         * `width` and `height` set to `auto` will default to 480x270 video resolution.
         *
         * @todo If the dimensions for media:content are defined, use them when width/height are set to 'auto'.
         * @param array|string $options Comma-separated key:value list, or array
         * @param bool $native Use `<embed>`
         * @return string HTML string to output
         */
        public function embed($options = '', $native = \false)
        {
        }
        /**
         * Get the real media type
         *
         * Often, feeds lie to us, necessitating a bit of deeper inspection. This
         * converts types to their canonical representations based on the file
         * extension
         *
         * @see get_type()
         * @param bool $find_handler Internal use only, use {@see get_handler()} instead
         * @return string MIME type
         */
        public function get_real_type($find_handler = \false)
        {
        }
    }
    /**
     * SimplePie
     *
     * A PHP-Based RSS and Atom Feed Framework.
     * Takes the hard work out of managing a complete RSS/Atom solution.
     *
     * Copyright (c) 2004-2016, Ryan Parman, Sam Sneddon, Ryan McCue, and contributors
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     *
     * 	* Redistributions of source code must retain the above copyright notice, this list of
     * 	  conditions and the following disclaimer.
     *
     * 	* Redistributions in binary form must reproduce the above copyright notice, this list
     * 	  of conditions and the following disclaimer in the documentation and/or other materials
     * 	  provided with the distribution.
     *
     * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used
     * 	  to endorse or promote products derived from this software without specific prior
     * 	  written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
     * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
     * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS
     * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     *
     * @package SimplePie
     * @copyright 2004-2016 Ryan Parman, Sam Sneddon, Ryan McCue
     * @author Ryan Parman
     * @author Sam Sneddon
     * @author Ryan McCue
     * @link http://simplepie.org/ SimplePie
     * @license http://www.opensource.org/licenses/bsd-license.php BSD License
     */
    /**
     * Manages all author-related data
     *
     * Used by {@see SimplePie_Item::get_author()} and {@see SimplePie::get_authors()}
     *
     * This class can be overloaded with {@see SimplePie::set_author_class()}
     *
     * @package SimplePie
     * @subpackage API
     */
    class SimplePie_Author
    {
        /**
         * Author's name
         *
         * @var string
         * @see get_name()
         */
        var $name;
        /**
         * Author's link
         *
         * @var string
         * @see get_link()
         */
        var $link;
        /**
         * Author's email address
         *
         * @var string
         * @see get_email()
         */
        var $email;
        /**
         * Constructor, used to input the data
         *
         * @param string $name
         * @param string $link
         * @param string $email
         */
        public function __construct($name = \null, $link = \null, $email = \null)
        {
        }
        /**
         * String-ified version
         *
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * Author's name
         *
         * @return string|null
         */
        public function get_name()
        {
        }
        /**
         * Author's link
         *
         * @return string|null
         */
        public function get_link()
        {
        }
        /**
         * Author's email address
         *
         * @return string|null
         */
        public function get_email()
        {
        }
    }
    /**
     * SimplePie
     *
     * A PHP-Based RSS and Atom Feed Framework.
     * Takes the hard work out of managing a complete RSS/Atom solution.
     *
     * Copyright (c) 2004-2016, Ryan Parman, Sam Sneddon, Ryan McCue, and contributors
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     *
     * 	* Redistributions of source code must retain the above copyright notice, this list of
     * 	  conditions and the following disclaimer.
     *
     * 	* Redistributions in binary form must reproduce the above copyright notice, this list
     * 	  of conditions and the following disclaimer in the documentation and/or other materials
     * 	  provided with the distribution.
     *
     * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used
     * 	  to endorse or promote products derived from this software without specific prior
     * 	  written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
     * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
     * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS
     * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     *
     * @package SimplePie
     * @copyright 2004-2016 Ryan Parman, Sam Sneddon, Ryan McCue
     * @author Ryan Parman
     * @author Sam Sneddon
     * @author Ryan McCue
     * @link http://simplepie.org/ SimplePie
     * @license http://www.opensource.org/licenses/bsd-license.php BSD License
     */
    /**
     * Decode HTML Entities
     *
     * This implements HTML5 as of revision 967 (2007-06-28)
     *
     * @deprecated Use DOMDocument instead!
     * @package SimplePie
     */
    class SimplePie_Decode_HTML_Entities
    {
        /**
         * Data to be parsed
         *
         * @access private
         * @var string
         */
        var $data = '';
        /**
         * Currently consumed bytes
         *
         * @access private
         * @var string
         */
        var $consumed = '';
        /**
         * Position of the current byte being parsed
         *
         * @access private
         * @var int
         */
        var $position = 0;
        /**
         * Create an instance of the class with the input data
         *
         * @access public
         * @param string $data Input data
         */
        public function __construct($data)
        {
        }
        /**
         * Parse the input data
         *
         * @access public
         * @return string Output data
         */
        public function parse()
        {
        }
        /**
         * Consume the next byte
         *
         * @access private
         * @return mixed The next byte, or false, if there is no more data
         */
        public function consume()
        {
        }
        /**
         * Consume a range of characters
         *
         * @access private
         * @param string $chars Characters to consume
         * @return mixed A series of characters that match the range, or false
         */
        public function consume_range($chars)
        {
        }
        /**
         * Unconsume one byte
         *
         * @access private
         */
        public function unconsume()
        {
        }
        /**
         * Decode an entity
         *
         * @access private
         */
        public function entity()
        {
        }
    }
    /**
     * SimplePie
     *
     * A PHP-Based RSS and Atom Feed Framework.
     * Takes the hard work out of managing a complete RSS/Atom solution.
     *
     * Copyright (c) 2004-2016, Ryan Parman, Sam Sneddon, Ryan McCue, and contributors
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     *
     * 	* Redistributions of source code must retain the above copyright notice, this list of
     * 	  conditions and the following disclaimer.
     *
     * 	* Redistributions in binary form must reproduce the above copyright notice, this list
     * 	  of conditions and the following disclaimer in the documentation and/or other materials
     * 	  provided with the distribution.
     *
     * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used
     * 	  to endorse or promote products derived from this software without specific prior
     * 	  written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
     * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
     * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS
     * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     *
     * @package SimplePie
     * @copyright 2004-2016 Ryan Parman, Sam Sneddon, Ryan McCue
     * @author Ryan Parman
     * @author Sam Sneddon
     * @author Ryan McCue
     * @link http://simplepie.org/ SimplePie
     * @license http://www.opensource.org/licenses/bsd-license.php BSD License
     */
    /**
     * Content-type sniffing
     *
     * Based on the rules in http://tools.ietf.org/html/draft-abarth-mime-sniff-06
     *
     * This is used since we can't always trust Content-Type headers, and is based
     * upon the HTML5 parsing rules.
     *
     *
     * This class can be overloaded with {@see SimplePie::set_content_type_sniffer_class()}
     *
     * @package SimplePie
     * @subpackage HTTP
     */
    class SimplePie_Content_Type_Sniffer
    {
        /**
         * File object
         *
         * @var SimplePie_File
         */
        var $file;
        /**
         * Create an instance of the class with the input file
         *
         * @param SimplePie_Content_Type_Sniffer $file Input file
         */
        public function __construct($file)
        {
        }
        /**
         * Get the Content-Type of the specified file
         *
         * @return string Actual Content-Type
         */
        public function get_type()
        {
        }
        /**
         * Sniff text or binary
         *
         * @return string Actual Content-Type
         */
        public function text_or_binary()
        {
        }
        /**
         * Sniff unknown
         *
         * @return string Actual Content-Type
         */
        public function unknown()
        {
        }
        /**
         * Sniff images
         *
         * @return string Actual Content-Type
         */
        public function image()
        {
        }
        /**
         * Sniff HTML
         *
         * @return string Actual Content-Type
         */
        public function feed_or_html()
        {
        }
    }
    /**
     * SimplePie
     *
     * A PHP-Based RSS and Atom Feed Framework.
     * Takes the hard work out of managing a complete RSS/Atom solution.
     *
     * Copyright (c) 2004-2016, Ryan Parman, Sam Sneddon, Ryan McCue, and contributors
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     *
     * 	* Redistributions of source code must retain the above copyright notice, this list of
     * 	  conditions and the following disclaimer.
     *
     * 	* Redistributions in binary form must reproduce the above copyright notice, this list
     * 	  of conditions and the following disclaimer in the documentation and/or other materials
     * 	  provided with the distribution.
     *
     * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used
     * 	  to endorse or promote products derived from this software without specific prior
     * 	  written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
     * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
     * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS
     * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     *
     * @package SimplePie
     * @copyright 2004-2016 Ryan Parman, Sam Sneddon, Ryan McCue
     * @author Ryan Parman
     * @author Sam Sneddon
     * @author Ryan McCue
     * @link http://simplepie.org/ SimplePie
     * @license http://www.opensource.org/licenses/bsd-license.php BSD License
     */
    /**
     * Manages `<media:copyright>` copyright tags as defined in Media RSS
     *
     * Used by {@see SimplePie_Enclosure::get_copyright()}
     *
     * This class can be overloaded with {@see SimplePie::set_copyright_class()}
     *
     * @package SimplePie
     * @subpackage API
     */
    class SimplePie_Copyright
    {
        /**
         * Copyright URL
         *
         * @var string
         * @see get_url()
         */
        var $url;
        /**
         * Attribution
         *
         * @var string
         * @see get_attribution()
         */
        var $label;
        /**
         * Constructor, used to input the data
         *
         * For documentation on all the parameters, see the corresponding
         * properties and their accessors
         */
        public function __construct($url = \null, $label = \null)
        {
        }
        /**
         * String-ified version
         *
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * Get the copyright URL
         *
         * @return string|null URL to copyright information
         */
        public function get_url()
        {
        }
        /**
         * Get the attribution text
         *
         * @return string|null
         */
        public function get_attribution()
        {
        }
    }
    /**
     * SimplePie
     *
     * A PHP-Based RSS and Atom Feed Framework.
     * Takes the hard work out of managing a complete RSS/Atom solution.
     *
     * Copyright (c) 2004-2016, Ryan Parman, Sam Sneddon, Ryan McCue, and contributors
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     *
     * 	* Redistributions of source code must retain the above copyright notice, this list of
     * 	  conditions and the following disclaimer.
     *
     * 	* Redistributions in binary form must reproduce the above copyright notice, this list
     * 	  of conditions and the following disclaimer in the documentation and/or other materials
     * 	  provided with the distribution.
     *
     * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used
     * 	  to endorse or promote products derived from this software without specific prior
     * 	  written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
     * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
     * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS
     * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     *
     * @package SimplePie
     * @copyright 2004-2016 Ryan Parman, Sam Sneddon, Ryan McCue
     * @author Ryan Parman
     * @author Sam Sneddon
     * @author Ryan McCue
     * @link http://simplepie.org/ SimplePie
     * @license http://www.opensource.org/licenses/bsd-license.php BSD License
     */
    /**
     * Handles `<media:restriction>` as defined in Media RSS
     *
     * Used by {@see SimplePie_Enclosure::get_restriction()} and {@see SimplePie_Enclosure::get_restrictions()}
     *
     * This class can be overloaded with {@see SimplePie::set_restriction_class()}
     *
     * @package SimplePie
     * @subpackage API
     */
    class SimplePie_Restriction
    {
        /**
         * Relationship ('allow'/'deny')
         *
         * @var string
         * @see get_relationship()
         */
        var $relationship;
        /**
         * Type of restriction
         *
         * @var string
         * @see get_type()
         */
        var $type;
        /**
         * Restricted values
         *
         * @var string
         * @see get_value()
         */
        var $value;
        /**
         * Constructor, used to input the data
         *
         * For documentation on all the parameters, see the corresponding
         * properties and their accessors
         */
        public function __construct($relationship = \null, $type = \null, $value = \null)
        {
        }
        /**
         * String-ified version
         *
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * Get the relationship
         *
         * @return string|null Either 'allow' or 'deny'
         */
        public function get_relationship()
        {
        }
        /**
         * Get the type
         *
         * @return string|null
         */
        public function get_type()
        {
        }
        /**
         * Get the list of restricted things
         *
         * @return string|null
         */
        public function get_value()
        {
        }
    }
    /**
     * SimplePie
     *
     * A PHP-Based RSS and Atom Feed Framework.
     * Takes the hard work out of managing a complete RSS/Atom solution.
     *
     * Copyright (c) 2004-2016, Ryan Parman, Sam Sneddon, Ryan McCue, and contributors
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     *
     * 	* Redistributions of source code must retain the above copyright notice, this list of
     * 	  conditions and the following disclaimer.
     *
     * 	* Redistributions in binary form must reproduce the above copyright notice, this list
     * 	  of conditions and the following disclaimer in the documentation and/or other materials
     * 	  provided with the distribution.
     *
     * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used
     * 	  to endorse or promote products derived from this software without specific prior
     * 	  written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
     * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
     * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS
     * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     *
     * @package SimplePie
     * @copyright 2004-2016 Ryan Parman, Sam Sneddon, Ryan McCue
     * @author Ryan Parman
     * @author Sam Sneddon
     * @author Ryan McCue
     * @link http://simplepie.org/ SimplePie
     * @license http://www.opensource.org/licenses/bsd-license.php BSD License
     */
    /**
     * Handles `<media:text>` captions as defined in Media RSS.
     *
     * Used by {@see SimplePie_Enclosure::get_caption()} and {@see SimplePie_Enclosure::get_captions()}
     *
     * This class can be overloaded with {@see SimplePie::set_caption_class()}
     *
     * @package SimplePie
     * @subpackage API
     */
    class SimplePie_Caption
    {
        /**
         * Content type
         *
         * @var string
         * @see get_type()
         */
        var $type;
        /**
         * Language
         *
         * @var string
         * @see get_language()
         */
        var $lang;
        /**
         * Start time
         *
         * @var string
         * @see get_starttime()
         */
        var $startTime;
        /**
         * End time
         *
         * @var string
         * @see get_endtime()
         */
        var $endTime;
        /**
         * Caption text
         *
         * @var string
         * @see get_text()
         */
        var $text;
        /**
         * Constructor, used to input the data
         *
         * For documentation on all the parameters, see the corresponding
         * properties and their accessors
         */
        public function __construct($type = \null, $lang = \null, $startTime = \null, $endTime = \null, $text = \null)
        {
        }
        /**
         * String-ified version
         *
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * Get the end time
         *
         * @return string|null Time in the format 'hh:mm:ss.SSS'
         */
        public function get_endtime()
        {
        }
        /**
         * Get the language
         *
         * @link http://tools.ietf.org/html/rfc3066
         * @return string|null Language code as per RFC 3066
         */
        public function get_language()
        {
        }
        /**
         * Get the start time
         *
         * @return string|null Time in the format 'hh:mm:ss.SSS'
         */
        public function get_starttime()
        {
        }
        /**
         * Get the text of the caption
         *
         * @return string|null
         */
        public function get_text()
        {
        }
        /**
         * Get the content type (not MIME type)
         *
         * @return string|null Either 'text' or 'html'
         */
        public function get_type()
        {
        }
    }
    /**
     * SimplePie
     *
     * A PHP-Based RSS and Atom Feed Framework.
     * Takes the hard work out of managing a complete RSS/Atom solution.
     *
     * Copyright (c) 2004-2016, Ryan Parman, Sam Sneddon, Ryan McCue, and contributors
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     *
     * 	* Redistributions of source code must retain the above copyright notice, this list of
     * 	  conditions and the following disclaimer.
     *
     * 	* Redistributions in binary form must reproduce the above copyright notice, this list
     * 	  of conditions and the following disclaimer in the documentation and/or other materials
     * 	  provided with the distribution.
     *
     * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used
     * 	  to endorse or promote products derived from this software without specific prior
     * 	  written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
     * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
     * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS
     * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     *
     * @package SimplePie
     * @copyright 2004-2016 Ryan Parman, Sam Sneddon, Ryan McCue
     * @author Ryan Parman
     * @author Sam Sneddon
     * @author Ryan McCue
     * @link http://simplepie.org/ SimplePie
     * @license http://www.opensource.org/licenses/bsd-license.php BSD License
     */
    /**
     * Handles `<atom:source>`
     *
     * Used by {@see SimplePie_Item::get_source()}
     *
     * This class can be overloaded with {@see SimplePie::set_source_class()}
     *
     * @package SimplePie
     * @subpackage API
     */
    class SimplePie_Source
    {
        var $item;
        var $data = array();
        protected $registry;
        public function __construct($item, $data)
        {
        }
        public function set_registry(\SimplePie_Registry $registry)
        {
        }
        public function __toString()
        {
        }
        public function get_source_tags($namespace, $tag)
        {
        }
        public function get_base($element = array())
        {
        }
        public function sanitize($data, $type, $base = '')
        {
        }
        public function get_item()
        {
        }
        public function get_title()
        {
        }
        public function get_category($key = 0)
        {
        }
        public function get_categories()
        {
        }
        public function get_author($key = 0)
        {
        }
        public function get_authors()
        {
        }
        public function get_contributor($key = 0)
        {
        }
        public function get_contributors()
        {
        }
        public function get_link($key = 0, $rel = 'alternate')
        {
        }
        /**
         * Added for parity between the parent-level and the item/entry-level.
         */
        public function get_permalink()
        {
        }
        public function get_links($rel = 'alternate')
        {
        }
        public function get_description()
        {
        }
        public function get_copyright()
        {
        }
        public function get_language()
        {
        }
        public function get_latitude()
        {
        }
        public function get_longitude()
        {
        }
        public function get_image_url()
        {
        }
    }
    /**
     * SimplePie
     *
     * A PHP-Based RSS and Atom Feed Framework.
     * Takes the hard work out of managing a complete RSS/Atom solution.
     *
     * Copyright (c) 2004-2016, Ryan Parman, Sam Sneddon, Ryan McCue, and contributors
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     *
     * 	* Redistributions of source code must retain the above copyright notice, this list of
     * 	  conditions and the following disclaimer.
     *
     * 	* Redistributions in binary form must reproduce the above copyright notice, this list
     * 	  of conditions and the following disclaimer in the documentation and/or other materials
     * 	  provided with the distribution.
     *
     * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used
     * 	  to endorse or promote products derived from this software without specific prior
     * 	  written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
     * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
     * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS
     * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     *
     * @package SimplePie
     * @copyright 2004-2016 Ryan Parman, Sam Sneddon, Ryan McCue
     * @author Ryan Parman
     * @author Sam Sneddon
     * @author Ryan McCue
     * @link http://simplepie.org/ SimplePie
     * @license http://www.opensource.org/licenses/bsd-license.php BSD License
     */
    /**
     * Handles `<media:credit>` as defined in Media RSS
     *
     * Used by {@see SimplePie_Enclosure::get_credit()} and {@see SimplePie_Enclosure::get_credits()}
     *
     * This class can be overloaded with {@see SimplePie::set_credit_class()}
     *
     * @package SimplePie
     * @subpackage API
     */
    class SimplePie_Credit
    {
        /**
         * Credited role
         *
         * @var string
         * @see get_role()
         */
        var $role;
        /**
         * Organizational scheme
         *
         * @var string
         * @see get_scheme()
         */
        var $scheme;
        /**
         * Credited name
         *
         * @var string
         * @see get_name()
         */
        var $name;
        /**
         * Constructor, used to input the data
         *
         * For documentation on all the parameters, see the corresponding
         * properties and their accessors
         */
        public function __construct($role = \null, $scheme = \null, $name = \null)
        {
        }
        /**
         * String-ified version
         *
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * Get the role of the person receiving credit
         *
         * @return string|null
         */
        public function get_role()
        {
        }
        /**
         * Get the organizational scheme
         *
         * @return string|null
         */
        public function get_scheme()
        {
        }
        /**
         * Get the credited person/entity's name
         *
         * @return string|null
         */
        public function get_name()
        {
        }
    }
    /**
     * SimplePie
     *
     * A PHP-Based RSS and Atom Feed Framework.
     * Takes the hard work out of managing a complete RSS/Atom solution.
     *
     * Copyright (c) 2004-2016, Ryan Parman, Sam Sneddon, Ryan McCue, and contributors
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     *
     * 	* Redistributions of source code must retain the above copyright notice, this list of
     * 	  conditions and the following disclaimer.
     *
     * 	* Redistributions in binary form must reproduce the above copyright notice, this list
     * 	  of conditions and the following disclaimer in the documentation and/or other materials
     * 	  provided with the distribution.
     *
     * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used
     * 	  to endorse or promote products derived from this software without specific prior
     * 	  written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
     * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
     * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS
     * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     *
     * @package SimplePie
     * @copyright 2004-2016 Ryan Parman, Sam Sneddon, Ryan McCue
     * @author Ryan Parman
     * @author Sam Sneddon
     * @author Ryan McCue
     * @link http://simplepie.org/ SimplePie
     * @license http://www.opensource.org/licenses/bsd-license.php BSD License
     */
    /**
     * Decode 'gzip' encoded HTTP data
     *
     * @package SimplePie
     * @subpackage HTTP
     * @link http://www.gzip.org/format.txt
     */
    class SimplePie_gzdecode
    {
        /**
         * Compressed data
         *
         * @access private
         * @var string
         * @see gzdecode::$data
         */
        var $compressed_data;
        /**
         * Size of compressed data
         *
         * @access private
         * @var int
         */
        var $compressed_size;
        /**
         * Minimum size of a valid gzip string
         *
         * @access private
         * @var int
         */
        var $min_compressed_size = 18;
        /**
         * Current position of pointer
         *
         * @access private
         * @var int
         */
        var $position = 0;
        /**
         * Flags (FLG)
         *
         * @access private
         * @var int
         */
        var $flags;
        /**
         * Uncompressed data
         *
         * @access public
         * @see gzdecode::$compressed_data
         * @var string
         */
        var $data;
        /**
         * Modified time
         *
         * @access public
         * @var int
         */
        var $MTIME;
        /**
         * Extra Flags
         *
         * @access public
         * @var int
         */
        var $XFL;
        /**
         * Operating System
         *
         * @access public
         * @var int
         */
        var $OS;
        /**
         * Subfield ID 1
         *
         * @access public
         * @see gzdecode::$extra_field
         * @see gzdecode::$SI2
         * @var string
         */
        var $SI1;
        /**
         * Subfield ID 2
         *
         * @access public
         * @see gzdecode::$extra_field
         * @see gzdecode::$SI1
         * @var string
         */
        var $SI2;
        /**
         * Extra field content
         *
         * @access public
         * @see gzdecode::$SI1
         * @see gzdecode::$SI2
         * @var string
         */
        var $extra_field;
        /**
         * Original filename
         *
         * @access public
         * @var string
         */
        var $filename;
        /**
         * Human readable comment
         *
         * @access public
         * @var string
         */
        var $comment;
        /**
         * Don't allow anything to be set
         *
         * @param string $name
         * @param mixed $value
         */
        public function __set($name, $value)
        {
        }
        /**
         * Set the compressed string and related properties
         *
         * @param string $data
         */
        public function __construct($data)
        {
        }
        /**
         * Decode the GZIP stream
         *
         * @return bool Successfulness
         */
        public function parse()
        {
        }
    }
    /**
     * SimplePie
     *
     * A PHP-Based RSS and Atom Feed Framework.
     * Takes the hard work out of managing a complete RSS/Atom solution.
     *
     * Copyright (c) 2004-2016, Ryan Parman, Sam Sneddon, Ryan McCue, and contributors
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     *
     * 	* Redistributions of source code must retain the above copyright notice, this list of
     * 	  conditions and the following disclaimer.
     *
     * 	* Redistributions in binary form must reproduce the above copyright notice, this list
     * 	  of conditions and the following disclaimer in the documentation and/or other materials
     * 	  provided with the distribution.
     *
     * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used
     * 	  to endorse or promote products derived from this software without specific prior
     * 	  written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
     * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
     * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS
     * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     *
     * @package SimplePie
     * @copyright 2004-2016 Ryan Parman, Sam Sneddon, Ryan McCue
     * @author Ryan Parman
     * @author Sam Sneddon
     * @author Ryan McCue
     * @link http://simplepie.org/ SimplePie
     * @license http://www.opensource.org/licenses/bsd-license.php BSD License
     */
    /**
     * Class to validate and to work with IPv6 addresses.
     *
     * @package SimplePie
     * @subpackage HTTP
     * @copyright 2003-2005 The PHP Group
     * @license http://www.opensource.org/licenses/bsd-license.php
     * @link http://pear.php.net/package/Net_IPv6
     * @author Alexander Merz <alexander.merz@web.de>
     * @author elfrink at introweb dot nl
     * @author Josh Peck <jmp at joshpeck dot org>
     * @author Sam Sneddon <geoffers@gmail.com>
     */
    class SimplePie_Net_IPv6
    {
        /**
         * Uncompresses an IPv6 address
         *
         * RFC 4291 allows you to compress concecutive zero pieces in an address to
         * '::'. This method expects a valid IPv6 address and expands the '::' to
         * the required number of zero pieces.
         *
         * Example:  FF01::101   ->  FF01:0:0:0:0:0:0:101
         *           ::1         ->  0:0:0:0:0:0:0:1
         *
         * @author Alexander Merz <alexander.merz@web.de>
         * @author elfrink at introweb dot nl
         * @author Josh Peck <jmp at joshpeck dot org>
         * @copyright 2003-2005 The PHP Group
         * @license http://www.opensource.org/licenses/bsd-license.php
         * @param string $ip An IPv6 address
         * @return string The uncompressed IPv6 address
         */
        public static function uncompress($ip)
        {
        }
        /**
         * Compresses an IPv6 address
         *
         * RFC 4291 allows you to compress concecutive zero pieces in an address to
         * '::'. This method expects a valid IPv6 address and compresses consecutive
         * zero pieces to '::'.
         *
         * Example:  FF01:0:0:0:0:0:0:101   ->  FF01::101
         *           0:0:0:0:0:0:0:1        ->  ::1
         *
         * @see uncompress()
         * @param string $ip An IPv6 address
         * @return string The compressed IPv6 address
         */
        public static function compress($ip)
        {
        }
        /**
         * Splits an IPv6 address into the IPv6 and IPv4 representation parts
         *
         * RFC 4291 allows you to represent the last two parts of an IPv6 address
         * using the standard IPv4 representation
         *
         * Example:  0:0:0:0:0:0:13.1.68.3
         *           0:0:0:0:0:FFFF:129.144.52.38
         *
         * @param string $ip An IPv6 address
         * @return array [0] contains the IPv6 represented part, and [1] the IPv4 represented part
         */
        private static function split_v6_v4($ip)
        {
        }
        /**
         * Checks an IPv6 address
         *
         * Checks if the given IP is a valid IPv6 address
         *
         * @param string $ip An IPv6 address
         * @return bool true if $ip is a valid IPv6 address
         */
        public static function check_ipv6($ip)
        {
        }
        /**
         * Checks if the given IP is a valid IPv6 address
         *
         * @codeCoverageIgnore
         * @deprecated Use {@see SimplePie_Net_IPv6::check_ipv6()} instead
         * @see check_ipv6
         * @param string $ip An IPv6 address
         * @return bool true if $ip is a valid IPv6 address
         */
        public static function checkIPv6($ip)
        {
        }
    }
    /**
     * SimplePie
     *
     * A PHP-Based RSS and Atom Feed Framework.
     * Takes the hard work out of managing a complete RSS/Atom solution.
     *
     * Copyright (c) 2004-2016, Ryan Parman, Sam Sneddon, Ryan McCue, and contributors
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     *
     * 	* Redistributions of source code must retain the above copyright notice, this list of
     * 	  conditions and the following disclaimer.
     *
     * 	* Redistributions in binary form must reproduce the above copyright notice, this list
     * 	  of conditions and the following disclaimer in the documentation and/or other materials
     * 	  provided with the distribution.
     *
     * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used
     * 	  to endorse or promote products derived from this software without specific prior
     * 	  written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
     * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
     * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS
     * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     *
     * @package SimplePie
     * @copyright 2004-2016 Ryan Parman, Sam Sneddon, Ryan McCue
     * @author Ryan Parman
     * @author Sam Sneddon
     * @author Ryan McCue
     * @link http://simplepie.org/ SimplePie
     * @license http://www.opensource.org/licenses/bsd-license.php BSD License
     */
    /**
     * Parses the XML Declaration
     *
     * @package SimplePie
     * @subpackage Parsing
     */
    class SimplePie_XML_Declaration_Parser
    {
        /**
         * XML Version
         *
         * @access public
         * @var string
         */
        var $version = '1.0';
        /**
         * Encoding
         *
         * @access public
         * @var string
         */
        var $encoding = 'UTF-8';
        /**
         * Standalone
         *
         * @access public
         * @var bool
         */
        var $standalone = \false;
        /**
         * Current state of the state machine
         *
         * @access private
         * @var string
         */
        var $state = 'before_version_name';
        /**
         * Input data
         *
         * @access private
         * @var string
         */
        var $data = '';
        /**
         * Input data length (to avoid calling strlen() everytime this is needed)
         *
         * @access private
         * @var int
         */
        var $data_length = 0;
        /**
         * Current position of the pointer
         *
         * @var int
         * @access private
         */
        var $position = 0;
        /**
         * Create an instance of the class with the input data
         *
         * @access public
         * @param string $data Input data
         */
        public function __construct($data)
        {
        }
        /**
         * Parse the input data
         *
         * @access public
         * @return bool true on success, false on failure
         */
        public function parse()
        {
        }
        /**
         * Check whether there is data beyond the pointer
         *
         * @access private
         * @return bool true if there is further data, false if not
         */
        public function has_data()
        {
        }
        /**
         * Advance past any whitespace
         *
         * @return int Number of whitespace characters passed
         */
        public function skip_whitespace()
        {
        }
        /**
         * Read value
         */
        public function get_value()
        {
        }
        public function before_version_name()
        {
        }
        public function version_name()
        {
        }
        public function version_equals()
        {
        }
        public function version_value()
        {
        }
        public function encoding_name()
        {
        }
        public function encoding_equals()
        {
        }
        public function encoding_value()
        {
        }
        public function standalone_name()
        {
        }
        public function standalone_equals()
        {
        }
        public function standalone_value()
        {
        }
    }
    /**
     * SimplePie
     *
     * A PHP-Based RSS and Atom Feed Framework.
     * Takes the hard work out of managing a complete RSS/Atom solution.
     *
     * Copyright (c) 2004-2016, Ryan Parman, Sam Sneddon, Ryan McCue, and contributors
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     *
     * 	* Redistributions of source code must retain the above copyright notice, this list of
     * 	  conditions and the following disclaimer.
     *
     * 	* Redistributions in binary form must reproduce the above copyright notice, this list
     * 	  of conditions and the following disclaimer in the documentation and/or other materials
     * 	  provided with the distribution.
     *
     * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used
     * 	  to endorse or promote products derived from this software without specific prior
     * 	  written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
     * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
     * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS
     * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     *
     * @package SimplePie
     * @copyright 2004-2016 Ryan Parman, Sam Sneddon, Ryan McCue
     * @author Ryan Parman
     * @author Sam Sneddon
     * @author Ryan McCue
     * @link http://simplepie.org/ SimplePie
     * @license http://www.opensource.org/licenses/bsd-license.php BSD License
     */
    /**
     * Parses XML into something sane
     *
     *
     * This class can be overloaded with {@see SimplePie::set_parser_class()}
     *
     * @package SimplePie
     * @subpackage Parsing
     */
    class SimplePie_Parser
    {
        var $error_code;
        var $error_string;
        var $current_line;
        var $current_column;
        var $current_byte;
        var $separator = ' ';
        var $namespace = array('');
        var $element = array('');
        var $xml_base = array('');
        var $xml_base_explicit = array(\false);
        var $xml_lang = array('');
        var $data = array();
        var $datas = array(array());
        var $current_xhtml_construct = -1;
        var $encoding;
        protected $registry;
        public function set_registry(\SimplePie_Registry $registry)
        {
        }
        public function parse(&$data, $encoding, $url = '')
        {
        }
        public function get_error_code()
        {
        }
        public function get_error_string()
        {
        }
        public function get_current_line()
        {
        }
        public function get_current_column()
        {
        }
        public function get_current_byte()
        {
        }
        public function get_data()
        {
        }
        public function tag_open($parser, $tag, $attributes)
        {
        }
        public function cdata($parser, $cdata)
        {
        }
        public function tag_close($parser, $tag)
        {
        }
        public function split_ns($string)
        {
        }
        private function parse_hcard($data, $category = \false)
        {
        }
        private function parse_microformats(&$data, $url)
        {
        }
        private function declare_html_entities()
        {
        }
    }
    /**
     * SimplePie
     *
     * A PHP-Based RSS and Atom Feed Framework.
     * Takes the hard work out of managing a complete RSS/Atom solution.
     *
     * Copyright (c) 2004-2016, Ryan Parman, Sam Sneddon, Ryan McCue, and contributors
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     *
     * 	* Redistributions of source code must retain the above copyright notice, this list of
     * 	  conditions and the following disclaimer.
     *
     * 	* Redistributions in binary form must reproduce the above copyright notice, this list
     * 	  of conditions and the following disclaimer in the documentation and/or other materials
     * 	  provided with the distribution.
     *
     * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used
     * 	  to endorse or promote products derived from this software without specific prior
     * 	  written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
     * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
     * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS
     * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     *
     * @package SimplePie
     * @copyright 2004-2016 Ryan Parman, Sam Sneddon, Ryan McCue
     * @author Ryan Parman
     * @author Sam Sneddon
     * @author Ryan McCue
     * @link http://simplepie.org/ SimplePie
     * @license http://www.opensource.org/licenses/bsd-license.php BSD License
     */
    /**
     * IRI parser/serialiser/normaliser
     *
     * @package SimplePie
     * @subpackage HTTP
     * @author Sam Sneddon
     * @author Steve Minutillo
     * @author Ryan McCue
     * @copyright 2007-2012 Sam Sneddon, Steve Minutillo, Ryan McCue
     * @license http://www.opensource.org/licenses/bsd-license.php
     */
    class SimplePie_IRI
    {
        /**
         * Scheme
         *
         * @var string
         */
        protected $scheme = \null;
        /**
         * User Information
         *
         * @var string
         */
        protected $iuserinfo = \null;
        /**
         * ihost
         *
         * @var string
         */
        protected $ihost = \null;
        /**
         * Port
         *
         * @var string
         */
        protected $port = \null;
        /**
         * ipath
         *
         * @var string
         */
        protected $ipath = '';
        /**
         * iquery
         *
         * @var string
         */
        protected $iquery = \null;
        /**
         * ifragment
         *
         * @var string
         */
        protected $ifragment = \null;
        /**
         * Normalization database
         *
         * Each key is the scheme, each value is an array with each key as the IRI
         * part and value as the default value for that part.
         */
        protected $normalization = array('acap' => array('port' => 674), 'dict' => array('port' => 2628), 'file' => array('ihost' => 'localhost'), 'http' => array('port' => 80, 'ipath' => '/'), 'https' => array('port' => 443, 'ipath' => '/'));
        /**
         * Return the entire IRI when you try and read the object as a string
         *
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * Overload __set() to provide access via properties
         *
         * @param string $name Property name
         * @param mixed $value Property value
         */
        public function __set($name, $value)
        {
        }
        /**
         * Overload __get() to provide access via properties
         *
         * @param string $name Property name
         * @return mixed
         */
        public function __get($name)
        {
        }
        /**
         * Overload __isset() to provide access via properties
         *
         * @param string $name Property name
         * @return bool
         */
        public function __isset($name)
        {
        }
        /**
         * Overload __unset() to provide access via properties
         *
         * @param string $name Property name
         */
        public function __unset($name)
        {
        }
        /**
         * Create a new IRI object, from a specified string
         *
         * @param string $iri
         */
        public function __construct($iri = \null)
        {
        }
        /**
         * Clean up
         */
        public function __destruct()
        {
        }
        /**
         * Create a new IRI object by resolving a relative IRI
         *
         * Returns false if $base is not absolute, otherwise an IRI.
         *
         * @param IRI|string $base (Absolute) Base IRI
         * @param IRI|string $relative Relative IRI
         * @return IRI|false
         */
        public static function absolutize($base, $relative)
        {
        }
        /**
         * Parse an IRI into scheme/authority/path/query/fragment segments
         *
         * @param string $iri
         * @return array
         */
        protected function parse_iri($iri)
        {
        }
        /**
         * Remove dot segments from a path
         *
         * @param string $input
         * @return string
         */
        protected function remove_dot_segments($input)
        {
        }
        /**
         * Replace invalid character with percent encoding
         *
         * @param string $string Input string
         * @param string $extra_chars Valid characters not in iunreserved or
         *                            iprivate (this is ASCII-only)
         * @param bool $iprivate Allow iprivate
         * @return string
         */
        protected function replace_invalid_with_pct_encoding($string, $extra_chars, $iprivate = \false)
        {
        }
        /**
         * Callback function for preg_replace_callback.
         *
         * Removes sequences of percent encoded bytes that represent UTF-8
         * encoded characters in iunreserved
         *
         * @param array $match PCRE match
         * @return string Replacement
         */
        protected function remove_iunreserved_percent_encoded($match)
        {
        }
        protected function scheme_normalization()
        {
        }
        /**
         * Check if the object represents a valid IRI. This needs to be done on each
         * call as some things change depending on another part of the IRI.
         *
         * @return bool
         */
        public function is_valid()
        {
        }
        /**
         * Set the entire IRI. Returns true on success, false on failure (if there
         * are any invalid characters).
         *
         * @param string $iri
         * @return bool
         */
        public function set_iri($iri, $clear_cache = \false)
        {
        }
        /**
         * Set the scheme. Returns true on success, false on failure (if there are
         * any invalid characters).
         *
         * @param string $scheme
         * @return bool
         */
        public function set_scheme($scheme)
        {
        }
        /**
         * Set the authority. Returns true on success, false on failure (if there are
         * any invalid characters).
         *
         * @param string $authority
         * @return bool
         */
        public function set_authority($authority, $clear_cache = \false)
        {
        }
        /**
         * Set the iuserinfo.
         *
         * @param string $iuserinfo
         * @return bool
         */
        public function set_userinfo($iuserinfo)
        {
        }
        /**
         * Set the ihost. Returns true on success, false on failure (if there are
         * any invalid characters).
         *
         * @param string $ihost
         * @return bool
         */
        public function set_host($ihost)
        {
        }
        /**
         * Set the port. Returns true on success, false on failure (if there are
         * any invalid characters).
         *
         * @param string $port
         * @return bool
         */
        public function set_port($port)
        {
        }
        /**
         * Set the ipath.
         *
         * @param string $ipath
         * @return bool
         */
        public function set_path($ipath, $clear_cache = \false)
        {
        }
        /**
         * Set the iquery.
         *
         * @param string $iquery
         * @return bool
         */
        public function set_query($iquery)
        {
        }
        /**
         * Set the ifragment.
         *
         * @param string $ifragment
         * @return bool
         */
        public function set_fragment($ifragment)
        {
        }
        /**
         * Convert an IRI to a URI (or parts thereof)
         *
         * @return string
         */
        public function to_uri($string)
        {
        }
        /**
         * Get the complete IRI
         *
         * @return string
         */
        public function get_iri()
        {
        }
        /**
         * Get the complete URI
         *
         * @return string
         */
        public function get_uri()
        {
        }
        /**
         * Get the complete iauthority
         *
         * @return string
         */
        protected function get_iauthority()
        {
        }
        /**
         * Get the complete authority
         *
         * @return string
         */
        protected function get_authority()
        {
        }
    }
    /**
     * SimplePie
     *
     * @package SimplePie
     * @subpackage API
     */
    class SimplePie
    {
        /**
         * @var array Raw data
         * @access private
         */
        public $data = array();
        /**
         * @var mixed Error string
         * @access private
         */
        public $error;
        /**
         * @var int HTTP status code
         * @see SimplePie::status_code()
         * @access private
         */
        public $status_code;
        /**
         * @var object Instance of SimplePie_Sanitize (or other class)
         * @see SimplePie::set_sanitize_class()
         * @access private
         */
        public $sanitize;
        /**
         * @var string SimplePie Useragent
         * @see SimplePie::set_useragent()
         * @access private
         */
        public $useragent = \SIMPLEPIE_USERAGENT;
        /**
         * @var string Feed URL
         * @see SimplePie::set_feed_url()
         * @access private
         */
        public $feed_url;
        /**
         * @var string Original feed URL, or new feed URL iff HTTP 301 Moved Permanently
         * @see SimplePie::subscribe_url()
         * @access private
         */
        public $permanent_url = \null;
        /**
         * @var object Instance of SimplePie_File to use as a feed
         * @see SimplePie::set_file()
         * @access private
         */
        public $file;
        /**
         * @var string Raw feed data
         * @see SimplePie::set_raw_data()
         * @access private
         */
        public $raw_data;
        /**
         * @var int Timeout for fetching remote files
         * @see SimplePie::set_timeout()
         * @access private
         */
        public $timeout = 10;
        /**
         * @var array Custom curl options
         * @see SimplePie::set_curl_options()
         * @access private
         */
        public $curl_options = array();
        /**
         * @var bool Forces fsockopen() to be used for remote files instead
         * of cURL, even if a new enough version is installed
         * @see SimplePie::force_fsockopen()
         * @access private
         */
        public $force_fsockopen = \false;
        /**
         * @var bool Force the given data/URL to be treated as a feed no matter what
         * it appears like
         * @see SimplePie::force_feed()
         * @access private
         */
        public $force_feed = \false;
        /**
         * @var bool Enable/Disable Caching
         * @see SimplePie::enable_cache()
         * @access private
         */
        public $cache = \true;
        /**
         * @var bool Force SimplePie to fallback to expired cache, if enabled,
         * when feed is unavailable.
         * @see SimplePie::force_cache_fallback()
         * @access private
         */
        public $force_cache_fallback = \false;
        /**
         * @var int Cache duration (in seconds)
         * @see SimplePie::set_cache_duration()
         * @access private
         */
        public $cache_duration = 3600;
        /**
         * @var int Auto-discovery cache duration (in seconds)
         * @see SimplePie::set_autodiscovery_cache_duration()
         * @access private
         */
        public $autodiscovery_cache_duration = 604800;
        // 7 Days.
        /**
         * @var string Cache location (relative to executing script)
         * @see SimplePie::set_cache_location()
         * @access private
         */
        public $cache_location = './cache';
        /**
         * @var string Function that creates the cache filename
         * @see SimplePie::set_cache_name_function()
         * @access private
         */
        public $cache_name_function = 'md5';
        /**
         * @var bool Reorder feed by date descending
         * @see SimplePie::enable_order_by_date()
         * @access private
         */
        public $order_by_date = \true;
        /**
         * @var mixed Force input encoding to be set to the follow value
         * (false, or anything type-cast to false, disables this feature)
         * @see SimplePie::set_input_encoding()
         * @access private
         */
        public $input_encoding = \false;
        /**
         * @var int Feed Autodiscovery Level
         * @see SimplePie::set_autodiscovery_level()
         * @access private
         */
        public $autodiscovery = \SIMPLEPIE_LOCATOR_ALL;
        /**
         * Class registry object
         *
         * @var SimplePie_Registry
         */
        public $registry;
        /**
         * @var int Maximum number of feeds to check with autodiscovery
         * @see SimplePie::set_max_checked_feeds()
         * @access private
         */
        public $max_checked_feeds = 10;
        /**
         * @var array All the feeds found during the autodiscovery process
         * @see SimplePie::get_all_discovered_feeds()
         * @access private
         */
        public $all_discovered_feeds = array();
        /**
         * @var string Web-accessible path to the handler_image.php file.
         * @see SimplePie::set_image_handler()
         * @access private
         */
        public $image_handler = '';
        /**
         * @var array Stores the URLs when multiple feeds are being initialized.
         * @see SimplePie::set_feed_url()
         * @access private
         */
        public $multifeed_url = array();
        /**
         * @var array Stores SimplePie objects when multiple feeds initialized.
         * @access private
         */
        public $multifeed_objects = array();
        /**
         * @var array Stores the get_object_vars() array for use with multifeeds.
         * @see SimplePie::set_feed_url()
         * @access private
         */
        public $config_settings = \null;
        /**
         * @var integer Stores the number of items to return per-feed with multifeeds.
         * @see SimplePie::set_item_limit()
         * @access private
         */
        public $item_limit = 0;
        /**
         * @var bool Stores if last-modified and/or etag headers were sent with the
         * request when checking a feed.
         */
        public $check_modified = \false;
        /**
         * @var array Stores the default attributes to be stripped by strip_attributes().
         * @see SimplePie::strip_attributes()
         * @access private
         */
        public $strip_attributes = array('bgsound', 'class', 'expr', 'id', 'style', 'onclick', 'onerror', 'onfinish', 'onmouseover', 'onmouseout', 'onfocus', 'onblur', 'lowsrc', 'dynsrc');
        /**
         * @var array Stores the default attributes to add to different tags by add_attributes().
         * @see SimplePie::add_attributes()
         * @access private
         */
        public $add_attributes = array('audio' => array('preload' => 'none'), 'iframe' => array('sandbox' => 'allow-scripts allow-same-origin'), 'video' => array('preload' => 'none'));
        /**
         * @var array Stores the default tags to be stripped by strip_htmltags().
         * @see SimplePie::strip_htmltags()
         * @access private
         */
        public $strip_htmltags = array('base', 'blink', 'body', 'doctype', 'embed', 'font', 'form', 'frame', 'frameset', 'html', 'iframe', 'input', 'marquee', 'meta', 'noscript', 'object', 'param', 'script', 'style');
        /**
         * @var bool Should we throw exceptions, or use the old-style error property?
         * @access private
         */
        public $enable_exceptions = \false;
        /**
         * The SimplePie class contains feed level data and options
         *
         * To use SimplePie, create the SimplePie object with no parameters. You can
         * then set configuration options using the provided methods. After setting
         * them, you must initialise the feed using $feed->init(). At that point the
         * object's methods and properties will be available to you.
         *
         * Previously, it was possible to pass in the feed URL along with cache
         * options directly into the constructor. This has been removed as of 1.3 as
         * it caused a lot of confusion.
         *
         * @since 1.0 Preview Release
         */
        public function __construct()
        {
        }
        /**
         * Used for converting object to a string
         */
        public function __toString()
        {
        }
        /**
         * Remove items that link back to this before destroying this object
         */
        public function __destruct()
        {
        }
        /**
         * Force the given data/URL to be treated as a feed
         *
         * This tells SimplePie to ignore the content-type provided by the server.
         * Be careful when using this option, as it will also disable autodiscovery.
         *
         * @since 1.1
         * @param bool $enable Force the given data/URL to be treated as a feed
         */
        public function force_feed($enable = \false)
        {
        }
        /**
         * Set the URL of the feed you want to parse
         *
         * This allows you to enter the URL of the feed you want to parse, or the
         * website you want to try to use auto-discovery on. This takes priority
         * over any set raw data.
         *
         * You can set multiple feeds to mash together by passing an array instead
         * of a string for the $url. Remember that with each additional feed comes
         * additional processing and resources.
         *
         * @since 1.0 Preview Release
         * @see set_raw_data()
         * @param string|array $url This is the URL (or array of URLs) that you want to parse.
         */
        public function set_feed_url($url)
        {
        }
        /**
         * Set an instance of {@see SimplePie_File} to use as a feed
         *
         * @param SimplePie_File &$file
         * @return bool True on success, false on failure
         */
        public function set_file(&$file)
        {
        }
        /**
         * Set the raw XML data to parse
         *
         * Allows you to use a string of RSS/Atom data instead of a remote feed.
         *
         * If you have a feed available as a string in PHP, you can tell SimplePie
         * to parse that data string instead of a remote feed. Any set feed URL
         * takes precedence.
         *
         * @since 1.0 Beta 3
         * @param string $data RSS or Atom data as a string.
         * @see set_feed_url()
         */
        public function set_raw_data($data)
        {
        }
        /**
         * Set the default timeout for fetching remote feeds
         *
         * This allows you to change the maximum time the feed's server to respond
         * and send the feed back.
         *
         * @since 1.0 Beta 3
         * @param int $timeout The maximum number of seconds to spend waiting to retrieve a feed.
         */
        public function set_timeout($timeout = 10)
        {
        }
        /**
         * Set custom curl options
         *
         * This allows you to change default curl options
         *
         * @since 1.0 Beta 3
         * @param array $curl_options Curl options to add to default settings
         */
        public function set_curl_options(array $curl_options = array())
        {
        }
        /**
         * Force SimplePie to use fsockopen() instead of cURL
         *
         * @since 1.0 Beta 3
         * @param bool $enable Force fsockopen() to be used
         */
        public function force_fsockopen($enable = \false)
        {
        }
        /**
         * Enable/disable caching in SimplePie.
         *
         * This option allows you to disable caching all-together in SimplePie.
         * However, disabling the cache can lead to longer load times.
         *
         * @since 1.0 Preview Release
         * @param bool $enable Enable caching
         */
        public function enable_cache($enable = \true)
        {
        }
        /**
         * SimplePie to continue to fall back to expired cache, if enabled, when
         * feed is unavailable.
         *
         * This tells SimplePie to ignore any file errors and fall back to cache
         * instead. This only works if caching is enabled and cached content
         * still exists.
         * @param bool $enable Force use of cache on fail.
         */
        public function force_cache_fallback($enable = \false)
        {
        }
        /**
         * Set the length of time (in seconds) that the contents of a feed will be
         * cached
         *
         * @param int $seconds The feed content cache duration
         */
        public function set_cache_duration($seconds = 3600)
        {
        }
        /**
         * Set the length of time (in seconds) that the autodiscovered feed URL will
         * be cached
         *
         * @param int $seconds The autodiscovered feed URL cache duration.
         */
        public function set_autodiscovery_cache_duration($seconds = 604800)
        {
        }
        /**
         * Set the file system location where the cached files should be stored
         *
         * @param string $location The file system location.
         */
        public function set_cache_location($location = './cache')
        {
        }
        /**
         * Return the filename (i.e. hash, without path and without extension) of the file to cache a given URL.
         * @param string $url The URL of the feed to be cached.
         * @return string A filename (i.e. hash, without path and without extension).
         */
        public function get_cache_filename($url)
        {
        }
        /**
         * Set whether feed items should be sorted into reverse chronological order
         *
         * @param bool $enable Sort as reverse chronological order.
         */
        public function enable_order_by_date($enable = \true)
        {
        }
        /**
         * Set the character encoding used to parse the feed
         *
         * This overrides the encoding reported by the feed, however it will fall
         * back to the normal encoding detection if the override fails
         *
         * @param string $encoding Character encoding
         */
        public function set_input_encoding($encoding = \false)
        {
        }
        /**
         * Set how much feed autodiscovery to do
         *
         * @see SIMPLEPIE_LOCATOR_NONE
         * @see SIMPLEPIE_LOCATOR_AUTODISCOVERY
         * @see SIMPLEPIE_LOCATOR_LOCAL_EXTENSION
         * @see SIMPLEPIE_LOCATOR_LOCAL_BODY
         * @see SIMPLEPIE_LOCATOR_REMOTE_EXTENSION
         * @see SIMPLEPIE_LOCATOR_REMOTE_BODY
         * @see SIMPLEPIE_LOCATOR_ALL
         * @param int $level Feed Autodiscovery Level (level can be a combination of the above constants, see bitwise OR operator)
         */
        public function set_autodiscovery_level($level = \SIMPLEPIE_LOCATOR_ALL)
        {
        }
        /**
         * Get the class registry
         *
         * Use this to override SimplePie's default classes
         * @see SimplePie_Registry
         * @return SimplePie_Registry
         */
        public function &get_registry()
        {
        }
        /**#@+
         * Useful when you are overloading or extending SimplePie's default classes.
         *
         * @deprecated Use {@see get_registry()} instead
         * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation
         * @param string $class Name of custom class
         * @return boolean True on success, false otherwise
         */
        /**
         * Set which class SimplePie uses for caching
         */
        public function set_cache_class($class = 'SimplePie_Cache')
        {
        }
        /**
         * Set which class SimplePie uses for auto-discovery
         */
        public function set_locator_class($class = 'SimplePie_Locator')
        {
        }
        /**
         * Set which class SimplePie uses for XML parsing
         */
        public function set_parser_class($class = 'SimplePie_Parser')
        {
        }
        /**
         * Set which class SimplePie uses for remote file fetching
         */
        public function set_file_class($class = 'SimplePie_File')
        {
        }
        /**
         * Set which class SimplePie uses for data sanitization
         */
        public function set_sanitize_class($class = 'SimplePie_Sanitize')
        {
        }
        /**
         * Set which class SimplePie uses for handling feed items
         */
        public function set_item_class($class = 'SimplePie_Item')
        {
        }
        /**
         * Set which class SimplePie uses for handling author data
         */
        public function set_author_class($class = 'SimplePie_Author')
        {
        }
        /**
         * Set which class SimplePie uses for handling category data
         */
        public function set_category_class($class = 'SimplePie_Category')
        {
        }
        /**
         * Set which class SimplePie uses for feed enclosures
         */
        public function set_enclosure_class($class = 'SimplePie_Enclosure')
        {
        }
        /**
         * Set which class SimplePie uses for `<media:text>` captions
         */
        public function set_caption_class($class = 'SimplePie_Caption')
        {
        }
        /**
         * Set which class SimplePie uses for `<media:copyright>`
         */
        public function set_copyright_class($class = 'SimplePie_Copyright')
        {
        }
        /**
         * Set which class SimplePie uses for `<media:credit>`
         */
        public function set_credit_class($class = 'SimplePie_Credit')
        {
        }
        /**
         * Set which class SimplePie uses for `<media:rating>`
         */
        public function set_rating_class($class = 'SimplePie_Rating')
        {
        }
        /**
         * Set which class SimplePie uses for `<media:restriction>`
         */
        public function set_restriction_class($class = 'SimplePie_Restriction')
        {
        }
        /**
         * Set which class SimplePie uses for content-type sniffing
         */
        public function set_content_type_sniffer_class($class = 'SimplePie_Content_Type_Sniffer')
        {
        }
        /**
         * Set which class SimplePie uses item sources
         */
        public function set_source_class($class = 'SimplePie_Source')
        {
        }
        /**#@-*/
        /**
         * Set the user agent string
         *
         * @param string $ua New user agent string.
         */
        public function set_useragent($ua = \SIMPLEPIE_USERAGENT)
        {
        }
        /**
         * Set callback function to create cache filename with
         *
         * @param mixed $function Callback function
         */
        public function set_cache_name_function($function = 'md5')
        {
        }
        /**
         * Set options to make SP as fast as possible
         *
         * Forgoes a substantial amount of data sanitization in favor of speed. This
         * turns SimplePie into a dumb parser of feeds.
         *
         * @param bool $set Whether to set them or not
         */
        public function set_stupidly_fast($set = \false)
        {
        }
        /**
         * Set maximum number of feeds to check with autodiscovery
         *
         * @param int $max Maximum number of feeds to check
         */
        public function set_max_checked_feeds($max = 10)
        {
        }
        public function remove_div($enable = \true)
        {
        }
        public function strip_htmltags($tags = '', $encode = \null)
        {
        }
        public function encode_instead_of_strip($enable = \true)
        {
        }
        public function strip_attributes($attribs = '')
        {
        }
        public function add_attributes($attribs = '')
        {
        }
        /**
         * Set the output encoding
         *
         * Allows you to override SimplePie's output to match that of your webpage.
         * This is useful for times when your webpages are not being served as
         * UTF-8. This setting will be obeyed by {@see handle_content_type()}, and
         * is similar to {@see set_input_encoding()}.
         *
         * It should be noted, however, that not all character encodings can support
         * all characters. If your page is being served as ISO-8859-1 and you try
         * to display a Japanese feed, you'll likely see garbled characters.
         * Because of this, it is highly recommended to ensure that your webpages
         * are served as UTF-8.
         *
         * The number of supported character encodings depends on whether your web
         * host supports {@link http://php.net/mbstring mbstring},
         * {@link http://php.net/iconv iconv}, or both. See
         * {@link http://simplepie.org/wiki/faq/Supported_Character_Encodings} for
         * more information.
         *
         * @param string $encoding
         */
        public function set_output_encoding($encoding = 'UTF-8')
        {
        }
        public function strip_comments($strip = \false)
        {
        }
        /**
         * Set element/attribute key/value pairs of HTML attributes
         * containing URLs that need to be resolved relative to the feed
         *
         * Defaults to |a|@href, |area|@href, |blockquote|@cite, |del|@cite,
         * |form|@action, |img|@longdesc, |img|@src, |input|@src, |ins|@cite,
         * |q|@cite
         *
         * @since 1.0
         * @param array|null $element_attribute Element/attribute key/value pairs, null for default
         */
        public function set_url_replacements($element_attribute = \null)
        {
        }
        /**
         * Set the list of domains for which to force HTTPS.
         * @see SimplePie_Sanitize::set_https_domains()
         * @param array List of HTTPS domains. Example array('biz', 'example.com', 'example.org', 'www.example.net').
         */
        public function set_https_domains($domains = array())
        {
        }
        /**
         * Set the handler to enable the display of cached images.
         *
         * @param string $page Web-accessible path to the handler_image.php file.
         * @param string $qs The query string that the value should be passed to.
         */
        public function set_image_handler($page = \false, $qs = 'i')
        {
        }
        /**
         * Set the limit for items returned per-feed with multifeeds
         *
         * @param integer $limit The maximum number of items to return.
         */
        public function set_item_limit($limit = 0)
        {
        }
        /**
         * Enable throwing exceptions
         *
         * @param boolean $enable Should we throw exceptions, or use the old-style error property?
         */
        public function enable_exceptions($enable = \true)
        {
        }
        /**
         * Initialize the feed object
         *
         * This is what makes everything happen. Period. This is where all of the
         * configuration options get processed, feeds are fetched, cached, and
         * parsed, and all of that other good stuff.
         *
         * @return boolean True if successful, false otherwise
         */
        public function init()
        {
        }
        /**
         * Fetch the data via SimplePie_File
         *
         * If the data is already cached, attempt to fetch it from there instead
         * @param SimplePie_Cache_Base|false $cache Cache handler, or false to not load from the cache
         * @return array|true Returns true if the data was loaded from the cache, or an array of HTTP headers and sniffed type
         */
        protected function fetch_data(&$cache)
        {
        }
        /**
         * Get the error message for the occurred error
         *
         * @return string|array Error message, or array of messages for multifeeds
         */
        public function error()
        {
        }
        /**
         * Get the last HTTP status code
         *
         * @return int Status code
         */
        public function status_code()
        {
        }
        /**
         * Get the raw XML
         *
         * This is the same as the old `$feed->enable_xml_dump(true)`, but returns
         * the data instead of printing it.
         *
         * @return string|boolean Raw XML data, false if the cache is used
         */
        public function get_raw_data()
        {
        }
        /**
         * Get the character encoding used for output
         *
         * @since Preview Release
         * @return string
         */
        public function get_encoding()
        {
        }
        /**
         * Send the content-type header with correct encoding
         *
         * This method ensures that the SimplePie-enabled page is being served with
         * the correct {@link http://www.iana.org/assignments/media-types/ mime-type}
         * and character encoding HTTP headers (character encoding determined by the
         * {@see set_output_encoding} config option).
         *
         * This won't work properly if any content or whitespace has already been
         * sent to the browser, because it relies on PHP's
         * {@link http://php.net/header header()} function, and these are the
         * circumstances under which the function works.
         *
         * Because it's setting these settings for the entire page (as is the nature
         * of HTTP headers), this should only be used once per page (again, at the
         * top).
         *
         * @param string $mime MIME type to serve the page as
         */
        public function handle_content_type($mime = 'text/html')
        {
        }
        /**
         * Get the type of the feed
         *
         * This returns a SIMPLEPIE_TYPE_* constant, which can be tested against
         * using {@link http://php.net/language.operators.bitwise bitwise operators}
         *
         * @since 0.8 (usage changed to using constants in 1.0)
         * @see SIMPLEPIE_TYPE_NONE Unknown.
         * @see SIMPLEPIE_TYPE_RSS_090 RSS 0.90.
         * @see SIMPLEPIE_TYPE_RSS_091_NETSCAPE RSS 0.91 (Netscape).
         * @see SIMPLEPIE_TYPE_RSS_091_USERLAND RSS 0.91 (Userland).
         * @see SIMPLEPIE_TYPE_RSS_091 RSS 0.91.
         * @see SIMPLEPIE_TYPE_RSS_092 RSS 0.92.
         * @see SIMPLEPIE_TYPE_RSS_093 RSS 0.93.
         * @see SIMPLEPIE_TYPE_RSS_094 RSS 0.94.
         * @see SIMPLEPIE_TYPE_RSS_10 RSS 1.0.
         * @see SIMPLEPIE_TYPE_RSS_20 RSS 2.0.x.
         * @see SIMPLEPIE_TYPE_RSS_RDF RDF-based RSS.
         * @see SIMPLEPIE_TYPE_RSS_SYNDICATION Non-RDF-based RSS (truly intended as syndication format).
         * @see SIMPLEPIE_TYPE_RSS_ALL Any version of RSS.
         * @see SIMPLEPIE_TYPE_ATOM_03 Atom 0.3.
         * @see SIMPLEPIE_TYPE_ATOM_10 Atom 1.0.
         * @see SIMPLEPIE_TYPE_ATOM_ALL Any version of Atom.
         * @see SIMPLEPIE_TYPE_ALL Any known/supported feed type.
         * @return int SIMPLEPIE_TYPE_* constant
         */
        public function get_type()
        {
        }
        /**
         * Get the URL for the feed
         *
         * When the 'permanent' mode is enabled, returns the original feed URL,
         * except in the case of an `HTTP 301 Moved Permanently` status response,
         * in which case the location of the first redirection is returned.
         *
         * When the 'permanent' mode is disabled (default),
         * may or may not be different from the URL passed to {@see set_feed_url()},
         * depending on whether auto-discovery was used, and whether there were
         * any redirects along the way.
         *
         * @since Preview Release (previously called `get_feed_url()` since SimplePie 0.8.)
         * @todo Support <itunes:new-feed-url>
         * @todo Also, |atom:link|@rel=self
         * @param bool $permanent Permanent mode to return only the original URL or the first redirection
         * iff it is a 301 redirection
         * @return string|null
         */
        public function subscribe_url($permanent = \false)
        {
        }
        /**
         * Get data for an feed-level element
         *
         * This method allows you to get access to ANY element/attribute that is a
         * sub-element of the opening feed tag.
         *
         * The return value is an indexed array of elements matching the given
         * namespace and tag name. Each element has `attribs`, `data` and `child`
         * subkeys. For `attribs` and `child`, these contain namespace subkeys.
         * `attribs` then has one level of associative name => value data (where
         * `value` is a string) after the namespace. `child` has tag-indexed keys
         * after the namespace, each member of which is an indexed array matching
         * this same format.
         *
         * For example:
         * <pre>
         * // This is probably a bad example because we already support
         * // <media:content> natively, but it shows you how to parse through
         * // the nodes.
         * $group = $item->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'group');
         * $content = $group[0]['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['content'];
         * $file = $content[0]['attribs']['']['url'];
         * echo $file;
         * </pre>
         *
         * @since 1.0
         * @see http://simplepie.org/wiki/faq/supported_xml_namespaces
         * @param string $namespace The URL of the XML namespace of the elements you're trying to access
         * @param string $tag Tag name
         * @return array
         */
        public function get_feed_tags($namespace, $tag)
        {
        }
        /**
         * Get data for an channel-level element
         *
         * This method allows you to get access to ANY element/attribute in the
         * channel/header section of the feed.
         *
         * See {@see SimplePie::get_feed_tags()} for a description of the return value
         *
         * @since 1.0
         * @see http://simplepie.org/wiki/faq/supported_xml_namespaces
         * @param string $namespace The URL of the XML namespace of the elements you're trying to access
         * @param string $tag Tag name
         * @return array
         */
        public function get_channel_tags($namespace, $tag)
        {
        }
        /**
         * Get data for an channel-level element
         *
         * This method allows you to get access to ANY element/attribute in the
         * image/logo section of the feed.
         *
         * See {@see SimplePie::get_feed_tags()} for a description of the return value
         *
         * @since 1.0
         * @see http://simplepie.org/wiki/faq/supported_xml_namespaces
         * @param string $namespace The URL of the XML namespace of the elements you're trying to access
         * @param string $tag Tag name
         * @return array
         */
        public function get_image_tags($namespace, $tag)
        {
        }
        /**
         * Get the base URL value from the feed
         *
         * Uses `<xml:base>` if available, otherwise uses the first link in the
         * feed, or failing that, the URL of the feed itself.
         *
         * @see get_link
         * @see subscribe_url
         *
         * @param array $element
         * @return string
         */
        public function get_base($element = array())
        {
        }
        /**
         * Sanitize feed data
         *
         * @access private
         * @see SimplePie_Sanitize::sanitize()
         * @param string $data Data to sanitize
         * @param int $type One of the SIMPLEPIE_CONSTRUCT_* constants
         * @param string $base Base URL to resolve URLs against
         * @return string Sanitized data
         */
        public function sanitize($data, $type, $base = '')
        {
        }
        /**
         * Get the title of the feed
         *
         * Uses `<atom:title>`, `<title>` or `<dc:title>`
         *
         * @since 1.0 (previously called `get_feed_title` since 0.8)
         * @return string|null
         */
        public function get_title()
        {
        }
        /**
         * Get a category for the feed
         *
         * @since Unknown
         * @param int $key The category that you want to return. Remember that arrays begin with 0, not 1
         * @return SimplePie_Category|null
         */
        public function get_category($key = 0)
        {
        }
        /**
         * Get all categories for the feed
         *
         * Uses `<atom:category>`, `<category>` or `<dc:subject>`
         *
         * @since Unknown
         * @return array|null List of {@see SimplePie_Category} objects
         */
        public function get_categories()
        {
        }
        /**
         * Get an author for the feed
         *
         * @since 1.1
         * @param int $key The author that you want to return. Remember that arrays begin with 0, not 1
         * @return SimplePie_Author|null
         */
        public function get_author($key = 0)
        {
        }
        /**
         * Get all authors for the feed
         *
         * Uses `<atom:author>`, `<author>`, `<dc:creator>` or `<itunes:author>`
         *
         * @since 1.1
         * @return array|null List of {@see SimplePie_Author} objects
         */
        public function get_authors()
        {
        }
        /**
         * Get a contributor for the feed
         *
         * @since 1.1
         * @param int $key The contrbutor that you want to return. Remember that arrays begin with 0, not 1
         * @return SimplePie_Author|null
         */
        public function get_contributor($key = 0)
        {
        }
        /**
         * Get all contributors for the feed
         *
         * Uses `<atom:contributor>`
         *
         * @since 1.1
         * @return array|null List of {@see SimplePie_Author} objects
         */
        public function get_contributors()
        {
        }
        /**
         * Get a single link for the feed
         *
         * @since 1.0 (previously called `get_feed_link` since Preview Release, `get_feed_permalink()` since 0.8)
         * @param int $key The link that you want to return. Remember that arrays begin with 0, not 1
         * @param string $rel The relationship of the link to return
         * @return string|null Link URL
         */
        public function get_link($key = 0, $rel = 'alternate')
        {
        }
        /**
         * Get the permalink for the item
         *
         * Returns the first link available with a relationship of "alternate".
         * Identical to {@see get_link()} with key 0
         *
         * @see get_link
         * @since 1.0 (previously called `get_feed_link` since Preview Release, `get_feed_permalink()` since 0.8)
         * @internal Added for parity between the parent-level and the item/entry-level.
         * @return string|null Link URL
         */
        public function get_permalink()
        {
        }
        /**
         * Get all links for the feed
         *
         * Uses `<atom:link>` or `<link>`
         *
         * @since Beta 2
         * @param string $rel The relationship of links to return
         * @return array|null Links found for the feed (strings)
         */
        public function get_links($rel = 'alternate')
        {
        }
        public function get_all_discovered_feeds()
        {
        }
        /**
         * Get the content for the item
         *
         * Uses `<atom:subtitle>`, `<atom:tagline>`, `<description>`,
         * `<dc:description>`, `<itunes:summary>` or `<itunes:subtitle>`
         *
         * @since 1.0 (previously called `get_feed_description()` since 0.8)
         * @return string|null
         */
        public function get_description()
        {
        }
        /**
         * Get the copyright info for the feed
         *
         * Uses `<atom:rights>`, `<atom:copyright>` or `<dc:rights>`
         *
         * @since 1.0 (previously called `get_feed_copyright()` since 0.8)
         * @return string|null
         */
        public function get_copyright()
        {
        }
        /**
         * Get the language for the feed
         *
         * Uses `<language>`, `<dc:language>`, or @xml_lang
         *
         * @since 1.0 (previously called `get_feed_language()` since 0.8)
         * @return string|null
         */
        public function get_language()
        {
        }
        /**
         * Get the latitude coordinates for the item
         *
         * Compatible with the W3C WGS84 Basic Geo and GeoRSS specifications
         *
         * Uses `<geo:lat>` or `<georss:point>`
         *
         * @since 1.0
         * @link http://www.w3.org/2003/01/geo/ W3C WGS84 Basic Geo
         * @link http://www.georss.org/ GeoRSS
         * @return string|null
         */
        public function get_latitude()
        {
        }
        /**
         * Get the longitude coordinates for the feed
         *
         * Compatible with the W3C WGS84 Basic Geo and GeoRSS specifications
         *
         * Uses `<geo:long>`, `<geo:lon>` or `<georss:point>`
         *
         * @since 1.0
         * @link http://www.w3.org/2003/01/geo/ W3C WGS84 Basic Geo
         * @link http://www.georss.org/ GeoRSS
         * @return string|null
         */
        public function get_longitude()
        {
        }
        /**
         * Get the feed logo's title
         *
         * RSS 0.9.0, 1.0 and 2.0 feeds are allowed to have a "feed logo" title.
         *
         * Uses `<image><title>` or `<image><dc:title>`
         *
         * @return string|null
         */
        public function get_image_title()
        {
        }
        /**
         * Get the feed logo's URL
         *
         * RSS 0.9.0, 2.0, Atom 1.0, and feeds with iTunes RSS tags are allowed to
         * have a "feed logo" URL. This points directly to the image itself.
         *
         * Uses `<itunes:image>`, `<atom:logo>`, `<atom:icon>`,
         * `<image><title>` or `<image><dc:title>`
         *
         * @return string|null
         */
        public function get_image_url()
        {
        }
        /**
         * Get the feed logo's link
         *
         * RSS 0.9.0, 1.0 and 2.0 feeds are allowed to have a "feed logo" link. This
         * points to a human-readable page that the image should link to.
         *
         * Uses `<itunes:image>`, `<atom:logo>`, `<atom:icon>`,
         * `<image><title>` or `<image><dc:title>`
         *
         * @return string|null
         */
        public function get_image_link()
        {
        }
        /**
         * Get the feed logo's link
         *
         * RSS 2.0 feeds are allowed to have a "feed logo" width.
         *
         * Uses `<image><width>` or defaults to 88.0 if no width is specified and
         * the feed is an RSS 2.0 feed.
         *
         * @return int|float|null
         */
        public function get_image_width()
        {
        }
        /**
         * Get the feed logo's height
         *
         * RSS 2.0 feeds are allowed to have a "feed logo" height.
         *
         * Uses `<image><height>` or defaults to 31.0 if no height is specified and
         * the feed is an RSS 2.0 feed.
         *
         * @return int|float|null
         */
        public function get_image_height()
        {
        }
        /**
         * Get the number of items in the feed
         *
         * This is well-suited for {@link http://php.net/for for()} loops with
         * {@see get_item()}
         *
         * @param int $max Maximum value to return. 0 for no limit
         * @return int Number of items in the feed
         */
        public function get_item_quantity($max = 0)
        {
        }
        /**
         * Get a single item from the feed
         *
         * This is better suited for {@link http://php.net/for for()} loops, whereas
         * {@see get_items()} is better suited for
         * {@link http://php.net/foreach foreach()} loops.
         *
         * @see get_item_quantity()
         * @since Beta 2
         * @param int $key The item that you want to return. Remember that arrays begin with 0, not 1
         * @return SimplePie_Item|null
         */
        public function get_item($key = 0)
        {
        }
        /**
         * Get all items from the feed
         *
         * This is better suited for {@link http://php.net/for for()} loops, whereas
         * {@see get_items()} is better suited for
         * {@link http://php.net/foreach foreach()} loops.
         *
         * @see get_item_quantity
         * @since Beta 2
         * @param int $start Index to start at
         * @param int $end Number of items to return. 0 for all items after `$start`
         * @return SimplePie_Item[]|null List of {@see SimplePie_Item} objects
         */
        public function get_items($start = 0, $end = 0)
        {
        }
        /**
         * Set the favicon handler
         *
         * @deprecated Use your own favicon handling instead
         */
        public function set_favicon_handler($page = \false, $qs = 'i')
        {
        }
        /**
         * Get the favicon for the current feed
         *
         * @deprecated Use your own favicon handling instead
         */
        public function get_favicon()
        {
        }
        /**
         * Magic method handler
         *
         * @param string $method Method name
         * @param array $args Arguments to the method
         * @return mixed
         */
        public function __call($method, $args)
        {
        }
        /**
         * Sorting callback for items
         *
         * @access private
         * @param SimplePie $a
         * @param SimplePie $b
         * @return boolean
         */
        public static function sort_items($a, $b)
        {
        }
        /**
         * Merge items from several feeds into one
         *
         * If you're merging multiple feeds together, they need to all have dates
         * for the items or else SimplePie will refuse to sort them.
         *
         * @link http://simplepie.org/wiki/tutorial/sort_multiple_feeds_by_time_and_date#if_feeds_require_separate_per-feed_settings
         * @param array $urls List of SimplePie feed objects to merge
         * @param int $start Starting item
         * @param int $end Number of items to return
         * @param int $limit Maximum number of items per feed
         * @return array
         */
        public static function merge_items($urls, $start = 0, $end = 0, $limit = 0)
        {
        }
        /**
         * Store PubSubHubbub links as headers
         *
         * There is no way to find PuSH links in the body of a microformats feed,
         * so they are added to the headers when found, to be used later by get_links.
         * @param SimplePie_File $file
         * @param string $hub
         * @param string $self
         */
        private function store_links(&$file, $hub, $self)
        {
        }
    }
    /**
     * SimplePie
     *
     * A PHP-Based RSS and Atom Feed Framework.
     * Takes the hard work out of managing a complete RSS/Atom solution.
     *
     * Copyright (c) 2004-2016, Ryan Parman, Sam Sneddon, Ryan McCue, and contributors
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     *
     * 	* Redistributions of source code must retain the above copyright notice, this list of
     * 	  conditions and the following disclaimer.
     *
     * 	* Redistributions in binary form must reproduce the above copyright notice, this list
     * 	  of conditions and the following disclaimer in the documentation and/or other materials
     * 	  provided with the distribution.
     *
     * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used
     * 	  to endorse or promote products derived from this software without specific prior
     * 	  written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
     * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
     * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS
     * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     *
     * @package SimplePie
     * @copyright 2004-2016 Ryan Parman, Sam Sneddon, Ryan McCue
     * @author Ryan Parman
     * @author Sam Sneddon
     * @author Ryan McCue
     * @link http://simplepie.org/ SimplePie
     * @license http://www.opensource.org/licenses/bsd-license.php BSD License
     */
    /**
     * SimplePie class.
     *
     * Class for backward compatibility.
     *
     * @deprecated Use {@see SimplePie} directly
     * @package SimplePie
     * @subpackage API
     */
    class SimplePie_Core extends \SimplePie
    {
    }
    /**
     * SimplePie
     *
     * A PHP-Based RSS and Atom Feed Framework.
     * Takes the hard work out of managing a complete RSS/Atom solution.
     *
     * Copyright (c) 2004-2016, Ryan Parman, Sam Sneddon, Ryan McCue, and contributors
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     *
     * 	* Redistributions of source code must retain the above copyright notice, this list of
     * 	  conditions and the following disclaimer.
     *
     * 	* Redistributions in binary form must reproduce the above copyright notice, this list
     * 	  of conditions and the following disclaimer in the documentation and/or other materials
     * 	  provided with the distribution.
     *
     * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used
     * 	  to endorse or promote products derived from this software without specific prior
     * 	  written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
     * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
     * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS
     * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     *
     * @package SimplePie
     * @copyright 2004-2016 Ryan Parman, Sam Sneddon, Ryan McCue
     * @author Ryan Parman
     * @author Sam Sneddon
     * @author Ryan McCue
     * @link http://simplepie.org/ SimplePie
     * @license http://www.opensource.org/licenses/bsd-license.php BSD License
     */
    /**
     * Used for feed auto-discovery
     *
     *
     * This class can be overloaded with {@see SimplePie::set_locator_class()}
     *
     * @package SimplePie
     */
    class SimplePie_Locator
    {
        var $useragent;
        var $timeout;
        var $file;
        var $local = array();
        var $elsewhere = array();
        var $cached_entities = array();
        var $http_base;
        var $base;
        var $base_location = 0;
        var $checked_feeds = 0;
        var $max_checked_feeds = 10;
        var $force_fsockopen = \false;
        var $curl_options = array();
        var $dom;
        protected $registry;
        public function __construct(\SimplePie_File $file, $timeout = 10, $useragent = \null, $max_checked_feeds = 10, $force_fsockopen = \false, $curl_options = array())
        {
        }
        public function set_registry(\SimplePie_Registry $registry)
        {
        }
        public function find($type = \SIMPLEPIE_LOCATOR_ALL, &$working = \null)
        {
        }
        public function is_feed($file, $check_html = \false)
        {
        }
        public function get_base()
        {
        }
        public function autodiscovery()
        {
        }
        protected function search_elements_by_tag($name, &$done, $feeds)
        {
        }
        public function get_links()
        {
        }
        public function get_rel_link($rel)
        {
        }
        public function extension(&$array)
        {
        }
        public function body(&$array)
        {
        }
    }
    /**
     * SimplePie
     *
     * A PHP-Based RSS and Atom Feed Framework.
     * Takes the hard work out of managing a complete RSS/Atom solution.
     *
     * Copyright (c) 2004-2016, Ryan Parman, Sam Sneddon, Ryan McCue, and contributors
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     *
     * 	* Redistributions of source code must retain the above copyright notice, this list of
     * 	  conditions and the following disclaimer.
     *
     * 	* Redistributions in binary form must reproduce the above copyright notice, this list
     * 	  of conditions and the following disclaimer in the documentation and/or other materials
     * 	  provided with the distribution.
     *
     * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used
     * 	  to endorse or promote products derived from this software without specific prior
     * 	  written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
     * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
     * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS
     * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     *
     * @package SimplePie
     * @copyright 2004-2016 Ryan Parman, Sam Sneddon, Ryan McCue
     * @author Ryan Parman
     * @author Sam Sneddon
     * @author Ryan McCue
     * @link http://simplepie.org/ SimplePie
     * @license http://www.opensource.org/licenses/bsd-license.php BSD License
     */
    /**
     * Manages all category-related data
     *
     * Used by {@see SimplePie_Item::get_category()} and {@see SimplePie_Item::get_categories()}
     *
     * This class can be overloaded with {@see SimplePie::set_category_class()}
     *
     * @package SimplePie
     * @subpackage API
     */
    class SimplePie_Category
    {
        /**
         * Category identifier
         *
         * @var string|null
         * @see get_term
         */
        var $term;
        /**
         * Categorization scheme identifier
         *
         * @var string|null
         * @see get_scheme()
         */
        var $scheme;
        /**
         * Human readable label
         *
         * @var string|null
         * @see get_label()
         */
        var $label;
        /**
         * Category type
         * 
         * category for <category>
         * subject for <dc:subject>
         *
         * @var string|null
         * @see get_type()
         */
        var $type;
        /**
         * Constructor, used to input the data
         *
         * @param string|null $term
         * @param string|null $scheme
         * @param string|null $label
         * @param string|null $type
         */
        public function __construct($term = \null, $scheme = \null, $label = \null, $type = \null)
        {
        }
        /**
         * String-ified version
         *
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * Get the category identifier
         *
         * @return string|null
         */
        public function get_term()
        {
        }
        /**
         * Get the categorization scheme identifier
         *
         * @return string|null
         */
        public function get_scheme()
        {
        }
        /**
         * Get the human readable label
         *
         * @param bool $strict
         * @return string|null
         */
        public function get_label($strict = \false)
        {
        }
        /**
         * Get the category type
         *
         * @return string|null
         */
        public function get_type()
        {
        }
    }
    /**
     * SimplePie
     *
     * A PHP-Based RSS and Atom Feed Framework.
     * Takes the hard work out of managing a complete RSS/Atom solution.
     *
     * Copyright (c) 2004-2016, Ryan Parman, Sam Sneddon, Ryan McCue, and contributors
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     *
     * 	* Redistributions of source code must retain the above copyright notice, this list of
     * 	  conditions and the following disclaimer.
     *
     * 	* Redistributions in binary form must reproduce the above copyright notice, this list
     * 	  of conditions and the following disclaimer in the documentation and/or other materials
     * 	  provided with the distribution.
     *
     * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used
     * 	  to endorse or promote products derived from this software without specific prior
     * 	  written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
     * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
     * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS
     * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     *
     * @package SimplePie
     * @copyright 2004-2016 Ryan Parman, Sam Sneddon, Ryan McCue
     * @author Ryan Parman
     * @author Sam Sneddon
     * @author Ryan McCue
     * @link http://simplepie.org/ SimplePie
     * @license http://www.opensource.org/licenses/bsd-license.php BSD License
     */
    /**
     * Handles `<media:rating>` or `<itunes:explicit>` tags as defined in Media RSS and iTunes RSS respectively
     *
     * Used by {@see SimplePie_Enclosure::get_rating()} and {@see SimplePie_Enclosure::get_ratings()}
     *
     * This class can be overloaded with {@see SimplePie::set_rating_class()}
     *
     * @package SimplePie
     * @subpackage API
     */
    class SimplePie_Rating
    {
        /**
         * Rating scheme
         *
         * @var string
         * @see get_scheme()
         */
        var $scheme;
        /**
         * Rating value
         *
         * @var string
         * @see get_value()
         */
        var $value;
        /**
         * Constructor, used to input the data
         *
         * For documentation on all the parameters, see the corresponding
         * properties and their accessors
         */
        public function __construct($scheme = \null, $value = \null)
        {
        }
        /**
         * String-ified version
         *
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * Get the organizational scheme for the rating
         *
         * @return string|null
         */
        public function get_scheme()
        {
        }
        /**
         * Get the value of the rating
         *
         * @return string|null
         */
        public function get_value()
        {
        }
    }
    /**
     * SimplePie
     *
     * A PHP-Based RSS and Atom Feed Framework.
     * Takes the hard work out of managing a complete RSS/Atom solution.
     *
     * Copyright (c) 2004-2016, Ryan Parman, Sam Sneddon, Ryan McCue, and contributors
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     *
     * 	* Redistributions of source code must retain the above copyright notice, this list of
     * 	  conditions and the following disclaimer.
     *
     * 	* Redistributions in binary form must reproduce the above copyright notice, this list
     * 	  of conditions and the following disclaimer in the documentation and/or other materials
     * 	  provided with the distribution.
     *
     * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used
     * 	  to endorse or promote products derived from this software without specific prior
     * 	  written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
     * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
     * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS
     * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     *
     * @package SimplePie
     * @copyright 2004-2016 Ryan Parman, Sam Sneddon, Ryan McCue
     * @author Ryan Parman
     * @author Sam Sneddon
     * @author Ryan McCue
     * @link http://simplepie.org/ SimplePie
     * @license http://www.opensource.org/licenses/bsd-license.php BSD License
     */
    /**
     * General SimplePie exception class
     *
     * @package SimplePie
     */
    class SimplePie_Exception extends \Exception
    {
    }
    /**
     * SimplePie
     *
     * A PHP-Based RSS and Atom Feed Framework.
     * Takes the hard work out of managing a complete RSS/Atom solution.
     *
     * Copyright (c) 2004-2016, Ryan Parman, Sam Sneddon, Ryan McCue, and contributors
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     *
     * 	* Redistributions of source code must retain the above copyright notice, this list of
     * 	  conditions and the following disclaimer.
     *
     * 	* Redistributions in binary form must reproduce the above copyright notice, this list
     * 	  of conditions and the following disclaimer in the documentation and/or other materials
     * 	  provided with the distribution.
     *
     * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used
     * 	  to endorse or promote products derived from this software without specific prior
     * 	  written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
     * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
     * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS
     * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     *
     * @package SimplePie
     * @copyright 2004-2016 Ryan Parman, Sam Sneddon, Ryan McCue
     * @author Ryan Parman
     * @author Sam Sneddon
     * @author Ryan McCue
     * @link http://simplepie.org/ SimplePie
     * @license http://www.opensource.org/licenses/bsd-license.php BSD License
     */
    /**
     * Manages all item-related data
     *
     * Used by {@see SimplePie::get_item()} and {@see SimplePie::get_items()}
     *
     * This class can be overloaded with {@see SimplePie::set_item_class()}
     *
     * @package SimplePie
     * @subpackage API
     */
    class SimplePie_Item
    {
        /**
         * Parent feed
         *
         * @access private
         * @var SimplePie
         */
        var $feed;
        /**
         * Raw data
         *
         * @access private
         * @var array
         */
        var $data = array();
        /**
         * Registry object
         *
         * @see set_registry
         * @var SimplePie_Registry
         */
        protected $registry;
        /**
         * Create a new item object
         *
         * This is usually used by {@see SimplePie::get_items} and
         * {@see SimplePie::get_item}. Avoid creating this manually.
         *
         * @param SimplePie $feed Parent feed
         * @param array $data Raw data
         */
        public function __construct($feed, $data)
        {
        }
        /**
         * Set the registry handler
         *
         * This is usually used by {@see SimplePie_Registry::create}
         *
         * @since 1.3
         * @param SimplePie_Registry $registry
         */
        public function set_registry(\SimplePie_Registry $registry)
        {
        }
        /**
         * Get a string representation of the item
         *
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * Remove items that link back to this before destroying this object
         */
        public function __destruct()
        {
        }
        /**
         * Get data for an item-level element
         *
         * This method allows you to get access to ANY element/attribute that is a
         * sub-element of the item/entry tag.
         *
         * See {@see SimplePie::get_feed_tags()} for a description of the return value
         *
         * @since 1.0
         * @see http://simplepie.org/wiki/faq/supported_xml_namespaces
         * @param string $namespace The URL of the XML namespace of the elements you're trying to access
         * @param string $tag Tag name
         * @return array
         */
        public function get_item_tags($namespace, $tag)
        {
        }
        /**
         * Get the base URL value from the parent feed
         *
         * Uses `<xml:base>`
         *
         * @param array $element
         * @return string
         */
        public function get_base($element = array())
        {
        }
        /**
         * Sanitize feed data
         *
         * @access private
         * @see SimplePie::sanitize()
         * @param string $data Data to sanitize
         * @param int $type One of the SIMPLEPIE_CONSTRUCT_* constants
         * @param string $base Base URL to resolve URLs against
         * @return string Sanitized data
         */
        public function sanitize($data, $type, $base = '')
        {
        }
        /**
         * Get the parent feed
         *
         * Note: this may not work as you think for multifeeds!
         *
         * @link http://simplepie.org/faq/typical_multifeed_gotchas#missing_data_from_feed
         * @since 1.0
         * @return SimplePie
         */
        public function get_feed()
        {
        }
        /**
         * Get the unique identifier for the item
         *
         * This is usually used when writing code to check for new items in a feed.
         *
         * Uses `<atom:id>`, `<guid>`, `<dc:identifier>` or the `about` attribute
         * for RDF. If none of these are supplied (or `$hash` is true), creates an
         * MD5 hash based on the permalink, title and content.
         *
         * @since Beta 2
         * @param boolean $hash Should we force using a hash instead of the supplied ID?
         * @param string|false $fn User-supplied function to generate an hash
         * @return string|null
         */
        public function get_id($hash = \false, $fn = 'md5')
        {
        }
        /**
         * Get the title of the item
         *
         * Uses `<atom:title>`, `<title>` or `<dc:title>`
         *
         * @since Beta 2 (previously called `get_item_title` since 0.8)
         * @return string|null
         */
        public function get_title()
        {
        }
        /**
         * Get the content for the item
         *
         * Prefers summaries over full content , but will return full content if a
         * summary does not exist.
         *
         * To prefer full content instead, use {@see get_content}
         *
         * Uses `<atom:summary>`, `<description>`, `<dc:description>` or
         * `<itunes:subtitle>`
         *
         * @since 0.8
         * @param boolean $description_only Should we avoid falling back to the content?
         * @return string|null
         */
        public function get_description($description_only = \false)
        {
        }
        /**
         * Get the content for the item
         *
         * Prefers full content over summaries, but will return a summary if full
         * content does not exist.
         *
         * To prefer summaries instead, use {@see get_description}
         *
         * Uses `<atom:content>` or `<content:encoded>` (RSS 1.0 Content Module)
         *
         * @since 1.0
         * @param boolean $content_only Should we avoid falling back to the description?
         * @return string|null
         */
        public function get_content($content_only = \false)
        {
        }
        /**
         * Get the media:thumbnail of the item
         *
         * Uses `<media:thumbnail>`
         *
         *
         * @return array|null
         */
        public function get_thumbnail()
        {
        }
        /**
         * Get a category for the item
         *
         * @since Beta 3 (previously called `get_categories()` since Beta 2)
         * @param int $key The category that you want to return.  Remember that arrays begin with 0, not 1
         * @return SimplePie_Category|null
         */
        public function get_category($key = 0)
        {
        }
        /**
         * Get all categories for the item
         *
         * Uses `<atom:category>`, `<category>` or `<dc:subject>`
         *
         * @since Beta 3
         * @return SimplePie_Category[]|null List of {@see SimplePie_Category} objects
         */
        public function get_categories()
        {
        }
        /**
         * Get an author for the item
         *
         * @since Beta 2
         * @param int $key The author that you want to return.  Remember that arrays begin with 0, not 1
         * @return SimplePie_Author|null
         */
        public function get_author($key = 0)
        {
        }
        /**
         * Get a contributor for the item
         *
         * @since 1.1
         * @param int $key The contrbutor that you want to return.  Remember that arrays begin with 0, not 1
         * @return SimplePie_Author|null
         */
        public function get_contributor($key = 0)
        {
        }
        /**
         * Get all contributors for the item
         *
         * Uses `<atom:contributor>`
         *
         * @since 1.1
         * @return SimplePie_Author[]|null List of {@see SimplePie_Author} objects
         */
        public function get_contributors()
        {
        }
        /**
         * Get all authors for the item
         *
         * Uses `<atom:author>`, `<author>`, `<dc:creator>` or `<itunes:author>`
         *
         * @since Beta 2
         * @return SimplePie_Author[]|null List of {@see SimplePie_Author} objects
         */
        public function get_authors()
        {
        }
        /**
         * Get the copyright info for the item
         *
         * Uses `<atom:rights>` or `<dc:rights>`
         *
         * @since 1.1
         * @return string
         */
        public function get_copyright()
        {
        }
        /**
         * Get the posting date/time for the item
         *
         * Uses `<atom:published>`, `<atom:updated>`, `<atom:issued>`,
         * `<atom:modified>`, `<pubDate>` or `<dc:date>`
         *
         * Note: obeys PHP's timezone setting. To get a UTC date/time, use
         * {@see get_gmdate}
         *
         * @since Beta 2 (previously called `get_item_date` since 0.8)
         *
         * @param string $date_format Supports any PHP date format from {@see http://php.net/date} (empty for the raw data)
         * @return int|string|null
         */
        public function get_date($date_format = 'j F Y, g:i a')
        {
        }
        /**
         * Get the update date/time for the item
         *
         * Uses `<atom:updated>`
         *
         * Note: obeys PHP's timezone setting. To get a UTC date/time, use
         * {@see get_gmdate}
         *
         * @param string $date_format Supports any PHP date format from {@see http://php.net/date} (empty for the raw data)
         * @return int|string|null
         */
        public function get_updated_date($date_format = 'j F Y, g:i a')
        {
        }
        /**
         * Get the localized posting date/time for the item
         *
         * Returns the date formatted in the localized language. To display in
         * languages other than the server's default, you need to change the locale
         * with {@link http://php.net/setlocale setlocale()}. The available
         * localizations depend on which ones are installed on your web server.
         *
         * @since 1.0
         *
         * @param string $date_format Supports any PHP date format from {@see http://php.net/strftime} (empty for the raw data)
         * @return int|string|null
         */
        public function get_local_date($date_format = '%c')
        {
        }
        /**
         * Get the posting date/time for the item (UTC time)
         *
         * @see get_date
         * @param string $date_format Supports any PHP date format from {@see http://php.net/date}
         * @return int|string|null
         */
        public function get_gmdate($date_format = 'j F Y, g:i a')
        {
        }
        /**
         * Get the update date/time for the item (UTC time)
         *
         * @see get_updated_date
         * @param string $date_format Supports any PHP date format from {@see http://php.net/date}
         * @return int|string|null
         */
        public function get_updated_gmdate($date_format = 'j F Y, g:i a')
        {
        }
        /**
         * Get the permalink for the item
         *
         * Returns the first link available with a relationship of "alternate".
         * Identical to {@see get_link()} with key 0
         *
         * @see get_link
         * @since 0.8
         * @return string|null Permalink URL
         */
        public function get_permalink()
        {
        }
        /**
         * Get a single link for the item
         *
         * @since Beta 3
         * @param int $key The link that you want to return.  Remember that arrays begin with 0, not 1
         * @param string $rel The relationship of the link to return
         * @return string|null Link URL
         */
        public function get_link($key = 0, $rel = 'alternate')
        {
        }
        /**
         * Get all links for the item
         *
         * Uses `<atom:link>`, `<link>` or `<guid>`
         *
         * @since Beta 2
         * @param string $rel The relationship of links to return
         * @return array|null Links found for the item (strings)
         */
        public function get_links($rel = 'alternate')
        {
        }
        /**
         * Get an enclosure from the item
         *
         * Supports the <enclosure> RSS tag, as well as Media RSS and iTunes RSS.
         *
         * @since Beta 2
         * @todo Add ability to prefer one type of content over another (in a media group).
         * @param int $key The enclosure that you want to return.  Remember that arrays begin with 0, not 1
         * @return SimplePie_Enclosure|null
         */
        public function get_enclosure($key = 0, $prefer = \null)
        {
        }
        /**
         * Get all available enclosures (podcasts, etc.)
         *
         * Supports the <enclosure> RSS tag, as well as Media RSS and iTunes RSS.
         *
         * At this point, we're pretty much assuming that all enclosures for an item
         * are the same content.  Anything else is too complicated to
         * properly support.
         *
         * @since Beta 2
         * @todo Add support for end-user defined sorting of enclosures by type/handler (so we can prefer the faster-loading FLV over MP4).
         * @todo If an element exists at a level, but its value is empty, we should fall back to the value from the parent (if it exists).
         * @return SimplePie_Enclosure[]|null List of SimplePie_Enclosure items
         */
        public function get_enclosures()
        {
        }
        /**
         * Get the latitude coordinates for the item
         *
         * Compatible with the W3C WGS84 Basic Geo and GeoRSS specifications
         *
         * Uses `<geo:lat>` or `<georss:point>`
         *
         * @since 1.0
         * @link http://www.w3.org/2003/01/geo/ W3C WGS84 Basic Geo
         * @link http://www.georss.org/ GeoRSS
         * @return string|null
         */
        public function get_latitude()
        {
        }
        /**
         * Get the longitude coordinates for the item
         *
         * Compatible with the W3C WGS84 Basic Geo and GeoRSS specifications
         *
         * Uses `<geo:long>`, `<geo:lon>` or `<georss:point>`
         *
         * @since 1.0
         * @link http://www.w3.org/2003/01/geo/ W3C WGS84 Basic Geo
         * @link http://www.georss.org/ GeoRSS
         * @return string|null
         */
        public function get_longitude()
        {
        }
        /**
         * Get the `<atom:source>` for the item
         *
         * @since 1.1
         * @return SimplePie_Source|null
         */
        public function get_source()
        {
        }
    }
    /**
     * SimplePie
     *
     * A PHP-Based RSS and Atom Feed Framework.
     * Takes the hard work out of managing a complete RSS/Atom solution.
     *
     * Copyright (c) 2004-2016, Ryan Parman, Sam Sneddon, Ryan McCue, and contributors
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     *
     * 	* Redistributions of source code must retain the above copyright notice, this list of
     * 	  conditions and the following disclaimer.
     *
     * 	* Redistributions in binary form must reproduce the above copyright notice, this list
     * 	  of conditions and the following disclaimer in the documentation and/or other materials
     * 	  provided with the distribution.
     *
     * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used
     * 	  to endorse or promote products derived from this software without specific prior
     * 	  written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
     * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
     * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS
     * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     *
     * @package SimplePie
     * @copyright 2004-2016 Ryan Parman, Sam Sneddon, Ryan McCue
     * @author Ryan Parman
     * @author Sam Sneddon
     * @author Ryan McCue
     * @link http://simplepie.org/ SimplePie
     * @license http://www.opensource.org/licenses/bsd-license.php BSD License
     */
    /**
     * HTTP Response Parser
     *
     * @package SimplePie
     * @subpackage HTTP
     */
    class SimplePie_HTTP_Parser
    {
        /**
         * HTTP Version
         *
         * @var float
         */
        public $http_version = 0.0;
        /**
         * Status code
         *
         * @var int
         */
        public $status_code = 0;
        /**
         * Reason phrase
         *
         * @var string
         */
        public $reason = '';
        /**
         * Key/value pairs of the headers
         *
         * @var array
         */
        public $headers = array();
        /**
         * Body of the response
         *
         * @var string
         */
        public $body = '';
        /**
         * Current state of the state machine
         *
         * @var string
         */
        protected $state = 'http_version';
        /**
         * Input data
         *
         * @var string
         */
        protected $data = '';
        /**
         * Input data length (to avoid calling strlen() everytime this is needed)
         *
         * @var int
         */
        protected $data_length = 0;
        /**
         * Current position of the pointer
         *
         * @var int
         */
        protected $position = 0;
        /**
         * Name of the hedaer currently being parsed
         *
         * @var string
         */
        protected $name = '';
        /**
         * Value of the hedaer currently being parsed
         *
         * @var string
         */
        protected $value = '';
        /**
         * Create an instance of the class with the input data
         *
         * @param string $data Input data
         */
        public function __construct($data)
        {
        }
        /**
         * Parse the input data
         *
         * @return bool true on success, false on failure
         */
        public function parse()
        {
        }
        /**
         * Check whether there is data beyond the pointer
         *
         * @return bool true if there is further data, false if not
         */
        protected function has_data()
        {
        }
        /**
         * See if the next character is LWS
         *
         * @return bool true if the next character is LWS, false if not
         */
        protected function is_linear_whitespace()
        {
        }
        /**
         * Parse the HTTP version
         */
        protected function http_version()
        {
        }
        /**
         * Parse the status code
         */
        protected function status()
        {
        }
        /**
         * Parse the reason phrase
         */
        protected function reason()
        {
        }
        /**
         * Deal with a new line, shifting data around as needed
         */
        protected function new_line()
        {
        }
        /**
         * Parse a header name
         */
        protected function name()
        {
        }
        /**
         * Parse LWS, replacing consecutive LWS characters with a single space
         */
        protected function linear_whitespace()
        {
        }
        /**
         * See what state to move to while within non-quoted header values
         */
        protected function value()
        {
        }
        /**
         * Parse a header value while outside quotes
         */
        protected function value_char()
        {
        }
        /**
         * See what state to move to while within quoted header values
         */
        protected function quote()
        {
        }
        /**
         * Parse a header value while within quotes
         */
        protected function quote_char()
        {
        }
        /**
         * Parse an escaped character within quotes
         */
        protected function quote_escaped()
        {
        }
        /**
         * Parse the body
         */
        protected function body()
        {
        }
        /**
         * Parsed a "Transfer-Encoding: chunked" body
         */
        protected function chunked()
        {
        }
        /**
         * Prepare headers (take care of proxies headers)
         *
         * @param string  $headers Raw headers
         * @param integer $count   Redirection count. Default to 1.
         *
         * @return string
         */
        public static function prepareHeaders($headers, $count = 1)
        {
        }
    }
    /**
     * SimplePie
     *
     * A PHP-Based RSS and Atom Feed Framework.
     * Takes the hard work out of managing a complete RSS/Atom solution.
     *
     * Copyright (c) 2004-2016, Ryan Parman, Sam Sneddon, Ryan McCue, and contributors
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     *
     * 	* Redistributions of source code must retain the above copyright notice, this list of
     * 	  conditions and the following disclaimer.
     *
     * 	* Redistributions in binary form must reproduce the above copyright notice, this list
     * 	  of conditions and the following disclaimer in the documentation and/or other materials
     * 	  provided with the distribution.
     *
     * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used
     * 	  to endorse or promote products derived from this software without specific prior
     * 	  written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
     * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
     * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS
     * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     *
     * @package SimplePie
     * @copyright 2004-2016 Ryan Parman, Sam Sneddon, Ryan McCue
     * @author Ryan Parman
     * @author Sam Sneddon
     * @author Ryan McCue
     * @link http://simplepie.org/ SimplePie
     * @license http://www.opensource.org/licenses/bsd-license.php BSD License
     */
    /**
     * Used to create cache objects
     *
     * This class can be overloaded with {@see SimplePie::set_cache_class()},
     * although the preferred way is to create your own handler
     * via {@see register()}
     *
     * @package SimplePie
     * @subpackage Caching
     */
    class SimplePie_Cache
    {
        /**
         * Cache handler classes
         *
         * These receive 3 parameters to their constructor, as documented in
         * {@see register()}
         * @var array
         */
        protected static $handlers = array('mysql' => 'SimplePie_Cache_MySQL', 'memcache' => 'SimplePie_Cache_Memcache', 'memcached' => 'SimplePie_Cache_Memcached', 'redis' => 'SimplePie_Cache_Redis');
        /**
         * Don't call the constructor. Please.
         */
        private function __construct()
        {
        }
        /**
         * Create a new SimplePie_Cache object
         *
         * @param string $location URL location (scheme is used to determine handler)
         * @param string $filename Unique identifier for cache object
         * @param string $extension 'spi' or 'spc'
         * @return SimplePie_Cache_Base Type of object depends on scheme of `$location`
         */
        public static function get_handler($location, $filename, $extension)
        {
        }
        /**
         * Create a new SimplePie_Cache object
         *
         * @deprecated Use {@see get_handler} instead
         */
        public function create($location, $filename, $extension)
        {
        }
        /**
         * Register a handler
         *
         * @param string $type DSN type to register for
         * @param string $class Name of handler class. Must implement SimplePie_Cache_Base
         */
        public static function register($type, $class)
        {
        }
        /**
         * Parse a URL into an array
         *
         * @param string $url
         * @return array
         */
        public static function parse_URL($url)
        {
        }
    }
    /**
     * SimplePie
     *
     * A PHP-Based RSS and Atom Feed Framework.
     * Takes the hard work out of managing a complete RSS/Atom solution.
     *
     * Copyright (c) 2004-2016, Ryan Parman, Sam Sneddon, Ryan McCue, and contributors
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     *
     * 	* Redistributions of source code must retain the above copyright notice, this list of
     * 	  conditions and the following disclaimer.
     *
     * 	* Redistributions in binary form must reproduce the above copyright notice, this list
     * 	  of conditions and the following disclaimer in the documentation and/or other materials
     * 	  provided with the distribution.
     *
     * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used
     * 	  to endorse or promote products derived from this software without specific prior
     * 	  written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
     * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
     * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS
     * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     *
     * @package SimplePie
     * @copyright 2004-2016 Ryan Parman, Sam Sneddon, Ryan McCue
     * @author Ryan Parman
     * @author Sam Sneddon
     * @author Ryan McCue
     * @link http://simplepie.org/ SimplePie
     * @license http://www.opensource.org/licenses/bsd-license.php BSD License
     */
    /**
     * Base for cache objects
     *
     * Classes to be used with {@see SimplePie_Cache::register()} are expected
     * to implement this interface.
     *
     * @package SimplePie
     * @subpackage Caching
     */
    interface SimplePie_Cache_Base
    {
        /**
         * Feed cache type
         *
         * @var string
         */
        const TYPE_FEED = 'spc';
        /**
         * Image cache type
         *
         * @var string
         */
        const TYPE_IMAGE = 'spi';
        /**
         * Create a new cache object
         *
         * @param string $location Location string (from SimplePie::$cache_location)
         * @param string $name Unique ID for the cache
         * @param string $type Either TYPE_FEED for SimplePie data, or TYPE_IMAGE for image data
         */
        public function __construct($location, $name, $type);
        /**
         * Save data to the cache
         *
         * @param array|SimplePie $data Data to store in the cache. If passed a SimplePie object, only cache the $data property
         * @return bool Successfulness
         */
        public function save($data);
        /**
         * Retrieve the data saved to the cache
         *
         * @return array Data for SimplePie::$data
         */
        public function load();
        /**
         * Retrieve the last modified time for the cache
         *
         * @return int Timestamp
         */
        public function mtime();
        /**
         * Set the last modified time to the current time
         *
         * @return bool Success status
         */
        public function touch();
        /**
         * Remove the cache
         *
         * @return bool Success status
         */
        public function unlink();
    }
    /**
     * SimplePie Redis Cache Extension
     *
     * @package SimplePie
     * @author Jan Kozak <galvani78@gmail.com>
     * @link http://galvani.cz/
     * @license http://www.opensource.org/licenses/bsd-license.php BSD License
     * @version 0.2.9
     */
    /**
     * Caches data to redis
     *
     * Registered for URLs with the "redis" protocol
     *
     * For example, `redis://localhost:6379/?timeout=3600&prefix=sp_&dbIndex=0` will
     * connect to redis on `localhost` on port 6379. All tables will be
     * prefixed with `simple_primary-` and data will expire after 3600 seconds
     *
     * @package SimplePie
     * @subpackage Caching
     * @uses Redis
     */
    class SimplePie_Cache_Redis implements \SimplePie_Cache_Base
    {
        /**
         * Redis instance
         *
         * @var \Redis
         */
        protected $cache;
        /**
         * Options
         *
         * @var array
         */
        protected $options;
        /**
         * Cache name
         *
         * @var string
         */
        protected $name;
        /**
         * Cache Data
         *
         * @var type
         */
        protected $data;
        /**
         * Create a new cache object
         *
         * @param string $location Location string (from SimplePie::$cache_location)
         * @param string $name Unique ID for the cache
         * @param string $type Either TYPE_FEED for SimplePie data, or TYPE_IMAGE for image data
         */
        public function __construct($location, $name, $options = \null)
        {
        }
        /**
         * @param \Redis $cache
         */
        public function setRedisClient(\Redis $cache)
        {
        }
        /**
         * Save data to the cache
         *
         * @param array|SimplePie $data Data to store in the cache. If passed a SimplePie object, only cache the $data property
         * @return bool Successfulness
         */
        public function save($data)
        {
        }
        /**
         * Retrieve the data saved to the cache
         *
         * @return array Data for SimplePie::$data
         */
        public function load()
        {
        }
        /**
         * Retrieve the last modified time for the cache
         *
         * @return int Timestamp
         */
        public function mtime()
        {
        }
        /**
         * Set the last modified time to the current time
         *
         * @return bool Success status
         */
        public function touch()
        {
        }
        /**
         * Remove the cache
         *
         * @return bool Success status
         */
        public function unlink()
        {
        }
    }
    /**
     * SimplePie
     *
     * A PHP-Based RSS and Atom Feed Framework.
     * Takes the hard work out of managing a complete RSS/Atom solution.
     *
     * Copyright (c) 2004-2016, Ryan Parman, Sam Sneddon, Ryan McCue, and contributors
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     *
     * 	* Redistributions of source code must retain the above copyright notice, this list of
     * 	  conditions and the following disclaimer.
     *
     * 	* Redistributions in binary form must reproduce the above copyright notice, this list
     * 	  of conditions and the following disclaimer in the documentation and/or other materials
     * 	  provided with the distribution.
     *
     * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used
     * 	  to endorse or promote products derived from this software without specific prior
     * 	  written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
     * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
     * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS
     * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     *
     * @package SimplePie
     * @copyright 2004-2016 Ryan Parman, Sam Sneddon, Ryan McCue
     * @author Ryan Parman
     * @author Sam Sneddon
     * @author Ryan McCue
     * @link http://simplepie.org/ SimplePie
     * @license http://www.opensource.org/licenses/bsd-license.php BSD License
     */
    /**
     * Caches data to the filesystem
     *
     * @package SimplePie
     * @subpackage Caching
     */
    class SimplePie_Cache_File implements \SimplePie_Cache_Base
    {
        /**
         * Location string
         *
         * @see SimplePie::$cache_location
         * @var string
         */
        protected $location;
        /**
         * Filename
         *
         * @var string
         */
        protected $filename;
        /**
         * File extension
         *
         * @var string
         */
        protected $extension;
        /**
         * File path
         *
         * @var string
         */
        protected $name;
        /**
         * Create a new cache object
         *
         * @param string $location Location string (from SimplePie::$cache_location)
         * @param string $name Unique ID for the cache
         * @param string $type Either TYPE_FEED for SimplePie data, or TYPE_IMAGE for image data
         */
        public function __construct($location, $name, $type)
        {
        }
        /**
         * Save data to the cache
         *
         * @param array|SimplePie $data Data to store in the cache. If passed a SimplePie object, only cache the $data property
         * @return bool Successfulness
         */
        public function save($data)
        {
        }
        /**
         * Retrieve the data saved to the cache
         *
         * @return array Data for SimplePie::$data
         */
        public function load()
        {
        }
        /**
         * Retrieve the last modified time for the cache
         *
         * @return int Timestamp
         */
        public function mtime()
        {
        }
        /**
         * Set the last modified time to the current time
         *
         * @return bool Success status
         */
        public function touch()
        {
        }
        /**
         * Remove the cache
         *
         * @return bool Success status
         */
        public function unlink()
        {
        }
    }
    /**
     * SimplePie
     *
     * A PHP-Based RSS and Atom Feed Framework.
     * Takes the hard work out of managing a complete RSS/Atom solution.
     *
     * Copyright (c) 2004-2016, Ryan Parman, Sam Sneddon, Ryan McCue, and contributors
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     *
     * 	* Redistributions of source code must retain the above copyright notice, this list of
     * 	  conditions and the following disclaimer.
     *
     * 	* Redistributions in binary form must reproduce the above copyright notice, this list
     * 	  of conditions and the following disclaimer in the documentation and/or other materials
     * 	  provided with the distribution.
     *
     * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used
     * 	  to endorse or promote products derived from this software without specific prior
     * 	  written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
     * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
     * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS
     * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     *
     * @package SimplePie
     * @copyright 2004-2016 Ryan Parman, Sam Sneddon, Ryan McCue
     * @author Ryan Parman
     * @author Sam Sneddon
     * @author Ryan McCue
     * @link http://simplepie.org/ SimplePie
     * @license http://www.opensource.org/licenses/bsd-license.php BSD License
     */
    /**
     * Caches data to memcached
     *
     * Registered for URLs with the "memcached" protocol
     *
     * For example, `memcached://localhost:11211/?timeout=3600&prefix=sp_` will
     * connect to memcached on `localhost` on port 11211. All tables will be
     * prefixed with `sp_` and data will expire after 3600 seconds
     *
     * @package    SimplePie
     * @subpackage Caching
     * @author     Paul L. McNeely
     * @uses       Memcached
     */
    class SimplePie_Cache_Memcached implements \SimplePie_Cache_Base
    {
        /**
         * Memcached instance
         * @var Memcached
         */
        protected $cache;
        /**
         * Options
         * @var array
         */
        protected $options;
        /**
         * Cache name
         * @var string
         */
        protected $name;
        /**
         * Create a new cache object
         * @param string $location Location string (from SimplePie::$cache_location)
         * @param string $name     Unique ID for the cache
         * @param string $type     Either TYPE_FEED for SimplePie data, or TYPE_IMAGE for image data
         */
        public function __construct($location, $name, $type)
        {
        }
        /**
         * Save data to the cache
         * @param array|SimplePie $data Data to store in the cache. If passed a SimplePie object, only cache the $data property
         * @return bool Successfulness
         */
        public function save($data)
        {
        }
        /**
         * Retrieve the data saved to the cache
         * @return array Data for SimplePie::$data
         */
        public function load()
        {
        }
        /**
         * Retrieve the last modified time for the cache
         * @return int Timestamp
         */
        public function mtime()
        {
        }
        /**
         * Set the last modified time to the current time
         * @return bool Success status
         */
        public function touch()
        {
        }
        /**
         * Remove the cache
         * @return bool Success status
         */
        public function unlink()
        {
        }
        /**
         * Set the last modified time and data to Memcached
         * @return bool Success status
         */
        private function setData($data)
        {
        }
    }
    /**
     * SimplePie
     *
     * A PHP-Based RSS and Atom Feed Framework.
     * Takes the hard work out of managing a complete RSS/Atom solution.
     *
     * Copyright (c) 2004-2016, Ryan Parman, Sam Sneddon, Ryan McCue, and contributors
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     *
     * 	* Redistributions of source code must retain the above copyright notice, this list of
     * 	  conditions and the following disclaimer.
     *
     * 	* Redistributions in binary form must reproduce the above copyright notice, this list
     * 	  of conditions and the following disclaimer in the documentation and/or other materials
     * 	  provided with the distribution.
     *
     * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used
     * 	  to endorse or promote products derived from this software without specific prior
     * 	  written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
     * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
     * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS
     * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     *
     * @package SimplePie
     * @copyright 2004-2016 Ryan Parman, Sam Sneddon, Ryan McCue
     * @author Ryan Parman
     * @author Sam Sneddon
     * @author Ryan McCue
     * @link http://simplepie.org/ SimplePie
     * @license http://www.opensource.org/licenses/bsd-license.php BSD License
     */
    /**
     * Base class for database-based caches
     *
     * @package SimplePie
     * @subpackage Caching
     */
    abstract class SimplePie_Cache_DB implements \SimplePie_Cache_Base
    {
        /**
         * Helper for database conversion
         *
         * Converts a given {@see SimplePie} object into data to be stored
         *
         * @param SimplePie $data
         * @return array First item is the serialized data for storage, second item is the unique ID for this item
         */
        protected static function prepare_simplepie_object_for_cache($data)
        {
        }
    }
    /**
     * SimplePie
     *
     * A PHP-Based RSS and Atom Feed Framework.
     * Takes the hard work out of managing a complete RSS/Atom solution.
     *
     * Copyright (c) 2004-2016, Ryan Parman, Sam Sneddon, Ryan McCue, and contributors
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     *
     * 	* Redistributions of source code must retain the above copyright notice, this list of
     * 	  conditions and the following disclaimer.
     *
     * 	* Redistributions in binary form must reproduce the above copyright notice, this list
     * 	  of conditions and the following disclaimer in the documentation and/or other materials
     * 	  provided with the distribution.
     *
     * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used
     * 	  to endorse or promote products derived from this software without specific prior
     * 	  written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
     * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
     * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS
     * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     *
     * @package SimplePie
     * @copyright 2004-2016 Ryan Parman, Sam Sneddon, Ryan McCue
     * @author Ryan Parman
     * @author Sam Sneddon
     * @author Ryan McCue
     * @link http://simplepie.org/ SimplePie
     * @license http://www.opensource.org/licenses/bsd-license.php BSD License
     */
    /**
     * Caches data to memcache
     *
     * Registered for URLs with the "memcache" protocol
     *
     * For example, `memcache://localhost:11211/?timeout=3600&prefix=sp_` will
     * connect to memcache on `localhost` on port 11211. All tables will be
     * prefixed with `sp_` and data will expire after 3600 seconds
     *
     * @package SimplePie
     * @subpackage Caching
     * @uses Memcache
     */
    class SimplePie_Cache_Memcache implements \SimplePie_Cache_Base
    {
        /**
         * Memcache instance
         *
         * @var Memcache
         */
        protected $cache;
        /**
         * Options
         *
         * @var array
         */
        protected $options;
        /**
         * Cache name
         *
         * @var string
         */
        protected $name;
        /**
         * Create a new cache object
         *
         * @param string $location Location string (from SimplePie::$cache_location)
         * @param string $name Unique ID for the cache
         * @param string $type Either TYPE_FEED for SimplePie data, or TYPE_IMAGE for image data
         */
        public function __construct($location, $name, $type)
        {
        }
        /**
         * Save data to the cache
         *
         * @param array|SimplePie $data Data to store in the cache. If passed a SimplePie object, only cache the $data property
         * @return bool Successfulness
         */
        public function save($data)
        {
        }
        /**
         * Retrieve the data saved to the cache
         *
         * @return array Data for SimplePie::$data
         */
        public function load()
        {
        }
        /**
         * Retrieve the last modified time for the cache
         *
         * @return int Timestamp
         */
        public function mtime()
        {
        }
        /**
         * Set the last modified time to the current time
         *
         * @return bool Success status
         */
        public function touch()
        {
        }
        /**
         * Remove the cache
         *
         * @return bool Success status
         */
        public function unlink()
        {
        }
    }
    /**
     * SimplePie
     *
     * A PHP-Based RSS and Atom Feed Framework.
     * Takes the hard work out of managing a complete RSS/Atom solution.
     *
     * Copyright (c) 2004-2016, Ryan Parman, Sam Sneddon, Ryan McCue, and contributors
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     *
     * 	* Redistributions of source code must retain the above copyright notice, this list of
     * 	  conditions and the following disclaimer.
     *
     * 	* Redistributions in binary form must reproduce the above copyright notice, this list
     * 	  of conditions and the following disclaimer in the documentation and/or other materials
     * 	  provided with the distribution.
     *
     * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used
     * 	  to endorse or promote products derived from this software without specific prior
     * 	  written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
     * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
     * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS
     * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     *
     * @package SimplePie
     * @copyright 2004-2016 Ryan Parman, Sam Sneddon, Ryan McCue
     * @author Ryan Parman
     * @author Sam Sneddon
     * @author Ryan McCue
     * @link http://simplepie.org/ SimplePie
     * @license http://www.opensource.org/licenses/bsd-license.php BSD License
     */
    /**
     * Caches data to a MySQL database
     *
     * Registered for URLs with the "mysql" protocol
     *
     * For example, `mysql://root:password@localhost:3306/mydb?prefix=sp_` will
     * connect to the `mydb` database on `localhost` on port 3306, with the user
     * `root` and the password `password`. All tables will be prefixed with `sp_`
     *
     * @package SimplePie
     * @subpackage Caching
     */
    class SimplePie_Cache_MySQL extends \SimplePie_Cache_DB
    {
        /**
         * PDO instance
         *
         * @var PDO
         */
        protected $mysql;
        /**
         * Options
         *
         * @var array
         */
        protected $options;
        /**
         * Cache ID
         *
         * @var string
         */
        protected $id;
        /**
         * Create a new cache object
         *
         * @param string $location Location string (from SimplePie::$cache_location)
         * @param string $name Unique ID for the cache
         * @param string $type Either TYPE_FEED for SimplePie data, or TYPE_IMAGE for image data
         */
        public function __construct($location, $name, $type)
        {
        }
        /**
         * Save data to the cache
         *
         * @param array|SimplePie $data Data to store in the cache. If passed a SimplePie object, only cache the $data property
         * @return bool Successfulness
         */
        public function save($data)
        {
        }
        /**
         * Retrieve the data saved to the cache
         *
         * @return array Data for SimplePie::$data
         */
        public function load()
        {
        }
        /**
         * Retrieve the last modified time for the cache
         *
         * @return int Timestamp
         */
        public function mtime()
        {
        }
        /**
         * Set the last modified time to the current time
         *
         * @return bool Success status
         */
        public function touch()
        {
        }
        /**
         * Remove the cache
         *
         * @return bool Success status
         */
        public function unlink()
        {
        }
    }
    /**
     * SimplePie
     *
     * A PHP-Based RSS and Atom Feed Framework.
     * Takes the hard work out of managing a complete RSS/Atom solution.
     *
     * Copyright (c) 2004-2016, Ryan Parman, Sam Sneddon, Ryan McCue, and contributors
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     *
     * 	* Redistributions of source code must retain the above copyright notice, this list of
     * 	  conditions and the following disclaimer.
     *
     * 	* Redistributions in binary form must reproduce the above copyright notice, this list
     * 	  of conditions and the following disclaimer in the documentation and/or other materials
     * 	  provided with the distribution.
     *
     * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used
     * 	  to endorse or promote products derived from this software without specific prior
     * 	  written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
     * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
     * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS
     * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     *
     * @package SimplePie
     * @copyright 2004-2016 Ryan Parman, Sam Sneddon, Ryan McCue
     * @author Ryan Parman
     * @author Sam Sneddon
     * @author Ryan McCue
     * @link http://simplepie.org/ SimplePie
     * @license http://www.opensource.org/licenses/bsd-license.php BSD License
     */
    /**
     * Date Parser
     *
     * @package SimplePie
     * @subpackage Parsing
     */
    class SimplePie_Parse_Date
    {
        /**
         * Input data
         *
         * @access protected
         * @var string
         */
        var $date;
        /**
         * List of days, calendar day name => ordinal day number in the week
         *
         * @access protected
         * @var array
         */
        var $day = array(
            // English
            'mon' => 1,
            'monday' => 1,
            'tue' => 2,
            'tuesday' => 2,
            'wed' => 3,
            'wednesday' => 3,
            'thu' => 4,
            'thursday' => 4,
            'fri' => 5,
            'friday' => 5,
            'sat' => 6,
            'saturday' => 6,
            'sun' => 7,
            'sunday' => 7,
            // Dutch
            'maandag' => 1,
            'dinsdag' => 2,
            'woensdag' => 3,
            'donderdag' => 4,
            'vrijdag' => 5,
            'zaterdag' => 6,
            'zondag' => 7,
            // French
            'lundi' => 1,
            'mardi' => 2,
            'mercredi' => 3,
            'jeudi' => 4,
            'vendredi' => 5,
            'samedi' => 6,
            'dimanche' => 7,
            // German
            'montag' => 1,
            'mo' => 1,
            'dienstag' => 2,
            'di' => 2,
            'mittwoch' => 3,
            'mi' => 3,
            'donnerstag' => 4,
            'do' => 4,
            'freitag' => 5,
            'fr' => 5,
            'samstag' => 6,
            'sa' => 6,
            'sonnabend' => 6,
            // AFAIK no short form for sonnabend
            'so' => 7,
            'sonntag' => 7,
            // Italian
            'lunedì' => 1,
            'martedì' => 2,
            'mercoledì' => 3,
            'giovedì' => 4,
            'venerdì' => 5,
            'sabato' => 6,
            'domenica' => 7,
            // Spanish
            'lunes' => 1,
            'martes' => 2,
            'miércoles' => 3,
            'jueves' => 4,
            'viernes' => 5,
            'sábado' => 6,
            'domingo' => 7,
            // Finnish
            'maanantai' => 1,
            'tiistai' => 2,
            'keskiviikko' => 3,
            'torstai' => 4,
            'perjantai' => 5,
            'lauantai' => 6,
            'sunnuntai' => 7,
            // Hungarian
            'hétfő' => 1,
            'kedd' => 2,
            'szerda' => 3,
            'csütörtok' => 4,
            'péntek' => 5,
            'szombat' => 6,
            'vasárnap' => 7,
            // Greek
            'Δευ' => 1,
            'Τρι' => 2,
            'Τετ' => 3,
            'Πεμ' => 4,
            'Παρ' => 5,
            'Σαβ' => 6,
            'Κυρ' => 7,
            // Russian
            'Пн.' => 1,
            'Вт.' => 2,
            'Ср.' => 3,
            'Чт.' => 4,
            'Пт.' => 5,
            'Сб.' => 6,
            'Вс.' => 7,
        );
        /**
         * List of months, calendar month name => calendar month number
         *
         * @access protected
         * @var array
         */
        var $month = array(
            // English
            'jan' => 1,
            'january' => 1,
            'feb' => 2,
            'february' => 2,
            'mar' => 3,
            'march' => 3,
            'apr' => 4,
            'april' => 4,
            'may' => 5,
            // No long form of May
            'jun' => 6,
            'june' => 6,
            'jul' => 7,
            'july' => 7,
            'aug' => 8,
            'august' => 8,
            'sep' => 9,
            'september' => 9,
            'oct' => 10,
            'october' => 10,
            'nov' => 11,
            'november' => 11,
            'dec' => 12,
            'december' => 12,
            // Dutch
            'januari' => 1,
            'februari' => 2,
            'maart' => 3,
            'april' => 4,
            'mei' => 5,
            'juni' => 6,
            'juli' => 7,
            'augustus' => 8,
            'september' => 9,
            'oktober' => 10,
            'november' => 11,
            'december' => 12,
            // French
            'janvier' => 1,
            'février' => 2,
            'mars' => 3,
            'avril' => 4,
            'mai' => 5,
            'juin' => 6,
            'juillet' => 7,
            'août' => 8,
            'septembre' => 9,
            'octobre' => 10,
            'novembre' => 11,
            'décembre' => 12,
            // German
            'januar' => 1,
            'jan' => 1,
            'februar' => 2,
            'feb' => 2,
            'märz' => 3,
            'mär' => 3,
            'april' => 4,
            'apr' => 4,
            'mai' => 5,
            // no short form for may
            'juni' => 6,
            'jun' => 6,
            'juli' => 7,
            'jul' => 7,
            'august' => 8,
            'aug' => 8,
            'september' => 9,
            'sep' => 9,
            'oktober' => 10,
            'okt' => 10,
            'november' => 11,
            'nov' => 11,
            'dezember' => 12,
            'dez' => 12,
            // Italian
            'gennaio' => 1,
            'febbraio' => 2,
            'marzo' => 3,
            'aprile' => 4,
            'maggio' => 5,
            'giugno' => 6,
            'luglio' => 7,
            'agosto' => 8,
            'settembre' => 9,
            'ottobre' => 10,
            'novembre' => 11,
            'dicembre' => 12,
            // Spanish
            'enero' => 1,
            'febrero' => 2,
            'marzo' => 3,
            'abril' => 4,
            'mayo' => 5,
            'junio' => 6,
            'julio' => 7,
            'agosto' => 8,
            'septiembre' => 9,
            'setiembre' => 9,
            'octubre' => 10,
            'noviembre' => 11,
            'diciembre' => 12,
            // Finnish
            'tammikuu' => 1,
            'helmikuu' => 2,
            'maaliskuu' => 3,
            'huhtikuu' => 4,
            'toukokuu' => 5,
            'kesäkuu' => 6,
            'heinäkuu' => 7,
            'elokuu' => 8,
            'suuskuu' => 9,
            'lokakuu' => 10,
            'marras' => 11,
            'joulukuu' => 12,
            // Hungarian
            'január' => 1,
            'február' => 2,
            'március' => 3,
            'április' => 4,
            'május' => 5,
            'június' => 6,
            'július' => 7,
            'augusztus' => 8,
            'szeptember' => 9,
            'október' => 10,
            'november' => 11,
            'december' => 12,
            // Greek
            'Ιαν' => 1,
            'Φεβ' => 2,
            'Μάώ' => 3,
            'Μαώ' => 3,
            'Απρ' => 4,
            'Μάι' => 5,
            'Μαϊ' => 5,
            'Μαι' => 5,
            'Ιούν' => 6,
            'Ιον' => 6,
            'Ιούλ' => 7,
            'Ιολ' => 7,
            'Αύγ' => 8,
            'Αυγ' => 8,
            'Σεπ' => 9,
            'Οκτ' => 10,
            'Νοέ' => 11,
            'Δεκ' => 12,
            // Russian
            'Янв' => 1,
            'января' => 1,
            'Фев' => 2,
            'февраля' => 2,
            'Мар' => 3,
            'марта' => 3,
            'Апр' => 4,
            'апреля' => 4,
            'Май' => 5,
            'мая' => 5,
            'Июн' => 6,
            'июня' => 6,
            'Июл' => 7,
            'июля' => 7,
            'Авг' => 8,
            'августа' => 8,
            'Сен' => 9,
            'сентября' => 9,
            'Окт' => 10,
            'октября' => 10,
            'Ноя' => 11,
            'ноября' => 11,
            'Дек' => 12,
            'декабря' => 12,
        );
        /**
         * List of timezones, abbreviation => offset from UTC
         *
         * @access protected
         * @var array
         */
        var $timezone = array('ACDT' => 37800, 'ACIT' => 28800, 'ACST' => 34200, 'ACT' => -18000, 'ACWDT' => 35100, 'ACWST' => 31500, 'AEDT' => 39600, 'AEST' => 36000, 'AFT' => 16200, 'AKDT' => -28800, 'AKST' => -32400, 'AMDT' => 18000, 'AMT' => -14400, 'ANAST' => 46800, 'ANAT' => 43200, 'ART' => -10800, 'AZOST' => -3600, 'AZST' => 18000, 'AZT' => 14400, 'BIOT' => 21600, 'BIT' => -43200, 'BOT' => -14400, 'BRST' => -7200, 'BRT' => -10800, 'BST' => 3600, 'BTT' => 21600, 'CAST' => 18000, 'CAT' => 7200, 'CCT' => 23400, 'CDT' => -18000, 'CEDT' => 7200, 'CEST' => 7200, 'CET' => 3600, 'CGST' => -7200, 'CGT' => -10800, 'CHADT' => 49500, 'CHAST' => 45900, 'CIST' => -28800, 'CKT' => -36000, 'CLDT' => -10800, 'CLST' => -14400, 'COT' => -18000, 'CST' => -21600, 'CVT' => -3600, 'CXT' => 25200, 'DAVT' => 25200, 'DTAT' => 36000, 'EADT' => -18000, 'EAST' => -21600, 'EAT' => 10800, 'ECT' => -18000, 'EDT' => -14400, 'EEST' => 10800, 'EET' => 7200, 'EGT' => -3600, 'EKST' => 21600, 'EST' => -18000, 'FJT' => 43200, 'FKDT' => -10800, 'FKST' => -14400, 'FNT' => -7200, 'GALT' => -21600, 'GEDT' => 14400, 'GEST' => 10800, 'GFT' => -10800, 'GILT' => 43200, 'GIT' => -32400, 'GST' => 14400, 'GST' => -7200, 'GYT' => -14400, 'HAA' => -10800, 'HAC' => -18000, 'HADT' => -32400, 'HAE' => -14400, 'HAP' => -25200, 'HAR' => -21600, 'HAST' => -36000, 'HAT' => -9000, 'HAY' => -28800, 'HKST' => 28800, 'HMT' => 18000, 'HNA' => -14400, 'HNC' => -21600, 'HNE' => -18000, 'HNP' => -28800, 'HNR' => -25200, 'HNT' => -12600, 'HNY' => -32400, 'IRDT' => 16200, 'IRKST' => 32400, 'IRKT' => 28800, 'IRST' => 12600, 'JFDT' => -10800, 'JFST' => -14400, 'JST' => 32400, 'KGST' => 21600, 'KGT' => 18000, 'KOST' => 39600, 'KOVST' => 28800, 'KOVT' => 25200, 'KRAST' => 28800, 'KRAT' => 25200, 'KST' => 32400, 'LHDT' => 39600, 'LHST' => 37800, 'LINT' => 50400, 'LKT' => 21600, 'MAGST' => 43200, 'MAGT' => 39600, 'MAWT' => 21600, 'MDT' => -21600, 'MESZ' => 7200, 'MEZ' => 3600, 'MHT' => 43200, 'MIT' => -34200, 'MNST' => 32400, 'MSDT' => 14400, 'MSST' => 10800, 'MST' => -25200, 'MUT' => 14400, 'MVT' => 18000, 'MYT' => 28800, 'NCT' => 39600, 'NDT' => -9000, 'NFT' => 41400, 'NMIT' => 36000, 'NOVST' => 25200, 'NOVT' => 21600, 'NPT' => 20700, 'NRT' => 43200, 'NST' => -12600, 'NUT' => -39600, 'NZDT' => 46800, 'NZST' => 43200, 'OMSST' => 25200, 'OMST' => 21600, 'PDT' => -25200, 'PET' => -18000, 'PETST' => 46800, 'PETT' => 43200, 'PGT' => 36000, 'PHOT' => 46800, 'PHT' => 28800, 'PKT' => 18000, 'PMDT' => -7200, 'PMST' => -10800, 'PONT' => 39600, 'PST' => -28800, 'PWT' => 32400, 'PYST' => -10800, 'PYT' => -14400, 'RET' => 14400, 'ROTT' => -10800, 'SAMST' => 18000, 'SAMT' => 14400, 'SAST' => 7200, 'SBT' => 39600, 'SCDT' => 46800, 'SCST' => 43200, 'SCT' => 14400, 'SEST' => 3600, 'SGT' => 28800, 'SIT' => 28800, 'SRT' => -10800, 'SST' => -39600, 'SYST' => 10800, 'SYT' => 7200, 'TFT' => 18000, 'THAT' => -36000, 'TJT' => 18000, 'TKT' => -36000, 'TMT' => 18000, 'TOT' => 46800, 'TPT' => 32400, 'TRUT' => 36000, 'TVT' => 43200, 'TWT' => 28800, 'UYST' => -7200, 'UYT' => -10800, 'UZT' => 18000, 'VET' => -14400, 'VLAST' => 39600, 'VLAT' => 36000, 'VOST' => 21600, 'VUT' => 39600, 'WAST' => 7200, 'WAT' => 3600, 'WDT' => 32400, 'WEST' => 3600, 'WFT' => 43200, 'WIB' => 25200, 'WIT' => 32400, 'WITA' => 28800, 'WKST' => 18000, 'WST' => 28800, 'YAKST' => 36000, 'YAKT' => 32400, 'YAPT' => 36000, 'YEKST' => 21600, 'YEKT' => 18000);
        /**
         * Cached PCRE for SimplePie_Parse_Date::$day
         *
         * @access protected
         * @var string
         */
        var $day_pcre;
        /**
         * Cached PCRE for SimplePie_Parse_Date::$month
         *
         * @access protected
         * @var string
         */
        var $month_pcre;
        /**
         * Array of user-added callback methods
         *
         * @access private
         * @var array
         */
        var $built_in = array();
        /**
         * Array of user-added callback methods
         *
         * @access private
         * @var array
         */
        var $user = array();
        /**
         * Create new SimplePie_Parse_Date object, and set self::day_pcre,
         * self::month_pcre, and self::built_in
         *
         * @access private
         */
        public function __construct()
        {
        }
        /**
         * Get the object
         *
         * @access public
         */
        public static function get()
        {
        }
        /**
         * Parse a date
         *
         * @final
         * @access public
         * @param string $date Date to parse
         * @return int Timestamp corresponding to date string, or false on failure
         */
        public function parse($date)
        {
        }
        /**
         * Add a callback method to parse a date
         *
         * @final
         * @access public
         * @param callback $callback
         */
        public function add_callback($callback)
        {
        }
        /**
         * Parse a superset of W3C-DTF (allows hyphens and colons to be omitted, as
         * well as allowing any of upper or lower case "T", horizontal tabs, or
         * spaces to be used as the time separator (including more than one))
         *
         * @access protected
         * @return int Timestamp
         */
        public function date_w3cdtf($date)
        {
        }
        /**
         * Remove RFC822 comments
         *
         * @access protected
         * @param string $data Data to strip comments from
         * @return string Comment stripped string
         */
        public function remove_rfc2822_comments($string)
        {
        }
        /**
         * Parse RFC2822's date format
         *
         * @access protected
         * @return int Timestamp
         */
        public function date_rfc2822($date)
        {
        }
        /**
         * Parse RFC850's date format
         *
         * @access protected
         * @return int Timestamp
         */
        public function date_rfc850($date)
        {
        }
        /**
         * Parse C99's asctime()'s date format
         *
         * @access protected
         * @return int Timestamp
         */
        public function date_asctime($date)
        {
        }
        /**
         * Parse dates using strtotime()
         *
         * @access protected
         * @return int Timestamp
         */
        public function date_strtotime($date)
        {
        }
    }
    /**
     * SimplePie
     *
     * A PHP-Based RSS and Atom Feed Framework.
     * Takes the hard work out of managing a complete RSS/Atom solution.
     *
     * Copyright (c) 2004-2016, Ryan Parman, Sam Sneddon, Ryan McCue, and contributors
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     *
     * 	* Redistributions of source code must retain the above copyright notice, this list of
     * 	  conditions and the following disclaimer.
     *
     * 	* Redistributions in binary form must reproduce the above copyright notice, this list
     * 	  of conditions and the following disclaimer in the documentation and/or other materials
     * 	  provided with the distribution.
     *
     * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used
     * 	  to endorse or promote products derived from this software without specific prior
     * 	  written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
     * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
     * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS
     * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
     * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     *
     * @package SimplePie
     * @copyright 2004-2016 Ryan Parman, Sam Sneddon, Ryan McCue
     * @author Ryan Parman
     * @author Sam Sneddon
     * @author Ryan McCue
     * @link http://simplepie.org/ SimplePie
     * @license http://www.opensource.org/licenses/bsd-license.php BSD License
     */
    /**
     * Handles creating objects and calling methods
     *
     * Access this via {@see SimplePie::get_registry()}
     *
     * @package SimplePie
     */
    class SimplePie_Registry
    {
        /**
         * Default class mapping
         *
         * Overriding classes *must* subclass these.
         *
         * @var array
         */
        protected $default = array('Cache' => 'SimplePie_Cache', 'Locator' => 'SimplePie_Locator', 'Parser' => 'SimplePie_Parser', 'File' => 'SimplePie_File', 'Sanitize' => 'SimplePie_Sanitize', 'Item' => 'SimplePie_Item', 'Author' => 'SimplePie_Author', 'Category' => 'SimplePie_Category', 'Enclosure' => 'SimplePie_Enclosure', 'Caption' => 'SimplePie_Caption', 'Copyright' => 'SimplePie_Copyright', 'Credit' => 'SimplePie_Credit', 'Rating' => 'SimplePie_Rating', 'Restriction' => 'SimplePie_Restriction', 'Content_Type_Sniffer' => 'SimplePie_Content_Type_Sniffer', 'Source' => 'SimplePie_Source', 'Misc' => 'SimplePie_Misc', 'XML_Declaration_Parser' => 'SimplePie_XML_Declaration_Parser', 'Parse_Date' => 'SimplePie_Parse_Date');
        /**
         * Class mapping
         *
         * @see register()
         * @var array
         */
        protected $classes = array();
        /**
         * Legacy classes
         *
         * @see register()
         * @var array
         */
        protected $legacy = array();
        /**
         * Constructor
         *
         * No-op
         */
        public function __construct()
        {
        }
        /**
         * Register a class
         *
         * @param string $type See {@see $default} for names
         * @param string $class Class name, must subclass the corresponding default
         * @param bool $legacy Whether to enable legacy support for this class
         * @return bool Successfulness
         */
        public function register($type, $class, $legacy = \false)
        {
        }
        /**
         * Get the class registered for a type
         *
         * Where possible, use {@see create()} or {@see call()} instead
         *
         * @param string $type
         * @return string|null
         */
        public function get_class($type)
        {
        }
        /**
         * Create a new instance of a given type
         *
         * @param string $type
         * @param array $parameters Parameters to pass to the constructor
         * @return object Instance of class
         */
        public function &create($type, $parameters = array())
        {
        }
        /**
         * Call a static method for a type
         *
         * @param string $type
         * @param string $method
         * @param array $parameters
         * @return mixed
         */
        public function &call($type, $method, $parameters = array())
        {
        }
    }
    /**
     * Plugin API: WP_Hook class
     *
     * @package WordPress
     * @subpackage Plugin
     * @since 4.7.0
     */
    /**
     * Core class used to implement action and filter hook functionality.
     *
     * @since 4.7.0
     *
     * @see Iterator
     * @see ArrayAccess
     */
    final class WP_Hook implements \Iterator, \ArrayAccess
    {
        /**
         * Hook callbacks.
         *
         * @since 4.7.0
         * @var array
         */
        public $callbacks = array();
        /**
         * The priority keys of actively running iterations of a hook.
         *
         * @since 4.7.0
         * @var array
         */
        private $iterations = array();
        /**
         * The current priority of actively running iterations of a hook.
         *
         * @since 4.7.0
         * @var array
         */
        private $current_priority = array();
        /**
         * Number of levels this hook can be recursively called.
         *
         * @since 4.7.0
         * @var int
         */
        private $nesting_level = 0;
        /**
         * Flag for if we're currently doing an action, rather than a filter.
         *
         * @since 4.7.0
         * @var bool
         */
        private $doing_action = \false;
        /**
         * Adds a callback function to a filter hook.
         *
         * @since 4.7.0
         *
         * @param string   $hook_name     The name of the filter to add the callback to.
         * @param callable $callback      The callback to be run when the filter is applied.
         * @param int      $priority      The order in which the functions associated with a particular filter
         *                                are executed. Lower numbers correspond with earlier execution,
         *                                and functions with the same priority are executed in the order
         *                                in which they were added to the filter.
         * @param int      $accepted_args The number of arguments the function accepts.
         */
        public function add_filter($hook_name, $callback, $priority, $accepted_args)
        {
        }
        /**
         * Handles resetting callback priority keys mid-iteration.
         *
         * @since 4.7.0
         *
         * @param false|int $new_priority     Optional. The priority of the new filter being added. Default false,
         *                                    for no priority being added.
         * @param bool      $priority_existed Optional. Flag for whether the priority already existed before the new
         *                                    filter was added. Default false.
         */
        private function resort_active_iterations($new_priority = \false, $priority_existed = \false)
        {
        }
        /**
         * Removes a callback function from a filter hook.
         *
         * @since 4.7.0
         *
         * @param string                $hook_name The filter hook to which the function to be removed is hooked.
         * @param callable|string|array $callback  The callback to be removed from running when the filter is applied.
         *                                         This method can be called unconditionally to speculatively remove
         *                                         a callback that may or may not exist.
         * @param int                   $priority  The exact priority used when adding the original filter callback.
         * @return bool Whether the callback existed before it was removed.
         */
        public function remove_filter($hook_name, $callback, $priority)
        {
        }
        /**
         * Checks if a specific callback has been registered for this hook.
         *
         * When using the `$callback` argument, this function may return a non-boolean value
         * that evaluates to false (e.g. 0), so use the `===` operator for testing the return value.
         *
         * @since 4.7.0
         *
         * @param string                      $hook_name Optional. The name of the filter hook. Default empty.
         * @param callable|string|array|false $callback  Optional. The callback to check for.
         *                                               This method can be called unconditionally to speculatively check
         *                                               a callback that may or may not exist. Default false.
         * @return bool|int If `$callback` is omitted, returns boolean for whether the hook has
         *                  anything registered. When checking a specific function, the priority
         *                  of that hook is returned, or false if the function is not attached.
         */
        public function has_filter($hook_name = '', $callback = \false)
        {
        }
        /**
         * Checks if any callbacks have been registered for this hook.
         *
         * @since 4.7.0
         *
         * @return bool True if callbacks have been registered for the current hook, otherwise false.
         */
        public function has_filters()
        {
        }
        /**
         * Removes all callbacks from the current filter.
         *
         * @since 4.7.0
         *
         * @param int|false $priority Optional. The priority number to remove. Default false.
         */
        public function remove_all_filters($priority = \false)
        {
        }
        /**
         * Calls the callback functions that have been added to a filter hook.
         *
         * @since 4.7.0
         *
         * @param mixed $value The value to filter.
         * @param array $args  Additional parameters to pass to the callback functions.
         *                     This array is expected to include $value at index 0.
         * @return mixed The filtered value after all hooked functions are applied to it.
         */
        public function apply_filters($value, $args)
        {
        }
        /**
         * Calls the callback functions that have been added to an action hook.
         *
         * @since 4.7.0
         *
         * @param array $args Parameters to pass to the callback functions.
         */
        public function do_action($args)
        {
        }
        /**
         * Processes the functions hooked into the 'all' hook.
         *
         * @since 4.7.0
         *
         * @param array $args Arguments to pass to the hook callbacks. Passed by reference.
         */
        public function do_all_hook(&$args)
        {
        }
        /**
         * Return the current priority level of the currently running iteration of the hook.
         *
         * @since 4.7.0
         *
         * @return int|false If the hook is running, return the current priority level.
         *                   If it isn't running, return false.
         */
        public function current_priority()
        {
        }
        /**
         * Normalizes filters set up before WordPress has initialized to WP_Hook objects.
         *
         * The `$filters` parameter should be an array keyed by hook name, with values
         * containing either:
         *
         *  - A `WP_Hook` instance
         *  - An array of callbacks keyed by their priorities
         *
         * Examples:
         *
         *     $filters = array(
         *         'wp_fatal_error_handler_enabled' => array(
         *             10 => array(
         *                 array(
         *                     'accepted_args' => 0,
         *                     'function'      => function() {
         *                         return false;
         *                     },
         *                 ),
         *             ),
         *         ),
         *     );
         *
         * @since 4.7.0
         *
         * @param array $filters Filters to normalize. See documentation above for details.
         * @return WP_Hook[] Array of normalized filters.
         */
        public static function build_preinitialized_hooks($filters)
        {
        }
        /**
         * Determines whether an offset value exists.
         *
         * @since 4.7.0
         *
         * @link https://www.php.net/manual/en/arrayaccess.offsetexists.php
         *
         * @param mixed $offset An offset to check for.
         * @return bool True if the offset exists, false otherwise.
         */
        #[\ReturnTypeWillChange]
        public function offsetExists($offset)
        {
        }
        /**
         * Retrieves a value at a specified offset.
         *
         * @since 4.7.0
         *
         * @link https://www.php.net/manual/en/arrayaccess.offsetget.php
         *
         * @param mixed $offset The offset to retrieve.
         * @return mixed If set, the value at the specified offset, null otherwise.
         */
        #[\ReturnTypeWillChange]
        public function offsetGet($offset)
        {
        }
        /**
         * Sets a value at a specified offset.
         *
         * @since 4.7.0
         *
         * @link https://www.php.net/manual/en/arrayaccess.offsetset.php
         *
         * @param mixed $offset The offset to assign the value to.
         * @param mixed $value The value to set.
         */
        #[\ReturnTypeWillChange]
        public function offsetSet($offset, $value)
        {
        }
        /**
         * Unsets a specified offset.
         *
         * @since 4.7.0
         *
         * @link https://www.php.net/manual/en/arrayaccess.offsetunset.php
         *
         * @param mixed $offset The offset to unset.
         */
        #[\ReturnTypeWillChange]
        public function offsetUnset($offset)
        {
        }
        /**
         * Returns the current element.
         *
         * @since 4.7.0
         *
         * @link https://www.php.net/manual/en/iterator.current.php
         *
         * @return array Of callbacks at current priority.
         */
        #[\ReturnTypeWillChange]
        public function current()
        {
        }
        /**
         * Moves forward to the next element.
         *
         * @since 4.7.0
         *
         * @link https://www.php.net/manual/en/iterator.next.php
         *
         * @return array Of callbacks at next priority.
         */
        #[\ReturnTypeWillChange]
        public function next()
        {
        }
        /**
         * Returns the key of the current element.
         *
         * @since 4.7.0
         *
         * @link https://www.php.net/manual/en/iterator.key.php
         *
         * @return mixed Returns current priority on success, or NULL on failure
         */
        #[\ReturnTypeWillChange]
        public function key()
        {
        }
        /**
         * Checks if current position is valid.
         *
         * @since 4.7.0
         *
         * @link https://www.php.net/manual/en/iterator.valid.php
         *
         * @return bool Whether the current position is valid.
         */
        #[\ReturnTypeWillChange]
        public function valid()
        {
        }
        /**
         * Rewinds the Iterator to the first element.
         *
         * @since 4.7.0
         *
         * @link https://www.php.net/manual/en/iterator.rewind.php
         */
        #[\ReturnTypeWillChange]
        public function rewind()
        {
        }
    }
    /**
     * Site API: WP_Site class
     *
     * @package WordPress
     * @subpackage Multisite
     * @since 4.5.0
     */
    /**
     * Core class used for interacting with a multisite site.
     *
     * This class is used during load to populate the `$current_blog` global and
     * setup the current site.
     *
     * @since 4.5.0
     *
     * @property int    $id
     * @property int    $network_id
     * @property string $blogname
     * @property string $siteurl
     * @property int    $post_count
     * @property string $home
     */
    final class WP_Site
    {
        /**
         * Site ID.
         *
         * Named "blog" vs. "site" for legacy reasons.
         *
         * A numeric string, for compatibility reasons.
         *
         * @since 4.5.0
         * @var string
         */
        public $blog_id;
        /**
         * Domain of the site.
         *
         * @since 4.5.0
         * @var string
         */
        public $domain = '';
        /**
         * Path of the site.
         *
         * @since 4.5.0
         * @var string
         */
        public $path = '';
        /**
         * The ID of the site's parent network.
         *
         * Named "site" vs. "network" for legacy reasons. An individual site's "site" is
         * its network.
         *
         * A numeric string, for compatibility reasons.
         *
         * @since 4.5.0
         * @var string
         */
        public $site_id = '0';
        /**
         * The date and time on which the site was created or registered.
         *
         * @since 4.5.0
         * @var string Date in MySQL's datetime format.
         */
        public $registered = '0000-00-00 00:00:00';
        /**
         * The date and time on which site settings were last updated.
         *
         * @since 4.5.0
         * @var string Date in MySQL's datetime format.
         */
        public $last_updated = '0000-00-00 00:00:00';
        /**
         * Whether the site should be treated as public.
         *
         * A numeric string, for compatibility reasons.
         *
         * @since 4.5.0
         * @var string
         */
        public $public = '1';
        /**
         * Whether the site should be treated as archived.
         *
         * A numeric string, for compatibility reasons.
         *
         * @since 4.5.0
         * @var string
         */
        public $archived = '0';
        /**
         * Whether the site should be treated as mature.
         *
         * Handling for this does not exist throughout WordPress core, but custom
         * implementations exist that require the property to be present.
         *
         * A numeric string, for compatibility reasons.
         *
         * @since 4.5.0
         * @var string
         */
        public $mature = '0';
        /**
         * Whether the site should be treated as spam.
         *
         * A numeric string, for compatibility reasons.
         *
         * @since 4.5.0
         * @var string
         */
        public $spam = '0';
        /**
         * Whether the site should be treated as deleted.
         *
         * A numeric string, for compatibility reasons.
         *
         * @since 4.5.0
         * @var string
         */
        public $deleted = '0';
        /**
         * The language pack associated with this site.
         *
         * A numeric string, for compatibility reasons.
         *
         * @since 4.5.0
         * @var string
         */
        public $lang_id = '0';
        /**
         * Retrieves a site from the database by its ID.
         *
         * @since 4.5.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param int $site_id The ID of the site to retrieve.
         * @return WP_Site|false The site's object if found. False if not.
         */
        public static function get_instance($site_id)
        {
        }
        /**
         * Creates a new WP_Site object.
         *
         * Will populate object properties from the object provided and assign other
         * default properties based on that information.
         *
         * @since 4.5.0
         *
         * @param WP_Site|object $site A site object.
         */
        public function __construct($site)
        {
        }
        /**
         * Converts an object to array.
         *
         * @since 4.6.0
         *
         * @return array Object as array.
         */
        public function to_array()
        {
        }
        /**
         * Getter.
         *
         * Allows current multisite naming conventions when getting properties.
         * Allows access to extended site properties.
         *
         * @since 4.6.0
         *
         * @param string $key Property to get.
         * @return mixed Value of the property. Null if not available.
         */
        public function __get($key)
        {
        }
        /**
         * Isset-er.
         *
         * Allows current multisite naming conventions when checking for properties.
         * Checks for extended site properties.
         *
         * @since 4.6.0
         *
         * @param string $key Property to check if set.
         * @return bool Whether the property is set.
         */
        public function __isset($key)
        {
        }
        /**
         * Setter.
         *
         * Allows current multisite naming conventions while setting properties.
         *
         * @since 4.6.0
         *
         * @param string $key   Property to set.
         * @param mixed  $value Value to assign to the property.
         */
        public function __set($key, $value)
        {
        }
        /**
         * Retrieves the details for this site.
         *
         * This method is used internally to lazy-load the extended properties of a site.
         *
         * @since 4.6.0
         *
         * @see WP_Site::__get()
         *
         * @return stdClass A raw site object with all details included.
         */
        private function get_details()
        {
        }
    }
    /**
     * Post API: Walker_Page class
     *
     * @package WordPress
     * @subpackage Template
     * @since 4.4.0
     */
    /**
     * Core walker class used to create an HTML list of pages.
     *
     * @since 2.1.0
     *
     * @see Walker
     */
    class Walker_Page extends \Walker
    {
        /**
         * What the class handles.
         *
         * @since 2.1.0
         * @var string
         *
         * @see Walker::$tree_type
         */
        public $tree_type = 'page';
        /**
         * Database fields to use.
         *
         * @since 2.1.0
         * @var string[]
         *
         * @see Walker::$db_fields
         * @todo Decouple this.
         */
        public $db_fields = array('parent' => 'post_parent', 'id' => 'ID');
        /**
         * Outputs the beginning of the current level in the tree before elements are output.
         *
         * @since 2.1.0
         *
         * @see Walker::start_lvl()
         *
         * @param string $output Used to append additional content (passed by reference).
         * @param int    $depth  Optional. Depth of page. Used for padding. Default 0.
         * @param array  $args   Optional. Arguments for outputting the next level.
         *                       Default empty array.
         */
        public function start_lvl(&$output, $depth = 0, $args = array())
        {
        }
        /**
         * Outputs the end of the current level in the tree after elements are output.
         *
         * @since 2.1.0
         *
         * @see Walker::end_lvl()
         *
         * @param string $output Used to append additional content (passed by reference).
         * @param int    $depth  Optional. Depth of page. Used for padding. Default 0.
         * @param array  $args   Optional. Arguments for outputting the end of the current level.
         *                       Default empty array.
         */
        public function end_lvl(&$output, $depth = 0, $args = array())
        {
        }
        /**
         * Outputs the beginning of the current element in the tree.
         *
         * @see Walker::start_el()
         * @since 2.1.0
         * @since 5.9.0 Renamed `$page` to `$data_object` and `$current_page` to `$current_object_id`
         *              to match parent class for PHP 8 named parameter support.
         *
         * @param string  $output            Used to append additional content. Passed by reference.
         * @param WP_Post $data_object       Page data object.
         * @param int     $depth             Optional. Depth of page. Used for padding. Default 0.
         * @param array   $args              Optional. Array of arguments. Default empty array.
         * @param int     $current_object_id Optional. ID of the current page. Default 0.
         */
        public function start_el(&$output, $data_object, $depth = 0, $args = array(), $current_object_id = 0)
        {
        }
        /**
         * Outputs the end of the current element in the tree.
         *
         * @since 2.1.0
         * @since 5.9.0 Renamed `$page` to `$data_object` to match parent class for PHP 8 named parameter support.
         *
         * @see Walker::end_el()
         *
         * @param string  $output      Used to append additional content. Passed by reference.
         * @param WP_Post $data_object Page data object. Not used.
         * @param int     $depth       Optional. Depth of page. Default 0 (unused).
         * @param array   $args        Optional. Array of arguments. Default empty array.
         */
        public function end_el(&$output, $data_object, $depth = 0, $args = array())
        {
        }
    }
    /**
     * Dependencies API: WP_Scripts class
     *
     * @since 2.6.0
     *
     * @package WordPress
     * @subpackage Dependencies
     */
    /**
     * Core class used to register scripts.
     *
     * @since 2.1.0
     *
     * @see WP_Dependencies
     */
    class WP_Scripts extends \WP_Dependencies
    {
        /**
         * Base URL for scripts.
         *
         * Full URL with trailing slash.
         *
         * @since 2.6.0
         * @var string
         */
        public $base_url;
        /**
         * URL of the content directory.
         *
         * @since 2.8.0
         * @var string
         */
        public $content_url;
        /**
         * Default version string for scripts.
         *
         * @since 2.6.0
         * @var string
         */
        public $default_version;
        /**
         * Holds handles of scripts which are enqueued in footer.
         *
         * @since 2.8.0
         * @var array
         */
        public $in_footer = array();
        /**
         * Holds a list of script handles which will be concatenated.
         *
         * @since 2.8.0
         * @var string
         */
        public $concat = '';
        /**
         * Holds a string which contains script handles and their version.
         *
         * @since 2.8.0
         * @deprecated 3.4.0
         * @var string
         */
        public $concat_version = '';
        /**
         * Whether to perform concatenation.
         *
         * @since 2.8.0
         * @var bool
         */
        public $do_concat = \false;
        /**
         * Holds HTML markup of scripts and additional data if concatenation
         * is enabled.
         *
         * @since 2.8.0
         * @var string
         */
        public $print_html = '';
        /**
         * Holds inline code if concatenation is enabled.
         *
         * @since 2.8.0
         * @var string
         */
        public $print_code = '';
        /**
         * Holds a list of script handles which are not in the default directory
         * if concatenation is enabled.
         *
         * Unused in core.
         *
         * @since 2.8.0
         * @var string
         */
        public $ext_handles = '';
        /**
         * Holds a string which contains handles and versions of scripts which
         * are not in the default directory if concatenation is enabled.
         *
         * Unused in core.
         *
         * @since 2.8.0
         * @var string
         */
        public $ext_version = '';
        /**
         * List of default directories.
         *
         * @since 2.8.0
         * @var array
         */
        public $default_dirs;
        /**
         * Holds a string which contains the type attribute for script tag.
         *
         * If the active theme does not declare HTML5 support for 'script',
         * then it initializes as `type='text/javascript'`.
         *
         * @since 5.3.0
         * @var string
         */
        private $type_attr = '';
        /**
         * Constructor.
         *
         * @since 2.6.0
         */
        public function __construct()
        {
        }
        /**
         * Initialize the class.
         *
         * @since 3.4.0
         */
        public function init()
        {
        }
        /**
         * Prints scripts.
         *
         * Prints the scripts passed to it or the print queue. Also prints all necessary dependencies.
         *
         * @since 2.1.0
         * @since 2.8.0 Added the `$group` parameter.
         *
         * @param string|string[]|false $handles Optional. Scripts to be printed: queue (false),
         *                                       single script (string), or multiple scripts (array of strings).
         *                                       Default false.
         * @param int|false             $group   Optional. Group level: level (int), no groups (false).
         *                                       Default false.
         * @return string[] Handles of scripts that have been printed.
         */
        public function print_scripts($handles = \false, $group = \false)
        {
        }
        /**
         * Prints extra scripts of a registered script.
         *
         * @since 2.1.0
         * @since 2.8.0 Added the `$display` parameter.
         * @deprecated 3.3.0
         *
         * @see print_extra_script()
         *
         * @param string $handle  The script's registered handle.
         * @param bool   $display Optional. Whether to print the extra script
         *                        instead of just returning it. Default true.
         * @return bool|string|void Void if no data exists, extra scripts if `$display` is true,
         *                          true otherwise.
         */
        public function print_scripts_l10n($handle, $display = \true)
        {
        }
        /**
         * Prints extra scripts of a registered script.
         *
         * @since 3.3.0
         *
         * @param string $handle  The script's registered handle.
         * @param bool   $display Optional. Whether to print the extra script
         *                        instead of just returning it. Default true.
         * @return bool|string|void Void if no data exists, extra scripts if `$display` is true,
         *                          true otherwise.
         */
        public function print_extra_script($handle, $display = \true)
        {
        }
        /**
         * Processes a script dependency.
         *
         * @since 2.6.0
         * @since 2.8.0 Added the `$group` parameter.
         *
         * @see WP_Dependencies::do_item()
         *
         * @param string    $handle The script's registered handle.
         * @param int|false $group  Optional. Group level: level (int), no groups (false).
         *                          Default false.
         * @return bool True on success, false on failure.
         */
        public function do_item($handle, $group = \false)
        {
        }
        /**
         * Adds extra code to a registered script.
         *
         * @since 4.5.0
         *
         * @param string $handle   Name of the script to add the inline script to.
         *                         Must be lowercase.
         * @param string $data     String containing the JavaScript to be added.
         * @param string $position Optional. Whether to add the inline script
         *                         before the handle or after. Default 'after'.
         * @return bool True on success, false on failure.
         */
        public function add_inline_script($handle, $data, $position = 'after')
        {
        }
        /**
         * Prints inline scripts registered for a specific handle.
         *
         * @since 4.5.0
         *
         * @param string $handle   Name of the script to add the inline script to.
         *                         Must be lowercase.
         * @param string $position Optional. Whether to add the inline script
         *                         before the handle or after. Default 'after'.
         * @param bool   $display  Optional. Whether to print the script
         *                         instead of just returning it. Default true.
         * @return string|false Script on success, false otherwise.
         */
        public function print_inline_script($handle, $position = 'after', $display = \true)
        {
        }
        /**
         * Localizes a script, only if the script has already been added.
         *
         * @since 2.1.0
         *
         * @param string $handle      Name of the script to attach data to.
         * @param string $object_name Name of the variable that will contain the data.
         * @param array  $l10n        Array of data to localize.
         * @return bool True on success, false on failure.
         */
        public function localize($handle, $object_name, $l10n)
        {
        }
        /**
         * Sets handle group.
         *
         * @since 2.8.0
         *
         * @see WP_Dependencies::set_group()
         *
         * @param string    $handle    Name of the item. Should be unique.
         * @param bool      $recursion Internal flag that calling function was called recursively.
         * @param int|false $group     Optional. Group level: level (int), no groups (false).
         *                             Default false.
         * @return bool Not already in the group or a lower group.
         */
        public function set_group($handle, $recursion, $group = \false)
        {
        }
        /**
         * Sets a translation textdomain.
         *
         * @since 5.0.0
         * @since 5.1.0 The `$domain` parameter was made optional.
         *
         * @param string $handle Name of the script to register a translation domain to.
         * @param string $domain Optional. Text domain. Default 'default'.
         * @param string $path   Optional. The full file path to the directory containing translation files.
         * @return bool True if the text domain was registered, false if not.
         */
        public function set_translations($handle, $domain = 'default', $path = \null)
        {
        }
        /**
         * Prints translations set for a specific handle.
         *
         * @since 5.0.0
         *
         * @param string $handle  Name of the script to add the inline script to.
         *                        Must be lowercase.
         * @param bool   $display Optional. Whether to print the script
         *                        instead of just returning it. Default true.
         * @return string|false Script on success, false otherwise.
         */
        public function print_translations($handle, $display = \true)
        {
        }
        /**
         * Determines script dependencies.
         *
         * @since 2.1.0
         *
         * @see WP_Dependencies::all_deps()
         *
         * @param string|string[] $handles   Item handle (string) or item handles (array of strings).
         * @param bool            $recursion Optional. Internal flag that function is calling itself.
         *                                   Default false.
         * @param int|false       $group     Optional. Group level: level (int), no groups (false).
         *                                   Default false.
         * @return bool True on success, false on failure.
         */
        public function all_deps($handles, $recursion = \false, $group = \false)
        {
        }
        /**
         * Processes items and dependencies for the head group.
         *
         * @since 2.8.0
         *
         * @see WP_Dependencies::do_items()
         *
         * @return string[] Handles of items that have been processed.
         */
        public function do_head_items()
        {
        }
        /**
         * Processes items and dependencies for the footer group.
         *
         * @since 2.8.0
         *
         * @see WP_Dependencies::do_items()
         *
         * @return string[] Handles of items that have been processed.
         */
        public function do_footer_items()
        {
        }
        /**
         * Whether a handle's source is in a default directory.
         *
         * @since 2.8.0
         *
         * @param string $src The source of the enqueued script.
         * @return bool True if found, false if not.
         */
        public function in_default_dir($src)
        {
        }
        /**
         * Resets class properties.
         *
         * @since 2.8.0
         */
        public function reset()
        {
        }
    }
    /**
     * REST API: WP_REST_Search_Handler class
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 5.0.0
     */
    /**
     * Core base class representing a search handler for an object type in the REST API.
     *
     * @since 5.0.0
     */
    abstract class WP_REST_Search_Handler
    {
        /**
         * Field containing the IDs in the search result.
         */
        const RESULT_IDS = 'ids';
        /**
         * Field containing the total count in the search result.
         */
        const RESULT_TOTAL = 'total';
        /**
         * Object type managed by this search handler.
         *
         * @since 5.0.0
         * @var string
         */
        protected $type = '';
        /**
         * Object subtypes managed by this search handler.
         *
         * @since 5.0.0
         * @var array
         */
        protected $subtypes = array();
        /**
         * Gets the object type managed by this search handler.
         *
         * @since 5.0.0
         *
         * @return string Object type identifier.
         */
        public function get_type()
        {
        }
        /**
         * Gets the object subtypes managed by this search handler.
         *
         * @since 5.0.0
         *
         * @return array Array of object subtype identifiers.
         */
        public function get_subtypes()
        {
        }
        /**
         * Searches the object type content for a given search request.
         *
         * @since 5.0.0
         *
         * @param WP_REST_Request $request Full REST request.
         * @return array Associative array containing an `WP_REST_Search_Handler::RESULT_IDS` containing
         *               an array of found IDs and `WP_REST_Search_Handler::RESULT_TOTAL` containing the
         *               total count for the matching search results.
         */
        public abstract function search_items(\WP_REST_Request $request);
        /**
         * Prepares the search result for a given ID.
         *
         * @since 5.0.0
         * @since 5.6.0 The `$id` parameter can accept a string.
         *
         * @param int|string $id     Item ID.
         * @param array      $fields Fields to include for the item.
         * @return array Associative array containing all fields for the item.
         */
        public abstract function prepare_item($id, array $fields);
        /**
         * Prepares links for the search result of a given ID.
         *
         * @since 5.0.0
         * @since 5.6.0 The `$id` parameter can accept a string.
         *
         * @param int|string $id Item ID.
         * @return array Links for the given item.
         */
        public abstract function prepare_item_links($id);
    }
    /**
     * REST API: WP_REST_Post_Search_Handler class
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 5.0.0
     */
    /**
     * Core class representing a search handler for posts in the REST API.
     *
     * @since 5.0.0
     *
     * @see WP_REST_Search_Handler
     */
    class WP_REST_Post_Search_Handler extends \WP_REST_Search_Handler
    {
        /**
         * Constructor.
         *
         * @since 5.0.0
         */
        public function __construct()
        {
        }
        /**
         * Searches the object type content for a given search request.
         *
         * @since 5.0.0
         *
         * @param WP_REST_Request $request Full REST request.
         * @return array Associative array containing an `WP_REST_Search_Handler::RESULT_IDS` containing
         *               an array of found IDs and `WP_REST_Search_Handler::RESULT_TOTAL` containing the
         *               total count for the matching search results.
         */
        public function search_items(\WP_REST_Request $request)
        {
        }
        /**
         * Prepares the search result for a given ID.
         *
         * @since 5.0.0
         *
         * @param int   $id     Item ID.
         * @param array $fields Fields to include for the item.
         * @return array Associative array containing all fields for the item.
         */
        public function prepare_item($id, array $fields)
        {
        }
        /**
         * Prepares links for the search result of a given ID.
         *
         * @since 5.0.0
         *
         * @param int $id Item ID.
         * @return array Links for the given item.
         */
        public function prepare_item_links($id)
        {
        }
        /**
         * Overwrites the default protected title format.
         *
         * By default, WordPress will show password protected posts with a title of
         * "Protected: %s". As the REST API communicates the protected status of a post
         * in a machine readable format, we remove the "Protected: " prefix.
         *
         * @since 5.0.0
         *
         * @return string Protected title format.
         */
        public function protected_title_format()
        {
        }
        /**
         * Attempts to detect the route to access a single item.
         *
         * @since 5.0.0
         * @deprecated 5.5.0 Use rest_get_route_for_post()
         * @see rest_get_route_for_post()
         *
         * @param WP_Post $post Post object.
         * @return string REST route relative to the REST base URI, or empty string if unknown.
         */
        protected function detect_rest_item_route($post)
        {
        }
    }
    /**
     * REST API: WP_REST_Term_Search_Handler class
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 5.6.0
     */
    /**
     * Core class representing a search handler for terms in the REST API.
     *
     * @since 5.6.0
     *
     * @see WP_REST_Search_Handler
     */
    class WP_REST_Term_Search_Handler extends \WP_REST_Search_Handler
    {
        /**
         * Constructor.
         *
         * @since 5.6.0
         */
        public function __construct()
        {
        }
        /**
         * Searches the object type content for a given search request.
         *
         * @since 5.6.0
         *
         * @param WP_REST_Request $request Full REST request.
         * @return array Associative array containing an `WP_REST_Search_Handler::RESULT_IDS` containing
         *               an array of found IDs and `WP_REST_Search_Handler::RESULT_TOTAL` containing the
         *               total count for the matching search results.
         */
        public function search_items(\WP_REST_Request $request)
        {
        }
        /**
         * Prepares the search result for a given ID.
         *
         * @since 5.6.0
         *
         * @param int   $id     Item ID.
         * @param array $fields Fields to include for the item.
         * @return array Associative array containing all fields for the item.
         */
        public function prepare_item($id, array $fields)
        {
        }
        /**
         * Prepares links for the search result of a given ID.
         *
         * @since 5.6.0
         *
         * @param int $id Item ID.
         * @return array Links for the given item.
         */
        public function prepare_item_links($id)
        {
        }
    }
    /**
     * REST API: WP_REST_Post_Format_Search_Handler class
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 5.6.0
     */
    /**
     * Core class representing a search handler for post formats in the REST API.
     *
     * @since 5.6.0
     *
     * @see WP_REST_Search_Handler
     */
    class WP_REST_Post_Format_Search_Handler extends \WP_REST_Search_Handler
    {
        /**
         * Constructor.
         *
         * @since 5.6.0
         */
        public function __construct()
        {
        }
        /**
         * Searches the object type content for a given search request.
         *
         * @since 5.6.0
         *
         * @param WP_REST_Request $request Full REST request.
         * @return array Associative array containing an `WP_REST_Search_Handler::RESULT_IDS` containing
         *               an array of found IDs and `WP_REST_Search_Handler::RESULT_TOTAL` containing the
         *               total count for the matching search results.
         */
        public function search_items(\WP_REST_Request $request)
        {
        }
        /**
         * Prepares the search result for a given ID.
         *
         * @since 5.6.0
         *
         * @param string $id     Item ID, the post format slug.
         * @param array  $fields Fields to include for the item.
         * @return array Associative array containing all fields for the item.
         */
        public function prepare_item($id, array $fields)
        {
        }
        /**
         * Prepares links for the search result.
         *
         * @since 5.6.0
         *
         * @param string $id Item ID, the post format slug.
         * @return array Links for the given item.
         */
        public function prepare_item_links($id)
        {
        }
    }
    /**
     * REST API: WP_REST_Server class
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 4.4.0
     */
    /**
     * Core class used to implement the WordPress REST API server.
     *
     * @since 4.4.0
     */
    class WP_REST_Server
    {
        /**
         * Alias for GET transport method.
         *
         * @since 4.4.0
         * @var string
         */
        const READABLE = 'GET';
        /**
         * Alias for POST transport method.
         *
         * @since 4.4.0
         * @var string
         */
        const CREATABLE = 'POST';
        /**
         * Alias for POST, PUT, PATCH transport methods together.
         *
         * @since 4.4.0
         * @var string
         */
        const EDITABLE = 'POST, PUT, PATCH';
        /**
         * Alias for DELETE transport method.
         *
         * @since 4.4.0
         * @var string
         */
        const DELETABLE = 'DELETE';
        /**
         * Alias for GET, POST, PUT, PATCH & DELETE transport methods together.
         *
         * @since 4.4.0
         * @var string
         */
        const ALLMETHODS = 'GET, POST, PUT, PATCH, DELETE';
        /**
         * Namespaces registered to the server.
         *
         * @since 4.4.0
         * @var array
         */
        protected $namespaces = array();
        /**
         * Endpoints registered to the server.
         *
         * @since 4.4.0
         * @var array
         */
        protected $endpoints = array();
        /**
         * Options defined for the routes.
         *
         * @since 4.4.0
         * @var array
         */
        protected $route_options = array();
        /**
         * Caches embedded requests.
         *
         * @since 5.4.0
         * @var array
         */
        protected $embed_cache = array();
        /**
         * Instantiates the REST server.
         *
         * @since 4.4.0
         */
        public function __construct()
        {
        }
        /**
         * Checks the authentication headers if supplied.
         *
         * @since 4.4.0
         *
         * @return WP_Error|null WP_Error indicates unsuccessful login, null indicates successful
         *                       or no authentication provided
         */
        public function check_authentication()
        {
        }
        /**
         * Converts an error to a response object.
         *
         * This iterates over all error codes and messages to change it into a flat
         * array. This enables simpler client behaviour, as it is represented as a
         * list in JSON rather than an object/map.
         *
         * @since 4.4.0
         * @since 5.7.0 Converted to a wrapper of {@see rest_convert_error_to_response()}.
         *
         * @param WP_Error $error WP_Error instance.
         * @return WP_REST_Response List of associative arrays with code and message keys.
         */
        protected function error_to_response($error)
        {
        }
        /**
         * Retrieves an appropriate error representation in JSON.
         *
         * Note: This should only be used in WP_REST_Server::serve_request(), as it
         * cannot handle WP_Error internally. All callbacks and other internal methods
         * should instead return a WP_Error with the data set to an array that includes
         * a 'status' key, with the value being the HTTP status to send.
         *
         * @since 4.4.0
         *
         * @param string $code    WP_Error-style code.
         * @param string $message Human-readable message.
         * @param int    $status  Optional. HTTP status code to send. Default null.
         * @return string JSON representation of the error
         */
        protected function json_error($code, $message, $status = \null)
        {
        }
        /**
         * Handles serving a REST API request.
         *
         * Matches the current server URI to a route and runs the first matching
         * callback then outputs a JSON representation of the returned value.
         *
         * @since 4.4.0
         *
         * @see WP_REST_Server::dispatch()
         *
         * @global WP_User $current_user The currently authenticated user.
         *
         * @param string $path Optional. The request route. If not set, `$_SERVER['PATH_INFO']` will be used.
         *                     Default null.
         * @return null|false Null if not served and a HEAD request, false otherwise.
         */
        public function serve_request($path = \null)
        {
        }
        /**
         * Converts a response to data to send.
         *
         * @since 4.4.0
         * @since 5.4.0 The $embed parameter can now contain a list of link relations to include.
         *
         * @param WP_REST_Response $response Response object.
         * @param bool|string[]    $embed    Whether to embed all links, a filtered list of link relations, or no links.
         * @return array {
         *     Data with sub-requests embedded.
         *
         *     @type array $_links    Links.
         *     @type array $_embedded Embedded objects.
         * }
         */
        public function response_to_data($response, $embed)
        {
        }
        /**
         * Retrieves links from a response.
         *
         * Extracts the links from a response into a structured hash, suitable for
         * direct output.
         *
         * @since 4.4.0
         *
         * @param WP_REST_Response $response Response to extract links from.
         * @return array Map of link relation to list of link hashes.
         */
        public static function get_response_links($response)
        {
        }
        /**
         * Retrieves the CURIEs (compact URIs) used for relations.
         *
         * Extracts the links from a response into a structured hash, suitable for
         * direct output.
         *
         * @since 4.5.0
         *
         * @param WP_REST_Response $response Response to extract links from.
         * @return array Map of link relation to list of link hashes.
         */
        public static function get_compact_response_links($response)
        {
        }
        /**
         * Embeds the links from the data into the request.
         *
         * @since 4.4.0
         * @since 5.4.0 The $embed parameter can now contain a list of link relations to include.
         *
         * @param array         $data  Data from the request.
         * @param bool|string[] $embed Whether to embed all links or a filtered list of link relations.
         * @return array {
         *     Data with sub-requests embedded.
         *
         *     @type array $_links    Links.
         *     @type array $_embedded Embedded objects.
         * }
         */
        protected function embed_links($data, $embed = \true)
        {
        }
        /**
         * Wraps the response in an envelope.
         *
         * The enveloping technique is used to work around browser/client
         * compatibility issues. Essentially, it converts the full HTTP response to
         * data instead.
         *
         * @since 4.4.0
         * @since 6.0.0 The $embed parameter can now contain a list of link relations to include
         *
         * @param WP_REST_Response $response Response object.
         * @param bool|string[]    $embed    Whether to embed all links, a filtered list of link relations, or no links.
         * @return WP_REST_Response New response with wrapped data
         */
        public function envelope_response($response, $embed)
        {
        }
        /**
         * Registers a route to the server.
         *
         * @since 4.4.0
         *
         * @param string $namespace  Namespace.
         * @param string $route      The REST route.
         * @param array  $route_args Route arguments.
         * @param bool   $override   Optional. Whether the route should be overridden if it already exists.
         *                           Default false.
         */
        public function register_route($namespace, $route, $route_args, $override = \false)
        {
        }
        /**
         * Retrieves the route map.
         *
         * The route map is an associative array with path regexes as the keys. The
         * value is an indexed array with the callback function/method as the first
         * item, and a bitmask of HTTP methods as the second item (see the class
         * constants).
         *
         * Each route can be mapped to more than one callback by using an array of
         * the indexed arrays. This allows mapping e.g. GET requests to one callback
         * and POST requests to another.
         *
         * Note that the path regexes (array keys) must have @ escaped, as this is
         * used as the delimiter with preg_match()
         *
         * @since 4.4.0
         * @since 5.4.0 Add $namespace parameter.
         *
         * @param string $namespace Optionally, only return routes in the given namespace.
         * @return array `'/path/regex' => array( $callback, $bitmask )` or
         *               `'/path/regex' => array( array( $callback, $bitmask ), ...)`.
         */
        public function get_routes($namespace = '')
        {
        }
        /**
         * Retrieves namespaces registered on the server.
         *
         * @since 4.4.0
         *
         * @return string[] List of registered namespaces.
         */
        public function get_namespaces()
        {
        }
        /**
         * Retrieves specified options for a route.
         *
         * @since 4.4.0
         *
         * @param string $route Route pattern to fetch options for.
         * @return array|null Data as an associative array if found, or null if not found.
         */
        public function get_route_options($route)
        {
        }
        /**
         * Matches the request to a callback and call it.
         *
         * @since 4.4.0
         *
         * @param WP_REST_Request $request Request to attempt dispatching.
         * @return WP_REST_Response Response returned by the callback.
         */
        public function dispatch($request)
        {
        }
        /**
         * Matches a request object to its handler.
         *
         * @access private
         * @since 5.6.0
         *
         * @param WP_REST_Request $request The request object.
         * @return array|WP_Error The route and request handler on success or a WP_Error instance if no handler was found.
         */
        protected function match_request_to_handler($request)
        {
        }
        /**
         * Dispatches the request to the callback handler.
         *
         * @access private
         * @since 5.6.0
         *
         * @param WP_REST_Request $request  The request object.
         * @param string          $route    The matched route regex.
         * @param array           $handler  The matched route handler.
         * @param WP_Error|null   $response The current error object if any.
         * @return WP_REST_Response
         */
        protected function respond_to_request($request, $route, $handler, $response)
        {
        }
        /**
         * Returns if an error occurred during most recent JSON encode/decode.
         *
         * Strings to be translated will be in format like
         * "Encoding error: Maximum stack depth exceeded".
         *
         * @since 4.4.0
         *
         * @return false|string Boolean false or string error message.
         */
        protected function get_json_last_error()
        {
        }
        /**
         * Retrieves the site index.
         *
         * This endpoint describes the capabilities of the site.
         *
         * @since 4.4.0
         *
         * @param array $request {
         *     Request.
         *
         *     @type string $context Context.
         * }
         * @return WP_REST_Response The API root index data.
         */
        public function get_index($request)
        {
        }
        /**
         * Adds a link to the active theme for users who have proper permissions.
         *
         * @since 5.7.0
         *
         * @param WP_REST_Response $response REST API response.
         */
        protected function add_active_theme_link_to_index(\WP_REST_Response $response)
        {
        }
        /**
         * Exposes the site logo through the WordPress REST API.
         *
         * This is used for fetching this information when user has no rights
         * to update settings.
         *
         * @since 5.8.0
         *
         * @param WP_REST_Response $response REST API response.
         */
        protected function add_site_logo_to_index(\WP_REST_Response $response)
        {
        }
        /**
         * Exposes the site icon through the WordPress REST API.
         *
         * This is used for fetching this information when user has no rights
         * to update settings.
         *
         * @since 5.9.0
         *
         * @param WP_REST_Response $response REST API response.
         */
        protected function add_site_icon_to_index(\WP_REST_Response $response)
        {
        }
        /**
         * Exposes an image through the WordPress REST API.
         * This is used for fetching this information when user has no rights
         * to update settings.
         *
         * @since 5.9.0
         *
         * @param WP_REST_Response $response REST API response.
         * @param int              $image_id Image attachment ID.
         * @param string           $type     Type of Image.
         */
        protected function add_image_to_index(\WP_REST_Response $response, $image_id, $type)
        {
        }
        /**
         * Retrieves the index for a namespace.
         *
         * @since 4.4.0
         *
         * @param WP_REST_Request $request REST request instance.
         * @return WP_REST_Response|WP_Error WP_REST_Response instance if the index was found,
         *                                   WP_Error if the namespace isn't set.
         */
        public function get_namespace_index($request)
        {
        }
        /**
         * Retrieves the publicly-visible data for routes.
         *
         * @since 4.4.0
         *
         * @param array  $routes  Routes to get data for.
         * @param string $context Optional. Context for data. Accepts 'view' or 'help'. Default 'view'.
         * @return array[] Route data to expose in indexes, keyed by route.
         */
        public function get_data_for_routes($routes, $context = 'view')
        {
        }
        /**
         * Retrieves publicly-visible data for the route.
         *
         * @since 4.4.0
         *
         * @param string $route     Route to get data for.
         * @param array  $callbacks Callbacks to convert to data.
         * @param string $context   Optional. Context for the data. Accepts 'view' or 'help'. Default 'view'.
         * @return array|null Data for the route, or null if no publicly-visible data.
         */
        public function get_data_for_route($route, $callbacks, $context = 'view')
        {
        }
        /**
         * Gets the maximum number of requests that can be included in a batch.
         *
         * @since 5.6.0
         *
         * @return int The maximum requests.
         */
        protected function get_max_batch_size()
        {
        }
        /**
         * Serves the batch/v1 request.
         *
         * @since 5.6.0
         *
         * @param WP_REST_Request $batch_request The batch request object.
         * @return WP_REST_Response The generated response object.
         */
        public function serve_batch_request_v1(\WP_REST_Request $batch_request)
        {
        }
        /**
         * Sends an HTTP status code.
         *
         * @since 4.4.0
         *
         * @param int $code HTTP status.
         */
        protected function set_status($code)
        {
        }
        /**
         * Sends an HTTP header.
         *
         * @since 4.4.0
         *
         * @param string $key Header key.
         * @param string $value Header value.
         */
        public function send_header($key, $value)
        {
        }
        /**
         * Sends multiple HTTP headers.
         *
         * @since 4.4.0
         *
         * @param array $headers Map of header name to header value.
         */
        public function send_headers($headers)
        {
        }
        /**
         * Removes an HTTP header from the current response.
         *
         * @since 4.8.0
         *
         * @param string $key Header key.
         */
        public function remove_header($key)
        {
        }
        /**
         * Retrieves the raw request entity (body).
         *
         * @since 4.4.0
         *
         * @global string $HTTP_RAW_POST_DATA Raw post data.
         *
         * @return string Raw request data.
         */
        public static function get_raw_data()
        {
        }
        /**
         * Extracts headers from a PHP-style $_SERVER array.
         *
         * @since 4.4.0
         *
         * @param array $server Associative array similar to `$_SERVER`.
         * @return array Headers extracted from the input.
         */
        public function get_headers($server)
        {
        }
    }
    /**
     * HTTP API: WP_HTTP_Response class
     *
     * @package WordPress
     * @subpackage HTTP
     * @since 4.4.0
     */
    /**
     * Core class used to prepare HTTP responses.
     *
     * @since 4.4.0
     */
    class WP_HTTP_Response
    {
        /**
         * Response data.
         *
         * @since 4.4.0
         * @var mixed
         */
        public $data;
        /**
         * Response headers.
         *
         * @since 4.4.0
         * @var array
         */
        public $headers;
        /**
         * Response status.
         *
         * @since 4.4.0
         * @var int
         */
        public $status;
        /**
         * Constructor.
         *
         * @since 4.4.0
         *
         * @param mixed $data    Response data. Default null.
         * @param int   $status  Optional. HTTP status code. Default 200.
         * @param array $headers Optional. HTTP header map. Default empty array.
         */
        public function __construct($data = \null, $status = 200, $headers = array())
        {
        }
        /**
         * Retrieves headers associated with the response.
         *
         * @since 4.4.0
         *
         * @return array Map of header name to header value.
         */
        public function get_headers()
        {
        }
        /**
         * Sets all header values.
         *
         * @since 4.4.0
         *
         * @param array $headers Map of header name to header value.
         */
        public function set_headers($headers)
        {
        }
        /**
         * Sets a single HTTP header.
         *
         * @since 4.4.0
         *
         * @param string $key     Header name.
         * @param string $value   Header value.
         * @param bool   $replace Optional. Whether to replace an existing header of the same name.
         *                        Default true.
         */
        public function header($key, $value, $replace = \true)
        {
        }
        /**
         * Retrieves the HTTP return code for the response.
         *
         * @since 4.4.0
         *
         * @return int The 3-digit HTTP status code.
         */
        public function get_status()
        {
        }
        /**
         * Sets the 3-digit HTTP status code.
         *
         * @since 4.4.0
         *
         * @param int $code HTTP status.
         */
        public function set_status($code)
        {
        }
        /**
         * Retrieves the response data.
         *
         * @since 4.4.0
         *
         * @return mixed Response data.
         */
        public function get_data()
        {
        }
        /**
         * Sets the response data.
         *
         * @since 4.4.0
         *
         * @param mixed $data Response data.
         */
        public function set_data($data)
        {
        }
        /**
         * Retrieves the response data for JSON serialization.
         *
         * It is expected that in most implementations, this will return the same as get_data(),
         * however this may be different if you want to do custom JSON data handling.
         *
         * @since 4.4.0
         *
         * @return mixed Any JSON-serializable value.
         */
        public function jsonSerialize()
        {
        }
    }
    /**
     * REST API: WP_REST_Response class
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 4.4.0
     */
    /**
     * Core class used to implement a REST response object.
     *
     * @since 4.4.0
     *
     * @see WP_HTTP_Response
     */
    class WP_REST_Response extends \WP_HTTP_Response
    {
        /**
         * Links related to the response.
         *
         * @since 4.4.0
         * @var array
         */
        protected $links = array();
        /**
         * The route that was to create the response.
         *
         * @since 4.4.0
         * @var string
         */
        protected $matched_route = '';
        /**
         * The handler that was used to create the response.
         *
         * @since 4.4.0
         * @var null|array
         */
        protected $matched_handler = \null;
        /**
         * Adds a link to the response.
         *
         * @internal The $rel parameter is first, as this looks nicer when sending multiple.
         *
         * @since 4.4.0
         *
         * @link https://tools.ietf.org/html/rfc5988
         * @link https://www.iana.org/assignments/link-relations/link-relations.xml
         *
         * @param string $rel        Link relation. Either an IANA registered type,
         *                           or an absolute URL.
         * @param string $href       Target URI for the link.
         * @param array  $attributes Optional. Link parameters to send along with the URL. Default empty array.
         */
        public function add_link($rel, $href, $attributes = array())
        {
        }
        /**
         * Removes a link from the response.
         *
         * @since 4.4.0
         *
         * @param string $rel  Link relation. Either an IANA registered type, or an absolute URL.
         * @param string $href Optional. Only remove links for the relation matching the given href.
         *                     Default null.
         */
        public function remove_link($rel, $href = \null)
        {
        }
        /**
         * Adds multiple links to the response.
         *
         * Link data should be an associative array with link relation as the key.
         * The value can either be an associative array of link attributes
         * (including `href` with the URL for the response), or a list of these
         * associative arrays.
         *
         * @since 4.4.0
         *
         * @param array $links Map of link relation to list of links.
         */
        public function add_links($links)
        {
        }
        /**
         * Retrieves links for the response.
         *
         * @since 4.4.0
         *
         * @return array List of links.
         */
        public function get_links()
        {
        }
        /**
         * Sets a single link header.
         *
         * @internal The $rel parameter is first, as this looks nicer when sending multiple.
         *
         * @since 4.4.0
         *
         * @link https://tools.ietf.org/html/rfc5988
         * @link https://www.iana.org/assignments/link-relations/link-relations.xml
         *
         * @param string $rel   Link relation. Either an IANA registered type, or an absolute URL.
         * @param string $link  Target IRI for the link.
         * @param array  $other Optional. Other parameters to send, as an associative array.
         *                      Default empty array.
         */
        public function link_header($rel, $link, $other = array())
        {
        }
        /**
         * Retrieves the route that was used.
         *
         * @since 4.4.0
         *
         * @return string The matched route.
         */
        public function get_matched_route()
        {
        }
        /**
         * Sets the route (regex for path) that caused the response.
         *
         * @since 4.4.0
         *
         * @param string $route Route name.
         */
        public function set_matched_route($route)
        {
        }
        /**
         * Retrieves the handler that was used to generate the response.
         *
         * @since 4.4.0
         *
         * @return null|array The handler that was used to create the response.
         */
        public function get_matched_handler()
        {
        }
        /**
         * Sets the handler that was responsible for generating the response.
         *
         * @since 4.4.0
         *
         * @param array $handler The matched handler.
         */
        public function set_matched_handler($handler)
        {
        }
        /**
         * Checks if the response is an error, i.e. >= 400 response code.
         *
         * @since 4.4.0
         *
         * @return bool Whether the response is an error.
         */
        public function is_error()
        {
        }
        /**
         * Retrieves a WP_Error object from the response.
         *
         * @since 4.4.0
         *
         * @return WP_Error|null WP_Error or null on not an errored response.
         */
        public function as_error()
        {
        }
        /**
         * Retrieves the CURIEs (compact URIs) used for relations.
         *
         * @since 4.5.0
         *
         * @return array Compact URIs.
         */
        public function get_curies()
        {
        }
    }
    /**
     * REST API: WP_REST_Request class
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 4.4.0
     */
    /**
     * Core class used to implement a REST request object.
     *
     * Contains data from the request, to be passed to the callback.
     *
     * Note: This implements ArrayAccess, and acts as an array of parameters when
     * used in that manner. It does not use ArrayObject (as we cannot rely on SPL),
     * so be aware it may have non-array behaviour in some cases.
     *
     * Note: When using features provided by ArrayAccess, be aware that WordPress deliberately
     * does not distinguish between arguments of the same name for different request methods.
     * For instance, in a request with `GET id=1` and `POST id=2`, `$request['id']` will equal
     * 2 (`POST`) not 1 (`GET`). For more precision between request methods, use
     * WP_REST_Request::get_body_params(), WP_REST_Request::get_url_params(), etc.
     *
     * @since 4.4.0
     *
     * @link https://www.php.net/manual/en/class.arrayaccess.php
     */
    class WP_REST_Request implements \ArrayAccess
    {
        /**
         * HTTP method.
         *
         * @since 4.4.0
         * @var string
         */
        protected $method = '';
        /**
         * Parameters passed to the request.
         *
         * These typically come from the `$_GET`, `$_POST` and `$_FILES`
         * superglobals when being created from the global scope.
         *
         * @since 4.4.0
         * @var array Contains GET, POST and FILES keys mapping to arrays of data.
         */
        protected $params;
        /**
         * HTTP headers for the request.
         *
         * @since 4.4.0
         * @var array Map of key to value. Key is always lowercase, as per HTTP specification.
         */
        protected $headers = array();
        /**
         * Body data.
         *
         * @since 4.4.0
         * @var string Binary data from the request.
         */
        protected $body = \null;
        /**
         * Route matched for the request.
         *
         * @since 4.4.0
         * @var string
         */
        protected $route;
        /**
         * Attributes (options) for the route that was matched.
         *
         * This is the options array used when the route was registered, typically
         * containing the callback as well as the valid methods for the route.
         *
         * @since 4.4.0
         * @var array Attributes for the request.
         */
        protected $attributes = array();
        /**
         * Used to determine if the JSON data has been parsed yet.
         *
         * Allows lazy-parsing of JSON data where possible.
         *
         * @since 4.4.0
         * @var bool
         */
        protected $parsed_json = \false;
        /**
         * Used to determine if the body data has been parsed yet.
         *
         * @since 4.4.0
         * @var bool
         */
        protected $parsed_body = \false;
        /**
         * Constructor.
         *
         * @since 4.4.0
         *
         * @param string $method     Optional. Request method. Default empty.
         * @param string $route      Optional. Request route. Default empty.
         * @param array  $attributes Optional. Request attributes. Default empty array.
         */
        public function __construct($method = '', $route = '', $attributes = array())
        {
        }
        /**
         * Retrieves the HTTP method for the request.
         *
         * @since 4.4.0
         *
         * @return string HTTP method.
         */
        public function get_method()
        {
        }
        /**
         * Sets HTTP method for the request.
         *
         * @since 4.4.0
         *
         * @param string $method HTTP method.
         */
        public function set_method($method)
        {
        }
        /**
         * Retrieves all headers from the request.
         *
         * @since 4.4.0
         *
         * @return array Map of key to value. Key is always lowercase, as per HTTP specification.
         */
        public function get_headers()
        {
        }
        /**
         * Canonicalizes the header name.
         *
         * Ensures that header names are always treated the same regardless of
         * source. Header names are always case insensitive.
         *
         * Note that we treat `-` (dashes) and `_` (underscores) as the same
         * character, as per header parsing rules in both Apache and nginx.
         *
         * @link https://stackoverflow.com/q/18185366
         * @link https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/#missing-disappearing-http-headers
         * @link https://nginx.org/en/docs/http/ngx_http_core_module.html#underscores_in_headers
         *
         * @since 4.4.0
         *
         * @param string $key Header name.
         * @return string Canonicalized name.
         */
        public static function canonicalize_header_name($key)
        {
        }
        /**
         * Retrieves the given header from the request.
         *
         * If the header has multiple values, they will be concatenated with a comma
         * as per the HTTP specification. Be aware that some non-compliant headers
         * (notably cookie headers) cannot be joined this way.
         *
         * @since 4.4.0
         *
         * @param string $key Header name, will be canonicalized to lowercase.
         * @return string|null String value if set, null otherwise.
         */
        public function get_header($key)
        {
        }
        /**
         * Retrieves header values from the request.
         *
         * @since 4.4.0
         *
         * @param string $key Header name, will be canonicalized to lowercase.
         * @return array|null List of string values if set, null otherwise.
         */
        public function get_header_as_array($key)
        {
        }
        /**
         * Sets the header on request.
         *
         * @since 4.4.0
         *
         * @param string $key   Header name.
         * @param string $value Header value, or list of values.
         */
        public function set_header($key, $value)
        {
        }
        /**
         * Appends a header value for the given header.
         *
         * @since 4.4.0
         *
         * @param string $key   Header name.
         * @param string $value Header value, or list of values.
         */
        public function add_header($key, $value)
        {
        }
        /**
         * Removes all values for a header.
         *
         * @since 4.4.0
         *
         * @param string $key Header name.
         */
        public function remove_header($key)
        {
        }
        /**
         * Sets headers on the request.
         *
         * @since 4.4.0
         *
         * @param array $headers  Map of header name to value.
         * @param bool  $override If true, replace the request's headers. Otherwise, merge with existing.
         */
        public function set_headers($headers, $override = \true)
        {
        }
        /**
         * Retrieves the content-type of the request.
         *
         * @since 4.4.0
         *
         * @return array|null Map containing 'value' and 'parameters' keys
         *                    or null when no valid content-type header was
         *                    available.
         */
        public function get_content_type()
        {
        }
        /**
         * Checks if the request has specified a JSON content-type.
         *
         * @since 5.6.0
         *
         * @return bool True if the content-type header is JSON.
         */
        public function is_json_content_type()
        {
        }
        /**
         * Retrieves the parameter priority order.
         *
         * Used when checking parameters in WP_REST_Request::get_param().
         *
         * @since 4.4.0
         *
         * @return string[] Array of types to check, in order of priority.
         */
        protected function get_parameter_order()
        {
        }
        /**
         * Retrieves a parameter from the request.
         *
         * @since 4.4.0
         *
         * @param string $key Parameter name.
         * @return mixed|null Value if set, null otherwise.
         */
        public function get_param($key)
        {
        }
        /**
         * Checks if a parameter exists in the request.
         *
         * This allows distinguishing between an omitted parameter,
         * and a parameter specifically set to null.
         *
         * @since 5.3.0
         *
         * @param string $key Parameter name.
         * @return bool True if a param exists for the given key.
         */
        public function has_param($key)
        {
        }
        /**
         * Sets a parameter on the request.
         *
         * If the given parameter key exists in any parameter type an update will take place,
         * otherwise a new param will be created in the first parameter type (respecting
         * get_parameter_order()).
         *
         * @since 4.4.0
         *
         * @param string $key   Parameter name.
         * @param mixed  $value Parameter value.
         */
        public function set_param($key, $value)
        {
        }
        /**
         * Retrieves merged parameters from the request.
         *
         * The equivalent of get_param(), but returns all parameters for the request.
         * Handles merging all the available values into a single array.
         *
         * @since 4.4.0
         *
         * @return array Map of key to value.
         */
        public function get_params()
        {
        }
        /**
         * Retrieves parameters from the route itself.
         *
         * These are parsed from the URL using the regex.
         *
         * @since 4.4.0
         *
         * @return array Parameter map of key to value.
         */
        public function get_url_params()
        {
        }
        /**
         * Sets parameters from the route.
         *
         * Typically, this is set after parsing the URL.
         *
         * @since 4.4.0
         *
         * @param array $params Parameter map of key to value.
         */
        public function set_url_params($params)
        {
        }
        /**
         * Retrieves parameters from the query string.
         *
         * These are the parameters you'd typically find in `$_GET`.
         *
         * @since 4.4.0
         *
         * @return array Parameter map of key to value
         */
        public function get_query_params()
        {
        }
        /**
         * Sets parameters from the query string.
         *
         * Typically, this is set from `$_GET`.
         *
         * @since 4.4.0
         *
         * @param array $params Parameter map of key to value.
         */
        public function set_query_params($params)
        {
        }
        /**
         * Retrieves parameters from the body.
         *
         * These are the parameters you'd typically find in `$_POST`.
         *
         * @since 4.4.0
         *
         * @return array Parameter map of key to value.
         */
        public function get_body_params()
        {
        }
        /**
         * Sets parameters from the body.
         *
         * Typically, this is set from `$_POST`.
         *
         * @since 4.4.0
         *
         * @param array $params Parameter map of key to value.
         */
        public function set_body_params($params)
        {
        }
        /**
         * Retrieves multipart file parameters from the body.
         *
         * These are the parameters you'd typically find in `$_FILES`.
         *
         * @since 4.4.0
         *
         * @return array Parameter map of key to value
         */
        public function get_file_params()
        {
        }
        /**
         * Sets multipart file parameters from the body.
         *
         * Typically, this is set from `$_FILES`.
         *
         * @since 4.4.0
         *
         * @param array $params Parameter map of key to value.
         */
        public function set_file_params($params)
        {
        }
        /**
         * Retrieves the default parameters.
         *
         * These are the parameters set in the route registration.
         *
         * @since 4.4.0
         *
         * @return array Parameter map of key to value
         */
        public function get_default_params()
        {
        }
        /**
         * Sets default parameters.
         *
         * These are the parameters set in the route registration.
         *
         * @since 4.4.0
         *
         * @param array $params Parameter map of key to value.
         */
        public function set_default_params($params)
        {
        }
        /**
         * Retrieves the request body content.
         *
         * @since 4.4.0
         *
         * @return string Binary data from the request body.
         */
        public function get_body()
        {
        }
        /**
         * Sets body content.
         *
         * @since 4.4.0
         *
         * @param string $data Binary data from the request body.
         */
        public function set_body($data)
        {
        }
        /**
         * Retrieves the parameters from a JSON-formatted body.
         *
         * @since 4.4.0
         *
         * @return array Parameter map of key to value.
         */
        public function get_json_params()
        {
        }
        /**
         * Parses the JSON parameters.
         *
         * Avoids parsing the JSON data until we need to access it.
         *
         * @since 4.4.0
         * @since 4.7.0 Returns error instance if value cannot be decoded.
         * @return true|WP_Error True if the JSON data was passed or no JSON data was provided, WP_Error if invalid JSON was passed.
         */
        protected function parse_json_params()
        {
        }
        /**
         * Parses the request body parameters.
         *
         * Parses out URL-encoded bodies for request methods that aren't supported
         * natively by PHP. In PHP 5.x, only POST has these parsed automatically.
         *
         * @since 4.4.0
         */
        protected function parse_body_params()
        {
        }
        /**
         * Retrieves the route that matched the request.
         *
         * @since 4.4.0
         *
         * @return string Route matching regex.
         */
        public function get_route()
        {
        }
        /**
         * Sets the route that matched the request.
         *
         * @since 4.4.0
         *
         * @param string $route Route matching regex.
         */
        public function set_route($route)
        {
        }
        /**
         * Retrieves the attributes for the request.
         *
         * These are the options for the route that was matched.
         *
         * @since 4.4.0
         *
         * @return array Attributes for the request.
         */
        public function get_attributes()
        {
        }
        /**
         * Sets the attributes for the request.
         *
         * @since 4.4.0
         *
         * @param array $attributes Attributes for the request.
         */
        public function set_attributes($attributes)
        {
        }
        /**
         * Sanitizes (where possible) the params on the request.
         *
         * This is primarily based off the sanitize_callback param on each registered
         * argument.
         *
         * @since 4.4.0
         *
         * @return true|WP_Error True if parameters were sanitized, WP_Error if an error occurred during sanitization.
         */
        public function sanitize_params()
        {
        }
        /**
         * Checks whether this request is valid according to its attributes.
         *
         * @since 4.4.0
         *
         * @return true|WP_Error True if there are no parameters to validate or if all pass validation,
         *                       WP_Error if required parameters are missing.
         */
        public function has_valid_params()
        {
        }
        /**
         * Checks if a parameter is set.
         *
         * @since 4.4.0
         *
         * @param string $offset Parameter name.
         * @return bool Whether the parameter is set.
         */
        #[\ReturnTypeWillChange]
        public function offsetExists($offset)
        {
        }
        /**
         * Retrieves a parameter from the request.
         *
         * @since 4.4.0
         *
         * @param string $offset Parameter name.
         * @return mixed|null Value if set, null otherwise.
         */
        #[\ReturnTypeWillChange]
        public function offsetGet($offset)
        {
        }
        /**
         * Sets a parameter on the request.
         *
         * @since 4.4.0
         *
         * @param string $offset Parameter name.
         * @param mixed  $value  Parameter value.
         */
        #[\ReturnTypeWillChange]
        public function offsetSet($offset, $value)
        {
        }
        /**
         * Removes a parameter from the request.
         *
         * @since 4.4.0
         *
         * @param string $offset Parameter name.
         */
        #[\ReturnTypeWillChange]
        public function offsetUnset($offset)
        {
        }
        /**
         * Retrieves a WP_REST_Request object from a full URL.
         *
         * @since 4.5.0
         *
         * @param string $url URL with protocol, domain, path and query args.
         * @return WP_REST_Request|false WP_REST_Request object on success, false on failure.
         */
        public static function from_url($url)
        {
        }
    }
    /**
     * REST API: WP_REST_Meta_Fields class
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 4.7.0
     */
    /**
     * Core class to manage meta values for an object via the REST API.
     *
     * @since 4.7.0
     */
    abstract class WP_REST_Meta_Fields
    {
        /**
         * Retrieves the object meta type.
         *
         * @since 4.7.0
         *
         * @return string One of 'post', 'comment', 'term', 'user', or anything
         *                else supported by `_get_meta_table()`.
         */
        protected abstract function get_meta_type();
        /**
         * Retrieves the object meta subtype.
         *
         * @since 4.9.8
         *
         * @return string Subtype for the meta type, or empty string if no specific subtype.
         */
        protected function get_meta_subtype()
        {
        }
        /**
         * Retrieves the object type for register_rest_field().
         *
         * @since 4.7.0
         *
         * @return string The REST field type, such as post type name, taxonomy name, 'comment', or `user`.
         */
        protected abstract function get_rest_field_type();
        /**
         * Registers the meta field.
         *
         * @since 4.7.0
         * @deprecated 5.6.0
         *
         * @see register_rest_field()
         */
        public function register_field()
        {
        }
        /**
         * Retrieves the meta field value.
         *
         * @since 4.7.0
         *
         * @param int             $object_id Object ID to fetch meta for.
         * @param WP_REST_Request $request   Full details about the request.
         * @return array Array containing the meta values keyed by name.
         */
        public function get_value($object_id, $request)
        {
        }
        /**
         * Prepares a meta value for a response.
         *
         * This is required because some native types cannot be stored correctly
         * in the database, such as booleans. We need to cast back to the relevant
         * type before passing back to JSON.
         *
         * @since 4.7.0
         *
         * @param mixed           $value   Meta value to prepare.
         * @param WP_REST_Request $request Current request object.
         * @param array           $args    Options for the field.
         * @return mixed Prepared value.
         */
        protected function prepare_value_for_response($value, $request, $args)
        {
        }
        /**
         * Updates meta values.
         *
         * @since 4.7.0
         *
         * @param array $meta      Array of meta parsed from the request.
         * @param int   $object_id Object ID to fetch meta for.
         * @return null|WP_Error Null on success, WP_Error object on failure.
         */
        public function update_value($meta, $object_id)
        {
        }
        /**
         * Deletes a meta value for an object.
         *
         * @since 4.7.0
         *
         * @param int    $object_id Object ID the field belongs to.
         * @param string $meta_key  Key for the field.
         * @param string $name      Name for the field that is exposed in the REST API.
         * @return true|WP_Error True if meta field is deleted, WP_Error otherwise.
         */
        protected function delete_meta_value($object_id, $meta_key, $name)
        {
        }
        /**
         * Updates multiple meta values for an object.
         *
         * Alters the list of values in the database to match the list of provided values.
         *
         * @since 4.7.0
         *
         * @param int    $object_id Object ID to update.
         * @param string $meta_key  Key for the custom field.
         * @param string $name      Name for the field that is exposed in the REST API.
         * @param array  $values    List of values to update to.
         * @return true|WP_Error True if meta fields are updated, WP_Error otherwise.
         */
        protected function update_multi_meta_value($object_id, $meta_key, $name, $values)
        {
        }
        /**
         * Updates a meta value for an object.
         *
         * @since 4.7.0
         *
         * @param int    $object_id Object ID to update.
         * @param string $meta_key  Key for the custom field.
         * @param string $name      Name for the field that is exposed in the REST API.
         * @param mixed  $value     Updated value.
         * @return true|WP_Error True if the meta field was updated, WP_Error otherwise.
         */
        protected function update_meta_value($object_id, $meta_key, $name, $value)
        {
        }
        /**
         * Checks if the user provided value is equivalent to a stored value for the given meta key.
         *
         * @since 5.5.0
         *
         * @param string $meta_key     The meta key being checked.
         * @param string $subtype      The object subtype.
         * @param mixed  $stored_value The currently stored value retrieved from get_metadata().
         * @param mixed  $user_value   The value provided by the user.
         * @return bool
         */
        protected function is_meta_value_same_as_stored_value($meta_key, $subtype, $stored_value, $user_value)
        {
        }
        /**
         * Retrieves all the registered meta fields.
         *
         * @since 4.7.0
         *
         * @return array Registered fields.
         */
        protected function get_registered_fields()
        {
        }
        /**
         * Retrieves the object's meta schema, conforming to JSON Schema.
         *
         * @since 4.7.0
         *
         * @return array Field schema data.
         */
        public function get_field_schema()
        {
        }
        /**
         * Prepares a meta value for output.
         *
         * Default preparation for meta fields. Override by passing the
         * `prepare_callback` in your `show_in_rest` options.
         *
         * @since 4.7.0
         *
         * @param mixed           $value   Meta value from the database.
         * @param WP_REST_Request $request Request object.
         * @param array           $args    REST-specific options for the meta key.
         * @return mixed Value prepared for output. If a non-JsonSerializable object, null.
         */
        public static function prepare_value($value, $request, $args)
        {
        }
        /**
         * Check the 'meta' value of a request is an associative array.
         *
         * @since 4.7.0
         *
         * @param mixed           $value   The meta value submitted in the request.
         * @param WP_REST_Request $request Full details about the request.
         * @param string          $param   The parameter name.
         * @return array|false The meta array, if valid, false otherwise.
         */
        public function check_meta_is_array($value, $request, $param)
        {
        }
        /**
         * Recursively add additionalProperties = false to all objects in a schema if no additionalProperties setting
         * is specified.
         *
         * This is needed to restrict properties of objects in meta values to only
         * registered items, as the REST API will allow additional properties by
         * default.
         *
         * @since 5.3.0
         * @deprecated 5.6.0 Use rest_default_additional_properties_to_false() instead.
         *
         * @param array $schema The schema array.
         * @return array
         */
        protected function default_additional_properties_to_false($schema)
        {
        }
        /**
         * Gets the empty value for a schema type.
         *
         * @since 5.3.0
         *
         * @param string $type The schema type.
         * @return mixed
         */
        protected static function get_empty_value_for_type($type)
        {
        }
    }
    /**
     * REST API: WP_REST_User_Meta_Fields class
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 4.7.0
     */
    /**
     * Core class used to manage meta values for users via the REST API.
     *
     * @since 4.7.0
     *
     * @see WP_REST_Meta_Fields
     */
    class WP_REST_User_Meta_Fields extends \WP_REST_Meta_Fields
    {
        /**
         * Retrieves the user meta type.
         *
         * @since 4.7.0
         *
         * @return string The user meta type.
         */
        protected function get_meta_type()
        {
        }
        /**
         * Retrieves the user meta subtype.
         *
         * @since 4.9.8
         *
         * @return string 'user' There are no subtypes.
         */
        protected function get_meta_subtype()
        {
        }
        /**
         * Retrieves the type for register_rest_field().
         *
         * @since 4.7.0
         *
         * @return string The user REST field type.
         */
        public function get_rest_field_type()
        {
        }
    }
    /**
     * REST API: WP_REST_Post_Meta_Fields class
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 4.7.0
     */
    /**
     * Core class used to manage meta values for posts via the REST API.
     *
     * @since 4.7.0
     *
     * @see WP_REST_Meta_Fields
     */
    class WP_REST_Post_Meta_Fields extends \WP_REST_Meta_Fields
    {
        /**
         * Post type to register fields for.
         *
         * @since 4.7.0
         * @var string
         */
        protected $post_type;
        /**
         * Constructor.
         *
         * @since 4.7.0
         *
         * @param string $post_type Post type to register fields for.
         */
        public function __construct($post_type)
        {
        }
        /**
         * Retrieves the post meta type.
         *
         * @since 4.7.0
         *
         * @return string The meta type.
         */
        protected function get_meta_type()
        {
        }
        /**
         * Retrieves the post meta subtype.
         *
         * @since 4.9.8
         *
         * @return string Subtype for the meta type, or empty string if no specific subtype.
         */
        protected function get_meta_subtype()
        {
        }
        /**
         * Retrieves the type for register_rest_field().
         *
         * @since 4.7.0
         *
         * @see register_rest_field()
         *
         * @return string The REST field type.
         */
        public function get_rest_field_type()
        {
        }
    }
    /**
     * REST API: WP_REST_Term_Meta_Fields class
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 4.7.0
     */
    /**
     * Core class used to manage meta values for terms via the REST API.
     *
     * @since 4.7.0
     *
     * @see WP_REST_Meta_Fields
     */
    class WP_REST_Term_Meta_Fields extends \WP_REST_Meta_Fields
    {
        /**
         * Taxonomy to register fields for.
         *
         * @since 4.7.0
         * @var string
         */
        protected $taxonomy;
        /**
         * Constructor.
         *
         * @since 4.7.0
         *
         * @param string $taxonomy Taxonomy to register fields for.
         */
        public function __construct($taxonomy)
        {
        }
        /**
         * Retrieves the term meta type.
         *
         * @since 4.7.0
         *
         * @return string The meta type.
         */
        protected function get_meta_type()
        {
        }
        /**
         * Retrieves the term meta subtype.
         *
         * @since 4.9.8
         *
         * @return string Subtype for the meta type, or empty string if no specific subtype.
         */
        protected function get_meta_subtype()
        {
        }
        /**
         * Retrieves the type for register_rest_field().
         *
         * @since 4.7.0
         *
         * @return string The REST field type.
         */
        public function get_rest_field_type()
        {
        }
    }
    /**
     * REST API: WP_REST_Comment_Meta_Fields class
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 4.7.0
     */
    /**
     * Core class to manage comment meta via the REST API.
     *
     * @since 4.7.0
     *
     * @see WP_REST_Meta_Fields
     */
    class WP_REST_Comment_Meta_Fields extends \WP_REST_Meta_Fields
    {
        /**
         * Retrieves the comment type for comment meta.
         *
         * @since 4.7.0
         *
         * @return string The meta type.
         */
        protected function get_meta_type()
        {
        }
        /**
         * Retrieves the comment meta subtype.
         *
         * @since 4.9.8
         *
         * @return string 'comment' There are no subtypes.
         */
        protected function get_meta_subtype()
        {
        }
        /**
         * Retrieves the type for register_rest_field() in the context of comments.
         *
         * @since 4.7.0
         *
         * @return string The REST field type.
         */
        public function get_rest_field_type()
        {
        }
    }
    /**
     * REST API: WP_REST_Controller class
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 4.7.0
     */
    /**
     * Core base controller for managing and interacting with REST API items.
     *
     * @since 4.7.0
     */
    abstract class WP_REST_Controller
    {
        /**
         * The namespace of this controller's route.
         *
         * @since 4.7.0
         * @var string
         */
        protected $namespace;
        /**
         * The base of this controller's route.
         *
         * @since 4.7.0
         * @var string
         */
        protected $rest_base;
        /**
         * Cached results of get_item_schema.
         *
         * @since 5.3.0
         * @var array
         */
        protected $schema;
        /**
         * Registers the routes for the objects of the controller.
         *
         * @since 4.7.0
         *
         * @see register_rest_route()
         */
        public function register_routes()
        {
        }
        /**
         * Checks if a given request has access to get items.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access, WP_Error object otherwise.
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * Retrieves a collection of items.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function get_items($request)
        {
        }
        /**
         * Checks if a given request has access to get a specific item.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access for the item, WP_Error object otherwise.
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * Retrieves one item from the collection.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function get_item($request)
        {
        }
        /**
         * Checks if a given request has access to create items.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has access to create items, WP_Error object otherwise.
         */
        public function create_item_permissions_check($request)
        {
        }
        /**
         * Creates one item from the collection.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function create_item($request)
        {
        }
        /**
         * Checks if a given request has access to update a specific item.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has access to update the item, WP_Error object otherwise.
         */
        public function update_item_permissions_check($request)
        {
        }
        /**
         * Updates one item from the collection.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function update_item($request)
        {
        }
        /**
         * Checks if a given request has access to delete a specific item.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has access to delete the item, WP_Error object otherwise.
         */
        public function delete_item_permissions_check($request)
        {
        }
        /**
         * Deletes one item from the collection.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function delete_item($request)
        {
        }
        /**
         * Prepares one item for create or update operation.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Request object.
         * @return object|WP_Error The prepared item, or WP_Error object on failure.
         */
        protected function prepare_item_for_database($request)
        {
        }
        /**
         * Prepares the item for the REST response.
         *
         * @since 4.7.0
         *
         * @param mixed           $item    WordPress representation of the item.
         * @param WP_REST_Request $request Request object.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Prepares a response for insertion into a collection.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Response $response Response object.
         * @return array|mixed Response data, ready for insertion into collection data.
         */
        public function prepare_response_for_collection($response)
        {
        }
        /**
         * Filters a response based on the context defined in the schema.
         *
         * @since 4.7.0
         *
         * @param array  $data    Response data to filter.
         * @param string $context Context defined in the schema.
         * @return array Filtered response.
         */
        public function filter_response_by_context($data, $context)
        {
        }
        /**
         * Retrieves the item's schema, conforming to JSON Schema.
         *
         * @since 4.7.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema()
        {
        }
        /**
         * Retrieves the item's schema for display / public consumption purposes.
         *
         * @since 4.7.0
         *
         * @return array Public item schema data.
         */
        public function get_public_item_schema()
        {
        }
        /**
         * Retrieves the query params for the collections.
         *
         * @since 4.7.0
         *
         * @return array Query parameters for the collection.
         */
        public function get_collection_params()
        {
        }
        /**
         * Retrieves the magical context param.
         *
         * Ensures consistent descriptions between endpoints, and populates enum from schema.
         *
         * @since 4.7.0
         *
         * @param array $args Optional. Additional arguments for context parameter. Default empty array.
         * @return array Context parameter details.
         */
        public function get_context_param($args = array())
        {
        }
        /**
         * Adds the values from additional fields to a data object.
         *
         * @since 4.7.0
         *
         * @param array           $prepared Prepared response array.
         * @param WP_REST_Request $request  Full details about the request.
         * @return array Modified data object with additional fields.
         */
        protected function add_additional_fields_to_object($prepared, $request)
        {
        }
        /**
         * Updates the values of additional fields added to a data object.
         *
         * @since 4.7.0
         *
         * @param object          $object  Data model like WP_Term or WP_Post.
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True on success, WP_Error object if a field cannot be updated.
         */
        protected function update_additional_fields_for_object($object, $request)
        {
        }
        /**
         * Adds the schema from additional fields to a schema array.
         *
         * The type of object is inferred from the passed schema.
         *
         * @since 4.7.0
         *
         * @param array $schema Schema array.
         * @return array Modified Schema array.
         */
        protected function add_additional_fields_schema($schema)
        {
        }
        /**
         * Retrieves all of the registered additional fields for a given object-type.
         *
         * @since 4.7.0
         *
         * @global array $wp_rest_additional_fields Holds registered fields, organized by object type.
         *
         * @param string $object_type Optional. The object type.
         * @return array Registered additional fields (if any), empty array if none or if the object type
         *               could not be inferred.
         */
        protected function get_additional_fields($object_type = \null)
        {
        }
        /**
         * Retrieves the object type this controller is responsible for managing.
         *
         * @since 4.7.0
         *
         * @return string Object type for the controller.
         */
        protected function get_object_type()
        {
        }
        /**
         * Gets an array of fields to be included on the response.
         *
         * Included fields are based on item schema and `_fields=` request argument.
         *
         * @since 4.9.6
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return string[] Fields to be included in the response.
         */
        public function get_fields_for_response($request)
        {
        }
        /**
         * Retrieves an array of endpoint arguments from the item schema for the controller.
         *
         * @since 4.7.0
         *
         * @param string $method Optional. HTTP method of the request. The arguments for `CREATABLE` requests are
         *                       checked for required values and may fall-back to a given default, this is not done
         *                       on `EDITABLE` requests. Default WP_REST_Server::CREATABLE.
         * @return array Endpoint arguments.
         */
        public function get_endpoint_args_for_item_schema($method = \WP_REST_Server::CREATABLE)
        {
        }
        /**
         * Sanitizes the slug value.
         *
         * @since 4.7.0
         *
         * @internal We can't use sanitize_title() directly, as the second
         * parameter is the fallback title, which would end up being set to the
         * request object.
         *
         * @see https://github.com/WP-API/WP-API/issues/1585
         *
         * @todo Remove this in favour of https://core.trac.wordpress.org/ticket/34659
         *
         * @param string $slug Slug value passed in request.
         * @return string Sanitized value for the slug.
         */
        public function sanitize_slug($slug)
        {
        }
    }
    /**
     * Block Renderer REST API: WP_REST_Block_Renderer_Controller class
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 5.0.0
     */
    /**
     * Controller which provides REST endpoint for rendering a block.
     *
     * @since 5.0.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_Block_Renderer_Controller extends \WP_REST_Controller
    {
        /**
         * Constructs the controller.
         *
         * @since 5.0.0
         */
        public function __construct()
        {
        }
        /**
         * Registers the necessary REST API routes, one for each dynamic block.
         *
         * @since 5.0.0
         *
         * @see register_rest_route()
         */
        public function register_routes()
        {
        }
        /**
         * Checks if a given request has access to read blocks.
         *
         * @since 5.0.0
         *
         * @global WP_Post $post Global post object.
         *
         * @param WP_REST_Request $request Request.
         * @return true|WP_Error True if the request has read access, WP_Error object otherwise.
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * Returns block output from block's registered render_callback.
         *
         * @since 5.0.0
         *
         * @global WP_Post $post Global post object.
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function get_item($request)
        {
        }
        /**
         * Retrieves block's output schema, conforming to JSON Schema.
         *
         * @since 5.0.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema()
        {
        }
    }
    /**
     * REST API: WP_REST_Templates_Controller class
     *
     * @package    WordPress
     * @subpackage REST_API
     * @since 5.8.0
     */
    /**
     * Base Templates REST API Controller.
     *
     * @since 5.8.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_Templates_Controller extends \WP_REST_Controller
    {
        /**
         * Post type.
         *
         * @since 5.8.0
         * @var string
         */
        protected $post_type;
        /**
         * Constructor.
         *
         * @since 5.8.0
         *
         * @param string $post_type Post type.
         */
        public function __construct($post_type)
        {
        }
        /**
         * Registers the controllers routes.
         *
         * @since 5.8.0
         */
        public function register_routes()
        {
        }
        /**
         * Checks if the user has permissions to make the request.
         *
         * @since 5.8.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access, WP_Error object otherwise.
         */
        protected function permissions_check($request)
        {
        }
        /**
         * Requesting this endpoint for a template like 'twentytwentytwo//home'
         * requires using a path like /wp/v2/templates/twentytwentytwo//home. There
         * are special cases when WordPress routing corrects the name to contain
         * only a single slash like 'twentytwentytwo/home'.
         *
         * This method doubles the last slash if it's not already doubled. It relies
         * on the template ID format {theme_name}//{template_slug} and the fact that
         * slugs cannot contain slashes.
         *
         * @since 5.9.0
         * @see https://core.trac.wordpress.org/ticket/54507
         *
         * @param string $id Template ID.
         * @return string Sanitized template ID.
         */
        public function _sanitize_template_id($id)
        {
        }
        /**
         * Checks if a given request has access to read templates.
         *
         * @since 5.8.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access, WP_Error object otherwise.
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * Returns a list of templates.
         *
         * @since 5.8.0
         *
         * @param WP_REST_Request $request The request instance.
         * @return WP_REST_Response
         */
        public function get_items($request)
        {
        }
        /**
         * Checks if a given request has access to read a single template.
         *
         * @since 5.8.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access for the item, WP_Error object otherwise.
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * Returns the given template
         *
         * @since 5.8.0
         *
         * @param WP_REST_Request $request The request instance.
         * @return WP_REST_Response|WP_Error
         */
        public function get_item($request)
        {
        }
        /**
         * Checks if a given request has access to write a single template.
         *
         * @since 5.8.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has write access for the item, WP_Error object otherwise.
         */
        public function update_item_permissions_check($request)
        {
        }
        /**
         * Updates a single template.
         *
         * @since 5.8.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function update_item($request)
        {
        }
        /**
         * Checks if a given request has access to create a template.
         *
         * @since 5.8.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has access to create items, WP_Error object otherwise.
         */
        public function create_item_permissions_check($request)
        {
        }
        /**
         * Creates a single template.
         *
         * @since 5.8.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function create_item($request)
        {
        }
        /**
         * Checks if a given request has access to delete a single template.
         *
         * @since 5.8.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has delete access for the item, WP_Error object otherwise.
         */
        public function delete_item_permissions_check($request)
        {
        }
        /**
         * Deletes a single template.
         *
         * @since 5.8.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function delete_item($request)
        {
        }
        /**
         * Prepares a single template for create or update.
         *
         * @since 5.8.0
         *
         * @param WP_REST_Request $request Request object.
         * @return stdClass Changes to pass to wp_update_post.
         */
        protected function prepare_item_for_database($request)
        {
        }
        /**
         * Prepare a single template output for response
         *
         * @since 5.8.0
         * @since 5.9.0 Renamed `$template` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @param WP_Block_Template $item    Template instance.
         * @param WP_REST_Request   $request Request object.
         * @return WP_REST_Response Response object.
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Prepares links for the request.
         *
         * @since 5.8.0
         *
         * @param integer $id ID.
         * @return array Links for the given post.
         */
        protected function prepare_links($id)
        {
        }
        /**
         * Get the link relations available for the post and current user.
         *
         * @since 5.8.0
         *
         * @return string[] List of link relations.
         */
        protected function get_available_actions()
        {
        }
        /**
         * Retrieves the query params for the posts collection.
         *
         * @since 5.8.0
         * @since 5.9.0 Added `'area'` and `'post_type'`.
         *
         * @return array Collection parameters.
         */
        public function get_collection_params()
        {
        }
        /**
         * Retrieves the block type' schema, conforming to JSON Schema.
         *
         * @since 5.8.0
         * @since 5.9.0 Added `'area'`.
         *
         * @return array Item schema data.
         */
        public function get_item_schema()
        {
        }
    }
    /**
     * REST API: WP_REST_Users_Controller class
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 4.7.0
     */
    /**
     * Core class used to manage users via the REST API.
     *
     * @since 4.7.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_Users_Controller extends \WP_REST_Controller
    {
        /**
         * Instance of a user meta fields object.
         *
         * @since 4.7.0
         * @var WP_REST_User_Meta_Fields
         */
        protected $meta;
        /**
         * Constructor.
         *
         * @since 4.7.0
         */
        public function __construct()
        {
        }
        /**
         * Registers the routes for users.
         *
         * @since 4.7.0
         *
         * @see register_rest_route()
         */
        public function register_routes()
        {
        }
        /**
         * Checks for a valid value for the reassign parameter when deleting users.
         *
         * The value can be an integer, 'false', false, or ''.
         *
         * @since 4.7.0
         *
         * @param int|bool        $value   The value passed to the reassign parameter.
         * @param WP_REST_Request $request Full details about the request.
         * @param string          $param   The parameter that is being sanitized.
         * @return int|bool|WP_Error
         */
        public function check_reassign($value, $request, $param)
        {
        }
        /**
         * Permissions check for getting all users.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access, otherwise WP_Error object.
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * Retrieves all users.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function get_items($request)
        {
        }
        /**
         * Get the user, if the ID is valid.
         *
         * @since 4.7.2
         *
         * @param int $id Supplied ID.
         * @return WP_User|WP_Error True if ID is valid, WP_Error otherwise.
         */
        protected function get_user($id)
        {
        }
        /**
         * Checks if a given request has access to read a user.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access for the item, otherwise WP_Error object.
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * Retrieves a single user.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function get_item($request)
        {
        }
        /**
         * Retrieves the current user.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function get_current_item($request)
        {
        }
        /**
         * Checks if a given request has access create users.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has access to create items, WP_Error object otherwise.
         */
        public function create_item_permissions_check($request)
        {
        }
        /**
         * Creates a single user.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function create_item($request)
        {
        }
        /**
         * Checks if a given request has access to update a user.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has access to update the item, WP_Error object otherwise.
         */
        public function update_item_permissions_check($request)
        {
        }
        /**
         * Updates a single user.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function update_item($request)
        {
        }
        /**
         * Checks if a given request has access to update the current user.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has access to update the item, WP_Error object otherwise.
         */
        public function update_current_item_permissions_check($request)
        {
        }
        /**
         * Updates the current user.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function update_current_item($request)
        {
        }
        /**
         * Checks if a given request has access delete a user.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has access to delete the item, WP_Error object otherwise.
         */
        public function delete_item_permissions_check($request)
        {
        }
        /**
         * Deletes a single user.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function delete_item($request)
        {
        }
        /**
         * Checks if a given request has access to delete the current user.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has access to delete the item, WP_Error object otherwise.
         */
        public function delete_current_item_permissions_check($request)
        {
        }
        /**
         * Deletes the current user.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function delete_current_item($request)
        {
        }
        /**
         * Prepares a single user output for response.
         *
         * @since 4.7.0
         * @since 5.9.0 Renamed `$user` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @param WP_User         $item    User object.
         * @param WP_REST_Request $request Request object.
         * @return WP_REST_Response Response object.
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Prepares links for the user request.
         *
         * @since 4.7.0
         *
         * @param WP_User $user User object.
         * @return array Links for the given user.
         */
        protected function prepare_links($user)
        {
        }
        /**
         * Prepares a single user for creation or update.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Request object.
         * @return object User object.
         */
        protected function prepare_item_for_database($request)
        {
        }
        /**
         * Determines if the current user is allowed to make the desired roles change.
         *
         * @since 4.7.0
         *
         * @global WP_Roles $wp_roles WordPress role management object.
         *
         * @param int   $user_id User ID.
         * @param array $roles   New user roles.
         * @return true|WP_Error True if the current user is allowed to make the role change,
         *                       otherwise a WP_Error object.
         */
        protected function check_role_update($user_id, $roles)
        {
        }
        /**
         * Check a username for the REST API.
         *
         * Performs a couple of checks like edit_user() in wp-admin/includes/user.php.
         *
         * @since 4.7.0
         *
         * @param string          $value   The username submitted in the request.
         * @param WP_REST_Request $request Full details about the request.
         * @param string          $param   The parameter name.
         * @return string|WP_Error The sanitized username, if valid, otherwise an error.
         */
        public function check_username($value, $request, $param)
        {
        }
        /**
         * Check a user password for the REST API.
         *
         * Performs a couple of checks like edit_user() in wp-admin/includes/user.php.
         *
         * @since 4.7.0
         *
         * @param string          $value   The password submitted in the request.
         * @param WP_REST_Request $request Full details about the request.
         * @param string          $param   The parameter name.
         * @return string|WP_Error The sanitized password, if valid, otherwise an error.
         */
        public function check_user_password($value, $request, $param)
        {
        }
        /**
         * Retrieves the user's schema, conforming to JSON Schema.
         *
         * @since 4.7.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema()
        {
        }
        /**
         * Retrieves the query params for collections.
         *
         * @since 4.7.0
         *
         * @return array Collection parameters.
         */
        public function get_collection_params()
        {
        }
    }
    /**
     * REST API: WP_REST_Block_Patterns_Controller class
     *
     * @package    WordPress
     * @subpackage REST_API
     * @since      6.0.0
     */
    /**
     * Core class used to access block patterns via the REST API.
     *
     * @since 6.0.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_Block_Patterns_Controller extends \WP_REST_Controller
    {
        /**
         * Defines whether remote patterns should be loaded.
         *
         * @since 6.0.0
         * @var bool
         */
        private $remote_patterns_loaded;
        /**
         * Constructs the controller.
         *
         * @since 6.0.0
         */
        public function __construct()
        {
        }
        /**
         * Registers the routes for the objects of the controller.
         *
         * @since 6.0.0
         */
        public function register_routes()
        {
        }
        /**
         * Checks whether a given request has permission to read block patterns.
         *
         * @since 6.0.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access, WP_Error object otherwise.
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * Retrieves all block patterns.
         *
         * @since 6.0.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function get_items($request)
        {
        }
        /**
         * Prepare a raw block pattern before it gets output in a REST API response.
         *
         * @since 6.0.0
         *
         * @param array           $item    Raw pattern as registered, before any changes.
         * @param WP_REST_Request $request Request object.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Retrieves the block pattern schema, conforming to JSON Schema.
         *
         * @since 6.0.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema()
        {
        }
    }
    /**
     * REST API: WP_REST_Plugins_Controller class
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 5.5.0
     */
    /**
     * Core class to access plugins via the REST API.
     *
     * @since 5.5.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_Plugins_Controller extends \WP_REST_Controller
    {
        const PATTERN = '[^.\\/]+(?:\\/[^.\\/]+)?';
        /**
         * Plugins controller constructor.
         *
         * @since 5.5.0
         */
        public function __construct()
        {
        }
        /**
         * Registers the routes for the plugins controller.
         *
         * @since 5.5.0
         */
        public function register_routes()
        {
        }
        /**
         * Checks if a given request has access to get plugins.
         *
         * @since 5.5.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access, WP_Error object otherwise.
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * Retrieves a collection of plugins.
         *
         * @since 5.5.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function get_items($request)
        {
        }
        /**
         * Checks if a given request has access to get a specific plugin.
         *
         * @since 5.5.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access for the item, WP_Error object otherwise.
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * Retrieves one plugin from the site.
         *
         * @since 5.5.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function get_item($request)
        {
        }
        /**
         * Checks if the given plugin can be viewed by the current user.
         *
         * On multisite, this hides non-active network only plugins if the user does not have permission
         * to manage network plugins.
         *
         * @since 5.5.0
         *
         * @param string $plugin The plugin file to check.
         * @return true|WP_Error True if can read, a WP_Error instance otherwise.
         */
        protected function check_read_permission($plugin)
        {
        }
        /**
         * Checks if a given request has access to upload plugins.
         *
         * @since 5.5.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has access to create items, WP_Error object otherwise.
         */
        public function create_item_permissions_check($request)
        {
        }
        /**
         * Uploads a plugin and optionally activates it.
         *
         * @since 5.5.0
         *
         * @global WP_Filesystem_Base $wp_filesystem WordPress filesystem subclass.
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function create_item($request)
        {
        }
        /**
         * Checks if a given request has access to update a specific plugin.
         *
         * @since 5.5.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has access to update the item, WP_Error object otherwise.
         */
        public function update_item_permissions_check($request)
        {
        }
        /**
         * Updates one plugin.
         *
         * @since 5.5.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function update_item($request)
        {
        }
        /**
         * Checks if a given request has access to delete a specific plugin.
         *
         * @since 5.5.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has access to delete the item, WP_Error object otherwise.
         */
        public function delete_item_permissions_check($request)
        {
        }
        /**
         * Deletes one plugin from the site.
         *
         * @since 5.5.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function delete_item($request)
        {
        }
        /**
         * Prepares the plugin for the REST response.
         *
         * @since 5.5.0
         *
         * @param mixed           $item    Unmarked up and untranslated plugin data from {@see get_plugin_data()}.
         * @param WP_REST_Request $request Request object.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Prepares links for the request.
         *
         * @since 5.5.0
         *
         * @param array $item The plugin item.
         * @return array[]
         */
        protected function prepare_links($item)
        {
        }
        /**
         * Gets the plugin header data for a plugin.
         *
         * @since 5.5.0
         *
         * @param string $plugin The plugin file to get data for.
         * @return array|WP_Error The plugin data, or a WP_Error if the plugin is not installed.
         */
        protected function get_plugin_data($plugin)
        {
        }
        /**
         * Get's the activation status for a plugin.
         *
         * @since 5.5.0
         *
         * @param string $plugin The plugin file to check.
         * @return string Either 'network-active', 'active' or 'inactive'.
         */
        protected function get_plugin_status($plugin)
        {
        }
        /**
         * Handle updating a plugin's status.
         *
         * @since 5.5.0
         *
         * @param string $plugin         The plugin file to update.
         * @param string $new_status     The plugin's new status.
         * @param string $current_status The plugin's current status.
         * @return true|WP_Error
         */
        protected function plugin_status_permission_check($plugin, $new_status, $current_status)
        {
        }
        /**
         * Handle updating a plugin's status.
         *
         * @since 5.5.0
         *
         * @param string $plugin         The plugin file to update.
         * @param string $new_status     The plugin's new status.
         * @param string $current_status The plugin's current status.
         * @return true|WP_Error
         */
        protected function handle_plugin_status($plugin, $new_status, $current_status)
        {
        }
        /**
         * Checks that the "plugin" parameter is a valid path.
         *
         * @since 5.5.0
         *
         * @param string $file The plugin file parameter.
         * @return bool
         */
        public function validate_plugin_param($file)
        {
        }
        /**
         * Sanitizes the "plugin" parameter to be a proper plugin file with ".php" appended.
         *
         * @since 5.5.0
         *
         * @param string $file The plugin file parameter.
         * @return string
         */
        public function sanitize_plugin_param($file)
        {
        }
        /**
         * Checks if the plugin matches the requested parameters.
         *
         * @since 5.5.0
         *
         * @param WP_REST_Request $request The request to require the plugin matches against.
         * @param array           $item    The plugin item.
         * @return bool
         */
        protected function does_plugin_match_request($request, $item)
        {
        }
        /**
         * Checks if the plugin is installed.
         *
         * @since 5.5.0
         *
         * @param string $plugin The plugin file.
         * @return bool
         */
        protected function is_plugin_installed($plugin)
        {
        }
        /**
         * Determine if the endpoints are available.
         *
         * Only the 'Direct' filesystem transport, and SSH/FTP when credentials are stored are supported at present.
         *
         * @since 5.5.0
         *
         * @return true|WP_Error True if filesystem is available, WP_Error otherwise.
         */
        protected function is_filesystem_available()
        {
        }
        /**
         * Retrieves the plugin's schema, conforming to JSON Schema.
         *
         * @since 5.5.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema()
        {
        }
        /**
         * Retrieves the query params for the collections.
         *
         * @since 5.5.0
         *
         * @return array Query parameters for the collection.
         */
        public function get_collection_params()
        {
        }
    }
    /**
     * REST API: WP_REST_Themes_Controller class
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 5.0.0
     */
    /**
     * Core class used to manage themes via the REST API.
     *
     * @since 5.0.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_Themes_Controller extends \WP_REST_Controller
    {
        /**
         * Matches theme's directory: `/themes/<subdirectory>/<theme>/` or `/themes/<theme>/`.
         * Excludes invalid directory name characters: `/:<>*?"|`.
         */
        const PATTERN = '[^\\/:<>\\*\\?"\\|]+(?:\\/[^\\/:<>\\*\\?"\\|]+)?';
        /**
         * Constructor.
         *
         * @since 5.0.0
         */
        public function __construct()
        {
        }
        /**
         * Registers the routes for themes.
         *
         * @since 5.0.0
         *
         * @see register_rest_route()
         */
        public function register_routes()
        {
        }
        /**
         * Sanitize the stylesheet to decode endpoint.
         *
         * @since 5.9.0
         *
         * @param string $stylesheet The stylesheet name.
         * @return string Sanitized stylesheet.
         */
        public function _sanitize_stylesheet_callback($stylesheet)
        {
        }
        /**
         * Checks if a given request has access to read the theme.
         *
         * @since 5.0.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access for the item, otherwise WP_Error object.
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * Checks if a given request has access to read the theme.
         *
         * @since 5.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return bool|WP_Error True if the request has read access for the item, otherwise WP_Error object.
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * Checks if a theme can be read.
         *
         * @since 5.7.0
         *
         * @return bool|WP_Error Whether the theme can be read.
         */
        protected function check_read_active_theme_permission()
        {
        }
        /**
         * Retrieves a single theme.
         *
         * @since 5.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function get_item($request)
        {
        }
        /**
         * Retrieves a collection of themes.
         *
         * @since 5.0.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function get_items($request)
        {
        }
        /**
         * Prepares a single theme output for response.
         *
         * @since 5.0.0
         * @since 5.9.0 Renamed `$theme` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @param WP_Theme        $item    Theme object.
         * @param WP_REST_Request $request Request object.
         * @return WP_REST_Response Response object.
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Prepares links for the request.
         *
         * @since 5.7.0
         *
         * @param WP_Theme $theme Theme data.
         * @return array Links for the given block type.
         */
        protected function prepare_links($theme)
        {
        }
        /**
         * Helper function to compare two themes.
         *
         * @since 5.7.0
         *
         * @param WP_Theme $theme_a First theme to compare.
         * @param WP_Theme $theme_b Second theme to compare.
         * @return bool
         */
        protected function is_same_theme($theme_a, $theme_b)
        {
        }
        /**
         * Prepares the theme support value for inclusion in the REST API response.
         *
         * @since 5.5.0
         *
         * @param mixed           $support The raw value from get_theme_support().
         * @param array           $args    The feature's registration args.
         * @param string          $feature The feature name.
         * @param WP_REST_Request $request The request object.
         * @return mixed The prepared support value.
         */
        protected function prepare_theme_support($support, $args, $feature, $request)
        {
        }
        /**
         * Retrieves the theme's schema, conforming to JSON Schema.
         *
         * @since 5.0.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema()
        {
        }
        /**
         * Retrieves the search params for the themes collection.
         *
         * @since 5.0.0
         *
         * @return array Collection parameters.
         */
        public function get_collection_params()
        {
        }
        /**
         * Sanitizes and validates the list of theme status.
         *
         * @since 5.0.0
         * @deprecated 5.7.0
         *
         * @param string|array    $statuses  One or more theme statuses.
         * @param WP_REST_Request $request   Full details about the request.
         * @param string          $parameter Additional parameter to pass to validation.
         * @return array|WP_Error A list of valid statuses, otherwise WP_Error object.
         */
        public function sanitize_theme_status($statuses, $request, $parameter)
        {
        }
    }
    /**
     * REST API: WP_REST_Posts_Controller class
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 4.7.0
     */
    /**
     * Core class to access posts via the REST API.
     *
     * @since 4.7.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_Posts_Controller extends \WP_REST_Controller
    {
        /**
         * Post type.
         *
         * @since 4.7.0
         * @var string
         */
        protected $post_type;
        /**
         * Instance of a post meta fields object.
         *
         * @since 4.7.0
         * @var WP_REST_Post_Meta_Fields
         */
        protected $meta;
        /**
         * Passwordless post access permitted.
         *
         * @since 5.7.1
         * @var int[]
         */
        protected $password_check_passed = array();
        /**
         * Whether the controller supports batching.
         *
         * @since 5.9.0
         * @var array
         */
        protected $allow_batch = array('v1' => \true);
        /**
         * Constructor.
         *
         * @since 4.7.0
         *
         * @param string $post_type Post type.
         */
        public function __construct($post_type)
        {
        }
        /**
         * Registers the routes for posts.
         *
         * @since 4.7.0
         *
         * @see register_rest_route()
         */
        public function register_routes()
        {
        }
        /**
         * Checks if a given request has access to read posts.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access, WP_Error object otherwise.
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * Override the result of the post password check for REST requested posts.
         *
         * Allow users to read the content of password protected posts if they have
         * previously passed a permission check or if they have the `edit_post` capability
         * for the post being checked.
         *
         * @since 5.7.1
         *
         * @param bool    $required Whether the post requires a password check.
         * @param WP_Post $post     The post been password checked.
         * @return bool Result of password check taking in to account REST API considerations.
         */
        public function check_password_required($required, $post)
        {
        }
        /**
         * Retrieves a collection of posts.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function get_items($request)
        {
        }
        /**
         * Get the post, if the ID is valid.
         *
         * @since 4.7.2
         *
         * @param int $id Supplied ID.
         * @return WP_Post|WP_Error Post object if ID is valid, WP_Error otherwise.
         */
        protected function get_post($id)
        {
        }
        /**
         * Checks if a given request has access to read a post.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access for the item, WP_Error object otherwise.
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * Checks if the user can access password-protected content.
         *
         * This method determines whether we need to override the regular password
         * check in core with a filter.
         *
         * @since 4.7.0
         *
         * @param WP_Post         $post    Post to check against.
         * @param WP_REST_Request $request Request data to check.
         * @return bool True if the user can access password-protected content, otherwise false.
         */
        public function can_access_password_content($post, $request)
        {
        }
        /**
         * Retrieves a single post.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function get_item($request)
        {
        }
        /**
         * Checks if a given request has access to create a post.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has access to create items, WP_Error object otherwise.
         */
        public function create_item_permissions_check($request)
        {
        }
        /**
         * Creates a single post.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function create_item($request)
        {
        }
        /**
         * Checks if a given request has access to update a post.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has access to update the item, WP_Error object otherwise.
         */
        public function update_item_permissions_check($request)
        {
        }
        /**
         * Updates a single post.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function update_item($request)
        {
        }
        /**
         * Checks if a given request has access to delete a post.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has access to delete the item, WP_Error object otherwise.
         */
        public function delete_item_permissions_check($request)
        {
        }
        /**
         * Deletes a single post.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function delete_item($request)
        {
        }
        /**
         * Determines the allowed query_vars for a get_items() response and prepares
         * them for WP_Query.
         *
         * @since 4.7.0
         *
         * @param array           $prepared_args Optional. Prepared WP_Query arguments. Default empty array.
         * @param WP_REST_Request $request       Optional. Full details about the request.
         * @return array Items query arguments.
         */
        protected function prepare_items_query($prepared_args = array(), $request = \null)
        {
        }
        /**
         * Checks the post_date_gmt or modified_gmt and prepare any post or
         * modified date for single post output.
         *
         * @since 4.7.0
         *
         * @param string      $date_gmt GMT publication time.
         * @param string|null $date     Optional. Local publication time. Default null.
         * @return string|null ISO8601/RFC3339 formatted datetime.
         */
        protected function prepare_date_response($date_gmt, $date = \null)
        {
        }
        /**
         * Prepares a single post for create or update.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Request object.
         * @return stdClass|WP_Error Post object or WP_Error.
         */
        protected function prepare_item_for_database($request)
        {
        }
        /**
         * Checks whether the status is valid for the given post.
         *
         * Allows for sending an update request with the current status, even if that status would not be acceptable.
         *
         * @since 5.6.0
         *
         * @param string          $status  The provided status.
         * @param WP_REST_Request $request The request object.
         * @param string          $param   The parameter name.
         * @return true|WP_Error True if the status is valid, or WP_Error if not.
         */
        public function check_status($status, $request, $param)
        {
        }
        /**
         * Determines validity and normalizes the given status parameter.
         *
         * @since 4.7.0
         *
         * @param string       $post_status Post status.
         * @param WP_Post_Type $post_type   Post type.
         * @return string|WP_Error Post status or WP_Error if lacking the proper permission.
         */
        protected function handle_status_param($post_status, $post_type)
        {
        }
        /**
         * Determines the featured media based on a request param.
         *
         * @since 4.7.0
         *
         * @param int $featured_media Featured Media ID.
         * @param int $post_id        Post ID.
         * @return bool|WP_Error Whether the post thumbnail was successfully deleted, otherwise WP_Error.
         */
        protected function handle_featured_media($featured_media, $post_id)
        {
        }
        /**
         * Check whether the template is valid for the given post.
         *
         * @since 4.9.0
         *
         * @param string          $template Page template filename.
         * @param WP_REST_Request $request  Request.
         * @return bool|WP_Error True if template is still valid or if the same as existing value, or false if template not supported.
         */
        public function check_template($template, $request)
        {
        }
        /**
         * Sets the template for a post.
         *
         * @since 4.7.0
         * @since 4.9.0 Added the `$validate` parameter.
         *
         * @param string $template Page template filename.
         * @param int    $post_id  Post ID.
         * @param bool   $validate Whether to validate that the template selected is valid.
         */
        public function handle_template($template, $post_id, $validate = \false)
        {
        }
        /**
         * Updates the post's terms from a REST request.
         *
         * @since 4.7.0
         *
         * @param int             $post_id The post ID to update the terms form.
         * @param WP_REST_Request $request The request object with post and terms data.
         * @return null|WP_Error WP_Error on an error assigning any of the terms, otherwise null.
         */
        protected function handle_terms($post_id, $request)
        {
        }
        /**
         * Checks whether current user can assign all terms sent with the current request.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request The request object with post and terms data.
         * @return bool Whether the current user can assign the provided terms.
         */
        protected function check_assign_terms_permission($request)
        {
        }
        /**
         * Checks if a given post type can be viewed or managed.
         *
         * @since 4.7.0
         *
         * @param WP_Post_Type|string $post_type Post type name or object.
         * @return bool Whether the post type is allowed in REST.
         */
        protected function check_is_post_type_allowed($post_type)
        {
        }
        /**
         * Checks if a post can be read.
         *
         * Correctly handles posts with the inherit status.
         *
         * @since 4.7.0
         *
         * @param WP_Post $post Post object.
         * @return bool Whether the post can be read.
         */
        public function check_read_permission($post)
        {
        }
        /**
         * Checks if a post can be edited.
         *
         * @since 4.7.0
         *
         * @param WP_Post $post Post object.
         * @return bool Whether the post can be edited.
         */
        protected function check_update_permission($post)
        {
        }
        /**
         * Checks if a post can be created.
         *
         * @since 4.7.0
         *
         * @param WP_Post $post Post object.
         * @return bool Whether the post can be created.
         */
        protected function check_create_permission($post)
        {
        }
        /**
         * Checks if a post can be deleted.
         *
         * @since 4.7.0
         *
         * @param WP_Post $post Post object.
         * @return bool Whether the post can be deleted.
         */
        protected function check_delete_permission($post)
        {
        }
        /**
         * Prepares a single post output for response.
         *
         * @since 4.7.0
         * @since 5.9.0 Renamed `$post` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @param WP_Post         $item    Post object.
         * @param WP_REST_Request $request Request object.
         * @return WP_REST_Response Response object.
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Overwrites the default protected title format.
         *
         * By default, WordPress will show password protected posts with a title of
         * "Protected: %s", as the REST API communicates the protected status of a post
         * in a machine readable format, we remove the "Protected: " prefix.
         *
         * @since 4.7.0
         *
         * @return string Protected title format.
         */
        public function protected_title_format()
        {
        }
        /**
         * Prepares links for the request.
         *
         * @since 4.7.0
         *
         * @param WP_Post $post Post object.
         * @return array Links for the given post.
         */
        protected function prepare_links($post)
        {
        }
        /**
         * Get the link relations available for the post and current user.
         *
         * @since 4.9.8
         *
         * @param WP_Post         $post    Post object.
         * @param WP_REST_Request $request Request object.
         * @return array List of link relations.
         */
        protected function get_available_actions($post, $request)
        {
        }
        /**
         * Retrieves the post's schema, conforming to JSON Schema.
         *
         * @since 4.7.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema()
        {
        }
        /**
         * Retrieve Link Description Objects that should be added to the Schema for the posts collection.
         *
         * @since 4.9.8
         *
         * @return array
         */
        protected function get_schema_links()
        {
        }
        /**
         * Retrieves the query params for the posts collection.
         *
         * @since 4.7.0
         * @since 5.4.0 The `tax_relation` query parameter was added.
         * @since 5.7.0 The `modified_after` and `modified_before` query parameters were added.
         *
         * @return array Collection parameters.
         */
        public function get_collection_params()
        {
        }
        /**
         * Sanitizes and validates the list of post statuses, including whether the
         * user can query private statuses.
         *
         * @since 4.7.0
         *
         * @param string|array    $statuses  One or more post statuses.
         * @param WP_REST_Request $request   Full details about the request.
         * @param string          $parameter Additional parameter to pass to validation.
         * @return array|WP_Error A list of valid statuses, otherwise WP_Error object.
         */
        public function sanitize_post_statuses($statuses, $request, $parameter)
        {
        }
        /**
         * Prepares the 'tax_query' for a collection of posts.
         *
         * @since 5.7.0
         *
         * @param array           $args    WP_Query arguments.
         * @param WP_REST_Request $request Full details about the request.
         * @return array Updated query arguments.
         */
        private function prepare_tax_query(array $args, \WP_REST_Request $request)
        {
        }
        /**
         * Prepares the collection schema for including and excluding items by terms.
         *
         * @since 5.7.0
         *
         * @param array $query_params Collection schema.
         * @return array Updated schema.
         */
        private function prepare_taxonomy_limit_schema(array $query_params)
        {
        }
    }
    /**
     * REST API: WP_REST_Block_Pattern_Catergories_Controller class
     *
     * @package    WordPress
     * @subpackage REST_API
     * @since      6.0.0
     */
    /**
     * Core class used to access block pattern categories via the REST API.
     *
     * @since 6.0.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_Block_Pattern_Categories_Controller extends \WP_REST_Controller
    {
        /**
         * Constructs the controller.
         *
         * @since 6.0.0
         */
        public function __construct()
        {
        }
        /**
         * Registers the routes for the objects of the controller.
         *
         * @since 6.0.0
         */
        public function register_routes()
        {
        }
        /**
         * Checks whether a given request has permission to read block patterns.
         *
         * @since 6.0.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access, WP_Error object otherwise.
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * Retrieves all block pattern categories.
         *
         * @since 6.0.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_Error|WP_REST_Response Response object on success, or WP_Error object on failure.
         */
        public function get_items($request)
        {
        }
        /**
         * Prepare a raw block pattern category before it gets output in a REST API response.
         *
         * @since 6.0.0
         *
         * @param array           $item    Raw category as registered, before any changes.
         * @param WP_REST_Request $request Request object.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Retrieves the block pattern category schema, conforming to JSON Schema.
         *
         * @since 6.0.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema()
        {
        }
    }
    /**
     * REST API: WP_REST_Block_Directory_Controller class
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 5.5.0
     */
    /**
     * Controller which provides REST endpoint for the blocks.
     *
     * @since 5.5.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_Block_Directory_Controller extends \WP_REST_Controller
    {
        /**
         * Constructs the controller.
         */
        public function __construct()
        {
        }
        /**
         * Registers the necessary REST API routes.
         */
        public function register_routes()
        {
        }
        /**
         * Checks whether a given request has permission to install and activate plugins.
         *
         * @since 5.5.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has permission, WP_Error object otherwise.
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * Search and retrieve blocks metadata
         *
         * @since 5.5.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function get_items($request)
        {
        }
        /**
         * Parse block metadata for a block, and prepare it for an API response.
         *
         * @since 5.5.0
         * @since 5.9.0 Renamed `$plugin` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @param array           $item    The plugin metadata.
         * @param WP_REST_Request $request Request object.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Generates a list of links to include in the response for the plugin.
         *
         * @since 5.5.0
         *
         * @param array $plugin The plugin data from WordPress.org.
         * @return array
         */
        protected function prepare_links($plugin)
        {
        }
        /**
         * Finds an installed plugin for the given slug.
         *
         * @since 5.5.0
         *
         * @param string $slug The WordPress.org directory slug for a plugin.
         * @return string The plugin file found matching it.
         */
        protected function find_plugin_for_slug($slug)
        {
        }
        /**
         * Retrieves the theme's schema, conforming to JSON Schema.
         *
         * @since 5.5.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema()
        {
        }
        /**
         * Retrieves the search params for the blocks collection.
         *
         * @since 5.5.0
         *
         * @return array Collection parameters.
         */
        public function get_collection_params()
        {
        }
    }
    /**
     * REST API: WP_REST_Site_Health_Controller class
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 5.6.0
     */
    /**
     * Core class for interacting with Site Health tests.
     *
     * @since 5.6.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_Site_Health_Controller extends \WP_REST_Controller
    {
        /**
         * An instance of the site health class.
         *
         * @since 5.6.0
         *
         * @var WP_Site_Health
         */
        private $site_health;
        /**
         * Site Health controller constructor.
         *
         * @since 5.6.0
         *
         * @param WP_Site_Health $site_health An instance of the site health class.
         */
        public function __construct($site_health)
        {
        }
        /**
         * Registers API routes.
         *
         * @since 5.6.0
         *
         * @see register_rest_route()
         */
        public function register_routes()
        {
        }
        /**
         * Validates if the current user can request this REST endpoint.
         *
         * @since 5.6.0
         *
         * @param string $check The endpoint check being ran.
         * @return bool
         */
        protected function validate_request_permission($check)
        {
        }
        /**
         * Checks if background updates work as expected.
         *
         * @since 5.6.0
         *
         * @return array
         */
        public function test_background_updates()
        {
        }
        /**
         * Checks that the site can reach the WordPress.org API.
         *
         * @since 5.6.0
         *
         * @return array
         */
        public function test_dotorg_communication()
        {
        }
        /**
         * Checks that loopbacks can be performed.
         *
         * @since 5.6.0
         *
         * @return array
         */
        public function test_loopback_requests()
        {
        }
        /**
         * Checks that the site's frontend can be accessed over HTTPS.
         *
         * @since 5.7.0
         *
         * @return array
         */
        public function test_https_status()
        {
        }
        /**
         * Checks that the authorization header is valid.
         *
         * @since 5.6.0
         *
         * @return array
         */
        public function test_authorization_header()
        {
        }
        /**
         * Gets the current directory sizes for this install.
         *
         * @since 5.6.0
         *
         * @return array|WP_Error
         */
        public function get_directory_sizes()
        {
        }
        /**
         * Loads the admin textdomain for Site Health tests.
         *
         * The {@see WP_Site_Health} class is defined in WP-Admin, while the REST API operates in a front-end context.
         * This means that the translations for Site Health won't be loaded by default in {@see load_default_textdomain()}.
         *
         * @since 5.6.0
         */
        protected function load_admin_textdomain()
        {
        }
        /**
         * Gets the schema for each site health test.
         *
         * @since 5.6.0
         *
         * @return array The test schema.
         */
        public function get_item_schema()
        {
        }
    }
    /**
     * REST API: WP_REST_Post_Statuses_Controller class
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 4.7.0
     */
    /**
     * Core class used to access post statuses via the REST API.
     *
     * @since 4.7.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_Post_Statuses_Controller extends \WP_REST_Controller
    {
        /**
         * Constructor.
         *
         * @since 4.7.0
         */
        public function __construct()
        {
        }
        /**
         * Registers the routes for post statuses.
         *
         * @since 4.7.0
         *
         * @see register_rest_route()
         */
        public function register_routes()
        {
        }
        /**
         * Checks whether a given request has permission to read post statuses.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access, WP_Error object otherwise.
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * Retrieves all post statuses, depending on user context.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function get_items($request)
        {
        }
        /**
         * Checks if a given request has access to read a post status.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access for the item, WP_Error object otherwise.
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * Checks whether a given post status should be visible.
         *
         * @since 4.7.0
         *
         * @param object $status Post status.
         * @return bool True if the post status is visible, otherwise false.
         */
        protected function check_read_permission($status)
        {
        }
        /**
         * Retrieves a specific post status.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function get_item($request)
        {
        }
        /**
         * Prepares a post status object for serialization.
         *
         * @since 4.7.0
         * @since 5.9.0 Renamed `$status` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @param stdClass        $item    Post status data.
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response Post status data.
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Retrieves the post status' schema, conforming to JSON Schema.
         *
         * @since 4.7.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema()
        {
        }
        /**
         * Retrieves the query params for collections.
         *
         * @since 4.7.0
         *
         * @return array Collection parameters.
         */
        public function get_collection_params()
        {
        }
    }
    /**
     * REST API: WP_REST_Edit_Site_Export_Controller class
     *
     * @package    WordPress
     * @subpackage REST_API
     */
    /**
     * Controller which provides REST endpoint for exporting current templates
     * and template parts.
     *
     * @since 5.9.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_Edit_Site_Export_Controller extends \WP_REST_Controller
    {
        /**
         * Constructor.
         *
         * @since 5.9.0
         */
        public function __construct()
        {
        }
        /**
         * Registers the site export route.
         *
         * @since 5.9.0
         */
        public function register_routes()
        {
        }
        /**
         * Checks whether a given request has permission to export.
         *
         * @since 5.9.0
         *
         * @return WP_Error|true True if the request has access, or WP_Error object.
         */
        public function permissions_check()
        {
        }
        /**
         * Output a ZIP file with an export of the current templates
         * and template parts from the site editor, and close the connection.
         *
         * @since 5.9.0
         *
         * @return WP_Error|void
         */
        public function export()
        {
        }
    }
    /**
     * REST API: WP_REST_Menu_Items_Controller class
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 5.9.0
     */
    /**
     * Core class to access nav items via the REST API.
     *
     * @since 5.9.0
     *
     * @see WP_REST_Posts_Controller
     */
    class WP_REST_Menu_Items_Controller extends \WP_REST_Posts_Controller
    {
        /**
         * Get the nav menu item, if the ID is valid.
         *
         * @since 5.9.0
         *
         * @param int $id Supplied ID.
         * @return object|WP_Error Post object if ID is valid, WP_Error otherwise.
         */
        protected function get_nav_menu_item($id)
        {
        }
        /**
         * Checks if a given request has access to read menu items.
         *
         * @since 5.9.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access, WP_Error object otherwise.
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * Checks if a given request has access to read a menu item if they have access to edit them.
         *
         * @since 5.9.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return bool|WP_Error True if the request has read access for the item, WP_Error object otherwise.
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * Checks whether the current user has read permission for the endpoint.
         *
         * This allows for any user that can `edit_theme_options` or edit any REST API available post type.
         *
         * @since 5.9.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return bool|WP_Error Whether the current user has permission.
         */
        protected function check_has_read_only_access($request)
        {
        }
        /**
         * Creates a single post.
         *
         * @since 5.9.0
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function create_item($request)
        {
        }
        /**
         * Updates a single nav menu item.
         *
         * @since 5.9.0
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function update_item($request)
        {
        }
        /**
         * Deletes a single menu item.
         *
         * @since 5.9.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error True on success, or WP_Error object on failure.
         */
        public function delete_item($request)
        {
        }
        /**
         * Prepares a single post for create or update.
         *
         * @since 5.9.0
         *
         * @param WP_REST_Request $request Request object.
         *
         * @return object|WP_Error
         */
        protected function prepare_item_for_database($request)
        {
        }
        /**
         * Prepares a single post output for response.
         *
         * @since 5.9.0
         *
         * @param WP_Post          $item   Post object.
         * @param WP_REST_Request $request Request object.
         * @return WP_REST_Response Response object.
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Prepares links for the request.
         *
         * @since 5.9.0
         *
         * @param WP_Post $post Post object.
         * @return array Links for the given post.
         */
        protected function prepare_links($post)
        {
        }
        /**
         * Retrieve Link Description Objects that should be added to the Schema for the posts collection.
         *
         * @since 5.9.0
         *
         * @return array
         */
        protected function get_schema_links()
        {
        }
        /**
         * Retrieves the term's schema, conforming to JSON Schema.
         *
         * @since 5.9.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema()
        {
        }
        /**
         * Retrieves the query params for the posts collection.
         *
         * @since 5.9.0
         *
         * @return array Collection parameters.
         */
        public function get_collection_params()
        {
        }
        /**
         * Determines the allowed query_vars for a get_items() response and prepares
         * them for WP_Query.
         *
         * @since 5.9.0
         *
         * @param array           $prepared_args Optional. Prepared WP_Query arguments. Default empty array.
         * @param WP_REST_Request $request       Optional. Full details about the request.
         * @return array Items query arguments.
         */
        protected function prepare_items_query($prepared_args = array(), $request = \null)
        {
        }
        /**
         * Gets the id of the menu that the given menu item belongs to.
         *
         * @since 5.9.0
         *
         * @param int $menu_item_id Menu item id.
         * @return int
         */
        protected function get_menu_id($menu_item_id)
        {
        }
    }
    /**
     * REST API: WP_REST_Comments_Controller class
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 4.7.0
     */
    /**
     * Core controller used to access comments via the REST API.
     *
     * @since 4.7.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_Comments_Controller extends \WP_REST_Controller
    {
        /**
         * Instance of a comment meta fields object.
         *
         * @since 4.7.0
         * @var WP_REST_Comment_Meta_Fields
         */
        protected $meta;
        /**
         * Constructor.
         *
         * @since 4.7.0
         */
        public function __construct()
        {
        }
        /**
         * Registers the routes for comments.
         *
         * @since 4.7.0
         *
         * @see register_rest_route()
         */
        public function register_routes()
        {
        }
        /**
         * Checks if a given request has access to read comments.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access, error object otherwise.
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * Retrieves a list of comment items.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or error object on failure.
         */
        public function get_items($request)
        {
        }
        /**
         * Get the comment, if the ID is valid.
         *
         * @since 4.7.2
         *
         * @param int $id Supplied ID.
         * @return WP_Comment|WP_Error Comment object if ID is valid, WP_Error otherwise.
         */
        protected function get_comment($id)
        {
        }
        /**
         * Checks if a given request has access to read the comment.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access for the item, error object otherwise.
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * Retrieves a comment.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or error object on failure.
         */
        public function get_item($request)
        {
        }
        /**
         * Checks if a given request has access to create a comment.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has access to create items, error object otherwise.
         */
        public function create_item_permissions_check($request)
        {
        }
        /**
         * Creates a comment.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or error object on failure.
         */
        public function create_item($request)
        {
        }
        /**
         * Checks if a given REST request has access to update a comment.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has access to update the item, error object otherwise.
         */
        public function update_item_permissions_check($request)
        {
        }
        /**
         * Updates a comment.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or error object on failure.
         */
        public function update_item($request)
        {
        }
        /**
         * Checks if a given request has access to delete a comment.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has access to delete the item, error object otherwise.
         */
        public function delete_item_permissions_check($request)
        {
        }
        /**
         * Deletes a comment.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or error object on failure.
         */
        public function delete_item($request)
        {
        }
        /**
         * Prepares a single comment output for response.
         *
         * @since 4.7.0
         * @since 5.9.0 Renamed `$comment` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @param WP_Comment      $item    Comment object.
         * @param WP_REST_Request $request Request object.
         * @return WP_REST_Response Response object.
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Prepares links for the request.
         *
         * @since 4.7.0
         *
         * @param WP_Comment $comment Comment object.
         * @return array Links for the given comment.
         */
        protected function prepare_links($comment)
        {
        }
        /**
         * Prepends internal property prefix to query parameters to match our response fields.
         *
         * @since 4.7.0
         *
         * @param string $query_param Query parameter.
         * @return string The normalized query parameter.
         */
        protected function normalize_query_param($query_param)
        {
        }
        /**
         * Checks comment_approved to set comment status for single comment output.
         *
         * @since 4.7.0
         *
         * @param string|int $comment_approved comment status.
         * @return string Comment status.
         */
        protected function prepare_status_response($comment_approved)
        {
        }
        /**
         * Prepares a single comment to be inserted into the database.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Request object.
         * @return array|WP_Error Prepared comment, otherwise WP_Error object.
         */
        protected function prepare_item_for_database($request)
        {
        }
        /**
         * Retrieves the comment's schema, conforming to JSON Schema.
         *
         * @since 4.7.0
         *
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * Retrieves the query params for collections.
         *
         * @since 4.7.0
         *
         * @return array Comments collection parameters.
         */
        public function get_collection_params()
        {
        }
        /**
         * Sets the comment_status of a given comment object when creating or updating a comment.
         *
         * @since 4.7.0
         *
         * @param string|int $new_status New comment status.
         * @param int        $comment_id Comment ID.
         * @return bool Whether the status was changed.
         */
        protected function handle_status_param($new_status, $comment_id)
        {
        }
        /**
         * Checks if the post can be read.
         *
         * Correctly handles posts with the inherit status.
         *
         * @since 4.7.0
         *
         * @param WP_Post         $post    Post object.
         * @param WP_REST_Request $request Request data to check.
         * @return bool Whether post can be read.
         */
        protected function check_read_post_permission($post, $request)
        {
        }
        /**
         * Checks if the comment can be read.
         *
         * @since 4.7.0
         *
         * @param WP_Comment      $comment Comment object.
         * @param WP_REST_Request $request Request data to check.
         * @return bool Whether the comment can be read.
         */
        protected function check_read_permission($comment, $request)
        {
        }
        /**
         * Checks if a comment can be edited or deleted.
         *
         * @since 4.7.0
         *
         * @param WP_Comment $comment Comment object.
         * @return bool Whether the comment can be edited or deleted.
         */
        protected function check_edit_permission($comment)
        {
        }
        /**
         * Checks a comment author email for validity.
         *
         * Accepts either a valid email address or empty string as a valid comment
         * author email address. Setting the comment author email to an empty
         * string is allowed when a comment is being updated.
         *
         * @since 4.7.0
         *
         * @param string          $value   Author email value submitted.
         * @param WP_REST_Request $request Full details about the request.
         * @param string          $param   The parameter name.
         * @return string|WP_Error The sanitized email address, if valid,
         *                         otherwise an error.
         */
        public function check_comment_author_email($value, $request, $param)
        {
        }
        /**
         * If empty comments are not allowed, checks if the provided comment content is not empty.
         *
         * @since 5.6.0
         *
         * @param array $prepared_comment The prepared comment data.
         * @return bool True if the content is allowed, false otherwise.
         */
        protected function check_is_comment_content_allowed($prepared_comment)
        {
        }
    }
    /**
     * REST API: WP_REST_Widgets_Controller class
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 5.8.0
     */
    /**
     * Core class to access widgets via the REST API.
     *
     * @since 5.8.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_Widgets_Controller extends \WP_REST_Controller
    {
        /**
         * Tracks whether {@see retrieve_widgets()} has been called in the current request.
         *
         * @since 5.9.0
         * @var bool
         */
        protected $widgets_retrieved = \false;
        /**
         * Whether the controller supports batching.
         *
         * @since 5.9.0
         * @var array
         */
        protected $allow_batch = array('v1' => \true);
        /**
         * Widgets controller constructor.
         *
         * @since 5.8.0
         */
        public function __construct()
        {
        }
        /**
         * Registers the widget routes for the controller.
         *
         * @since 5.8.0
         */
        public function register_routes()
        {
        }
        /**
         * Checks if a given request has access to get widgets.
         *
         * @since 5.8.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access, WP_Error object otherwise.
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * Retrieves a collection of widgets.
         *
         * @since 5.8.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function get_items($request)
        {
        }
        /**
         * Checks if a given request has access to get a widget.
         *
         * @since 5.8.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access, WP_Error object otherwise.
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * Checks if a sidebar can be read publicly.
         *
         * @since 5.9.0
         *
         * @param string $sidebar_id The sidebar ID.
         * @return bool Whether the sidebar can be read.
         */
        protected function check_read_sidebar_permission($sidebar_id)
        {
        }
        /**
         * Gets an individual widget.
         *
         * @since 5.8.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function get_item($request)
        {
        }
        /**
         * Checks if a given request has access to create widgets.
         *
         * @since 5.8.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access, WP_Error object otherwise.
         */
        public function create_item_permissions_check($request)
        {
        }
        /**
         * Creates a widget.
         *
         * @since 5.8.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function create_item($request)
        {
        }
        /**
         * Checks if a given request has access to update widgets.
         *
         * @since 5.8.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access, WP_Error object otherwise.
         */
        public function update_item_permissions_check($request)
        {
        }
        /**
         * Updates an existing widget.
         *
         * @since 5.8.0
         *
         * @global WP_Widget_Factory $wp_widget_factory
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function update_item($request)
        {
        }
        /**
         * Checks if a given request has access to delete widgets.
         *
         * @since 5.8.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access, WP_Error object otherwise.
         */
        public function delete_item_permissions_check($request)
        {
        }
        /**
         * Deletes a widget.
         *
         * @since 5.8.0
         *
         * @global WP_Widget_Factory $wp_widget_factory
         * @global array             $wp_registered_widget_updates The registered widget update functions.
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function delete_item($request)
        {
        }
        /**
         * Performs a permissions check for managing widgets.
         *
         * @since 5.8.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error
         */
        protected function permissions_check($request)
        {
        }
        /**
         * Looks for "lost" widgets once per request.
         *
         * @since 5.9.0
         *
         * @see retrieve_widgets()
         */
        protected function retrieve_widgets()
        {
        }
        /**
         * Saves the widget in the request object.
         *
         * @since 5.8.0
         *
         * @global WP_Widget_Factory $wp_widget_factory
         * @global array             $wp_registered_widget_updates The registered widget update functions.
         *
         * @param WP_REST_Request $request    Full details about the request.
         * @param string          $sidebar_id ID of the sidebar the widget belongs to.
         * @return string|WP_Error The saved widget ID.
         */
        protected function save_widget($request, $sidebar_id)
        {
        }
        /**
         * Prepares the widget for the REST response.
         *
         * @since 5.8.0
         *
         * @global WP_Widget_Factory $wp_widget_factory
         * @global array             $wp_registered_widgets The registered widgets.
         *
         * @param array           $item    An array containing a widget_id and sidebar_id.
         * @param WP_REST_Request $request Request object.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Prepares links for the widget.
         *
         * @since 5.8.0
         *
         * @param array $prepared Widget.
         * @return array Links for the given widget.
         */
        protected function prepare_links($prepared)
        {
        }
        /**
         * Gets the list of collection params.
         *
         * @since 5.8.0
         *
         * @return array[]
         */
        public function get_collection_params()
        {
        }
        /**
         * Retrieves the widget's schema, conforming to JSON Schema.
         *
         * @since 5.8.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema()
        {
        }
    }
    /**
     * REST API: WP_REST_Widget_Types_Controller class
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 5.8.0
     */
    /**
     * Core class to access widget types via the REST API.
     *
     * @since 5.8.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_Widget_Types_Controller extends \WP_REST_Controller
    {
        /**
         * Constructor.
         *
         * @since 5.8.0
         */
        public function __construct()
        {
        }
        /**
         * Registers the widget type routes.
         *
         * @since 5.8.0
         *
         * @see register_rest_route()
         */
        public function register_routes()
        {
        }
        /**
         * Checks whether a given request has permission to read widget types.
         *
         * @since 5.8.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access, WP_Error object otherwise.
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * Retrieves the list of all widget types.
         *
         * @since 5.8.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function get_items($request)
        {
        }
        /**
         * Checks if a given request has access to read a widget type.
         *
         * @since 5.8.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access for the item, WP_Error object otherwise.
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * Checks whether the user can read widget types.
         *
         * @since 5.8.0
         *
         * @return true|WP_Error True if the widget type is visible, WP_Error otherwise.
         */
        protected function check_read_permission()
        {
        }
        /**
         * Gets the details about the requested widget.
         *
         * @since 5.8.0
         *
         * @param string $id The widget type id.
         * @return array|WP_Error The array of widget data if the name is valid, WP_Error otherwise.
         */
        public function get_widget($id)
        {
        }
        /**
         * Normalize array of widgets.
         *
         * @since 5.8.0
         *
         * @global WP_Widget_Factory $wp_widget_factory
         * @global array             $wp_registered_widgets The list of registered widgets.
         *
         * @return array Array of widgets.
         */
        protected function get_widgets()
        {
        }
        /**
         * Retrieves a single widget type from the collection.
         *
         * @since 5.8.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function get_item($request)
        {
        }
        /**
         * Prepares a widget type object for serialization.
         *
         * @since 5.8.0
         * @since 5.9.0 Renamed `$widget_type` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @param array           $item    Widget type data.
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response Widget type data.
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Prepares links for the widget type.
         *
         * @since 5.8.0
         *
         * @param array $widget_type Widget type data.
         * @return array Links for the given widget type.
         */
        protected function prepare_links($widget_type)
        {
        }
        /**
         * Retrieves the widget type's schema, conforming to JSON Schema.
         *
         * @since 5.8.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema()
        {
        }
        /**
         * An RPC-style endpoint which can be used by clients to turn user input in
         * a widget admin form into an encoded instance object.
         *
         * Accepts:
         *
         * - id:        A widget type ID.
         * - instance:  A widget's encoded instance object. Optional.
         * - form_data: Form data from submitting a widget's admin form. Optional.
         *
         * Returns:
         * - instance: The encoded instance object after updating the widget with
         *             the given form data.
         * - form:     The widget's admin form after updating the widget with the
         *             given form data.
         *
         * @since 5.8.0
         *
         * @global WP_Widget_Factory $wp_widget_factory
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function encode_form_data($request)
        {
        }
        /**
         * Returns the output of WP_Widget::widget() when called with the provided
         * instance. Used by encode_form_data() to preview a widget.
         * @since 5.8.0
         *
         * @param string    $widget   The widget's PHP class name (see class-wp-widget.php).
         * @param array     $instance Widget instance settings.
         * @return string
         */
        private function get_widget_preview($widget, $instance)
        {
        }
        /**
         * Returns the output of WP_Widget::form() when called with the provided
         * instance. Used by encode_form_data() to preview a widget's form.
         *
         * @since 5.8.0
         *
         * @param WP_Widget $widget_object Widget object to call widget() on.
         * @param array     $instance Widget instance settings.
         * @return string
         */
        private function get_widget_form($widget_object, $instance)
        {
        }
        /**
         * Renders a single Legacy Widget and wraps it in a JSON-encodable array.
         *
         * @since 5.9.0
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return array An array with rendered Legacy Widget HTML.
         */
        public function render($request)
        {
        }
        /**
         * Renders a page containing a preview of the requested Legacy Widget block.
         *
         * @since 5.9.0
         *
         * @param string $id_base The id base of the requested widget.
         * @param array  $instance The widget instance attributes.
         *
         * @return string Rendered Legacy Widget block preview.
         */
        private function render_legacy_widget_preview_iframe($id_base, $instance)
        {
        }
        /**
         * Retrieves the query params for collections.
         *
         * @since 5.8.0
         *
         * @return array Collection parameters.
         */
        public function get_collection_params()
        {
        }
    }
    /**
     * REST API: WP_REST_Taxonomies_Controller class
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 4.7.0
     */
    /**
     * Core class used to manage taxonomies via the REST API.
     *
     * @since 4.7.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_Taxonomies_Controller extends \WP_REST_Controller
    {
        /**
         * Constructor.
         *
         * @since 4.7.0
         */
        public function __construct()
        {
        }
        /**
         * Registers the routes for taxonomies.
         *
         * @since 4.7.0
         *
         * @see register_rest_route()
         */
        public function register_routes()
        {
        }
        /**
         * Checks whether a given request has permission to read taxonomies.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access, WP_Error object otherwise.
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * Retrieves all public taxonomies.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response Response object on success, or WP_Error object on failure.
         */
        public function get_items($request)
        {
        }
        /**
         * Checks if a given request has access to a taxonomy.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access for the item, otherwise false or WP_Error object.
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * Retrieves a specific taxonomy.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function get_item($request)
        {
        }
        /**
         * Prepares a taxonomy object for serialization.
         *
         * @since 4.7.0
         * @since 5.9.0 Renamed `$taxonomy` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @param WP_Taxonomy     $item    Taxonomy data.
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response Response object.
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Retrieves the taxonomy's schema, conforming to JSON Schema.
         *
         * @since 4.7.0
         * @since 5.0.0 The `visibility` property was added.
         * @since 5.9.0 The `rest_namespace` property was added.
         *
         * @return array Item schema data.
         */
        public function get_item_schema()
        {
        }
        /**
         * Retrieves the query params for collections.
         *
         * @since 4.7.0
         *
         * @return array Collection parameters.
         */
        public function get_collection_params()
        {
        }
    }
    /**
     * REST API: WP_REST_Sidebars_Controller class
     *
     * Original code from {@link https://github.com/martin-pettersson/wp-rest-api-sidebars Martin Pettersson (martin_pettersson@outlook.com)}.
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 5.8.0
     */
    /**
     * Core class used to manage a site's sidebars.
     *
     * @since 5.8.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_Sidebars_Controller extends \WP_REST_Controller
    {
        /**
         * Tracks whether {@see retrieve_widgets()} has been called in the current request.
         *
         * @since 5.9.0
         * @var bool
         */
        protected $widgets_retrieved = \false;
        /**
         * Sidebars controller constructor.
         *
         * @since 5.8.0
         */
        public function __construct()
        {
        }
        /**
         * Registers the controllers routes.
         *
         * @since 5.8.0
         */
        public function register_routes()
        {
        }
        /**
         * Checks if a given request has access to get sidebars.
         *
         * @since 5.8.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access, WP_Error object otherwise.
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * Retrieves the list of sidebars (active or inactive).
         *
         * @since 5.8.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response Response object on success.
         */
        public function get_items($request)
        {
        }
        /**
         * Checks if a given request has access to get a single sidebar.
         *
         * @since 5.8.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access, WP_Error object otherwise.
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * Checks if a sidebar can be read publicly.
         *
         * @since 5.9.0
         *
         * @param array $sidebar The registered sidebar configuration.
         * @return bool Whether the side can be read.
         */
        protected function check_read_permission($sidebar)
        {
        }
        /**
         * Retrieves one sidebar from the collection.
         *
         * @since 5.8.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function get_item($request)
        {
        }
        /**
         * Checks if a given request has access to update sidebars.
         *
         * @since 5.8.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access, WP_Error object otherwise.
         */
        public function update_item_permissions_check($request)
        {
        }
        /**
         * Updates a sidebar.
         *
         * @since 5.8.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response Response object on success, or WP_Error object on failure.
         */
        public function update_item($request)
        {
        }
        /**
         * Checks if the user has permissions to make the request.
         *
         * @since 5.8.0
         *
         * @return true|WP_Error True if the request has read access, WP_Error object otherwise.
         */
        protected function do_permissions_check()
        {
        }
        /**
         * Retrieves the registered sidebar with the given id.
         *
         * @since 5.8.0
         *
         * @param string|int $id ID of the sidebar.
         * @return array|null The discovered sidebar, or null if it is not registered.
         */
        protected function get_sidebar($id)
        {
        }
        /**
         * Looks for "lost" widgets once per request.
         *
         * @since 5.9.0
         *
         * @see retrieve_widgets()
         */
        protected function retrieve_widgets()
        {
        }
        /**
         * Prepares a single sidebar output for response.
         *
         * @since 5.8.0
         * @since 5.9.0 Renamed `$raw_sidebar` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @global array $wp_registered_sidebars The registered sidebars.
         * @global array $wp_registered_widgets  The registered widgets.
         *
         * @param array           $item    Sidebar instance.
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response Prepared response object.
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Prepares links for the sidebar.
         *
         * @since 5.8.0
         *
         * @param array $sidebar Sidebar.
         * @return array Links for the given widget.
         */
        protected function prepare_links($sidebar)
        {
        }
        /**
         * Retrieves the block type' schema, conforming to JSON Schema.
         *
         * @since 5.8.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema()
        {
        }
    }
    /**
     * REST API: WP_REST_Terms_Controller class
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 4.7.0
     */
    /**
     * Core class used to managed terms associated with a taxonomy via the REST API.
     *
     * @since 4.7.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_Terms_Controller extends \WP_REST_Controller
    {
        /**
         * Taxonomy key.
         *
         * @since 4.7.0
         * @var string
         */
        protected $taxonomy;
        /**
         * Instance of a term meta fields object.
         *
         * @since 4.7.0
         * @var WP_REST_Term_Meta_Fields
         */
        protected $meta;
        /**
         * Column to have the terms be sorted by.
         *
         * @since 4.7.0
         * @var string
         */
        protected $sort_column;
        /**
         * Number of terms that were found.
         *
         * @since 4.7.0
         * @var int
         */
        protected $total_terms;
        /**
         * Whether the controller supports batching.
         *
         * @since 5.9.0
         * @var array
         */
        protected $allow_batch = array('v1' => \true);
        /**
         * Constructor.
         *
         * @since 4.7.0
         *
         * @param string $taxonomy Taxonomy key.
         */
        public function __construct($taxonomy)
        {
        }
        /**
         * Registers the routes for terms.
         *
         * @since 4.7.0
         *
         * @see register_rest_route()
         */
        public function register_routes()
        {
        }
        /**
         * Checks if the terms for a post can be read.
         *
         * @since 6.0.3
         *
         * @param WP_Post         $post    Post object.
         * @param WP_REST_Request $request Full details about the request.
         * @return bool Whether the terms for the post can be read.
         */
        public function check_read_terms_permission_for_post($post, $request)
        {
        }
        /**
         * Checks if a request has access to read terms in the specified taxonomy.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access, otherwise false or WP_Error object.
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * Retrieves terms associated with a taxonomy.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function get_items($request)
        {
        }
        /**
         * Get the term, if the ID is valid.
         *
         * @since 4.7.2
         *
         * @param int $id Supplied ID.
         * @return WP_Term|WP_Error Term object if ID is valid, WP_Error otherwise.
         */
        protected function get_term($id)
        {
        }
        /**
         * Checks if a request has access to read or edit the specified term.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access for the item, otherwise false or WP_Error object.
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * Gets a single term from a taxonomy.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function get_item($request)
        {
        }
        /**
         * Checks if a request has access to create a term.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has access to create items, false or WP_Error object otherwise.
         */
        public function create_item_permissions_check($request)
        {
        }
        /**
         * Creates a single term in a taxonomy.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function create_item($request)
        {
        }
        /**
         * Checks if a request has access to update the specified term.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has access to update the item, false or WP_Error object otherwise.
         */
        public function update_item_permissions_check($request)
        {
        }
        /**
         * Updates a single term from a taxonomy.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function update_item($request)
        {
        }
        /**
         * Checks if a request has access to delete the specified term.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has access to delete the item, otherwise false or WP_Error object.
         */
        public function delete_item_permissions_check($request)
        {
        }
        /**
         * Deletes a single term from a taxonomy.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function delete_item($request)
        {
        }
        /**
         * Prepares a single term for create or update.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Request object.
         * @return object Term object.
         */
        public function prepare_item_for_database($request)
        {
        }
        /**
         * Prepares a single term output for response.
         *
         * @since 4.7.0
         *
         * @param WP_Term         $item    Term object.
         * @param WP_REST_Request $request Request object.
         * @return WP_REST_Response Response object.
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Prepares links for the request.
         *
         * @since 4.7.0
         *
         * @param WP_Term $term Term object.
         * @return array Links for the given term.
         */
        protected function prepare_links($term)
        {
        }
        /**
         * Retrieves the term's schema, conforming to JSON Schema.
         *
         * @since 4.7.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema()
        {
        }
        /**
         * Retrieves the query params for collections.
         *
         * @since 4.7.0
         *
         * @return array Collection parameters.
         */
        public function get_collection_params()
        {
        }
        /**
         * Checks that the taxonomy is valid.
         *
         * @since 4.7.0
         *
         * @param string $taxonomy Taxonomy to check.
         * @return bool Whether the taxonomy is allowed for REST management.
         */
        protected function check_is_taxonomy_allowed($taxonomy)
        {
        }
    }
    /**
     * REST API: WP_REST_Menus_Controller class
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 5.9.0
     */
    /**
     * Core class used to managed menu terms associated via the REST API.
     *
     * @since 5.9.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_Menus_Controller extends \WP_REST_Terms_Controller
    {
        /**
         * Checks if a request has access to read menus.
         *
         * @since 5.9.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return bool|WP_Error True if the request has read access, otherwise false or WP_Error object.
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * Checks if a request has access to read or edit the specified menu.
         *
         * @since 5.9.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return bool|WP_Error True if the request has read access for the item, otherwise false or WP_Error object.
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * Gets the term, if the ID is valid.
         *
         * @since 5.9.0
         *
         * @param int $id Supplied ID.
         * @return WP_Term|WP_Error Term object if ID is valid, WP_Error otherwise.
         */
        protected function get_term($id)
        {
        }
        /**
         * Checks whether the current user has read permission for the endpoint.
         *
         * This allows for any user that can `edit_theme_options` or edit any REST API available post type.
         *
         * @since 5.9.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return bool|WP_Error Whether the current user has permission.
         */
        protected function check_has_read_only_access($request)
        {
        }
        /**
         * Prepares a single term output for response.
         *
         * @since 5.9.0
         *
         * @param WP_Term         $term    Term object.
         * @param WP_REST_Request $request Request object.
         * @return WP_REST_Response Response object.
         */
        public function prepare_item_for_response($term, $request)
        {
        }
        /**
         * Prepares links for the request.
         *
         * @since 5.9.0
         *
         * @param WP_Term $term Term object.
         * @return array Links for the given term.
         */
        protected function prepare_links($term)
        {
        }
        /**
         * Prepares a single term for create or update.
         *
         * @since 5.9.0
         *
         * @param WP_REST_Request $request Request object.
         * @return object Prepared term data.
         */
        public function prepare_item_for_database($request)
        {
        }
        /**
         * Creates a single term in a taxonomy.
         *
         * @since 5.9.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function create_item($request)
        {
        }
        /**
         * Updates a single term from a taxonomy.
         *
         * @since 5.9.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function update_item($request)
        {
        }
        /**
         * Deletes a single term from a taxonomy.
         *
         * @since 5.9.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function delete_item($request)
        {
        }
        /**
         * Returns the value of a menu's auto_add setting.
         *
         * @since 5.9.0
         *
         * @param int $menu_id The menu id to query.
         * @return bool The value of auto_add.
         */
        protected function get_menu_auto_add($menu_id)
        {
        }
        /**
         * Updates the menu's auto add from a REST request.
         *
         * @since 5.9.0
         *
         * @param int             $menu_id The menu id to update.
         * @param WP_REST_Request $request Full details about the request.
         * @return bool True if the auto add setting was successfully updated.
         */
        protected function handle_auto_add($menu_id, $request)
        {
        }
        /**
         * Returns the names of the locations assigned to the menu.
         *
         * @since 5.9.0
         *
         * @param int $menu_id The menu id.
         * @return string[] The locations assigned to the menu.
         */
        protected function get_menu_locations($menu_id)
        {
        }
        /**
         * Updates the menu's locations from a REST request.
         *
         * @since 5.9.0
         *
         * @param int             $menu_id The menu id to update.
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True on success, a WP_Error on an error updating any of the locations.
         */
        protected function handle_locations($menu_id, $request)
        {
        }
        /**
         * Retrieves the term's schema, conforming to JSON Schema.
         *
         * @since 5.9.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema()
        {
        }
    }
    /**
     * REST API: WP_REST_Menu_Locations_Controller class
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 5.9.0
     */
    /**
     * Core class used to access menu locations via the REST API.
     *
     * @since 5.9.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_Menu_Locations_Controller extends \WP_REST_Controller
    {
        /**
         * Menu Locations Constructor.
         *
         * @since 5.9.0
         */
        public function __construct()
        {
        }
        /**
         * Registers the routes for the objects of the controller.
         *
         * @since 5.9.0
         *
         * @see register_rest_route()
         */
        public function register_routes()
        {
        }
        /**
         * Checks whether a given request has permission to read menu locations.
         *
         * @since 5.9.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_Error|bool True if the request has read access, WP_Error object otherwise.
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * Retrieves all menu locations, depending on user context.
         *
         * @since 5.9.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_Error|WP_REST_Response Response object on success, or WP_Error object on failure.
         */
        public function get_items($request)
        {
        }
        /**
         * Checks if a given request has access to read a menu location.
         *
         * @since 5.9.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_Error|bool True if the request has read access for the item, WP_Error object otherwise.
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * Retrieves a specific menu location.
         *
         * @since 5.9.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_Error|WP_REST_Response Response object on success, or WP_Error object on failure.
         */
        public function get_item($request)
        {
        }
        /**
         * Prepares a menu location object for serialization.
         *
         * @since 5.9.0
         *
         * @param stdClass        $item    Post status data.
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response Menu location data.
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Retrieves the menu location's schema, conforming to JSON Schema.
         *
         * @since 5.9.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema()
        {
        }
        /**
         * Retrieves the query params for collections.
         *
         * @since 5.9.0
         *
         * @return array Collection parameters.
         */
        public function get_collection_params()
        {
        }
        /**
         * Prepares links for the request.
         *
         * @since 5.9.0
         *
         * @param stdClass $location Menu location.
         * @return array Links for the given menu location.
         */
        protected function prepare_links($location)
        {
        }
    }
    /**
     * REST API: WP_REST_Revisions_Controller class
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 4.7.0
     */
    /**
     * Core class used to access revisions via the REST API.
     *
     * @since 4.7.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_Revisions_Controller extends \WP_REST_Controller
    {
        /**
         * Parent post type.
         *
         * @since 4.7.0
         * @var string
         */
        private $parent_post_type;
        /**
         * Parent controller.
         *
         * @since 4.7.0
         * @var WP_REST_Controller
         */
        private $parent_controller;
        /**
         * The base of the parent controller's route.
         *
         * @since 4.7.0
         * @var string
         */
        private $parent_base;
        /**
         * Constructor.
         *
         * @since 4.7.0
         *
         * @param string $parent_post_type Post type of the parent.
         */
        public function __construct($parent_post_type)
        {
        }
        /**
         * Registers the routes for revisions based on post types supporting revisions.
         *
         * @since 4.7.0
         *
         * @see register_rest_route()
         */
        public function register_routes()
        {
        }
        /**
         * Get the parent post, if the ID is valid.
         *
         * @since 4.7.2
         *
         * @param int $parent Supplied ID.
         * @return WP_Post|WP_Error Post object if ID is valid, WP_Error otherwise.
         */
        protected function get_parent($parent)
        {
        }
        /**
         * Checks if a given request has access to get revisions.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access, WP_Error object otherwise.
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * Get the revision, if the ID is valid.
         *
         * @since 4.7.2
         *
         * @param int $id Supplied ID.
         * @return WP_Post|WP_Error Revision post object if ID is valid, WP_Error otherwise.
         */
        protected function get_revision($id)
        {
        }
        /**
         * Gets a collection of revisions.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function get_items($request)
        {
        }
        /**
         * Checks if a given request has access to get a specific revision.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access for the item, WP_Error object otherwise.
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * Retrieves one revision from the collection.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function get_item($request)
        {
        }
        /**
         * Checks if a given request has access to delete a revision.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has access to delete the item, WP_Error object otherwise.
         */
        public function delete_item_permissions_check($request)
        {
        }
        /**
         * Deletes a single revision.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function delete_item($request)
        {
        }
        /**
         * Determines the allowed query_vars for a get_items() response and prepares
         * them for WP_Query.
         *
         * @since 5.0.0
         *
         * @param array           $prepared_args Optional. Prepared WP_Query arguments. Default empty array.
         * @param WP_REST_Request $request       Optional. Full details about the request.
         * @return array Items query arguments.
         */
        protected function prepare_items_query($prepared_args = array(), $request = \null)
        {
        }
        /**
         * Prepares the revision for the REST response.
         *
         * @since 4.7.0
         * @since 5.9.0 Renamed `$post` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @param WP_Post         $item    Post revision object.
         * @param WP_REST_Request $request Request object.
         * @return WP_REST_Response Response object.
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Checks the post_date_gmt or modified_gmt and prepare any post or
         * modified date for single post output.
         *
         * @since 4.7.0
         *
         * @param string      $date_gmt GMT publication time.
         * @param string|null $date     Optional. Local publication time. Default null.
         * @return string|null ISO8601/RFC3339 formatted datetime, otherwise null.
         */
        protected function prepare_date_response($date_gmt, $date = \null)
        {
        }
        /**
         * Retrieves the revision's schema, conforming to JSON Schema.
         *
         * @since 4.7.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema()
        {
        }
        /**
         * Retrieves the query params for collections.
         *
         * @since 4.7.0
         *
         * @return array Collection parameters.
         */
        public function get_collection_params()
        {
        }
        /**
         * Checks the post excerpt and prepare it for single post output.
         *
         * @since 4.7.0
         *
         * @param string  $excerpt The post excerpt.
         * @param WP_Post $post    Post revision object.
         * @return string Prepared excerpt or empty string.
         */
        protected function prepare_excerpt_response($excerpt, $post)
        {
        }
    }
    /**
     * REST API: WP_REST_Autosaves_Controller class.
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 5.0.0
     */
    /**
     * Core class used to access autosaves via the REST API.
     *
     * @since 5.0.0
     *
     * @see WP_REST_Revisions_Controller
     * @see WP_REST_Controller
     */
    class WP_REST_Autosaves_Controller extends \WP_REST_Revisions_Controller
    {
        /**
         * Parent post type.
         *
         * @since 5.0.0
         * @var string
         */
        private $parent_post_type;
        /**
         * Parent post controller.
         *
         * @since 5.0.0
         * @var WP_REST_Controller
         */
        private $parent_controller;
        /**
         * Revision controller.
         *
         * @since 5.0.0
         * @var WP_REST_Revisions_Controller
         */
        private $revisions_controller;
        /**
         * The base of the parent controller's route.
         *
         * @since 5.0.0
         * @var string
         */
        private $parent_base;
        /**
         * Constructor.
         *
         * @since 5.0.0
         *
         * @param string $parent_post_type Post type of the parent.
         */
        public function __construct($parent_post_type)
        {
        }
        /**
         * Registers the routes for autosaves.
         *
         * @since 5.0.0
         *
         * @see register_rest_route()
         */
        public function register_routes()
        {
        }
        /**
         * Get the parent post.
         *
         * @since 5.0.0
         *
         * @param int $parent_id Supplied ID.
         * @return WP_Post|WP_Error Post object if ID is valid, WP_Error otherwise.
         */
        protected function get_parent($parent_id)
        {
        }
        /**
         * Checks if a given request has access to get autosaves.
         *
         * @since 5.0.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access, WP_Error object otherwise.
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * Checks if a given request has access to create an autosave revision.
         *
         * Autosave revisions inherit permissions from the parent post,
         * check if the current user has permission to edit the post.
         *
         * @since 5.0.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has access to create the item, WP_Error object otherwise.
         */
        public function create_item_permissions_check($request)
        {
        }
        /**
         * Creates, updates or deletes an autosave revision.
         *
         * @since 5.0.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function create_item($request)
        {
        }
        /**
         * Get the autosave, if the ID is valid.
         *
         * @since 5.0.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_Post|WP_Error Revision post object if ID is valid, WP_Error otherwise.
         */
        public function get_item($request)
        {
        }
        /**
         * Gets a collection of autosaves using wp_get_post_autosave.
         *
         * Contains the user's autosave, for empty if it doesn't exist.
         *
         * @since 5.0.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function get_items($request)
        {
        }
        /**
         * Retrieves the autosave's schema, conforming to JSON Schema.
         *
         * @since 5.0.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema()
        {
        }
        /**
         * Creates autosave for the specified post.
         *
         * From wp-admin/post.php.
         *
         * @since 5.0.0
         *
         * @param array $post_data Associative array containing the post data.
         * @return mixed The autosave revision ID or WP_Error.
         */
        public function create_post_autosave($post_data)
        {
        }
        /**
         * Prepares the revision for the REST response.
         *
         * @since 5.0.0
         * @since 5.9.0 Renamed `$post` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @param WP_Post         $item    Post revision object.
         * @param WP_REST_Request $request Request object.
         * @return WP_REST_Response Response object.
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Retrieves the query params for the autosaves collection.
         *
         * @since 5.0.0
         *
         * @return array Collection parameters.
         */
        public function get_collection_params()
        {
        }
    }
    /**
     * REST API: WP_REST_Attachments_Controller class
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 4.7.0
     */
    /**
     * Core controller used to access attachments via the REST API.
     *
     * @since 4.7.0
     *
     * @see WP_REST_Posts_Controller
     */
    class WP_REST_Attachments_Controller extends \WP_REST_Posts_Controller
    {
        /**
         * Whether the controller supports batching.
         *
         * @since 5.9.0
         * @var false
         */
        protected $allow_batch = \false;
        /**
         * Registers the routes for attachments.
         *
         * @since 5.3.0
         *
         * @see register_rest_route()
         */
        public function register_routes()
        {
        }
        /**
         * Determines the allowed query_vars for a get_items() response and
         * prepares for WP_Query.
         *
         * @since 4.7.0
         *
         * @param array           $prepared_args Optional. Array of prepared arguments. Default empty array.
         * @param WP_REST_Request $request       Optional. Request to prepare items for.
         * @return array Array of query arguments.
         */
        protected function prepare_items_query($prepared_args = array(), $request = \null)
        {
        }
        /**
         * Checks if a given request has access to create an attachment.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error Boolean true if the attachment may be created, or a WP_Error if not.
         */
        public function create_item_permissions_check($request)
        {
        }
        /**
         * Creates a single attachment.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, WP_Error object on failure.
         */
        public function create_item($request)
        {
        }
        /**
         * Inserts the attachment post in the database. Does not update the attachment meta.
         *
         * @since 5.3.0
         *
         * @param WP_REST_Request $request
         * @return array|WP_Error
         */
        protected function insert_attachment($request)
        {
        }
        /**
         * Updates a single attachment.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, WP_Error object on failure.
         */
        public function update_item($request)
        {
        }
        /**
         * Performs post processing on an attachment.
         *
         * @since 5.3.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, WP_Error object on failure.
         */
        public function post_process_item($request)
        {
        }
        /**
         * Checks if a given request can perform post processing on an attachment.
         *
         * @since 5.3.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has access to update the item, WP_Error object otherwise.
         */
        public function post_process_item_permissions_check($request)
        {
        }
        /**
         * Checks if a given request has access to editing media.
         *
         * @since 5.5.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access, WP_Error object otherwise.
         */
        public function edit_media_item_permissions_check($request)
        {
        }
        /**
         * Applies edits to a media item and creates a new attachment record.
         *
         * @since 5.5.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, WP_Error object on failure.
         */
        public function edit_media_item($request)
        {
        }
        /**
         * Prepares a single attachment for create or update.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Request object.
         * @return stdClass|WP_Error Post object.
         */
        protected function prepare_item_for_database($request)
        {
        }
        /**
         * Prepares a single attachment output for response.
         *
         * @since 4.7.0
         * @since 5.9.0 Renamed `$post` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @param WP_Post         $item    Attachment object.
         * @param WP_REST_Request $request Request object.
         * @return WP_REST_Response Response object.
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Retrieves the attachment's schema, conforming to JSON Schema.
         *
         * @since 4.7.0
         *
         * @return array Item schema as an array.
         */
        public function get_item_schema()
        {
        }
        /**
         * Handles an upload via raw POST data.
         *
         * @since 4.7.0
         *
         * @param array $data    Supplied file data.
         * @param array $headers HTTP headers from the request.
         * @return array|WP_Error Data from wp_handle_sideload().
         */
        protected function upload_from_data($data, $headers)
        {
        }
        /**
         * Parses filename from a Content-Disposition header value.
         *
         * As per RFC6266:
         *
         *     content-disposition = "Content-Disposition" ":"
         *                            disposition-type *( ";" disposition-parm )
         *
         *     disposition-type    = "inline" | "attachment" | disp-ext-type
         *                         ; case-insensitive
         *     disp-ext-type       = token
         *
         *     disposition-parm    = filename-parm | disp-ext-parm
         *
         *     filename-parm       = "filename" "=" value
         *                         | "filename*" "=" ext-value
         *
         *     disp-ext-parm       = token "=" value
         *                         | ext-token "=" ext-value
         *     ext-token           = <the characters in token, followed by "*">
         *
         * @since 4.7.0
         *
         * @link https://tools.ietf.org/html/rfc2388
         * @link https://tools.ietf.org/html/rfc6266
         *
         * @param string[] $disposition_header List of Content-Disposition header values.
         * @return string|null Filename if available, or null if not found.
         */
        public static function get_filename_from_disposition($disposition_header)
        {
        }
        /**
         * Retrieves the query params for collections of attachments.
         *
         * @since 4.7.0
         *
         * @return array Query parameters for the attachment collection as an array.
         */
        public function get_collection_params()
        {
        }
        /**
         * Handles an upload via multipart/form-data ($_FILES).
         *
         * @since 4.7.0
         *
         * @param array $files   Data from the `$_FILES` superglobal.
         * @param array $headers HTTP headers from the request.
         * @return array|WP_Error Data from wp_handle_upload().
         */
        protected function upload_from_file($files, $headers)
        {
        }
        /**
         * Retrieves the supported media types.
         *
         * Media types are considered the MIME type category.
         *
         * @since 4.7.0
         *
         * @return array Array of supported media types.
         */
        protected function get_media_types()
        {
        }
        /**
         * Determine if uploaded file exceeds space quota on multisite.
         *
         * Replicates check_upload_size().
         *
         * @since 4.9.8
         *
         * @param array $file $_FILES array for a given file.
         * @return true|WP_Error True if can upload, error for errors.
         */
        protected function check_upload_size($file)
        {
        }
        /**
         * Gets the request args for the edit item route.
         *
         * @since 5.5.0
         *
         * @return array
         */
        protected function get_edit_media_item_args()
        {
        }
    }
    /**
     * REST API: WP_REST_Application_Passwords_Controller class
     *
     * @package    WordPress
     * @subpackage REST_API
     * @since      5.6.0
     */
    /**
     * Core class to access a user's application passwords via the REST API.
     *
     * @since 5.6.0
     *
     * @see   WP_REST_Controller
     */
    class WP_REST_Application_Passwords_Controller extends \WP_REST_Controller
    {
        /**
         * Application Passwords controller constructor.
         *
         * @since 5.6.0
         */
        public function __construct()
        {
        }
        /**
         * Registers the REST API routes for the application passwords controller.
         *
         * @since 5.6.0
         */
        public function register_routes()
        {
        }
        /**
         * Checks if a given request has access to get application passwords.
         *
         * @since 5.6.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access, WP_Error object otherwise.
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * Retrieves a collection of application passwords.
         *
         * @since 5.6.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function get_items($request)
        {
        }
        /**
         * Checks if a given request has access to get a specific application password.
         *
         * @since 5.6.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access for the item, WP_Error object otherwise.
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * Retrieves one application password from the collection.
         *
         * @since 5.6.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function get_item($request)
        {
        }
        /**
         * Checks if a given request has access to create application passwords.
         *
         * @since 5.6.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has access to create items, WP_Error object otherwise.
         */
        public function create_item_permissions_check($request)
        {
        }
        /**
         * Creates an application password.
         *
         * @since 5.6.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function create_item($request)
        {
        }
        /**
         * Checks if a given request has access to update application passwords.
         *
         * @since 5.6.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has access to create items, WP_Error object otherwise.
         */
        public function update_item_permissions_check($request)
        {
        }
        /**
         * Updates an application password.
         *
         * @since 5.6.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function update_item($request)
        {
        }
        /**
         * Checks if a given request has access to delete all application passwords for a user.
         *
         * @since 5.6.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has access to delete the item, WP_Error object otherwise.
         */
        public function delete_items_permissions_check($request)
        {
        }
        /**
         * Deletes all application passwords for a user.
         *
         * @since 5.6.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function delete_items($request)
        {
        }
        /**
         * Checks if a given request has access to delete a specific application password for a user.
         *
         * @since 5.6.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has access to delete the item, WP_Error object otherwise.
         */
        public function delete_item_permissions_check($request)
        {
        }
        /**
         * Deletes an application password for a user.
         *
         * @since 5.6.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function delete_item($request)
        {
        }
        /**
         * Checks if a given request has access to get the currently used application password for a user.
         *
         * @since 5.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access for the item, WP_Error object otherwise.
         */
        public function get_current_item_permissions_check($request)
        {
        }
        /**
         * Retrieves the application password being currently used for authentication of a user.
         *
         * @since 5.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function get_current_item($request)
        {
        }
        /**
         * Performs a permissions check for the request.
         *
         * @since 5.6.0
         * @deprecated 5.7.0 Use `edit_user` directly or one of the specific meta capabilities introduced in 5.7.0.
         *
         * @param WP_REST_Request $request
         * @return true|WP_Error
         */
        protected function do_permissions_check($request)
        {
        }
        /**
         * Prepares an application password for a create or update operation.
         *
         * @since 5.6.0
         *
         * @param WP_REST_Request $request Request object.
         * @return object|WP_Error The prepared item, or WP_Error object on failure.
         */
        protected function prepare_item_for_database($request)
        {
        }
        /**
         * Prepares the application password for the REST response.
         *
         * @since 5.6.0
         *
         * @param array           $item    WordPress representation of the item.
         * @param WP_REST_Request $request Request object.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Prepares links for the request.
         *
         * @since 5.6.0
         *
         * @param WP_User $user The requested user.
         * @param array   $item The application password.
         * @return array The list of links.
         */
        protected function prepare_links(\WP_User $user, $item)
        {
        }
        /**
         * Gets the requested user.
         *
         * @since 5.6.0
         *
         * @param WP_REST_Request $request The request object.
         * @return WP_User|WP_Error The WordPress user associated with the request, or a WP_Error if none found.
         */
        protected function get_user($request)
        {
        }
        /**
         * Gets the requested application password for a user.
         *
         * @since 5.6.0
         *
         * @param WP_REST_Request $request The request object.
         * @return array|WP_Error The application password details if found, a WP_Error otherwise.
         */
        protected function get_application_password($request)
        {
        }
        /**
         * Retrieves the query params for the collections.
         *
         * @since 5.6.0
         *
         * @return array Query parameters for the collection.
         */
        public function get_collection_params()
        {
        }
        /**
         * Retrieves the application password's schema, conforming to JSON Schema.
         *
         * @since 5.6.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema()
        {
        }
    }
    /**
     * REST API: WP_REST_Block_Types_Controller class
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 5.5.0
     */
    /**
     * Core class used to access block types via the REST API.
     *
     * @since 5.5.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_Block_Types_Controller extends \WP_REST_Controller
    {
        /**
         * Instance of WP_Block_Type_Registry.
         *
         * @since 5.5.0
         * @var WP_Block_Type_Registry
         */
        protected $block_registry;
        /**
         * Instance of WP_Block_Styles_Registry.
         *
         * @since 5.5.0
         * @var WP_Block_Styles_Registry
         */
        protected $style_registry;
        /**
         * Constructor.
         *
         * @since 5.5.0
         */
        public function __construct()
        {
        }
        /**
         * Registers the routes for block types.
         *
         * @since 5.5.0
         *
         * @see register_rest_route()
         */
        public function register_routes()
        {
        }
        /**
         * Checks whether a given request has permission to read post block types.
         *
         * @since 5.5.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access, WP_Error object otherwise.
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * Retrieves all post block types, depending on user context.
         *
         * @since 5.5.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function get_items($request)
        {
        }
        /**
         * Checks if a given request has access to read a block type.
         *
         * @since 5.5.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access for the item, WP_Error object otherwise.
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * Checks whether a given block type should be visible.
         *
         * @since 5.5.0
         *
         * @return true|WP_Error True if the block type is visible, WP_Error otherwise.
         */
        protected function check_read_permission()
        {
        }
        /**
         * Get the block, if the name is valid.
         *
         * @since 5.5.0
         *
         * @param string $name Block name.
         * @return WP_Block_Type|WP_Error Block type object if name is valid, WP_Error otherwise.
         */
        protected function get_block($name)
        {
        }
        /**
         * Retrieves a specific block type.
         *
         * @since 5.5.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function get_item($request)
        {
        }
        /**
         * Prepares a block type object for serialization.
         *
         * @since 5.5.0
         * @since 5.9.0 Renamed `$block_type` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @param WP_Block_Type   $item    Block type data.
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response Block type data.
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Prepares links for the request.
         *
         * @since 5.5.0
         *
         * @param WP_Block_Type $block_type Block type data.
         * @return array Links for the given block type.
         */
        protected function prepare_links($block_type)
        {
        }
        /**
         * Retrieves the block type' schema, conforming to JSON Schema.
         *
         * @since 5.5.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema()
        {
        }
        /**
         * Retrieves the query params for collections.
         *
         * @since 5.5.0
         *
         * @return array Collection parameters.
         */
        public function get_collection_params()
        {
        }
    }
    /**
     * Reusable blocks REST API: WP_REST_Blocks_Controller class
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 5.0.0
     */
    /**
     * Controller which provides a REST endpoint for the editor to read, create,
     * edit and delete reusable blocks. Blocks are stored as posts with the wp_block
     * post type.
     *
     * @since 5.0.0
     *
     * @see WP_REST_Posts_Controller
     * @see WP_REST_Controller
     */
    class WP_REST_Blocks_Controller extends \WP_REST_Posts_Controller
    {
        /**
         * Checks if a block can be read.
         *
         * @since 5.0.0
         *
         * @param WP_Post $post Post object that backs the block.
         * @return bool Whether the block can be read.
         */
        public function check_read_permission($post)
        {
        }
        /**
         * Filters a response based on the context defined in the schema.
         *
         * @since 5.0.0
         *
         * @param array  $data    Response data to filter.
         * @param string $context Context defined in the schema.
         * @return array Filtered response.
         */
        public function filter_response_by_context($data, $context)
        {
        }
        /**
         * Retrieves the block's schema, conforming to JSON Schema.
         *
         * @since 5.0.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema()
        {
        }
    }
    /**
     * REST API: WP_REST_Search_Controller class
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 5.0.0
     */
    /**
     * Core class to search through all WordPress content via the REST API.
     *
     * @since 5.0.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_Search_Controller extends \WP_REST_Controller
    {
        /**
         * ID property name.
         */
        const PROP_ID = 'id';
        /**
         * Title property name.
         */
        const PROP_TITLE = 'title';
        /**
         * URL property name.
         */
        const PROP_URL = 'url';
        /**
         * Type property name.
         */
        const PROP_TYPE = 'type';
        /**
         * Subtype property name.
         */
        const PROP_SUBTYPE = 'subtype';
        /**
         * Identifier for the 'any' type.
         */
        const TYPE_ANY = 'any';
        /**
         * Search handlers used by the controller.
         *
         * @since 5.0.0
         * @var WP_REST_Search_Handler[]
         */
        protected $search_handlers = array();
        /**
         * Constructor.
         *
         * @since 5.0.0
         *
         * @param array $search_handlers List of search handlers to use in the controller. Each search
         *                               handler instance must extend the `WP_REST_Search_Handler` class.
         */
        public function __construct(array $search_handlers)
        {
        }
        /**
         * Registers the routes for the search controller.
         *
         * @since 5.0.0
         *
         * @see register_rest_route()
         */
        public function register_routes()
        {
        }
        /**
         * Checks if a given request has access to search content.
         *
         * @since 5.0.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has search access, WP_Error object otherwise.
         */
        public function get_items_permission_check($request)
        {
        }
        /**
         * Retrieves a collection of search results.
         *
         * @since 5.0.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function get_items($request)
        {
        }
        /**
         * Prepares a single search result for response.
         *
         * @since 5.0.0
         * @since 5.6.0 The `$id` parameter can accept a string.
         * @since 5.9.0 Renamed `$id` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @param int|string      $item    ID of the item to prepare.
         * @param WP_REST_Request $request Request object.
         * @return WP_REST_Response Response object.
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Retrieves the item schema, conforming to JSON Schema.
         *
         * @since 5.0.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema()
        {
        }
        /**
         * Retrieves the query params for the search results collection.
         *
         * @since 5.0.0
         *
         * @return array Collection parameters.
         */
        public function get_collection_params()
        {
        }
        /**
         * Sanitizes the list of subtypes, to ensure only subtypes of the passed type are included.
         *
         * @since 5.0.0
         *
         * @param string|array    $subtypes  One or more subtypes.
         * @param WP_REST_Request $request   Full details about the request.
         * @param string          $parameter Parameter name.
         * @return array|WP_Error List of valid subtypes, or WP_Error object on failure.
         */
        public function sanitize_subtypes($subtypes, $request, $parameter)
        {
        }
        /**
         * Gets the search handler to handle the current request.
         *
         * @since 5.0.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Search_Handler|WP_Error Search handler for the request type, or WP_Error object on failure.
         */
        protected function get_search_handler($request)
        {
        }
    }
    /**
     * REST API: WP_REST_Global_Styles_Controller class
     *
     * @package    WordPress
     * @subpackage REST_API
     * @since 5.9.0
     */
    /**
     * Base Global Styles REST API Controller.
     */
    class WP_REST_Global_Styles_Controller extends \WP_REST_Controller
    {
        /**
         * Post type.
         *
         * @since 5.9.0
         * @var string
         */
        protected $post_type;
        /**
         * Constructor.
         * @since 5.9.0
         */
        public function __construct()
        {
        }
        /**
         * Registers the controllers routes.
         *
         * @since 5.9.0
         *
         * @return void
         */
        public function register_routes()
        {
        }
        /**
         * Sanitize the global styles ID or stylesheet to decode endpoint.
         * For example, `wp/v2/global-styles/twentytwentytwo%200.4.0`
         * would be decoded to `twentytwentytwo 0.4.0`.
         *
         * @since 5.9.0
         *
         * @param string $id_or_stylesheet Global styles ID or stylesheet.
         * @return string Sanitized global styles ID or stylesheet.
         */
        public function _sanitize_global_styles_callback($id_or_stylesheet)
        {
        }
        /**
         * Checks if a given request has access to read a single global style.
         *
         * @since 5.9.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access, WP_Error object otherwise.
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * Checks if a global style can be read.
         *
         * @since 5.9.0
         *
         * @param WP_Post $post Post object.
         * @return bool Whether the post can be read.
         */
        protected function check_read_permission($post)
        {
        }
        /**
         * Returns the given global styles config.
         *
         * @since 5.9.0
         *
         * @param WP_REST_Request $request The request instance.
         *
         * @return WP_REST_Response|WP_Error
         */
        public function get_item($request)
        {
        }
        /**
         * Checks if a given request has access to write a single global styles config.
         *
         * @since 5.9.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has write access for the item, WP_Error object otherwise.
         */
        public function update_item_permissions_check($request)
        {
        }
        /**
         * Checks if a global style can be edited.
         *
         * @since 5.9.0
         *
         * @param WP_Post $post Post object.
         * @return bool Whether the post can be edited.
         */
        protected function check_update_permission($post)
        {
        }
        /**
         * Updates a single global style config.
         *
         * @since 5.9.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function update_item($request)
        {
        }
        /**
         * Prepares a single global styles config for update.
         *
         * @since 5.9.0
         *
         * @param WP_REST_Request $request Request object.
         * @return stdClass Changes to pass to wp_update_post.
         */
        protected function prepare_item_for_database($request)
        {
        }
        /**
         * Prepare a global styles config output for response.
         *
         * @since 5.9.0
         *
         * @param WP_Post         $post    Global Styles post object.
         * @param WP_REST_Request $request Request object.
         * @return WP_REST_Response Response object.
         */
        public function prepare_item_for_response($post, $request)
        {
        }
        /**
         * Get the post, if the ID is valid.
         *
         * @since 5.9.0
         *
         * @param int $id Supplied ID.
         * @return WP_Post|WP_Error Post object if ID is valid, WP_Error otherwise.
         */
        protected function get_post($id)
        {
        }
        /**
         * Prepares links for the request.
         *
         * @since 5.9.0
         *
         * @param integer $id ID.
         * @return array Links for the given post.
         */
        protected function prepare_links($id)
        {
        }
        /**
         * Get the link relations available for the post and current user.
         *
         * @since 5.9.0
         *
         * @return array List of link relations.
         */
        protected function get_available_actions()
        {
        }
        /**
         * Overwrites the default protected title format.
         *
         * By default, WordPress will show password protected posts with a title of
         * "Protected: %s", as the REST API communicates the protected status of a post
         * in a machine readable format, we remove the "Protected: " prefix.
         *
         * @since 5.9.0
         *
         * @return string Protected title format.
         */
        public function protected_title_format()
        {
        }
        /**
         * Retrieves the query params for the global styles collection.
         *
         * @since 5.9.0
         *
         * @return array Collection parameters.
         */
        public function get_collection_params()
        {
        }
        /**
         * Retrieves the global styles type' schema, conforming to JSON Schema.
         *
         * @since 5.9.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema()
        {
        }
        /**
         * Checks if a given request has access to read a single theme global styles config.
         *
         * @since 5.9.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access for the item, WP_Error object otherwise.
         */
        public function get_theme_item_permissions_check($request)
        {
        }
        /**
         * Returns the given theme global styles config.
         *
         * @since 5.9.0
         *
         * @param WP_REST_Request $request The request instance.
         * @return WP_REST_Response|WP_Error
         */
        public function get_theme_item($request)
        {
        }
        /**
         * Checks if a given request has access to read a single theme global styles config.
         *
         * @since 6.0.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access for the item, WP_Error object otherwise.
         */
        public function get_theme_items_permissions_check($request)
        {
        }
        /**
         * Returns the given theme global styles variations.
         *
         * @since 6.0.0
         *
         * @param WP_REST_Request $request The request instance.
         *
         * @return WP_REST_Response|WP_Error
         */
        public function get_theme_items($request)
        {
        }
    }
    /**
     * REST API: WP_REST_Post_Types_Controller class
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 4.7.0
     */
    /**
     * Core class to access post types via the REST API.
     *
     * @since 4.7.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_Post_Types_Controller extends \WP_REST_Controller
    {
        /**
         * Constructor.
         *
         * @since 4.7.0
         */
        public function __construct()
        {
        }
        /**
         * Registers the routes for post types.
         *
         * @since 4.7.0
         *
         * @see register_rest_route()
         */
        public function register_routes()
        {
        }
        /**
         * Checks whether a given request has permission to read types.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has read access, WP_Error object otherwise.
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * Retrieves all public post types.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function get_items($request)
        {
        }
        /**
         * Retrieves a specific post type.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function get_item($request)
        {
        }
        /**
         * Prepares a post type object for serialization.
         *
         * @since 4.7.0
         * @since 5.9.0 Renamed `$post_type` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @param WP_Post_Type    $item    Post type object.
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response Response object.
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Retrieves the post type's schema, conforming to JSON Schema.
         *
         * @since 4.7.0
         * @since 4.8.0 The `supports` property was added.
         * @since 5.9.0 The `visibility` and `rest_namespace` properties were added.
         *
         * @return array Item schema data.
         */
        public function get_item_schema()
        {
        }
        /**
         * Retrieves the query params for collections.
         *
         * @since 4.7.0
         *
         * @return array Collection parameters.
         */
        public function get_collection_params()
        {
        }
    }
    /**
     * REST API: WP_REST_Settings_Controller class
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 4.7.0
     */
    /**
     * Core class used to manage a site's settings via the REST API.
     *
     * @since 4.7.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_Settings_Controller extends \WP_REST_Controller
    {
        /**
         * Constructor.
         *
         * @since 4.7.0
         */
        public function __construct()
        {
        }
        /**
         * Registers the routes for the site's settings.
         *
         * @since 4.7.0
         *
         * @see register_rest_route()
         */
        public function register_routes()
        {
        }
        /**
         * Checks if a given request has access to read and manage settings.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return bool True if the request has read access for the item, otherwise false.
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * Retrieves the settings.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return array|WP_Error Array on success, or WP_Error object on failure.
         */
        public function get_item($request)
        {
        }
        /**
         * Prepares a value for output based off a schema array.
         *
         * @since 4.7.0
         *
         * @param mixed $value  Value to prepare.
         * @param array $schema Schema to match.
         * @return mixed The prepared value.
         */
        protected function prepare_value($value, $schema)
        {
        }
        /**
         * Updates settings for the settings object.
         *
         * @since 4.7.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return array|WP_Error Array on success, or error object on failure.
         */
        public function update_item($request)
        {
        }
        /**
         * Retrieves all of the registered options for the Settings API.
         *
         * @since 4.7.0
         *
         * @return array Array of registered options.
         */
        protected function get_registered_options()
        {
        }
        /**
         * Retrieves the site setting schema, conforming to JSON Schema.
         *
         * @since 4.7.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema()
        {
        }
        /**
         * Custom sanitize callback used for all options to allow the use of 'null'.
         *
         * By default, the schema of settings will throw an error if a value is set to
         * `null` as it's not a valid value for something like "type => string". We
         * provide a wrapper sanitizer to allow the use of `null`.
         *
         * @since 4.7.0
         *
         * @param mixed           $value   The value for the setting.
         * @param WP_REST_Request $request The request object.
         * @param string          $param   The parameter name.
         * @return mixed|WP_Error
         */
        public function sanitize_callback($value, $request, $param)
        {
        }
        /**
         * Recursively add additionalProperties = false to all objects in a schema.
         *
         * This is need to restrict properties of objects in settings values to only
         * registered items, as the REST API will allow additional properties by
         * default.
         *
         * @since 4.9.0
         *
         * @param array $schema The schema array.
         * @return array
         */
        protected function set_additional_properties_to_false($schema)
        {
        }
    }
    /**
     * REST API: WP_REST_URL_Details_Controller class
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 5.9.0
     */
    /**
     * Controller which provides REST endpoint for retrieving information
     * from a remote site's HTML response.
     *
     * @since 5.9.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_URL_Details_Controller extends \WP_REST_Controller
    {
        /**
         * Constructs the controller.
         *
         * @since 5.9.0
         */
        public function __construct()
        {
        }
        /**
         * Registers the necessary REST API routes.
         *
         * @since 5.9.0
         */
        public function register_routes()
        {
        }
        /**
         * Retrieves the item's schema, conforming to JSON Schema.
         *
         * @since 5.9.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema()
        {
        }
        /**
         * Retrieves the contents of the title tag from the HTML response.
         *
         * @since 5.9.0
         *
         * @param WP_REST_REQUEST $request Full details about the request.
         * @return WP_REST_Response|WP_Error The parsed details as a response object. WP_Error if there are errors.
         */
        public function parse_url_details($request)
        {
        }
        /**
         * Checks whether a given request has permission to read remote URLs.
         *
         * @since 5.9.0
         *
         * @return WP_Error|bool True if the request has permission, else WP_Error.
         */
        public function permissions_check()
        {
        }
        /**
         * Retrieves the document title from a remote URL.
         *
         * @since 5.9.0
         *
         * @param string $url The website URL whose HTML to access.
         * @return string|WP_Error The HTTP response from the remote URL on success.
         *                         WP_Error if no response or no content.
         */
        private function get_remote_url($url)
        {
        }
        /**
         * Parses the title tag contents from the provided HTML.
         *
         * @since 5.9.0
         *
         * @param string $html The HTML from the remote website at URL.
         * @return string The title tag contents on success. Empty string if not found.
         */
        private function get_title($html)
        {
        }
        /**
         * Parses the site icon from the provided HTML.
         *
         * @since 5.9.0
         *
         * @param string $html The HTML from the remote website at URL.
         * @param string $url  The target website URL.
         * @return string The icon URI on success. Empty string if not found.
         */
        private function get_icon($html, $url)
        {
        }
        /**
         * Parses the meta description from the provided HTML.
         *
         * @since 5.9.0
         *
         * @param array $meta_elements {
         *     A multi-dimensional indexed array on success, else empty array.
         *
         *     @type string[] $0 Meta elements with a content attribute.
         *     @type string[] $1 Content attribute's opening quotation mark.
         *     @type string[] $2 Content attribute's value for each meta element.
         * }
         * @return string The meta description contents on success. Empty string if not found.
         */
        private function get_description($meta_elements)
        {
        }
        /**
         * Parses the Open Graph (OG) Image from the provided HTML.
         *
         * See: https://ogp.me/.
         *
         * @since 5.9.0
         *
         * @param array  $meta_elements {
         *     A multi-dimensional indexed array on success, else empty array.
         *
         *     @type string[] $0 Meta elements with a content attribute.
         *     @type string[] $1 Content attribute's opening quotation mark.
         *     @type string[] $2 Content attribute's value for each meta element.
         * }
         * @param string $url The target website URL.
         * @return string The OG image on success. Empty string if not found.
         */
        private function get_image($meta_elements, $url)
        {
        }
        /**
         * Prepares the metadata by:
         *    - stripping all HTML tags and tag entities.
         *    - converting non-tag entities into characters.
         *
         * @since 5.9.0
         *
         * @param string $metadata The metadata content to prepare.
         * @return string The prepared metadata.
         */
        private function prepare_metadata_for_output($metadata)
        {
        }
        /**
         * Utility function to build cache key for a given URL.
         *
         * @since 5.9.0
         *
         * @param string $url The URL for which to build a cache key.
         * @return string The cache key.
         */
        private function build_cache_key_for_url($url)
        {
        }
        /**
         * Utility function to retrieve a value from the cache at a given key.
         *
         * @since 5.9.0
         *
         * @param string $key The cache key.
         * @return mixed The value from the cache.
         */
        private function get_cache($key)
        {
        }
        /**
         * Utility function to cache a given data set at a given cache key.
         *
         * @since 5.9.0
         *
         * @param string $key  The cache key under which to store the value.
         * @param string $data The data to be stored at the given cache key.
         * @return bool True when transient set. False if not set.
         */
        private function set_cache($key, $data = '')
        {
        }
        /**
         * Retrieves the head element section.
         *
         * @since 5.9.0
         *
         * @param string $html The string of HTML to parse.
         * @return string The `<head>..</head>` section on success. Given `$html` if not found.
         */
        private function get_document_head($html)
        {
        }
        /**
         * Gets all the meta tag elements that have a 'content' attribute.
         *
         * @since 5.9.0
         *
         * @param string $html The string of HTML to be parsed.
         * @return array {
         *     A multi-dimensional indexed array on success, else empty array.
         *
         *     @type string[] $0 Meta elements with a content attribute.
         *     @type string[] $1 Content attribute's opening quotation mark.
         *     @type string[] $2 Content attribute's value for each meta element.
         * }
         */
        private function get_meta_with_content_elements($html)
        {
        }
        /**
         * Gets the metadata from a target meta element.
         *
         * @since 5.9.0
         *
         * @param array  $meta_elements {
         *     A multi-dimensional indexed array on success, else empty array.
         *
         *     @type string[] $0 Meta elements with a content attribute.
         *     @type string[] $1 Content attribute's opening quotation mark.
         *     @type string[] $2 Content attribute's value for each meta element.
         * }
         * @param string $attr       Attribute that identifies the element with the target metadata.
         * @param string $attr_value The attribute's value that identifies the element with the target metadata.
         * @return string The metadata on success. Empty string if not found.
         */
        private function get_metadata_from_meta_element($meta_elements, $attr, $attr_value)
        {
        }
    }
    /**
     * Block Pattern Directory REST API: WP_REST_Pattern_Directory_Controller class
     *
     * @package WordPress
     * @subpackage REST_API
     * @since 5.8.0
     */
    /**
     * Controller which provides REST endpoint for block patterns.
     *
     * This simply proxies the endpoint at http://api.wordpress.org/patterns/1.0/. That isn't necessary for
     * functionality, but is desired for privacy. It prevents api.wordpress.org from knowing the user's IP address.
     *
     * @since 5.8.0
     *
     * @see WP_REST_Controller
     */
    class WP_REST_Pattern_Directory_Controller extends \WP_REST_Controller
    {
        /**
         * Constructs the controller.
         *
         * @since 5.8.0
         */
        public function __construct()
        {
        }
        /**
         * Registers the necessary REST API routes.
         *
         * @since 5.8.0
         */
        public function register_routes()
        {
        }
        /**
         * Checks whether a given request has permission to view the local block pattern directory.
         *
         * @since 5.8.0
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return true|WP_Error True if the request has permission, WP_Error object otherwise.
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * Search and retrieve block patterns metadata
         *
         * @since 5.8.0
         * @since 6.0.0 Added 'slug' to request.
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function get_items($request)
        {
        }
        /**
         * Prepare a raw block pattern before it gets output in a REST API response.
         *
         * @since 5.8.0
         * @since 5.9.0 Renamed `$raw_pattern` to `$item` to match parent class for PHP 8 named parameter support.
         *
         * @param object          $item    Raw pattern from api.wordpress.org, before any changes.
         * @param WP_REST_Request $request Request object.
         * @return WP_REST_Response
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Retrieves the block pattern's schema, conforming to JSON Schema.
         *
         * @since 5.8.0
         *
         * @return array Item schema data.
         */
        public function get_item_schema()
        {
        }
        /**
         * Retrieves the search parameters for the block pattern's collection.
         *
         * @since 5.8.0
         *
         * @return array Collection parameters.
         */
        public function get_collection_params()
        {
        }
        /*
         * Include a hash of the query args, so that different requests are stored in
         * separate caches.
         *
         * MD5 is chosen for its speed, low-collision rate, universal availability, and to stay
         * under the character limit for `_site_transient_timeout_{...}` keys.
         *
         * @link https://stackoverflow.com/questions/3665247/fastest-hash-for-non-cryptographic-uses
         *
         * @since 6.0.0
         *
         * @param array $query_args Query arguments to generate a transient key from.
         * @return string Transient key.
         */
        protected function get_transient_key($query_args)
        {
        }
    }
    /**
     * Block Serialization Parser
     *
     * @package WordPress
     */
    /**
     * Class WP_Block_Parser_Block
     *
     * Holds the block structure in memory
     *
     * @since 5.0.0
     */
    class WP_Block_Parser_Block
    {
        /**
         * Name of block
         *
         * @example "core/paragraph"
         *
         * @since 5.0.0
         * @var string
         */
        public $blockName;
        /**
         * Optional set of attributes from block comment delimiters
         *
         * @example null
         * @example array( 'columns' => 3 )
         *
         * @since 5.0.0
         * @var array|null
         */
        public $attrs;
        /**
         * List of inner blocks (of this same class)
         *
         * @since 5.0.0
         * @var WP_Block_Parser_Block[]
         */
        public $innerBlocks;
        /**
         * Resultant HTML from inside block comment delimiters
         * after removing inner blocks
         *
         * @example "...Just <!-- wp:test /--> testing..." -> "Just testing..."
         *
         * @since 5.0.0
         * @var string
         */
        public $innerHTML;
        /**
         * List of string fragments and null markers where inner blocks were found
         *
         * @example array(
         *   'innerHTML'    => 'BeforeInnerAfter',
         *   'innerBlocks'  => array( block, block ),
         *   'innerContent' => array( 'Before', null, 'Inner', null, 'After' ),
         * )
         *
         * @since 4.2.0
         * @var array
         */
        public $innerContent;
        /**
         * Constructor.
         *
         * Will populate object properties from the provided arguments.
         *
         * @since 5.0.0
         *
         * @param string $name         Name of block.
         * @param array  $attrs        Optional set of attributes from block comment delimiters.
         * @param array  $innerBlocks  List of inner blocks (of this same class).
         * @param string $innerHTML    Resultant HTML from inside block comment delimiters after removing inner blocks.
         * @param array  $innerContent List of string fragments and null markers where inner blocks were found.
         */
        function __construct($name, $attrs, $innerBlocks, $innerHTML, $innerContent)
        {
        }
    }
    /**
     * Class WP_Block_Parser_Frame
     *
     * Holds partial blocks in memory while parsing
     *
     * @internal
     * @since 5.0.0
     */
    class WP_Block_Parser_Frame
    {
        /**
         * Full or partial block
         *
         * @since 5.0.0
         * @var WP_Block_Parser_Block
         */
        public $block;
        /**
         * Byte offset into document for start of parse token
         *
         * @since 5.0.0
         * @var int
         */
        public $token_start;
        /**
         * Byte length of entire parse token string
         *
         * @since 5.0.0
         * @var int
         */
        public $token_length;
        /**
         * Byte offset into document for after parse token ends
         * (used during reconstruction of stack into parse production)
         *
         * @since 5.0.0
         * @var int
         */
        public $prev_offset;
        /**
         * Byte offset into document where leading HTML before token starts
         *
         * @since 5.0.0
         * @var int
         */
        public $leading_html_start;
        /**
         * Constructor
         *
         * Will populate object properties from the provided arguments.
         *
         * @since 5.0.0
         *
         * @param WP_Block_Parser_Block $block              Full or partial block.
         * @param int                   $token_start        Byte offset into document for start of parse token.
         * @param int                   $token_length       Byte length of entire parse token string.
         * @param int                   $prev_offset        Byte offset into document for after parse token ends.
         * @param int                   $leading_html_start Byte offset into document where leading HTML before token starts.
         */
        function __construct($block, $token_start, $token_length, $prev_offset = \null, $leading_html_start = \null)
        {
        }
    }
    /**
     * Class WP_Block_Parser
     *
     * Parses a document and constructs a list of parsed block objects
     *
     * @since 5.0.0
     * @since 4.0.0 returns arrays not objects, all attributes are arrays
     */
    class WP_Block_Parser
    {
        /**
         * Input document being parsed
         *
         * @example "Pre-text\n<!-- wp:paragraph -->This is inside a block!<!-- /wp:paragraph -->"
         *
         * @since 5.0.0
         * @var string
         */
        public $document;
        /**
         * Tracks parsing progress through document
         *
         * @since 5.0.0
         * @var int
         */
        public $offset;
        /**
         * List of parsed blocks
         *
         * @since 5.0.0
         * @var WP_Block_Parser_Block[]
         */
        public $output;
        /**
         * Stack of partially-parsed structures in memory during parse
         *
         * @since 5.0.0
         * @var WP_Block_Parser_Frame[]
         */
        public $stack;
        /**
         * Empty associative array, here due to PHP quirks
         *
         * @since 4.4.0
         * @var array empty associative array
         */
        public $empty_attrs;
        /**
         * Parses a document and returns a list of block structures
         *
         * When encountering an invalid parse will return a best-effort
         * parse. In contrast to the specification parser this does not
         * return an error on invalid inputs.
         *
         * @since 5.0.0
         *
         * @param string $document Input document being parsed.
         * @return WP_Block_Parser_Block[]
         */
        function parse($document)
        {
        }
        /**
         * Processes the next token from the input document
         * and returns whether to proceed eating more tokens
         *
         * This is the "next step" function that essentially
         * takes a token as its input and decides what to do
         * with that token before descending deeper into a
         * nested block tree or continuing along the document
         * or breaking out of a level of nesting.
         *
         * @internal
         * @since 5.0.0
         * @return bool
         */
        function proceed()
        {
        }
        /**
         * Scans the document from where we last left off
         * and finds the next valid token to parse if it exists
         *
         * Returns the type of the find: kind of find, block information, attributes
         *
         * @internal
         * @since 5.0.0
         * @since 4.6.1 fixed a bug in attribute parsing which caused catastrophic backtracking on invalid block comments
         * @return array
         */
        function next_token()
        {
        }
        /**
         * Returns a new block object for freeform HTML
         *
         * @internal
         * @since 3.9.0
         *
         * @param string $innerHTML HTML content of block.
         * @return WP_Block_Parser_Block freeform block object.
         */
        function freeform($innerHTML)
        {
        }
        /**
         * Pushes a length of text from the input document
         * to the output list as a freeform block.
         *
         * @internal
         * @since 5.0.0
         * @param null $length how many bytes of document text to output.
         */
        function add_freeform($length = \null)
        {
        }
        /**
         * Given a block structure from memory pushes
         * a new block to the output list.
         *
         * @internal
         * @since 5.0.0
         * @param WP_Block_Parser_Block $block        The block to add to the output.
         * @param int                   $token_start  Byte offset into the document where the first token for the block starts.
         * @param int                   $token_length Byte length of entire block from start of opening token to end of closing token.
         * @param int|null              $last_offset  Last byte offset into document if continuing form earlier output.
         */
        function add_inner_block(\WP_Block_Parser_Block $block, $token_start, $token_length, $last_offset = \null)
        {
        }
        /**
         * Pushes the top block from the parsing stack to the output list.
         *
         * @internal
         * @since 5.0.0
         * @param int|null $end_offset byte offset into document for where we should stop sending text output as HTML.
         */
        function add_block_from_stack($end_offset = \null)
        {
        }
    }
    /**
     * Blocks API: WP_Block class
     *
     * @package WordPress
     * @since 5.5.0
     */
    /**
     * Class representing a parsed instance of a block.
     *
     * @since 5.5.0
     * @property array $attributes
     */
    class WP_Block
    {
        /**
         * Original parsed array representation of block.
         *
         * @since 5.5.0
         * @var array
         */
        public $parsed_block;
        /**
         * Name of block.
         *
         * @example "core/paragraph"
         *
         * @since 5.5.0
         * @var string
         */
        public $name;
        /**
         * Block type associated with the instance.
         *
         * @since 5.5.0
         * @var WP_Block_Type
         */
        public $block_type;
        /**
         * Block context values.
         *
         * @since 5.5.0
         * @var array
         */
        public $context = array();
        /**
         * All available context of the current hierarchy.
         *
         * @since 5.5.0
         * @var array
         * @access protected
         */
        protected $available_context;
        /**
         * Block type registry.
         *
         * @since 5.9.0
         * @var WP_Block_Type_Registry
         * @access protected
         */
        protected $registry;
        /**
         * List of inner blocks (of this same class)
         *
         * @since 5.5.0
         * @var WP_Block_List
         */
        public $inner_blocks = array();
        /**
         * Resultant HTML from inside block comment delimiters after removing inner
         * blocks.
         *
         * @example "...Just <!-- wp:test /--> testing..." -> "Just testing..."
         *
         * @since 5.5.0
         * @var string
         */
        public $inner_html = '';
        /**
         * List of string fragments and null markers where inner blocks were found
         *
         * @example array(
         *   'inner_html'    => 'BeforeInnerAfter',
         *   'inner_blocks'  => array( block, block ),
         *   'inner_content' => array( 'Before', null, 'Inner', null, 'After' ),
         * )
         *
         * @since 5.5.0
         * @var array
         */
        public $inner_content = array();
        /**
         * Constructor.
         *
         * Populates object properties from the provided block instance argument.
         *
         * The given array of context values will not necessarily be available on
         * the instance itself, but is treated as the full set of values provided by
         * the block's ancestry. This is assigned to the private `available_context`
         * property. Only values which are configured to consumed by the block via
         * its registered type will be assigned to the block's `context` property.
         *
         * @since 5.5.0
         *
         * @param array                  $block             Array of parsed block properties.
         * @param array                  $available_context Optional array of ancestry context values.
         * @param WP_Block_Type_Registry $registry          Optional block type registry.
         */
        public function __construct($block, $available_context = array(), $registry = \null)
        {
        }
        /**
         * Returns a value from an inaccessible property.
         *
         * This is used to lazily initialize the `attributes` property of a block,
         * such that it is only prepared with default attributes at the time that
         * the property is accessed. For all other inaccessible properties, a `null`
         * value is returned.
         *
         * @since 5.5.0
         *
         * @param string $name Property name.
         * @return array|null Prepared attributes, or null.
         */
        public function __get($name)
        {
        }
        /**
         * Generates the render output for the block.
         *
         * @since 5.5.0
         *
         * @param array $options {
         *     Optional options object.
         *
         *     @type bool $dynamic Defaults to 'true'. Optionally set to false to avoid using the block's render_callback.
         * }
         * @return string Rendered block output.
         */
        public function render($options = array())
        {
        }
    }
    /**
     * WordPress Customize Setting classes
     *
     * @package WordPress
     * @subpackage Customize
     * @since 3.4.0
     */
    /**
     * Customize Setting class.
     *
     * Handles saving and sanitizing of settings.
     *
     * @since 3.4.0
     *
     * @see WP_Customize_Manager
     * @link https://developer.wordpress.org/themes/customize-api
     */
    class WP_Customize_Setting
    {
        /**
         * Customizer bootstrap instance.
         *
         * @since 3.4.0
         * @var WP_Customize_Manager
         */
        public $manager;
        /**
         * Unique string identifier for the setting.
         *
         * @since 3.4.0
         * @var string
         */
        public $id;
        /**
         * Type of customize settings.
         *
         * @since 3.4.0
         * @var string
         */
        public $type = 'theme_mod';
        /**
         * Capability required to edit this setting.
         *
         * @since 3.4.0
         * @var string|array
         */
        public $capability = 'edit_theme_options';
        /**
         * Theme features required to support the setting.
         *
         * @since 3.4.0
         * @var string|string[]
         */
        public $theme_supports = '';
        /**
         * The default value for the setting.
         *
         * @since 3.4.0
         * @var string
         */
        public $default = '';
        /**
         * Options for rendering the live preview of changes in Customizer.
         *
         * Set this value to 'postMessage' to enable a custom JavaScript handler to render changes to this setting
         * as opposed to reloading the whole page.
         *
         * @since 3.4.0
         * @var string
         */
        public $transport = 'refresh';
        /**
         * Server-side validation callback for the setting's value.
         *
         * @since 4.6.0
         * @var callable
         */
        public $validate_callback = '';
        /**
         * Callback to filter a Customize setting value in un-slashed form.
         *
         * @since 3.4.0
         * @var callable
         */
        public $sanitize_callback = '';
        /**
         * Callback to convert a Customize PHP setting value to a value that is JSON serializable.
         *
         * @since 3.4.0
         * @var callable
         */
        public $sanitize_js_callback = '';
        /**
         * Whether or not the setting is initially dirty when created.
         *
         * This is used to ensure that a setting will be sent from the pane to the
         * preview when loading the Customizer. Normally a setting only is synced to
         * the preview if it has been changed. This allows the setting to be sent
         * from the start.
         *
         * @since 4.2.0
         * @var bool
         */
        public $dirty = \false;
        /**
         * ID Data.
         *
         * @since 3.4.0
         * @var array
         */
        protected $id_data = array();
        /**
         * Whether or not preview() was called.
         *
         * @since 4.4.0
         * @var bool
         */
        protected $is_previewed = \false;
        /**
         * Cache of multidimensional values to improve performance.
         *
         * @since 4.4.0
         * @var array
         */
        protected static $aggregated_multidimensionals = array();
        /**
         * Whether the multidimensional setting is aggregated.
         *
         * @since 4.4.0
         * @var bool
         */
        protected $is_multidimensional_aggregated = \false;
        /**
         * Constructor.
         *
         * Any supplied $args override class property defaults.
         *
         * @since 3.4.0
         *
         * @param WP_Customize_Manager $manager Customizer bootstrap instance.
         * @param string               $id      A specific ID of the setting.
         *                                      Can be a theme mod or option name.
         * @param array                $args    {
         *     Optional. Array of properties for the new Setting object. Default empty array.
         *
         *     @type string          $type                 Type of the setting. Default 'theme_mod'.
         *     @type string          $capability           Capability required for the setting. Default 'edit_theme_options'
         *     @type string|string[] $theme_supports       Theme features required to support the panel. Default is none.
         *     @type string          $default              Default value for the setting. Default is empty string.
         *     @type string          $transport            Options for rendering the live preview of changes in Customizer.
         *                                                 Using 'refresh' makes the change visible by reloading the whole preview.
         *                                                 Using 'postMessage' allows a custom JavaScript to handle live changes.
         *                                                 Default is 'refresh'.
         *     @type callable        $validate_callback    Server-side validation callback for the setting's value.
         *     @type callable        $sanitize_callback    Callback to filter a Customize setting value in un-slashed form.
         *     @type callable        $sanitize_js_callback Callback to convert a Customize PHP setting value to a value that is
         *                                                 JSON serializable.
         *     @type bool            $dirty                Whether or not the setting is initially dirty when created.
         * }
         */
        public function __construct($manager, $id, $args = array())
        {
        }
        /**
         * Get parsed ID data for multidimensional setting.
         *
         * @since 4.4.0
         *
         * @return array {
         *     ID data for multidimensional setting.
         *
         *     @type string $base ID base
         *     @type array  $keys Keys for multidimensional array.
         * }
         */
        public final function id_data()
        {
        }
        /**
         * Set up the setting for aggregated multidimensional values.
         *
         * When a multidimensional setting gets aggregated, all of its preview and update
         * calls get combined into one call, greatly improving performance.
         *
         * @since 4.4.0
         */
        protected function aggregate_multidimensional()
        {
        }
        /**
         * Reset `$aggregated_multidimensionals` static variable.
         *
         * This is intended only for use by unit tests.
         *
         * @since 4.5.0
         * @ignore
         */
        public static function reset_aggregated_multidimensionals()
        {
        }
        /**
         * The ID for the current site when the preview() method was called.
         *
         * @since 4.2.0
         * @var int
         */
        protected $_previewed_blog_id;
        /**
         * Return true if the current site is not the same as the previewed site.
         *
         * @since 4.2.0
         *
         * @return bool If preview() has been called.
         */
        public function is_current_blog_previewed()
        {
        }
        /**
         * Original non-previewed value stored by the preview method.
         *
         * @see WP_Customize_Setting::preview()
         * @since 4.1.1
         * @var mixed
         */
        protected $_original_value;
        /**
         * Add filters to supply the setting's value when accessed.
         *
         * If the setting already has a pre-existing value and there is no incoming
         * post value for the setting, then this method will short-circuit since
         * there is no change to preview.
         *
         * @since 3.4.0
         * @since 4.4.0 Added boolean return value.
         *
         * @return bool False when preview short-circuits due no change needing to be previewed.
         */
        public function preview()
        {
        }
        /**
         * Clear out the previewed-applied flag for a multidimensional-aggregated value whenever its post value is updated.
         *
         * This ensures that the new value will get sanitized and used the next time
         * that `WP_Customize_Setting::_multidimensional_preview_filter()`
         * is called for this setting.
         *
         * @since 4.4.0
         *
         * @see WP_Customize_Manager::set_post_value()
         * @see WP_Customize_Setting::_multidimensional_preview_filter()
         */
        public final function _clear_aggregated_multidimensional_preview_applied_flag()
        {
        }
        /**
         * Callback function to filter non-multidimensional theme mods and options.
         *
         * If switch_to_blog() was called after the preview() method, and the current
         * site is now not the same site, then this method does a no-op and returns
         * the original value.
         *
         * @since 3.4.0
         *
         * @param mixed $original Old value.
         * @return mixed New or old value.
         */
        public function _preview_filter($original)
        {
        }
        /**
         * Callback function to filter multidimensional theme mods and options.
         *
         * For all multidimensional settings of a given type, the preview filter for
         * the first setting previewed will be used to apply the values for the others.
         *
         * @since 4.4.0
         *
         * @see WP_Customize_Setting::$aggregated_multidimensionals
         * @param mixed $original Original root value.
         * @return mixed New or old value.
         */
        public final function _multidimensional_preview_filter($original)
        {
        }
        /**
         * Checks user capabilities and theme supports, and then saves
         * the value of the setting.
         *
         * @since 3.4.0
         *
         * @return void|false Void on success, false if cap check fails
         *                    or value isn't set or is invalid.
         */
        public final function save()
        {
        }
        /**
         * Fetch and sanitize the $_POST value for the setting.
         *
         * During a save request prior to save, post_value() provides the new value while value() does not.
         *
         * @since 3.4.0
         *
         * @param mixed $default_value A default value which is used as a fallback. Default null.
         * @return mixed The default value on failure, otherwise the sanitized and validated value.
         */
        public final function post_value($default_value = \null)
        {
        }
        /**
         * Sanitize an input.
         *
         * @since 3.4.0
         *
         * @param string|array $value The value to sanitize.
         * @return string|array|null|WP_Error Sanitized value, or `null`/`WP_Error` if invalid.
         */
        public function sanitize($value)
        {
        }
        /**
         * Validates an input.
         *
         * @since 4.6.0
         *
         * @see WP_REST_Request::has_valid_params()
         *
         * @param mixed $value Value to validate.
         * @return true|WP_Error True if the input was validated, otherwise WP_Error.
         */
        public function validate($value)
        {
        }
        /**
         * Get the root value for a setting, especially for multidimensional ones.
         *
         * @since 4.4.0
         *
         * @param mixed $default_value Value to return if root does not exist.
         * @return mixed
         */
        protected function get_root_value($default_value = \null)
        {
        }
        /**
         * Set the root value for a setting, especially for multidimensional ones.
         *
         * @since 4.4.0
         *
         * @param mixed $value Value to set as root of multidimensional setting.
         * @return bool Whether the multidimensional root was updated successfully.
         */
        protected function set_root_value($value)
        {
        }
        /**
         * Save the value of the setting, using the related API.
         *
         * @since 3.4.0
         *
         * @param mixed $value The value to update.
         * @return bool The result of saving the value.
         */
        protected function update($value)
        {
        }
        /**
         * Deprecated method.
         *
         * @since 3.4.0
         * @deprecated 4.4.0 Deprecated in favor of update() method.
         */
        protected function _update_theme_mod()
        {
        }
        /**
         * Deprecated method.
         *
         * @since 3.4.0
         * @deprecated 4.4.0 Deprecated in favor of update() method.
         */
        protected function _update_option()
        {
        }
        /**
         * Fetch the value of the setting.
         *
         * @since 3.4.0
         *
         * @return mixed The value.
         */
        public function value()
        {
        }
        /**
         * Sanitize the setting's value for use in JavaScript.
         *
         * @since 3.4.0
         *
         * @return mixed The requested escaped value.
         */
        public function js_value()
        {
        }
        /**
         * Retrieves the data to export to the client via JSON.
         *
         * @since 4.6.0
         *
         * @return array Array of parameters passed to JavaScript.
         */
        public function json()
        {
        }
        /**
         * Validate user capabilities whether the theme supports the setting.
         *
         * @since 3.4.0
         *
         * @return bool False if theme doesn't support the setting or user can't change setting, otherwise true.
         */
        public final function check_capabilities()
        {
        }
        /**
         * Multidimensional helper function.
         *
         * @since 3.4.0
         *
         * @param array $root
         * @param array $keys
         * @param bool  $create Default false.
         * @return array|void Keys are 'root', 'node', and 'key'.
         */
        protected final function multidimensional(&$root, $keys, $create = \false)
        {
        }
        /**
         * Will attempt to replace a specific value in a multidimensional array.
         *
         * @since 3.4.0
         *
         * @param array $root
         * @param array $keys
         * @param mixed $value The value to update.
         * @return mixed
         */
        protected final function multidimensional_replace($root, $keys, $value)
        {
        }
        /**
         * Will attempt to fetch a specific value from a multidimensional array.
         *
         * @since 3.4.0
         *
         * @param array $root
         * @param array $keys
         * @param mixed $default_value A default value which is used as a fallback. Default null.
         * @return mixed The requested value or the default value.
         */
        protected final function multidimensional_get($root, $keys, $default_value = \null)
        {
        }
        /**
         * Will attempt to check if a specific value in a multidimensional array is set.
         *
         * @since 3.4.0
         *
         * @param array $root
         * @param array $keys
         * @return bool True if value is set, false if not.
         */
        protected final function multidimensional_isset($root, $keys)
        {
        }
    }
    /**
     * WordPress Customize Control classes
     *
     * @package WordPress
     * @subpackage Customize
     * @since 3.4.0
     */
    /**
     * Customize Control class.
     *
     * @since 3.4.0
     */
    class WP_Customize_Control
    {
        /**
         * Incremented with each new class instantiation, then stored in $instance_number.
         *
         * Used when sorting two instances whose priorities are equal.
         *
         * @since 4.1.0
         * @var int
         */
        protected static $instance_count = 0;
        /**
         * Order in which this instance was created in relation to other instances.
         *
         * @since 4.1.0
         * @var int
         */
        public $instance_number;
        /**
         * Customizer manager.
         *
         * @since 3.4.0
         * @var WP_Customize_Manager
         */
        public $manager;
        /**
         * Control ID.
         *
         * @since 3.4.0
         * @var string
         */
        public $id;
        /**
         * All settings tied to the control.
         *
         * @since 3.4.0
         * @var array
         */
        public $settings;
        /**
         * The primary setting for the control (if there is one).
         *
         * @since 3.4.0
         * @var string|WP_Customize_Setting|null
         */
        public $setting = 'default';
        /**
         * Capability required to use this control.
         *
         * Normally this is empty and the capability is derived from the capabilities
         * of the associated `$settings`.
         *
         * @since 4.5.0
         * @var string
         */
        public $capability;
        /**
         * Order priority to load the control in Customizer.
         *
         * @since 3.4.0
         * @var int
         */
        public $priority = 10;
        /**
         * Section the control belongs to.
         *
         * @since 3.4.0
         * @var string
         */
        public $section = '';
        /**
         * Label for the control.
         *
         * @since 3.4.0
         * @var string
         */
        public $label = '';
        /**
         * Description for the control.
         *
         * @since 4.0.0
         * @var string
         */
        public $description = '';
        /**
         * List of choices for 'radio' or 'select' type controls, where values are the keys, and labels are the values.
         *
         * @since 3.4.0
         * @var array
         */
        public $choices = array();
        /**
         * List of custom input attributes for control output, where attribute names are the keys and values are the values.
         *
         * Not used for 'checkbox', 'radio', 'select', 'textarea', or 'dropdown-pages' control types.
         *
         * @since 4.0.0
         * @var array
         */
        public $input_attrs = array();
        /**
         * Show UI for adding new content, currently only used for the dropdown-pages control.
         *
         * @since 4.7.0
         * @var bool
         */
        public $allow_addition = \false;
        /**
         * @deprecated It is better to just call the json() method
         * @since 3.4.0
         * @var array
         */
        public $json = array();
        /**
         * Control's Type.
         *
         * @since 3.4.0
         * @var string
         */
        public $type = 'text';
        /**
         * Callback.
         *
         * @since 4.0.0
         *
         * @see WP_Customize_Control::active()
         *
         * @var callable Callback is called with one argument, the instance of
         *               WP_Customize_Control, and returns bool to indicate whether
         *               the control is active (such as it relates to the URL
         *               currently being previewed).
         */
        public $active_callback = '';
        /**
         * Constructor.
         *
         * Supplied `$args` override class property defaults.
         *
         * If `$args['settings']` is not defined, use the $id as the setting ID.
         *
         * @since 3.4.0
         *
         * @param WP_Customize_Manager $manager Customizer bootstrap instance.
         * @param string               $id      Control ID.
         * @param array                $args    {
         *     Optional. Array of properties for the new Control object. Default empty array.
         *
         *     @type int                  $instance_number Order in which this instance was created in relation
         *                                                 to other instances.
         *     @type WP_Customize_Manager $manager         Customizer bootstrap instance.
         *     @type string               $id              Control ID.
         *     @type array                $settings        All settings tied to the control. If undefined, `$id` will
         *                                                 be used.
         *     @type string               $setting         The primary setting for the control (if there is one).
         *                                                 Default 'default'.
         *     @type string               $capability      Capability required to use this control. Normally this is empty
         *                                                 and the capability is derived from `$settings`.
         *     @type int                  $priority        Order priority to load the control. Default 10.
         *     @type string               $section         Section the control belongs to. Default empty.
         *     @type string               $label           Label for the control. Default empty.
         *     @type string               $description     Description for the control. Default empty.
         *     @type array                $choices         List of choices for 'radio' or 'select' type controls, where
         *                                                 values are the keys, and labels are the values.
         *                                                 Default empty array.
         *     @type array                $input_attrs     List of custom input attributes for control output, where
         *                                                 attribute names are the keys and values are the values. Not
         *                                                 used for 'checkbox', 'radio', 'select', 'textarea', or
         *                                                 'dropdown-pages' control types. Default empty array.
         *     @type bool                 $allow_addition  Show UI for adding new content, currently only used for the
         *                                                 dropdown-pages control. Default false.
         *     @type array                $json            Deprecated. Use WP_Customize_Control::json() instead.
         *     @type string               $type            Control type. Core controls include 'text', 'checkbox',
         *                                                 'textarea', 'radio', 'select', and 'dropdown-pages'. Additional
         *                                                 input types such as 'email', 'url', 'number', 'hidden', and
         *                                                 'date' are supported implicitly. Default 'text'.
         *     @type callable             $active_callback Active callback.
         * }
         */
        public function __construct($manager, $id, $args = array())
        {
        }
        /**
         * Enqueue control related scripts/styles.
         *
         * @since 3.4.0
         */
        public function enqueue()
        {
        }
        /**
         * Check whether control is active to current Customizer preview.
         *
         * @since 4.0.0
         *
         * @return bool Whether the control is active to the current preview.
         */
        public final function active()
        {
        }
        /**
         * Default callback used when invoking WP_Customize_Control::active().
         *
         * Subclasses can override this with their specific logic, or they may
         * provide an 'active_callback' argument to the constructor.
         *
         * @since 4.0.0
         *
         * @return true Always true.
         */
        public function active_callback()
        {
        }
        /**
         * Fetch a setting's value.
         * Grabs the main setting by default.
         *
         * @since 3.4.0
         *
         * @param string $setting_key
         * @return mixed The requested setting's value, if the setting exists.
         */
        public final function value($setting_key = 'default')
        {
        }
        /**
         * Refresh the parameters passed to the JavaScript via JSON.
         *
         * @since 3.4.0
         */
        public function to_json()
        {
        }
        /**
         * Get the data to export to the client via JSON.
         *
         * @since 4.1.0
         *
         * @return array Array of parameters passed to the JavaScript.
         */
        public function json()
        {
        }
        /**
         * Checks if the user can use this control.
         *
         * Returns false if the user cannot manipulate one of the associated settings,
         * or if one of the associated settings does not exist. Also returns false if
         * the associated section does not exist or if its capability check returns
         * false.
         *
         * @since 3.4.0
         *
         * @return bool False if theme doesn't support the control or user doesn't have the required permissions, otherwise true.
         */
        public final function check_capabilities()
        {
        }
        /**
         * Get the control's content for insertion into the Customizer pane.
         *
         * @since 4.1.0
         *
         * @return string Contents of the control.
         */
        public final function get_content()
        {
        }
        /**
         * Check capabilities and render the control.
         *
         * @since 3.4.0
         * @uses WP_Customize_Control::render()
         */
        public final function maybe_render()
        {
        }
        /**
         * Renders the control wrapper and calls $this->render_content() for the internals.
         *
         * @since 3.4.0
         */
        protected function render()
        {
        }
        /**
         * Get the data link attribute for a setting.
         *
         * @since 3.4.0
         * @since 4.9.0 Return a `data-customize-setting-key-link` attribute if a setting is not registered for the supplied setting key.
         *
         * @param string $setting_key
         * @return string Data link parameter, a `data-customize-setting-link` attribute if the `$setting_key` refers to a pre-registered setting,
         *                and a `data-customize-setting-key-link` attribute if the setting is not yet registered.
         */
        public function get_link($setting_key = 'default')
        {
        }
        /**
         * Render the data link attribute for the control's input element.
         *
         * @since 3.4.0
         * @uses WP_Customize_Control::get_link()
         *
         * @param string $setting_key
         */
        public function link($setting_key = 'default')
        {
        }
        /**
         * Render the custom attributes for the control's input element.
         *
         * @since 4.0.0
         */
        public function input_attrs()
        {
        }
        /**
         * Render the control's content.
         *
         * Allows the content to be overridden without having to rewrite the wrapper in `$this::render()`.
         *
         * Supports basic input types `text`, `checkbox`, `textarea`, `radio`, `select` and `dropdown-pages`.
         * Additional input types such as `email`, `url`, `number`, `hidden` and `date` are supported implicitly.
         *
         * Control content can alternately be rendered in JS. See WP_Customize_Control::print_template().
         *
         * @since 3.4.0
         */
        protected function render_content()
        {
        }
        /**
         * Render the control's JS template.
         *
         * This function is only run for control types that have been registered with
         * WP_Customize_Manager::register_control_type().
         *
         * In the future, this will also print the template for the control's container
         * element and be override-able.
         *
         * @since 4.1.0
         */
        public final function print_template()
        {
        }
        /**
         * An Underscore (JS) template for this control's content (but not its container).
         *
         * Class variables for this control class are available in the `data` JS object;
         * export custom variables by overriding WP_Customize_Control::to_json().
         *
         * @see WP_Customize_Control::print_template()
         *
         * @since 4.1.0
         */
        protected function content_template()
        {
        }
    }
    /**
     * Feed API: WP_SimplePie_Sanitize_KSES class
     *
     * @package WordPress
     * @subpackage Feed
     * @since 4.7.0
     */
    /**
     * Core class used to implement SimplePie feed sanitization.
     *
     * Extends the SimplePie_Sanitize class to use KSES, because
     * we cannot universally count on DOMDocument being available.
     *
     * @since 3.5.0
     *
     * @see SimplePie_Sanitize
     */
    class WP_SimplePie_Sanitize_KSES extends \SimplePie_Sanitize
    {
        /**
         * WordPress SimplePie sanitization using KSES.
         *
         * Sanitizes the incoming data, to ensure that it matches the type of data expected, using KSES.
         *
         * @since 3.5.0
         *
         * @param mixed   $data The data that needs to be sanitized.
         * @param int     $type The type of data that it's supposed to be.
         * @param string  $base Optional. The `xml:base` value to use when converting relative
         *                      URLs to absolute ones. Default empty.
         * @return mixed Sanitized data.
         */
        public function sanitize($data, $type, $base = '')
        {
        }
    }
    /**
     * WordPress Customize Section classes
     *
     * @package WordPress
     * @subpackage Customize
     * @since 3.4.0
     */
    /**
     * Customize Section class.
     *
     * A UI container for controls, managed by the WP_Customize_Manager class.
     *
     * @since 3.4.0
     *
     * @see WP_Customize_Manager
     */
    class WP_Customize_Section
    {
        /**
         * Incremented with each new class instantiation, then stored in $instance_number.
         *
         * Used when sorting two instances whose priorities are equal.
         *
         * @since 4.1.0
         * @var int
         */
        protected static $instance_count = 0;
        /**
         * Order in which this instance was created in relation to other instances.
         *
         * @since 4.1.0
         * @var int
         */
        public $instance_number;
        /**
         * WP_Customize_Manager instance.
         *
         * @since 3.4.0
         * @var WP_Customize_Manager
         */
        public $manager;
        /**
         * Unique identifier.
         *
         * @since 3.4.0
         * @var string
         */
        public $id;
        /**
         * Priority of the section which informs load order of sections.
         *
         * @since 3.4.0
         * @var int
         */
        public $priority = 160;
        /**
         * Panel in which to show the section, making it a sub-section.
         *
         * @since 4.0.0
         * @var string
         */
        public $panel = '';
        /**
         * Capability required for the section.
         *
         * @since 3.4.0
         * @var string
         */
        public $capability = 'edit_theme_options';
        /**
         * Theme features required to support the section.
         *
         * @since 3.4.0
         * @var string|string[]
         */
        public $theme_supports = '';
        /**
         * Title of the section to show in UI.
         *
         * @since 3.4.0
         * @var string
         */
        public $title = '';
        /**
         * Description to show in the UI.
         *
         * @since 3.4.0
         * @var string
         */
        public $description = '';
        /**
         * Customizer controls for this section.
         *
         * @since 3.4.0
         * @var array
         */
        public $controls;
        /**
         * Type of this section.
         *
         * @since 4.1.0
         * @var string
         */
        public $type = 'default';
        /**
         * Active callback.
         *
         * @since 4.1.0
         *
         * @see WP_Customize_Section::active()
         *
         * @var callable Callback is called with one argument, the instance of
         *               WP_Customize_Section, and returns bool to indicate whether
         *               the section is active (such as it relates to the URL currently
         *               being previewed).
         */
        public $active_callback = '';
        /**
         * Show the description or hide it behind the help icon.
         *
         * @since 4.7.0
         *
         * @var bool Indicates whether the Section's description should be
         *           hidden behind a help icon ("?") in the Section header,
         *           similar to how help icons are displayed on Panels.
         */
        public $description_hidden = \false;
        /**
         * Constructor.
         *
         * Any supplied $args override class property defaults.
         *
         * @since 3.4.0
         *
         * @param WP_Customize_Manager $manager Customizer bootstrap instance.
         * @param string               $id      A specific ID of the section.
         * @param array                $args    {
         *     Optional. Array of properties for the new Section object. Default empty array.
         *
         *     @type int             $priority           Priority of the section, defining the display order
         *                                               of panels and sections. Default 160.
         *     @type string          $panel              The panel this section belongs to (if any).
         *                                               Default empty.
         *     @type string          $capability         Capability required for the section.
         *                                               Default 'edit_theme_options'
         *     @type string|string[] $theme_supports     Theme features required to support the section.
         *     @type string          $title              Title of the section to show in UI.
         *     @type string          $description        Description to show in the UI.
         *     @type string          $type               Type of the section.
         *     @type callable        $active_callback    Active callback.
         *     @type bool            $description_hidden Hide the description behind a help icon,
         *                                               instead of inline above the first control.
         *                                               Default false.
         * }
         */
        public function __construct($manager, $id, $args = array())
        {
        }
        /**
         * Check whether section is active to current Customizer preview.
         *
         * @since 4.1.0
         *
         * @return bool Whether the section is active to the current preview.
         */
        public final function active()
        {
        }
        /**
         * Default callback used when invoking WP_Customize_Section::active().
         *
         * Subclasses can override this with their specific logic, or they may provide
         * an 'active_callback' argument to the constructor.
         *
         * @since 4.1.0
         *
         * @return true Always true.
         */
        public function active_callback()
        {
        }
        /**
         * Gather the parameters passed to client JavaScript via JSON.
         *
         * @since 4.1.0
         *
         * @return array The array to be exported to the client as JSON.
         */
        public function json()
        {
        }
        /**
         * Checks required user capabilities and whether the theme has the
         * feature support required by the section.
         *
         * @since 3.4.0
         *
         * @return bool False if theme doesn't support the section or user doesn't have the capability.
         */
        public final function check_capabilities()
        {
        }
        /**
         * Get the section's content for insertion into the Customizer pane.
         *
         * @since 4.1.0
         *
         * @return string Contents of the section.
         */
        public final function get_content()
        {
        }
        /**
         * Check capabilities and render the section.
         *
         * @since 3.4.0
         */
        public final function maybe_render()
        {
        }
        /**
         * Render the section UI in a subclass.
         *
         * Sections are now rendered in JS by default, see WP_Customize_Section::print_template().
         *
         * @since 3.4.0
         */
        protected function render()
        {
        }
        /**
         * Render the section's JS template.
         *
         * This function is only run for section types that have been registered with
         * WP_Customize_Manager::register_section_type().
         *
         * @since 4.3.0
         *
         * @see WP_Customize_Manager::render_template()
         */
        public function print_template()
        {
        }
        /**
         * An Underscore (JS) template for rendering this section.
         *
         * Class variables for this section class are available in the `data` JS object;
         * export custom variables by overriding WP_Customize_Section::json().
         *
         * @since 4.3.0
         *
         * @see WP_Customize_Section::print_template()
         */
        protected function render_template()
        {
        }
    }
    /**
     * User API: WP_User_Query class
     *
     * @package WordPress
     * @subpackage Users
     * @since 4.4.0
     */
    /**
     * Core class used for querying users.
     *
     * @since 3.1.0
     *
     * @see WP_User_Query::prepare_query() for information on accepted arguments.
     */
    class WP_User_Query
    {
        /**
         * Query vars, after parsing
         *
         * @since 3.5.0
         * @var array
         */
        public $query_vars = array();
        /**
         * List of found user IDs.
         *
         * @since 3.1.0
         * @var array
         */
        private $results;
        /**
         * Total number of found users for the current query
         *
         * @since 3.1.0
         * @var int
         */
        private $total_users = 0;
        /**
         * Metadata query container.
         *
         * @since 4.2.0
         * @var WP_Meta_Query
         */
        public $meta_query = \false;
        /**
         * The SQL query used to fetch matching users.
         *
         * @since 4.4.0
         * @var string
         */
        public $request;
        private $compat_fields = array('results', 'total_users');
        // SQL clauses.
        public $query_fields;
        public $query_from;
        public $query_where;
        public $query_orderby;
        public $query_limit;
        /**
         * PHP5 constructor.
         *
         * @since 3.1.0
         *
         * @param null|string|array $query Optional. The query variables.
         */
        public function __construct($query = \null)
        {
        }
        /**
         * Fills in missing query variables with default values.
         *
         * @since 4.4.0
         *
         * @param array $args Query vars, as passed to `WP_User_Query`.
         * @return array Complete query variables with undefined ones filled in with defaults.
         */
        public static function fill_query_vars($args)
        {
        }
        /**
         * Prepares the query variables.
         *
         * @since 3.1.0
         * @since 4.1.0 Added the ability to order by the `include` value.
         * @since 4.2.0 Added 'meta_value_num' support for `$orderby` parameter. Added multi-dimensional array syntax
         *              for `$orderby` parameter.
         * @since 4.3.0 Added 'has_published_posts' parameter.
         * @since 4.4.0 Added 'paged', 'role__in', and 'role__not_in' parameters. The 'role' parameter was updated to
         *              permit an array or comma-separated list of values. The 'number' parameter was updated to support
         *              querying for all users with using -1.
         * @since 4.7.0 Added 'nicename', 'nicename__in', 'nicename__not_in', 'login', 'login__in',
         *              and 'login__not_in' parameters.
         * @since 5.1.0 Introduced the 'meta_compare_key' parameter.
         * @since 5.3.0 Introduced the 'meta_type_key' parameter.
         * @since 5.9.0 Added 'capability', 'capability__in', and 'capability__not_in' parameters.
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         * @global int  $blog_id
         *
         * @param string|array $query {
         *     Optional. Array or string of Query parameters.
         *
         *     @type int             $blog_id             The site ID. Default is the current site.
         *     @type string|string[] $role                An array or a comma-separated list of role names that users must match
         *                                                to be included in results. Note that this is an inclusive list: users
         *                                                must match *each* role. Default empty.
         *     @type string[]        $role__in            An array of role names. Matched users must have at least one of these
         *                                                roles. Default empty array.
         *     @type string[]        $role__not_in        An array of role names to exclude. Users matching one or more of these
         *                                                roles will not be included in results. Default empty array.
         *     @type string|string[] $meta_key            Meta key or keys to filter by.
         *     @type string|string[] $meta_value          Meta value or values to filter by.
         *     @type string          $meta_compare        MySQL operator used for comparing the meta value.
         *                                                See WP_Meta_Query::__construct for accepted values and default value.
         *     @type string          $meta_compare_key    MySQL operator used for comparing the meta key.
         *                                                See WP_Meta_Query::__construct for accepted values and default value.
         *     @type string          $meta_type           MySQL data type that the meta_value column will be CAST to for comparisons.
         *                                                See WP_Meta_Query::__construct for accepted values and default value.
         *     @type string          $meta_type_key       MySQL data type that the meta_key column will be CAST to for comparisons.
         *                                                See WP_Meta_Query::__construct for accepted values and default value.
         *     @type array           $meta_query          An associative array of WP_Meta_Query arguments.
         *                                                See WP_Meta_Query::__construct for accepted values.
         *     @type string|string[] $capability          An array or a comma-separated list of capability names that users must match
         *                                                to be included in results. Note that this is an inclusive list: users
         *                                                must match *each* capability.
         *                                                Does NOT work for capabilities not in the database or filtered via {@see 'map_meta_cap'}.
         *                                                Default empty.
         *     @type string[]        $capability__in      An array of capability names. Matched users must have at least one of these
         *                                                capabilities.
         *                                                Does NOT work for capabilities not in the database or filtered via {@see 'map_meta_cap'}.
         *                                                Default empty array.
         *     @type string[]        $capability__not_in  An array of capability names to exclude. Users matching one or more of these
         *                                                capabilities will not be included in results.
         *                                                Does NOT work for capabilities not in the database or filtered via {@see 'map_meta_cap'}.
         *                                                Default empty array.
         *     @type int[]           $include             An array of user IDs to include. Default empty array.
         *     @type int[]           $exclude             An array of user IDs to exclude. Default empty array.
         *     @type string          $search              Search keyword. Searches for possible string matches on columns.
         *                                                When `$search_columns` is left empty, it tries to determine which
         *                                                column to search in based on search string. Default empty.
         *     @type string[]        $search_columns      Array of column names to be searched. Accepts 'ID', 'user_login',
         *                                                'user_email', 'user_url', 'user_nicename', 'display_name'.
         *                                                Default empty array.
         *     @type string|array    $orderby             Field(s) to sort the retrieved users by. May be a single value,
         *                                                an array of values, or a multi-dimensional array with fields as
         *                                                keys and orders ('ASC' or 'DESC') as values. Accepted values are:
         *                                                - 'ID'
         *                                                - 'display_name' (or 'name')
         *                                                - 'include'
         *                                                - 'user_login' (or 'login')
         *                                                - 'login__in'
         *                                                - 'user_nicename' (or 'nicename'),
         *                                                - 'nicename__in'
         *                                                - 'user_email (or 'email')
         *                                                - 'user_url' (or 'url'),
         *                                                - 'user_registered' (or 'registered')
         *                                                - 'post_count'
         *                                                - 'meta_value',
         *                                                - 'meta_value_num'
         *                                                - The value of `$meta_key`
         *                                                - An array key of `$meta_query`
         *                                                To use 'meta_value' or 'meta_value_num', `$meta_key`
         *                                                must be also be defined. Default 'user_login'.
         *     @type string          $order               Designates ascending or descending order of users. Order values
         *                                                passed as part of an `$orderby` array take precedence over this
         *                                                parameter. Accepts 'ASC', 'DESC'. Default 'ASC'.
         *     @type int             $offset              Number of users to offset in retrieved results. Can be used in
         *                                                conjunction with pagination. Default 0.
         *     @type int             $number              Number of users to limit the query for. Can be used in
         *                                                conjunction with pagination. Value -1 (all) is supported, but
         *                                                should be used with caution on larger sites.
         *                                                Default -1 (all users).
         *     @type int             $paged               When used with number, defines the page of results to return.
         *                                                Default 1.
         *     @type bool            $count_total         Whether to count the total number of users found. If pagination
         *                                                is not needed, setting this to false can improve performance.
         *                                                Default true.
         *     @type string|string[] $fields              Which fields to return. Single or all fields (string), or array
         *                                                of fields. Accepts:
         *                                                - 'ID'
         *                                                - 'display_name'
         *                                                - 'user_login'
         *                                                - 'user_nicename'
         *                                                - 'user_email'
         *                                                - 'user_url'
         *                                                - 'user_registered'
         *                                                - 'user_pass'
         *                                                - 'user_activation_key'
         *                                                - 'user_status'
         *                                                - 'spam' (only available on multisite installs)
         *                                                - 'deleted' (only available on multisite installs)
         *                                                - 'all' for all fields
         *                                                - 'all_with_meta' to include meta fields.
         *                                                Default 'all'.
         *     @type string          $who                 Type of users to query. Accepts 'authors'.
         *                                                Default empty (all users).
         *     @type bool|string[]   $has_published_posts Pass an array of post types to filter results to users who have
         *                                                published posts in those post types. `true` is an alias for all
         *                                                public post types.
         *     @type string          $nicename            The user nicename. Default empty.
         *     @type string[]        $nicename__in        An array of nicenames to include. Users matching one of these
         *                                                nicenames will be included in results. Default empty array.
         *     @type string[]        $nicename__not_in    An array of nicenames to exclude. Users matching one of these
         *                                                nicenames will not be included in results. Default empty array.
         *     @type string          $login               The user login. Default empty.
         *     @type string[]        $login__in           An array of logins to include. Users matching one of these
         *                                                logins will be included in results. Default empty array.
         *     @type string[]        $login__not_in       An array of logins to exclude. Users matching one of these
         *                                                logins will not be included in results. Default empty array.
         * }
         */
        public function prepare_query($query = array())
        {
        }
        /**
         * Executes the query, with the current variables.
         *
         * @since 3.1.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         */
        public function query()
        {
        }
        /**
         * Retrieves query variable.
         *
         * @since 3.5.0
         *
         * @param string $query_var Query variable key.
         * @return mixed
         */
        public function get($query_var)
        {
        }
        /**
         * Sets query variable.
         *
         * @since 3.5.0
         *
         * @param string $query_var Query variable key.
         * @param mixed  $value     Query variable value.
         */
        public function set($query_var, $value)
        {
        }
        /**
         * Used internally to generate an SQL string for searching across multiple columns.
         *
         * @since 3.1.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param string   $search  Search string.
         * @param string[] $columns Array of columns to search.
         * @param bool     $wild    Whether to allow wildcard searches. Default is false for Network Admin, true for single site.
         *                          Single site allows leading and trailing wildcards, Network Admin only trailing.
         * @return string
         */
        protected function get_search_sql($search, $columns, $wild = \false)
        {
        }
        /**
         * Returns the list of users.
         *
         * @since 3.1.0
         *
         * @return array Array of results.
         */
        public function get_results()
        {
        }
        /**
         * Returns the total number of users for the current query.
         *
         * @since 3.1.0
         *
         * @return int Number of total users.
         */
        public function get_total()
        {
        }
        /**
         * Parses and sanitizes 'orderby' keys passed to the user query.
         *
         * @since 4.2.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param string $orderby Alias for the field to order by.
         * @return string Value to used in the ORDER clause, if `$orderby` is valid.
         */
        protected function parse_orderby($orderby)
        {
        }
        /**
         * Parses an 'order' query variable and casts it to ASC or DESC as necessary.
         *
         * @since 4.2.0
         *
         * @param string $order The 'order' query variable.
         * @return string The sanitized 'order' query variable.
         */
        protected function parse_order($order)
        {
        }
        /**
         * Makes private properties readable for backward compatibility.
         *
         * @since 4.0.0
         *
         * @param string $name Property to get.
         * @return mixed Property.
         */
        public function __get($name)
        {
        }
        /**
         * Makes private properties settable for backward compatibility.
         *
         * @since 4.0.0
         *
         * @param string $name  Property to check if set.
         * @param mixed  $value Property value.
         * @return mixed Newly-set property.
         */
        public function __set($name, $value)
        {
        }
        /**
         * Makes private properties checkable for backward compatibility.
         *
         * @since 4.0.0
         *
         * @param string $name Property to check if set.
         * @return bool Whether the property is set.
         */
        public function __isset($name)
        {
        }
        /**
         * Makes private properties un-settable for backward compatibility.
         *
         * @since 4.0.0
         *
         * @param string $name Property to unset.
         */
        public function __unset($name)
        {
        }
        /**
         * Makes private/protected methods readable for backward compatibility.
         *
         * @since 4.0.0
         *
         * @param string $name      Method to call.
         * @param array  $arguments Arguments to pass when calling.
         * @return mixed Return value of the callback, false otherwise.
         */
        public function __call($name, $arguments)
        {
        }
    }
    /**
     * Error Protection API: WP_Paused_Extensions_Storage class
     *
     * @package WordPress
     * @since 5.2.0
     */
    /**
     * Core class used for storing paused extensions.
     *
     * @since 5.2.0
     */
    class WP_Paused_Extensions_Storage
    {
        /**
         * Type of extension. Used to key extension storage.
         *
         * @since 5.2.0
         * @var string
         */
        protected $type;
        /**
         * Constructor.
         *
         * @since 5.2.0
         *
         * @param string $extension_type Extension type. Either 'plugin' or 'theme'.
         */
        public function __construct($extension_type)
        {
        }
        /**
         * Records an extension error.
         *
         * Only one error is stored per extension, with subsequent errors for the same extension overriding the
         * previously stored error.
         *
         * @since 5.2.0
         *
         * @param string $extension Plugin or theme directory name.
         * @param array  $error     {
         *     Error information returned by `error_get_last()`.
         *
         *     @type int    $type    The error type.
         *     @type string $file    The name of the file in which the error occurred.
         *     @type int    $line    The line number in which the error occurred.
         *     @type string $message The error message.
         * }
         * @return bool True on success, false on failure.
         */
        public function set($extension, $error)
        {
        }
        /**
         * Forgets a previously recorded extension error.
         *
         * @since 5.2.0
         *
         * @param string $extension Plugin or theme directory name.
         * @return bool True on success, false on failure.
         */
        public function delete($extension)
        {
        }
        /**
         * Gets the error for an extension, if paused.
         *
         * @since 5.2.0
         *
         * @param string $extension Plugin or theme directory name.
         * @return array|null Error that is stored, or null if the extension is not paused.
         */
        public function get($extension)
        {
        }
        /**
         * Gets the paused extensions with their errors.
         *
         * @since 5.2.0
         *
         * @return array {
         *     Associative array of errors keyed by extension slug.
         *
         *     @type array ...$0 Error information returned by `error_get_last()`.
         * }
         */
        public function get_all()
        {
        }
        /**
         * Remove all paused extensions.
         *
         * @since 5.2.0
         *
         * @return bool
         */
        public function delete_all()
        {
        }
        /**
         * Checks whether the underlying API to store paused extensions is loaded.
         *
         * @since 5.2.0
         *
         * @return bool True if the API is loaded, false otherwise.
         */
        protected function is_api_loaded()
        {
        }
        /**
         * Get the option name for storing paused extensions.
         *
         * @since 5.2.0
         *
         * @return string
         */
        protected function get_option_name()
        {
        }
    }
    /**
     * Error Protection API: WP_Recovery_Mode_Link_Handler class
     *
     * @package WordPress
     * @since 5.2.0
     */
    /**
     * Core class used to generate and handle recovery mode links.
     *
     * @since 5.2.0
     */
    class WP_Recovery_Mode_Link_Service
    {
        const LOGIN_ACTION_ENTER = 'enter_recovery_mode';
        const LOGIN_ACTION_ENTERED = 'entered_recovery_mode';
        /**
         * Service to generate and validate recovery mode keys.
         *
         * @since 5.2.0
         * @var WP_Recovery_Mode_Key_Service
         */
        private $key_service;
        /**
         * Service to handle cookies.
         *
         * @since 5.2.0
         * @var WP_Recovery_Mode_Cookie_Service
         */
        private $cookie_service;
        /**
         * WP_Recovery_Mode_Link_Service constructor.
         *
         * @since 5.2.0
         *
         * @param WP_Recovery_Mode_Cookie_Service $cookie_service Service to handle setting the recovery mode cookie.
         * @param WP_Recovery_Mode_Key_Service    $key_service    Service to handle generating recovery mode keys.
         */
        public function __construct(\WP_Recovery_Mode_Cookie_Service $cookie_service, \WP_Recovery_Mode_Key_Service $key_service)
        {
        }
        /**
         * Generates a URL to begin recovery mode.
         *
         * Only one recovery mode URL can may be valid at the same time.
         *
         * @since 5.2.0
         *
         * @return string Generated URL.
         */
        public function generate_url()
        {
        }
        /**
         * Enters recovery mode when the user hits wp-login.php with a valid recovery mode link.
         *
         * @since 5.2.0
         *
         * @global string $pagenow The filename of the current screen.
         *
         * @param int $ttl Number of seconds the link should be valid for.
         */
        public function handle_begin_link($ttl)
        {
        }
        /**
         * Gets a URL to begin recovery mode.
         *
         * @since 5.2.0
         *
         * @param string $token Recovery Mode token created by {@see generate_recovery_mode_token()}.
         * @param string $key   Recovery Mode key created by {@see generate_and_store_recovery_mode_key()}.
         * @return string Recovery mode begin URL.
         */
        private function get_recovery_mode_begin_url($token, $key)
        {
        }
    }
    /**
     * WP_User_Request class.
     *
     * Represents user request data loaded from a WP_Post object.
     *
     * @since 4.9.6
     */
    final class WP_User_Request
    {
        /**
         * Request ID.
         *
         * @since 4.9.6
         * @var int
         */
        public $ID = 0;
        /**
         * User ID.
         *
         * @since 4.9.6
         * @var int
         */
        public $user_id = 0;
        /**
         * User email.
         *
         * @since 4.9.6
         * @var string
         */
        public $email = '';
        /**
         * Action name.
         *
         * @since 4.9.6
         * @var string
         */
        public $action_name = '';
        /**
         * Current status.
         *
         * @since 4.9.6
         * @var string
         */
        public $status = '';
        /**
         * Timestamp this request was created.
         *
         * @since 4.9.6
         * @var int|null
         */
        public $created_timestamp = \null;
        /**
         * Timestamp this request was last modified.
         *
         * @since 4.9.6
         * @var int|null
         */
        public $modified_timestamp = \null;
        /**
         * Timestamp this request was confirmed.
         *
         * @since 4.9.6
         * @var int|null
         */
        public $confirmed_timestamp = \null;
        /**
         * Timestamp this request was completed.
         *
         * @since 4.9.6
         * @var int|null
         */
        public $completed_timestamp = \null;
        /**
         * Misc data assigned to this request.
         *
         * @since 4.9.6
         * @var array
         */
        public $request_data = array();
        /**
         * Key used to confirm this request.
         *
         * @since 4.9.6
         * @var string
         */
        public $confirm_key = '';
        /**
         * Constructor.
         *
         * @since 4.9.6
         *
         * @param WP_Post|object $post Post object.
         */
        public function __construct($post)
        {
        }
    }
    /**
     * WP_oEmbed_Controller class, used to provide an oEmbed endpoint.
     *
     * @package WordPress
     * @subpackage Embeds
     * @since 4.4.0
     */
    /**
     * oEmbed API endpoint controller.
     *
     * Registers the REST API route and delivers the response data.
     * The output format (XML or JSON) is handled by the REST API.
     *
     * @since 4.4.0
     */
    final class WP_oEmbed_Controller
    {
        /**
         * Register the oEmbed REST API route.
         *
         * @since 4.4.0
         */
        public function register_routes()
        {
        }
        /**
         * Callback for the embed API endpoint.
         *
         * Returns the JSON object for the post.
         *
         * @since 4.4.0
         *
         * @param WP_REST_Request $request Full data about the request.
         * @return array|WP_Error oEmbed response data or WP_Error on failure.
         */
        public function get_item($request)
        {
        }
        /**
         * Checks if current user can make a proxy oEmbed request.
         *
         * @since 4.8.0
         *
         * @return true|WP_Error True if the request has read access, WP_Error object otherwise.
         */
        public function get_proxy_item_permissions_check()
        {
        }
        /**
         * Callback for the proxy API endpoint.
         *
         * Returns the JSON object for the proxied item.
         *
         * @since 4.8.0
         *
         * @see WP_oEmbed::get_html()
         * @global WP_Embed $wp_embed
         *
         * @param WP_REST_Request $request Full data about the request.
         * @return object|WP_Error oEmbed response data or WP_Error on failure.
         */
        public function get_proxy_item($request)
        {
        }
    }
    /**
     * Customize API: WP_Customize_Media_Control class
     *
     * @package WordPress
     * @subpackage Customize
     * @since 4.4.0
     */
    /**
     * Customize Media Control class.
     *
     * @since 4.2.0
     *
     * @see WP_Customize_Control
     */
    class WP_Customize_Media_Control extends \WP_Customize_Control
    {
        /**
         * Control type.
         *
         * @since 4.2.0
         * @var string
         */
        public $type = 'media';
        /**
         * Media control mime type.
         *
         * @since 4.2.0
         * @var string
         */
        public $mime_type = '';
        /**
         * Button labels.
         *
         * @since 4.2.0
         * @var array
         */
        public $button_labels = array();
        /**
         * Constructor.
         *
         * @since 4.1.0
         * @since 4.2.0 Moved from WP_Customize_Upload_Control.
         *
         * @see WP_Customize_Control::__construct()
         *
         * @param WP_Customize_Manager $manager Customizer bootstrap instance.
         * @param string               $id      Control ID.
         * @param array                $args    Optional. Arguments to override class property defaults.
         *                                      See WP_Customize_Control::__construct() for information
         *                                      on accepted arguments. Default empty array.
         */
        public function __construct($manager, $id, $args = array())
        {
        }
        /**
         * Enqueue control related scripts/styles.
         *
         * @since 3.4.0
         * @since 4.2.0 Moved from WP_Customize_Upload_Control.
         */
        public function enqueue()
        {
        }
        /**
         * Refresh the parameters passed to the JavaScript via JSON.
         *
         * @since 3.4.0
         * @since 4.2.0 Moved from WP_Customize_Upload_Control.
         *
         * @see WP_Customize_Control::to_json()
         */
        public function to_json()
        {
        }
        /**
         * Don't render any content for this control from PHP.
         *
         * @since 3.4.0
         * @since 4.2.0 Moved from WP_Customize_Upload_Control.
         *
         * @see WP_Customize_Media_Control::content_template()
         */
        public function render_content()
        {
        }
        /**
         * Render a JS template for the content of the media control.
         *
         * @since 4.1.0
         * @since 4.2.0 Moved from WP_Customize_Upload_Control.
         */
        public function content_template()
        {
        }
        /**
         * Get default button labels.
         *
         * Provides an array of the default button labels based on the mime type of the current control.
         *
         * @since 4.9.0
         *
         * @return string[] An associative array of default button labels keyed by the button name.
         */
        public function get_default_button_labels()
        {
        }
    }
    /**
     * Customize API: WP_Customize_Upload_Control class
     *
     * @package WordPress
     * @subpackage Customize
     * @since 4.4.0
     */
    /**
     * Customize Upload Control Class.
     *
     * @since 3.4.0
     *
     * @see WP_Customize_Media_Control
     */
    class WP_Customize_Upload_Control extends \WP_Customize_Media_Control
    {
        /**
         * Control type.
         *
         * @since 3.4.0
         * @var string
         */
        public $type = 'upload';
        /**
         * Media control mime type.
         *
         * @since 4.1.0
         * @var string
         */
        public $mime_type = '';
        /**
         * Button labels.
         *
         * @since 4.1.0
         * @var array
         */
        public $button_labels = array();
        public $removed = '';
        // Unused.
        public $context;
        // Unused.
        public $extensions = array();
        // Unused.
        /**
         * Refresh the parameters passed to the JavaScript via JSON.
         *
         * @since 3.4.0
         *
         * @uses WP_Customize_Media_Control::to_json()
         */
        public function to_json()
        {
        }
    }
    /**
     * Customize API: WP_Customize_Selective_Refresh class
     *
     * @package WordPress
     * @subpackage Customize
     * @since 4.5.0
     */
    /**
     * Core Customizer class for implementing selective refresh.
     *
     * @since 4.5.0
     */
    final class WP_Customize_Selective_Refresh
    {
        /**
         * Query var used in requests to render partials.
         *
         * @since 4.5.0
         */
        const RENDER_QUERY_VAR = 'wp_customize_render_partials';
        /**
         * Customize manager.
         *
         * @since 4.5.0
         * @var WP_Customize_Manager
         */
        public $manager;
        /**
         * Registered instances of WP_Customize_Partial.
         *
         * @since 4.5.0
         * @var WP_Customize_Partial[]
         */
        protected $partials = array();
        /**
         * Log of errors triggered when partials are rendered.
         *
         * @since 4.5.0
         * @var array
         */
        protected $triggered_errors = array();
        /**
         * Keep track of the current partial being rendered.
         *
         * @since 4.5.0
         * @var string|null
         */
        protected $current_partial_id;
        /**
         * Plugin bootstrap for Partial Refresh functionality.
         *
         * @since 4.5.0
         *
         * @param WP_Customize_Manager $manager Customizer bootstrap instance.
         */
        public function __construct(\WP_Customize_Manager $manager)
        {
        }
        /**
         * Retrieves the registered partials.
         *
         * @since 4.5.0
         *
         * @return array Partials.
         */
        public function partials()
        {
        }
        /**
         * Adds a partial.
         *
         * @since 4.5.0
         *
         * @see WP_Customize_Partial::__construct()
         *
         * @param WP_Customize_Partial|string $id   Customize Partial object, or Partial ID.
         * @param array                       $args Optional. Array of properties for the new Partials object.
         *                                          See WP_Customize_Partial::__construct() for information
         *                                          on accepted arguments. Default empty array.
         * @return WP_Customize_Partial The instance of the partial that was added.
         */
        public function add_partial($id, $args = array())
        {
        }
        /**
         * Retrieves a partial.
         *
         * @since 4.5.0
         *
         * @param string $id Customize Partial ID.
         * @return WP_Customize_Partial|null The partial, if set. Otherwise null.
         */
        public function get_partial($id)
        {
        }
        /**
         * Removes a partial.
         *
         * @since 4.5.0
         *
         * @param string $id Customize Partial ID.
         */
        public function remove_partial($id)
        {
        }
        /**
         * Initializes the Customizer preview.
         *
         * @since 4.5.0
         */
        public function init_preview()
        {
        }
        /**
         * Enqueues preview scripts.
         *
         * @since 4.5.0
         */
        public function enqueue_preview_scripts()
        {
        }
        /**
         * Exports data in preview after it has finished rendering so that partials can be added at runtime.
         *
         * @since 4.5.0
         */
        public function export_preview_data()
        {
        }
        /**
         * Registers dynamically-created partials.
         *
         * @since 4.5.0
         *
         * @see WP_Customize_Manager::add_dynamic_settings()
         *
         * @param string[] $partial_ids Array of the partial IDs to add.
         * @return WP_Customize_Partial[] Array of added WP_Customize_Partial instances.
         */
        public function add_dynamic_partials($partial_ids)
        {
        }
        /**
         * Checks whether the request is for rendering partials.
         *
         * Note that this will not consider whether the request is authorized or valid,
         * just that essentially the route is a match.
         *
         * @since 4.5.0
         *
         * @return bool Whether the request is for rendering partials.
         */
        public function is_render_partials_request()
        {
        }
        /**
         * Handles PHP errors triggered during rendering the partials.
         *
         * These errors will be relayed back to the client in the Ajax response.
         *
         * @since 4.5.0
         *
         * @param int    $errno   Error number.
         * @param string $errstr  Error string.
         * @param string $errfile Error file.
         * @param int    $errline Error line.
         * @return true Always true.
         */
        public function handle_error($errno, $errstr, $errfile = \null, $errline = \null)
        {
        }
        /**
         * Handles the Ajax request to return the rendered partials for the requested placements.
         *
         * @since 4.5.0
         */
        public function handle_render_partials_request()
        {
        }
    }
    /**
     * Customize API: WP_Customize_Date_Time_Control class
     *
     * @package WordPress
     * @subpackage Customize
     * @since 4.9.0
     */
    /**
     * Customize Date Time Control class.
     *
     * @since 4.9.0
     *
     * @see WP_Customize_Control
     */
    class WP_Customize_Date_Time_Control extends \WP_Customize_Control
    {
        /**
         * Customize control type.
         *
         * @since 4.9.0
         * @var string
         */
        public $type = 'date_time';
        /**
         * Minimum Year.
         *
         * @since 4.9.0
         * @var int
         */
        public $min_year = 1000;
        /**
         * Maximum Year.
         *
         * @since 4.9.0
         * @var int
         */
        public $max_year = 9999;
        /**
         * Allow past date, if set to false user can only select future date.
         *
         * @since 4.9.0
         * @var bool
         */
        public $allow_past_date = \true;
        /**
         * Whether hours, minutes, and meridian should be shown.
         *
         * @since 4.9.0
         * @var bool
         */
        public $include_time = \true;
        /**
         * If set to false the control will appear in 24 hour format,
         * the value will still be saved in Y-m-d H:i:s format.
         *
         * @since 4.9.0
         * @var bool
         */
        public $twelve_hour_format = \true;
        /**
         * Don't render the control's content - it's rendered with a JS template.
         *
         * @since 4.9.0
         */
        public function render_content()
        {
        }
        /**
         * Export data to JS.
         *
         * @since 4.9.0
         * @return array
         */
        public function json()
        {
        }
        /**
         * Renders a JS template for the content of date time control.
         *
         * @since 4.9.0
         */
        public function content_template()
        {
        }
        /**
         * Generate options for the month Select.
         *
         * Based on touch_time().
         *
         * @since 4.9.0
         *
         * @see touch_time()
         *
         * @global WP_Locale $wp_locale WordPress date and time locale object.
         *
         * @return array
         */
        public function get_month_choices()
        {
        }
        /**
         * Get timezone info.
         *
         * @since 4.9.0
         *
         * @return array {
         *     Timezone info. All properties are optional.
         *
         *     @type string $abbr        Timezone abbreviation. Examples: PST or CEST.
         *     @type string $description Human-readable timezone description as HTML.
         * }
         */
        public function get_timezone_info()
        {
        }
        /**
         * Format GMT Offset.
         *
         * @since 4.9.0
         *
         * @see wp_timezone_choice()
         *
         * @param float $offset Offset in hours.
         * @return string Formatted offset.
         */
        public function format_gmt_offset($offset)
        {
        }
    }
    /**
     * Customize API: WP_Sidebar_Block_Editor_Control class.
     *
     * @package WordPress
     * @subpackage Customize
     * @since 5.8.0
     */
    /**
     * Core class used to implement the widgets block editor control in the
     * customizer.
     *
     * @since 5.8.0
     *
     * @see WP_Customize_Control
     */
    class WP_Sidebar_Block_Editor_Control extends \WP_Customize_Control
    {
        /**
         * The control type.
         *
         * @since 5.8.0
         *
         * @var string
         */
        public $type = 'sidebar_block_editor';
        /**
         * Render the widgets block editor container.
         *
         * @since 5.8.0
         */
        public function render_content()
        {
        }
    }
    /**
     * Customize API: WP_Customize_Nav_Menu_Name_Control class
     *
     * @package WordPress
     * @subpackage Customize
     * @since 4.4.0
     */
    /**
     * Customize control to represent the name field for a given menu.
     *
     * @since 4.3.0
     *
     * @see WP_Customize_Control
     */
    class WP_Customize_Nav_Menu_Name_Control extends \WP_Customize_Control
    {
        /**
         * Type of control, used by JS.
         *
         * @since 4.3.0
         * @var string
         */
        public $type = 'nav_menu_name';
        /**
         * No-op since we're using JS template.
         *
         * @since 4.3.0
         */
        protected function render_content()
        {
        }
        /**
         * Render the Underscore template for this control.
         *
         * @since 4.3.0
         */
        protected function content_template()
        {
        }
    }
    /**
     * Customize API: WP_Widget_Area_Customize_Control class
     *
     * @package WordPress
     * @subpackage Customize
     * @since 4.4.0
     */
    /**
     * Widget Area Customize Control class.
     *
     * @since 3.9.0
     *
     * @see WP_Customize_Control
     */
    class WP_Widget_Area_Customize_Control extends \WP_Customize_Control
    {
        /**
         * Customize control type.
         *
         * @since 3.9.0
         * @var string
         */
        public $type = 'sidebar_widgets';
        /**
         * Sidebar ID.
         *
         * @since 3.9.0
         * @var int|string
         */
        public $sidebar_id;
        /**
         * Refreshes the parameters passed to the JavaScript via JSON.
         *
         * @since 3.9.0
         */
        public function to_json()
        {
        }
        /**
         * Renders the control's content.
         *
         * @since 3.9.0
         */
        public function render_content()
        {
        }
    }
    /**
     * Customize API: WP_Customize_Nav_Menu_Item_Setting class
     *
     * @package WordPress
     * @subpackage Customize
     * @since 4.4.0
     */
    /**
     * Customize Setting to represent a nav_menu.
     *
     * Subclass of WP_Customize_Setting to represent a nav_menu taxonomy term, and
     * the IDs for the nav_menu_items associated with the nav menu.
     *
     * @since 4.3.0
     *
     * @see WP_Customize_Setting
     */
    class WP_Customize_Nav_Menu_Item_Setting extends \WP_Customize_Setting
    {
        const ID_PATTERN = '/^nav_menu_item\\[(?P<id>-?\\d+)\\]$/';
        const POST_TYPE = 'nav_menu_item';
        const TYPE = 'nav_menu_item';
        /**
         * Setting type.
         *
         * @since 4.3.0
         * @var string
         */
        public $type = self::TYPE;
        /**
         * Default setting value.
         *
         * @since 4.3.0
         * @var array
         *
         * @see wp_setup_nav_menu_item()
         */
        public $default = array(
            // The $menu_item_data for wp_update_nav_menu_item().
            'object_id' => 0,
            'object' => '',
            // Taxonomy name.
            'menu_item_parent' => 0,
            // A.K.A. menu-item-parent-id; note that post_parent is different, and not included.
            'position' => 0,
            // A.K.A. menu_order.
            'type' => 'custom',
            // Note that type_label is not included here.
            'title' => '',
            'url' => '',
            'target' => '',
            'attr_title' => '',
            'description' => '',
            'classes' => '',
            'xfn' => '',
            'status' => 'publish',
            'original_title' => '',
            'nav_menu_term_id' => 0,
            // This will be supplied as the $menu_id arg for wp_update_nav_menu_item().
            '_invalid' => \false,
        );
        /**
         * Default transport.
         *
         * @since 4.3.0
         * @since 4.5.0 Default changed to 'refresh'
         * @var string
         */
        public $transport = 'refresh';
        /**
         * The post ID represented by this setting instance. This is the db_id.
         *
         * A negative value represents a placeholder ID for a new menu not yet saved.
         *
         * @since 4.3.0
         * @var int
         */
        public $post_id;
        /**
         * Storage of pre-setup menu item to prevent wasted calls to wp_setup_nav_menu_item().
         *
         * @since 4.3.0
         * @var array|null
         */
        protected $value;
        /**
         * Previous (placeholder) post ID used before creating a new menu item.
         *
         * This value will be exported to JS via the customize_save_response filter
         * so that JavaScript can update the settings to refer to the newly-assigned
         * post ID. This value is always negative to indicate it does not refer to
         * a real post.
         *
         * @since 4.3.0
         * @var int
         *
         * @see WP_Customize_Nav_Menu_Item_Setting::update()
         * @see WP_Customize_Nav_Menu_Item_Setting::amend_customize_save_response()
         */
        public $previous_post_id;
        /**
         * When previewing or updating a menu item, this stores the previous nav_menu_term_id
         * which ensures that we can apply the proper filters.
         *
         * @since 4.3.0
         * @var int
         */
        public $original_nav_menu_term_id;
        /**
         * Whether or not update() was called.
         *
         * @since 4.3.0
         * @var bool
         */
        protected $is_updated = \false;
        /**
         * Status for calling the update method, used in customize_save_response filter.
         *
         * See {@see 'customize_save_response'}.
         *
         * When status is inserted, the placeholder post ID is stored in $previous_post_id.
         * When status is error, the error is stored in $update_error.
         *
         * @since 4.3.0
         * @var string updated|inserted|deleted|error
         *
         * @see WP_Customize_Nav_Menu_Item_Setting::update()
         * @see WP_Customize_Nav_Menu_Item_Setting::amend_customize_save_response()
         */
        public $update_status;
        /**
         * Any error object returned by wp_update_nav_menu_item() when setting is updated.
         *
         * @since 4.3.0
         * @var WP_Error
         *
         * @see WP_Customize_Nav_Menu_Item_Setting::update()
         * @see WP_Customize_Nav_Menu_Item_Setting::amend_customize_save_response()
         */
        public $update_error;
        /**
         * Constructor.
         *
         * Any supplied $args override class property defaults.
         *
         * @since 4.3.0
         *
         * @throws Exception If $id is not valid for this setting type.
         *
         * @param WP_Customize_Manager $manager Customizer bootstrap instance.
         * @param string               $id      A specific ID of the setting.
         *                                      Can be a theme mod or option name.
         * @param array                $args    Optional. Setting arguments.
         */
        public function __construct(\WP_Customize_Manager $manager, $id, array $args = array())
        {
        }
        /**
         * Clear the cached value when this nav menu item is updated.
         *
         * @since 4.3.0
         *
         * @param int $menu_id       The term ID for the menu.
         * @param int $menu_item_id  The post ID for the menu item.
         */
        public function flush_cached_value($menu_id, $menu_item_id)
        {
        }
        /**
         * Get the instance data for a given nav_menu_item setting.
         *
         * @since 4.3.0
         *
         * @see wp_setup_nav_menu_item()
         *
         * @return array|false Instance data array, or false if the item is marked for deletion.
         */
        public function value()
        {
        }
        /**
         * Get original title.
         *
         * @since 4.7.0
         *
         * @param object $item Nav menu item.
         * @return string The original title.
         */
        protected function get_original_title($item)
        {
        }
        /**
         * Get type label.
         *
         * @since 4.7.0
         *
         * @param object $item Nav menu item.
         * @return string The type label.
         */
        protected function get_type_label($item)
        {
        }
        /**
         * Ensure that the value is fully populated with the necessary properties.
         *
         * Translates some properties added by wp_setup_nav_menu_item() and removes others.
         *
         * @since 4.3.0
         *
         * @see WP_Customize_Nav_Menu_Item_Setting::value()
         */
        protected function populate_value()
        {
        }
        /**
         * Handle previewing the setting.
         *
         * @since 4.3.0
         * @since 4.4.0 Added boolean return value.
         *
         * @see WP_Customize_Manager::post_value()
         *
         * @return bool False if method short-circuited due to no-op.
         */
        public function preview()
        {
        }
        /**
         * Filters the wp_get_nav_menu_items() result to supply the previewed menu items.
         *
         * @since 4.3.0
         *
         * @see wp_get_nav_menu_items()
         *
         * @param WP_Post[] $items An array of menu item post objects.
         * @param WP_Term   $menu  The menu object.
         * @param array     $args  An array of arguments used to retrieve menu item objects.
         * @return WP_Post[] Array of menu item objects.
         */
        public function filter_wp_get_nav_menu_items($items, $menu, $args)
        {
        }
        /**
         * Re-apply the tail logic also applied on $items by wp_get_nav_menu_items().
         *
         * @since 4.3.0
         *
         * @see wp_get_nav_menu_items()
         *
         * @param WP_Post[] $items An array of menu item post objects.
         * @param WP_Term   $menu  The menu object.
         * @param array     $args  An array of arguments used to retrieve menu item objects.
         * @return WP_Post[] Array of menu item objects.
         */
        public static function sort_wp_get_nav_menu_items($items, $menu, $args)
        {
        }
        /**
         * Get the value emulated into a WP_Post and set up as a nav_menu_item.
         *
         * @since 4.3.0
         *
         * @return WP_Post With wp_setup_nav_menu_item() applied.
         */
        public function value_as_wp_post_nav_menu_item()
        {
        }
        /**
         * Sanitize an input.
         *
         * Note that parent::sanitize() erroneously does wp_unslash() on $value, but
         * we remove that in this override.
         *
         * @since 4.3.0
         * @since 5.9.0 Renamed `$menu_item_value` to `$value` for PHP 8 named parameter support.
         *
         * @param array $value The menu item value to sanitize.
         * @return array|false|null|WP_Error Null or WP_Error if an input isn't valid. False if it is marked for deletion.
         *                                   Otherwise the sanitized value.
         */
        public function sanitize($value)
        {
        }
        /**
         * Creates/updates the nav_menu_item post for this setting.
         *
         * Any created menu items will have their assigned post IDs exported to the client
         * via the {@see 'customize_save_response'} filter. Likewise, any errors will be
         * exported to the client via the customize_save_response() filter.
         *
         * To delete a menu, the client can send false as the value.
         *
         * @since 4.3.0
         *
         * @see wp_update_nav_menu_item()
         *
         * @param array|false $value The menu item array to update. If false, then the menu item will be deleted
         *                           entirely. See WP_Customize_Nav_Menu_Item_Setting::$default for what the value
         *                           should consist of.
         * @return null|void
         */
        protected function update($value)
        {
        }
        /**
         * Export data for the JS client.
         *
         * @since 4.3.0
         *
         * @see WP_Customize_Nav_Menu_Item_Setting::update()
         *
         * @param array $data Additional information passed back to the 'saved' event on `wp.customize`.
         * @return array Save response data.
         */
        public function amend_customize_save_response($data)
        {
        }
    }
    /**
     * Customize API: WP_Customize_Color_Control class
     *
     * @package WordPress
     * @subpackage Customize
     * @since 4.4.0
     */
    /**
     * Customize Color Control class.
     *
     * @since 3.4.0
     *
     * @see WP_Customize_Control
     */
    class WP_Customize_Color_Control extends \WP_Customize_Control
    {
        /**
         * Type.
         *
         * @var string
         */
        public $type = 'color';
        /**
         * Statuses.
         *
         * @var array
         */
        public $statuses;
        /**
         * Mode.
         *
         * @since 4.7.0
         * @var string
         */
        public $mode = 'full';
        /**
         * Constructor.
         *
         * @since 3.4.0
         *
         * @see WP_Customize_Control::__construct()
         *
         * @param WP_Customize_Manager $manager Customizer bootstrap instance.
         * @param string               $id      Control ID.
         * @param array                $args    Optional. Arguments to override class property defaults.
         *                                      See WP_Customize_Control::__construct() for information
         *                                      on accepted arguments. Default empty array.
         */
        public function __construct($manager, $id, $args = array())
        {
        }
        /**
         * Enqueue scripts/styles for the color picker.
         *
         * @since 3.4.0
         */
        public function enqueue()
        {
        }
        /**
         * Refresh the parameters passed to the JavaScript via JSON.
         *
         * @since 3.4.0
         * @uses WP_Customize_Control::to_json()
         */
        public function to_json()
        {
        }
        /**
         * Don't render the control content from PHP, as it's rendered via JS on load.
         *
         * @since 3.4.0
         */
        public function render_content()
        {
        }
        /**
         * Render a JS template for the content of the color picker control.
         *
         * @since 4.1.0
         */
        public function content_template()
        {
        }
    }
    /**
     * Customize API: WP_Customize_Nav_Menu_Setting class
     *
     * @package WordPress
     * @subpackage Customize
     * @since 4.4.0
     */
    /**
     * Customize Setting to represent a nav_menu.
     *
     * Subclass of WP_Customize_Setting to represent a nav_menu taxonomy term, and
     * the IDs for the nav_menu_items associated with the nav menu.
     *
     * @since 4.3.0
     *
     * @see wp_get_nav_menu_object()
     * @see WP_Customize_Setting
     */
    class WP_Customize_Nav_Menu_Setting extends \WP_Customize_Setting
    {
        const ID_PATTERN = '/^nav_menu\\[(?P<id>-?\\d+)\\]$/';
        const TAXONOMY = 'nav_menu';
        const TYPE = 'nav_menu';
        /**
         * Setting type.
         *
         * @since 4.3.0
         * @var string
         */
        public $type = self::TYPE;
        /**
         * Default setting value.
         *
         * @since 4.3.0
         * @var array
         *
         * @see wp_get_nav_menu_object()
         */
        public $default = array('name' => '', 'description' => '', 'parent' => 0, 'auto_add' => \false);
        /**
         * Default transport.
         *
         * @since 4.3.0
         * @var string
         */
        public $transport = 'postMessage';
        /**
         * The term ID represented by this setting instance.
         *
         * A negative value represents a placeholder ID for a new menu not yet saved.
         *
         * @since 4.3.0
         * @var int
         */
        public $term_id;
        /**
         * Previous (placeholder) term ID used before creating a new menu.
         *
         * This value will be exported to JS via the {@see 'customize_save_response'} filter
         * so that JavaScript can update the settings to refer to the newly-assigned
         * term ID. This value is always negative to indicate it does not refer to
         * a real term.
         *
         * @since 4.3.0
         * @var int
         *
         * @see WP_Customize_Nav_Menu_Setting::update()
         * @see WP_Customize_Nav_Menu_Setting::amend_customize_save_response()
         */
        public $previous_term_id;
        /**
         * Whether or not update() was called.
         *
         * @since 4.3.0
         * @var bool
         */
        protected $is_updated = \false;
        /**
         * Status for calling the update method, used in customize_save_response filter.
         *
         * See {@see 'customize_save_response'}.
         *
         * When status is inserted, the placeholder term ID is stored in `$previous_term_id`.
         * When status is error, the error is stored in `$update_error`.
         *
         * @since 4.3.0
         * @var string updated|inserted|deleted|error
         *
         * @see WP_Customize_Nav_Menu_Setting::update()
         * @see WP_Customize_Nav_Menu_Setting::amend_customize_save_response()
         */
        public $update_status;
        /**
         * Any error object returned by wp_update_nav_menu_object() when setting is updated.
         *
         * @since 4.3.0
         * @var WP_Error
         *
         * @see WP_Customize_Nav_Menu_Setting::update()
         * @see WP_Customize_Nav_Menu_Setting::amend_customize_save_response()
         */
        public $update_error;
        /**
         * Constructor.
         *
         * Any supplied $args override class property defaults.
         *
         * @since 4.3.0
         *
         * @throws Exception If $id is not valid for this setting type.
         *
         * @param WP_Customize_Manager $manager Customizer bootstrap instance.
         * @param string               $id      A specific ID of the setting.
         *                                      Can be a theme mod or option name.
         * @param array                $args    Optional. Setting arguments.
         */
        public function __construct(\WP_Customize_Manager $manager, $id, array $args = array())
        {
        }
        /**
         * Get the instance data for a given widget setting.
         *
         * @since 4.3.0
         *
         * @see wp_get_nav_menu_object()
         *
         * @return array Instance data.
         */
        public function value()
        {
        }
        /**
         * Handle previewing the setting.
         *
         * @since 4.3.0
         * @since 4.4.0 Added boolean return value
         *
         * @see WP_Customize_Manager::post_value()
         *
         * @return bool False if method short-circuited due to no-op.
         */
        public function preview()
        {
        }
        /**
         * Filters the wp_get_nav_menus() result to ensure the inserted menu object is included, and the deleted one is removed.
         *
         * @since 4.3.0
         *
         * @see wp_get_nav_menus()
         *
         * @param WP_Term[] $menus An array of menu objects.
         * @param array     $args  An array of arguments used to retrieve menu objects.
         * @return WP_Term[] Array of menu objects.
         */
        public function filter_wp_get_nav_menus($menus, $args)
        {
        }
        /**
         * Temporary non-closure passing of orderby value to function.
         *
         * @since 4.3.0
         * @var string
         *
         * @see WP_Customize_Nav_Menu_Setting::filter_wp_get_nav_menus()
         * @see WP_Customize_Nav_Menu_Setting::_sort_menus_by_orderby()
         */
        protected $_current_menus_sort_orderby;
        /**
         * Sort menu objects by the class-supplied orderby property.
         *
         * This is a workaround for a lack of closures.
         *
         * @since 4.3.0
         * @deprecated 4.7.0 Use wp_list_sort()
         *
         * @param object $menu1
         * @param object $menu2
         * @return int
         *
         * @see WP_Customize_Nav_Menu_Setting::filter_wp_get_nav_menus()
         */
        protected function _sort_menus_by_orderby($menu1, $menu2)
        {
        }
        /**
         * Filters the wp_get_nav_menu_object() result to supply the previewed menu object.
         *
         * Requesting a nav_menu object by anything but ID is not supported.
         *
         * @since 4.3.0
         *
         * @see wp_get_nav_menu_object()
         *
         * @param object|null $menu_obj Object returned by wp_get_nav_menu_object().
         * @param string      $menu_id  ID of the nav_menu term. Requests by slug or name will be ignored.
         * @return object|null
         */
        public function filter_wp_get_nav_menu_object($menu_obj, $menu_id)
        {
        }
        /**
         * Filters the nav_menu_options option to include this menu's auto_add preference.
         *
         * @since 4.3.0
         *
         * @param array $nav_menu_options Nav menu options including auto_add.
         * @return array (Maybe) modified nav menu options.
         */
        public function filter_nav_menu_options($nav_menu_options)
        {
        }
        /**
         * Sanitize an input.
         *
         * Note that parent::sanitize() erroneously does wp_unslash() on $value, but
         * we remove that in this override.
         *
         * @since 4.3.0
         *
         * @param array $value The menu value to sanitize.
         * @return array|false|null Null if an input isn't valid. False if it is marked for deletion.
         *                          Otherwise the sanitized value.
         */
        public function sanitize($value)
        {
        }
        /**
         * Storage for data to be sent back to client in customize_save_response filter.
         *
         * See {@see 'customize_save_response'}.
         *
         * @since 4.3.0
         * @var array
         *
         * @see WP_Customize_Nav_Menu_Setting::amend_customize_save_response()
         */
        protected $_widget_nav_menu_updates = array();
        /**
         * Create/update the nav_menu term for this setting.
         *
         * Any created menus will have their assigned term IDs exported to the client
         * via the {@see 'customize_save_response'} filter. Likewise, any errors will be exported
         * to the client via the customize_save_response() filter.
         *
         * To delete a menu, the client can send false as the value.
         *
         * @since 4.3.0
         *
         * @see wp_update_nav_menu_object()
         *
         * @param array|false $value {
         *     The value to update. Note that slug cannot be updated via wp_update_nav_menu_object().
         *     If false, then the menu will be deleted entirely.
         *
         *     @type string $name        The name of the menu to save.
         *     @type string $description The term description. Default empty string.
         *     @type int    $parent      The id of the parent term. Default 0.
         *     @type bool   $auto_add    Whether pages will auto_add to this menu. Default false.
         * }
         * @return null|void
         */
        protected function update($value)
        {
        }
        /**
         * Updates a nav_menu_options array.
         *
         * @since 4.3.0
         *
         * @see WP_Customize_Nav_Menu_Setting::filter_nav_menu_options()
         * @see WP_Customize_Nav_Menu_Setting::update()
         *
         * @param array $nav_menu_options Array as returned by get_option( 'nav_menu_options' ).
         * @param int   $menu_id          The term ID for the given menu.
         * @param bool  $auto_add         Whether to auto-add or not.
         * @return array (Maybe) modified nav_menu_options array.
         */
        protected function filter_nav_menu_options_value($nav_menu_options, $menu_id, $auto_add)
        {
        }
        /**
         * Export data for the JS client.
         *
         * @since 4.3.0
         *
         * @see WP_Customize_Nav_Menu_Setting::update()
         *
         * @param array $data Additional information passed back to the 'saved' event on `wp.customize`.
         * @return array Export data.
         */
        public function amend_customize_save_response($data)
        {
        }
    }
    /**
     * Customize API: WP_Customize_Filter_Setting class
     *
     * @package WordPress
     * @subpackage Customize
     * @since 4.4.0
     */
    /**
     * A setting that is used to filter a value, but will not save the results.
     *
     * Results should be properly handled using another setting or callback.
     *
     * @since 3.4.0
     *
     * @see WP_Customize_Setting
     */
    class WP_Customize_Filter_Setting extends \WP_Customize_Setting
    {
        /**
         * Saves the value of the setting, using the related API.
         *
         * @since 3.4.0
         *
         * @param mixed $value The value to update.
         */
        public function update($value)
        {
        }
    }
    /**
     * Customize API: WP_Widget_Form_Customize_Control class
     *
     * @package WordPress
     * @subpackage Customize
     * @since 4.4.0
     */
    /**
     * Widget Form Customize Control class.
     *
     * @since 3.9.0
     *
     * @see WP_Customize_Control
     */
    class WP_Widget_Form_Customize_Control extends \WP_Customize_Control
    {
        /**
         * Customize control type.
         *
         * @since 3.9.0
         * @var string
         */
        public $type = 'widget_form';
        /**
         * Widget ID.
         *
         * @since 3.9.0
         * @var string
         */
        public $widget_id;
        /**
         * Widget ID base.
         *
         * @since 3.9.0
         * @var string
         */
        public $widget_id_base;
        /**
         * Sidebar ID.
         *
         * @since 3.9.0
         * @var string
         */
        public $sidebar_id;
        /**
         * Widget status.
         *
         * @since 3.9.0
         * @var bool True if new, false otherwise. Default false.
         */
        public $is_new = \false;
        /**
         * Widget width.
         *
         * @since 3.9.0
         * @var int
         */
        public $width;
        /**
         * Widget height.
         *
         * @since 3.9.0
         * @var int
         */
        public $height;
        /**
         * Widget mode.
         *
         * @since 3.9.0
         * @var bool True if wide, false otherwise. Default false.
         */
        public $is_wide = \false;
        /**
         * Gather control params for exporting to JavaScript.
         *
         * @since 3.9.0
         *
         * @global array $wp_registered_widgets
         */
        public function to_json()
        {
        }
        /**
         * Override render_content to be no-op since content is exported via to_json for deferred embedding.
         *
         * @since 3.9.0
         */
        public function render_content()
        {
        }
        /**
         * Whether the current widget is rendered on the page.
         *
         * @since 4.0.0
         *
         * @return bool Whether the widget is rendered.
         */
        public function active_callback()
        {
        }
    }
    /**
     * Customize API: WP_Customize_Nav_Menu_Item_Control class
     *
     * @package WordPress
     * @subpackage Customize
     * @since 4.4.0
     */
    /**
     * Customize control to represent the name field for a given menu.
     *
     * @since 4.3.0
     *
     * @see WP_Customize_Control
     */
    class WP_Customize_Nav_Menu_Item_Control extends \WP_Customize_Control
    {
        /**
         * Control type.
         *
         * @since 4.3.0
         * @var string
         */
        public $type = 'nav_menu_item';
        /**
         * The nav menu item setting.
         *
         * @since 4.3.0
         * @var WP_Customize_Nav_Menu_Item_Setting
         */
        public $setting;
        /**
         * Constructor.
         *
         * @since 4.3.0
         *
         * @see WP_Customize_Control::__construct()
         *
         * @param WP_Customize_Manager $manager Customizer bootstrap instance.
         * @param string               $id      The control ID.
         * @param array                $args    Optional. Arguments to override class property defaults.
         *                                      See WP_Customize_Control::__construct() for information
         *                                      on accepted arguments. Default empty array.
         */
        public function __construct($manager, $id, $args = array())
        {
        }
        /**
         * Don't render the control's content - it's rendered with a JS template.
         *
         * @since 4.3.0
         */
        public function render_content()
        {
        }
        /**
         * JS/Underscore template for the control UI.
         *
         * @since 4.3.0
         */
        public function content_template()
        {
        }
        /**
         * Return parameters for this control.
         *
         * @since 4.3.0
         *
         * @return array Exported parameters.
         */
        public function json()
        {
        }
    }
    /**
     * Customize API: WP_Customize_Nav_Menu_Control class
     *
     * @package WordPress
     * @subpackage Customize
     * @since 4.4.0
     */
    /**
     * Customize Nav Menu Control Class.
     *
     * @since 4.3.0
     *
     * @see WP_Customize_Control
     */
    class WP_Customize_Nav_Menu_Control extends \WP_Customize_Control
    {
        /**
         * Control type.
         *
         * @since 4.3.0
         * @var string
         */
        public $type = 'nav_menu';
        /**
         * Don't render the control's content - it uses a JS template instead.
         *
         * @since 4.3.0
         */
        public function render_content()
        {
        }
        /**
         * JS/Underscore template for the control UI.
         *
         * @since 4.3.0
         */
        public function content_template()
        {
        }
        /**
         * Return parameters for this control.
         *
         * @since 4.3.0
         *
         * @return array Exported parameters.
         */
        public function json()
        {
        }
    }
    /**
     * Customize API: WP_Customize_Background_Image_Setting class
     *
     * @package WordPress
     * @subpackage Customize
     * @since 4.4.0
     */
    /**
     * Customizer Background Image Setting class.
     *
     * @since 3.4.0
     *
     * @see WP_Customize_Setting
     */
    final class WP_Customize_Background_Image_Setting extends \WP_Customize_Setting
    {
        public $id = 'background_image_thumb';
        /**
         * @since 3.4.0
         *
         * @param mixed $value The value to update. Not used.
         */
        public function update($value)
        {
        }
    }
    /**
     * Customize control class for new menus.
     *
     * @since 4.3.0
     * @deprecated 4.9.0 This class is no longer used as of the menu creation UX introduced in #40104.
     *
     * @see WP_Customize_Control
     */
    class WP_Customize_New_Menu_Control extends \WP_Customize_Control
    {
        /**
         * Control type.
         *
         * @since 4.3.0
         * @var string
         */
        public $type = 'new_menu';
        /**
         * Constructor.
         *
         * @since 4.9.0
         * @deprecated 4.9.0
         *
         * @see WP_Customize_Control::__construct()
         *
         * @param WP_Customize_Manager $manager Customizer bootstrap instance.
         * @param string               $id      The control ID.
         * @param array                $args    Optional. Arguments to override class property defaults.
         *                                      See WP_Customize_Control::__construct() for information
         *                                      on accepted arguments. Default empty array.
         */
        public function __construct(\WP_Customize_Manager $manager, $id, array $args = array())
        {
        }
        /**
         * Render the control's content.
         *
         * @since 4.3.0
         * @deprecated 4.9.0
         */
        public function render_content()
        {
        }
    }
    /**
     * Customize API: WP_Customize_Header_Image_Setting class
     *
     * @package WordPress
     * @subpackage Customize
     * @since 4.4.0
     */
    /**
     * A setting that is used to filter a value, but will not save the results.
     *
     * Results should be properly handled using another setting or callback.
     *
     * @since 3.4.0
     *
     * @see WP_Customize_Setting
     */
    final class WP_Customize_Header_Image_Setting extends \WP_Customize_Setting
    {
        public $id = 'header_image_data';
        /**
         * @since 3.4.0
         *
         * @global Custom_Image_Header $custom_image_header
         *
         * @param mixed $value The value to update.
         */
        public function update($value)
        {
        }
    }
    /**
     * Customize API: WP_Customize_Background_Position_Control class
     *
     * @package WordPress
     * @subpackage Customize
     * @since 4.7.0
     */
    /**
     * Customize Background Position Control class.
     *
     * @since 4.7.0
     *
     * @see WP_Customize_Control
     */
    class WP_Customize_Background_Position_Control extends \WP_Customize_Control
    {
        /**
         * Type.
         *
         * @since 4.7.0
         * @var string
         */
        public $type = 'background_position';
        /**
         * Don't render the control content from PHP, as it's rendered via JS on load.
         *
         * @since 4.7.0
         */
        public function render_content()
        {
        }
        /**
         * Render a JS template for the content of the position control.
         *
         * @since 4.7.0
         */
        public function content_template()
        {
        }
    }
    /**
     * WordPress Customize Panel classes
     *
     * @package WordPress
     * @subpackage Customize
     * @since 4.0.0
     */
    /**
     * Customize Panel class.
     *
     * A UI container for sections, managed by the WP_Customize_Manager.
     *
     * @since 4.0.0
     *
     * @see WP_Customize_Manager
     */
    class WP_Customize_Panel
    {
        /**
         * Incremented with each new class instantiation, then stored in $instance_number.
         *
         * Used when sorting two instances whose priorities are equal.
         *
         * @since 4.1.0
         * @var int
         */
        protected static $instance_count = 0;
        /**
         * Order in which this instance was created in relation to other instances.
         *
         * @since 4.1.0
         * @var int
         */
        public $instance_number;
        /**
         * WP_Customize_Manager instance.
         *
         * @since 4.0.0
         * @var WP_Customize_Manager
         */
        public $manager;
        /**
         * Unique identifier.
         *
         * @since 4.0.0
         * @var string
         */
        public $id;
        /**
         * Priority of the panel, defining the display order of panels and sections.
         *
         * @since 4.0.0
         * @var int
         */
        public $priority = 160;
        /**
         * Capability required for the panel.
         *
         * @since 4.0.0
         * @var string
         */
        public $capability = 'edit_theme_options';
        /**
         * Theme features required to support the panel.
         *
         * @since 4.0.0
         * @var string|string[]
         */
        public $theme_supports = '';
        /**
         * Title of the panel to show in UI.
         *
         * @since 4.0.0
         * @var string
         */
        public $title = '';
        /**
         * Description to show in the UI.
         *
         * @since 4.0.0
         * @var string
         */
        public $description = '';
        /**
         * Auto-expand a section in a panel when the panel is expanded when the panel only has the one section.
         *
         * @since 4.7.4
         * @var bool
         */
        public $auto_expand_sole_section = \false;
        /**
         * Customizer sections for this panel.
         *
         * @since 4.0.0
         * @var array
         */
        public $sections;
        /**
         * Type of this panel.
         *
         * @since 4.1.0
         * @var string
         */
        public $type = 'default';
        /**
         * Active callback.
         *
         * @since 4.1.0
         *
         * @see WP_Customize_Section::active()
         *
         * @var callable Callback is called with one argument, the instance of
         *               WP_Customize_Section, and returns bool to indicate whether
         *               the section is active (such as it relates to the URL currently
         *               being previewed).
         */
        public $active_callback = '';
        /**
         * Constructor.
         *
         * Any supplied $args override class property defaults.
         *
         * @since 4.0.0
         *
         * @param WP_Customize_Manager $manager Customizer bootstrap instance.
         * @param string               $id      A specific ID for the panel.
         * @param array                $args    {
         *     Optional. Array of properties for the new Panel object. Default empty array.
         *
         *     @type int             $priority        Priority of the panel, defining the display order
         *                                            of panels and sections. Default 160.
         *     @type string          $capability      Capability required for the panel.
         *                                            Default `edit_theme_options`.
         *     @type string|string[] $theme_supports  Theme features required to support the panel.
         *     @type string          $title           Title of the panel to show in UI.
         *     @type string          $description     Description to show in the UI.
         *     @type string          $type            Type of the panel.
         *     @type callable        $active_callback Active callback.
         * }
         */
        public function __construct($manager, $id, $args = array())
        {
        }
        /**
         * Check whether panel is active to current Customizer preview.
         *
         * @since 4.1.0
         *
         * @return bool Whether the panel is active to the current preview.
         */
        public final function active()
        {
        }
        /**
         * Default callback used when invoking WP_Customize_Panel::active().
         *
         * Subclasses can override this with their specific logic, or they may
         * provide an 'active_callback' argument to the constructor.
         *
         * @since 4.1.0
         *
         * @return bool Always true.
         */
        public function active_callback()
        {
        }
        /**
         * Gather the parameters passed to client JavaScript via JSON.
         *
         * @since 4.1.0
         *
         * @return array The array to be exported to the client as JSON.
         */
        public function json()
        {
        }
        /**
         * Checks required user capabilities and whether the theme has the
         * feature support required by the panel.
         *
         * @since 4.0.0
         * @since 5.9.0 Method was marked non-final.
         *
         * @return bool False if theme doesn't support the panel or the user doesn't have the capability.
         */
        public function check_capabilities()
        {
        }
        /**
         * Get the panel's content template for insertion into the Customizer pane.
         *
         * @since 4.1.0
         *
         * @return string Content for the panel.
         */
        public final function get_content()
        {
        }
        /**
         * Check capabilities and render the panel.
         *
         * @since 4.0.0
         */
        public final function maybe_render()
        {
        }
        /**
         * Render the panel container, and then its contents (via `this->render_content()`) in a subclass.
         *
         * Panel containers are now rendered in JS by default, see WP_Customize_Panel::print_template().
         *
         * @since 4.0.0
         */
        protected function render()
        {
        }
        /**
         * Render the panel UI in a subclass.
         *
         * Panel contents are now rendered in JS by default, see WP_Customize_Panel::print_template().
         *
         * @since 4.1.0
         */
        protected function render_content()
        {
        }
        /**
         * Render the panel's JS templates.
         *
         * This function is only run for panel types that have been registered with
         * WP_Customize_Manager::register_panel_type().
         *
         * @since 4.3.0
         *
         * @see WP_Customize_Manager::register_panel_type()
         */
        public function print_template()
        {
        }
        /**
         * An Underscore (JS) template for rendering this panel's container.
         *
         * Class variables for this panel class are available in the `data` JS object;
         * export custom variables by overriding WP_Customize_Panel::json().
         *
         * @see WP_Customize_Panel::print_template()
         *
         * @since 4.3.0
         */
        protected function render_template()
        {
        }
        /**
         * An Underscore (JS) template for this panel's content (but not its container).
         *
         * Class variables for this panel class are available in the `data` JS object;
         * export custom variables by overriding WP_Customize_Panel::json().
         *
         * @see WP_Customize_Panel::print_template()
         *
         * @since 4.3.0
         */
        protected function content_template()
        {
        }
    }
    /**
     * Customize API: WP_Customize_Themes_Panel class
     *
     * @package WordPress
     * @subpackage Customize
     * @since 4.9.0
     */
    /**
     * Customize Themes Panel Class
     *
     * @since 4.9.0
     *
     * @see WP_Customize_Panel
     */
    class WP_Customize_Themes_Panel extends \WP_Customize_Panel
    {
        /**
         * Panel type.
         *
         * @since 4.9.0
         * @var string
         */
        public $type = 'themes';
        /**
         * An Underscore (JS) template for rendering this panel's container.
         *
         * The themes panel renders a custom panel heading with the active theme and a switch themes button.
         *
         * @see WP_Customize_Panel::print_template()
         *
         * @since 4.9.0
         */
        protected function render_template()
        {
        }
        /**
         * An Underscore (JS) template for this panel's content (but not its container).
         *
         * Class variables for this panel class are available in the `data` JS object;
         * export custom variables by overriding WP_Customize_Panel::json().
         *
         * @since 4.9.0
         *
         * @see WP_Customize_Panel::print_template()
         */
        protected function content_template()
        {
        }
    }
    /**
     * Customize API: WP_Customize_Code_Editor_Control class
     *
     * @package WordPress
     * @subpackage Customize
     * @since 4.9.0
     */
    /**
     * Customize Code Editor Control class.
     *
     * @since 4.9.0
     *
     * @see WP_Customize_Control
     */
    class WP_Customize_Code_Editor_Control extends \WP_Customize_Control
    {
        /**
         * Customize control type.
         *
         * @since 4.9.0
         * @var string
         */
        public $type = 'code_editor';
        /**
         * Type of code that is being edited.
         *
         * @since 4.9.0
         * @var string
         */
        public $code_type = '';
        /**
         * Code editor settings.
         *
         * @see wp_enqueue_code_editor()
         * @since 4.9.0
         * @var array|false
         */
        public $editor_settings = array();
        /**
         * Enqueue control related scripts/styles.
         *
         * @since 4.9.0
         */
        public function enqueue()
        {
        }
        /**
         * Refresh the parameters passed to the JavaScript via JSON.
         *
         * @since 4.9.0
         *
         * @see WP_Customize_Control::json()
         *
         * @return array Array of parameters passed to the JavaScript.
         */
        public function json()
        {
        }
        /**
         * Don't render the control content from PHP, as it's rendered via JS on load.
         *
         * @since 4.9.0
         */
        public function render_content()
        {
        }
        /**
         * Render a JS template for control display.
         *
         * @since 4.9.0
         */
        public function content_template()
        {
        }
    }
    /**
     * Customize API: WP_Customize_Nav_Menu_Section class
     *
     * @package WordPress
     * @subpackage Customize
     * @since 4.4.0
     */
    /**
     * Customize Menu Section Class
     *
     * Custom section only needed in JS.
     *
     * @since 4.3.0
     *
     * @see WP_Customize_Section
     */
    class WP_Customize_Nav_Menu_Section extends \WP_Customize_Section
    {
        /**
         * Control type.
         *
         * @since 4.3.0
         * @var string
         */
        public $type = 'nav_menu';
        /**
         * Get section parameters for JS.
         *
         * @since 4.3.0
         * @return array Exported parameters.
         */
        public function json()
        {
        }
    }
    /**
     * Customize API: WP_Customize_Sidebar_Section class
     *
     * @package WordPress
     * @subpackage Customize
     * @since 4.4.0
     */
    /**
     * Customizer section representing widget area (sidebar).
     *
     * @since 4.1.0
     *
     * @see WP_Customize_Section
     */
    class WP_Customize_Sidebar_Section extends \WP_Customize_Section
    {
        /**
         * Type of this section.
         *
         * @since 4.1.0
         * @var string
         */
        public $type = 'sidebar';
        /**
         * Unique identifier.
         *
         * @since 4.1.0
         * @var string
         */
        public $sidebar_id;
        /**
         * Gather the parameters passed to client JavaScript via JSON.
         *
         * @since 4.1.0
         *
         * @return array The array to be exported to the client as JSON.
         */
        public function json()
        {
        }
        /**
         * Whether the current sidebar is rendered on the page.
         *
         * @since 4.1.0
         *
         * @return bool Whether sidebar is rendered.
         */
        public function active_callback()
        {
        }
    }
    /**
     * Customize API: WP_Customize_Image_Control class
     *
     * @package WordPress
     * @subpackage Customize
     * @since 4.4.0
     */
    /**
     * Customize Image Control class.
     *
     * @since 3.4.0
     *
     * @see WP_Customize_Upload_Control
     */
    class WP_Customize_Image_Control extends \WP_Customize_Upload_Control
    {
        /**
         * Control type.
         *
         * @since 3.4.0
         * @var string
         */
        public $type = 'image';
        /**
         * Media control mime type.
         *
         * @since 4.1.0
         * @var string
         */
        public $mime_type = 'image';
        /**
         * @since 3.4.2
         * @deprecated 4.1.0
         */
        public function prepare_control()
        {
        }
        /**
         * @since 3.4.0
         * @deprecated 4.1.0
         *
         * @param string $id
         * @param string $label
         * @param mixed  $callback
         */
        public function add_tab($id, $label, $callback)
        {
        }
        /**
         * @since 3.4.0
         * @deprecated 4.1.0
         *
         * @param string $id
         */
        public function remove_tab($id)
        {
        }
        /**
         * @since 3.4.0
         * @deprecated 4.1.0
         *
         * @param string $url
         * @param string $thumbnail_url
         */
        public function print_tab_image($url, $thumbnail_url = \null)
        {
        }
    }
    /**
     * Customize API: WP_Customize_Nav_Menu_Locations_Control class
     *
     * @package WordPress
     * @subpackage Customize
     * @since 4.9.0
     */
    /**
     * Customize Nav Menu Locations Control Class.
     *
     * @since 4.9.0
     *
     * @see WP_Customize_Control
     */
    class WP_Customize_Nav_Menu_Locations_Control extends \WP_Customize_Control
    {
        /**
         * Control type.
         *
         * @since 4.9.0
         * @var string
         */
        public $type = 'nav_menu_locations';
        /**
         * Don't render the control's content - it uses a JS template instead.
         *
         * @since 4.9.0
         */
        public function render_content()
        {
        }
        /**
         * JS/Underscore template for the control UI.
         *
         * @since 4.9.0
         */
        public function content_template()
        {
        }
    }
    /**
     * Customize API: WP_Customize_Nav_Menus_Panel class
     *
     * @package WordPress
     * @subpackage Customize
     * @since 4.4.0
     */
    /**
     * Customize Nav Menus Panel Class
     *
     * Needed to add screen options.
     *
     * @since 4.3.0
     *
     * @see WP_Customize_Panel
     */
    class WP_Customize_Nav_Menus_Panel extends \WP_Customize_Panel
    {
        /**
         * Control type.
         *
         * @since 4.3.0
         * @var string
         */
        public $type = 'nav_menus';
        /**
         * Render screen options for Menus.
         *
         * @since 4.3.0
         */
        public function render_screen_options()
        {
        }
        /**
         * Returns the advanced options for the nav menus page.
         *
         * Link title attribute added as it's a relatively advanced concept for new users.
         *
         * @since 4.3.0
         * @deprecated 4.5.0 Deprecated in favor of wp_nav_menu_manage_columns().
         */
        public function wp_nav_menu_manage_columns()
        {
        }
        /**
         * An Underscore (JS) template for this panel's content (but not its container).
         *
         * Class variables for this panel class are available in the `data` JS object;
         * export custom variables by overriding WP_Customize_Panel::json().
         *
         * @since 4.3.0
         *
         * @see WP_Customize_Panel::print_template()
         */
        protected function content_template()
        {
        }
        /**
         * Checks required user capabilities and whether the theme has the
         * feature support required by the panel.
         *
         * @since 5.9.0
         *
         * @return bool False if theme doesn't support the panel or the user doesn't have the capability.
         */
        public function check_capabilities()
        {
        }
    }
    /**
     * Customize API: WP_Customize_Nav_Menu_Auto_Add_Control class
     *
     * @package WordPress
     * @subpackage Customize
     * @since 4.4.0
     */
    /**
     * Customize control to represent the auto_add field for a given menu.
     *
     * @since 4.3.0
     *
     * @see WP_Customize_Control
     */
    class WP_Customize_Nav_Menu_Auto_Add_Control extends \WP_Customize_Control
    {
        /**
         * Type of control, used by JS.
         *
         * @since 4.3.0
         * @var string
         */
        public $type = 'nav_menu_auto_add';
        /**
         * No-op since we're using JS template.
         *
         * @since 4.3.0
         */
        protected function render_content()
        {
        }
        /**
         * Render the Underscore template for this control.
         *
         * @since 4.3.0
         */
        protected function content_template()
        {
        }
    }
    /**
     * Customize API: WP_Customize_Cropped_Image_Control class
     *
     * @package WordPress
     * @subpackage Customize
     * @since 4.4.0
     */
    /**
     * Customize Cropped Image Control class.
     *
     * @since 4.3.0
     *
     * @see WP_Customize_Image_Control
     */
    class WP_Customize_Cropped_Image_Control extends \WP_Customize_Image_Control
    {
        /**
         * Control type.
         *
         * @since 4.3.0
         * @var string
         */
        public $type = 'cropped_image';
        /**
         * Suggested width for cropped image.
         *
         * @since 4.3.0
         * @var int
         */
        public $width = 150;
        /**
         * Suggested height for cropped image.
         *
         * @since 4.3.0
         * @var int
         */
        public $height = 150;
        /**
         * Whether the width is flexible.
         *
         * @since 4.3.0
         * @var bool
         */
        public $flex_width = \false;
        /**
         * Whether the height is flexible.
         *
         * @since 4.3.0
         * @var bool
         */
        public $flex_height = \false;
        /**
         * Enqueue control related scripts/styles.
         *
         * @since 4.3.0
         */
        public function enqueue()
        {
        }
        /**
         * Refresh the parameters passed to the JavaScript via JSON.
         *
         * @since 4.3.0
         *
         * @see WP_Customize_Control::to_json()
         */
        public function to_json()
        {
        }
    }
    /**
     * Customize API: WP_Customize_Background_Image_Control class
     *
     * @package WordPress
     * @subpackage Customize
     * @since 4.4.0
     */
    /**
     * Customize Background Image Control class.
     *
     * @since 3.4.0
     *
     * @see WP_Customize_Image_Control
     */
    class WP_Customize_Background_Image_Control extends \WP_Customize_Image_Control
    {
        public $type = 'background';
        /**
         * Constructor.
         *
         * @since 3.4.0
         * @uses WP_Customize_Image_Control::__construct()
         *
         * @param WP_Customize_Manager $manager Customizer bootstrap instance.
         */
        public function __construct($manager)
        {
        }
        /**
         * Enqueue control related scripts/styles.
         *
         * @since 4.1.0
         */
        public function enqueue()
        {
        }
    }
    /**
     * Customize API: WP_Customize_Header_Image_Control class
     *
     * @package WordPress
     * @subpackage Customize
     * @since 4.4.0
     */
    /**
     * Customize Header Image Control class.
     *
     * @since 3.4.0
     *
     * @see WP_Customize_Image_Control
     */
    class WP_Customize_Header_Image_Control extends \WP_Customize_Image_Control
    {
        /**
         * Customize control type.
         *
         * @since 4.2.0
         * @var string
         */
        public $type = 'header';
        /**
         * Uploaded header images.
         *
         * @since 3.9.0
         * @var string
         */
        public $uploaded_headers;
        /**
         * Default header images.
         *
         * @since 3.9.0
         * @var string
         */
        public $default_headers;
        /**
         * Constructor.
         *
         * @since 3.4.0
         *
         * @param WP_Customize_Manager $manager Customizer bootstrap instance.
         */
        public function __construct($manager)
        {
        }
        /**
         */
        public function enqueue()
        {
        }
        /**
         * @global Custom_Image_Header $custom_image_header
         */
        public function prepare_control()
        {
        }
        /**
         */
        public function print_header_image_template()
        {
        }
        /**
         * @return string|void
         */
        public function get_current_image_src()
        {
        }
        /**
         */
        public function render_content()
        {
        }
    }
    /**
     * Customize API: WP_Customize_Site_Icon_Control class
     *
     * @package WordPress
     * @subpackage Customize
     * @since 4.4.0
     */
    /**
     * Customize Site Icon control class.
     *
     * Used only for custom functionality in JavaScript.
     *
     * @since 4.3.0
     *
     * @see WP_Customize_Cropped_Image_Control
     */
    class WP_Customize_Site_Icon_Control extends \WP_Customize_Cropped_Image_Control
    {
        /**
         * Control type.
         *
         * @since 4.3.0
         * @var string
         */
        public $type = 'site_icon';
        /**
         * Constructor.
         *
         * @since 4.3.0
         *
         * @see WP_Customize_Control::__construct()
         *
         * @param WP_Customize_Manager $manager Customizer bootstrap instance.
         * @param string               $id      Control ID.
         * @param array                $args    Optional. Arguments to override class property defaults.
         *                                      See WP_Customize_Control::__construct() for information
         *                                      on accepted arguments. Default empty array.
         */
        public function __construct($manager, $id, $args = array())
        {
        }
        /**
         * Renders a JS template for the content of the site icon control.
         *
         * @since 4.5.0
         */
        public function content_template()
        {
        }
    }
    /**
     * Customize Menu Section Class
     *
     * @since 4.3.0
     * @deprecated 4.9.0 This class is no longer used as of the menu creation UX introduced in #40104.
     *
     * @see WP_Customize_Section
     */
    class WP_Customize_New_Menu_Section extends \WP_Customize_Section
    {
        /**
         * Control type.
         *
         * @since 4.3.0
         * @var string
         */
        public $type = 'new_menu';
        /**
         * Constructor.
         *
         * Any supplied $args override class property defaults.
         *
         * @since 4.9.0
         * @deprecated 4.9.0
         *
         * @param WP_Customize_Manager $manager Customizer bootstrap instance.
         * @param string               $id      A specific ID of the section.
         * @param array                $args    Section arguments.
         */
        public function __construct(\WP_Customize_Manager $manager, $id, array $args = array())
        {
        }
        /**
         * Render the section, and the controls that have been added to it.
         *
         * @since 4.3.0
         * @deprecated 4.9.0
         */
        protected function render()
        {
        }
    }
    /**
     * Customize API: WP_Customize_Partial class
     *
     * @package WordPress
     * @subpackage Customize
     * @since 4.5.0
     */
    /**
     * Core Customizer class for implementing selective refresh partials.
     *
     * Representation of a rendered region in the previewed page that gets
     * selectively refreshed when an associated setting is changed.
     * This class is analogous of WP_Customize_Control.
     *
     * @since 4.5.0
     */
    class WP_Customize_Partial
    {
        /**
         * Component.
         *
         * @since 4.5.0
         * @var WP_Customize_Selective_Refresh
         */
        public $component;
        /**
         * Unique identifier for the partial.
         *
         * If the partial is used to display a single setting, this would generally
         * be the same as the associated setting's ID.
         *
         * @since 4.5.0
         * @var string
         */
        public $id;
        /**
         * Parsed ID.
         *
         * @since 4.5.0
         * @var array {
         *     @type string $base ID base.
         *     @type array  $keys Keys for multidimensional.
         * }
         */
        protected $id_data = array();
        /**
         * Type of this partial.
         *
         * @since 4.5.0
         * @var string
         */
        public $type = 'default';
        /**
         * The jQuery selector to find the container element for the partial.
         *
         * @since 4.5.0
         * @var string
         */
        public $selector;
        /**
         * IDs for settings tied to the partial.
         *
         * @since 4.5.0
         * @var string[]
         */
        public $settings;
        /**
         * The ID for the setting that this partial is primarily responsible for rendering.
         *
         * If not supplied, it will default to the ID of the first setting.
         *
         * @since 4.5.0
         * @var string
         */
        public $primary_setting;
        /**
         * Capability required to edit this partial.
         *
         * Normally this is empty and the capability is derived from the capabilities
         * of the associated `$settings`.
         *
         * @since 4.5.0
         * @var string
         */
        public $capability;
        /**
         * Render callback.
         *
         * @since 4.5.0
         *
         * @see WP_Customize_Partial::render()
         * @var callable Callback is called with one argument, the instance of
         *               WP_Customize_Partial. The callback can either echo the
         *               partial or return the partial as a string, or return false if error.
         */
        public $render_callback;
        /**
         * Whether the container element is included in the partial, or if only the contents are rendered.
         *
         * @since 4.5.0
         * @var bool
         */
        public $container_inclusive = \false;
        /**
         * Whether to refresh the entire preview in case a partial cannot be refreshed.
         *
         * A partial render is considered a failure if the render_callback returns false.
         *
         * @since 4.5.0
         * @var bool
         */
        public $fallback_refresh = \true;
        /**
         * Constructor.
         *
         * Supplied `$args` override class property defaults.
         *
         * If `$args['settings']` is not defined, use the $id as the setting ID.
         *
         * @since 4.5.0
         *
         * @param WP_Customize_Selective_Refresh $component Customize Partial Refresh plugin instance.
         * @param string                         $id        Control ID.
         * @param array                          $args {
         *     Optional. Array of properties for the new Partials object. Default empty array.
         *
         *     @type string   $type                  Type of the partial to be created.
         *     @type string   $selector              The jQuery selector to find the container element for the partial, that is,
         *                                           a partial's placement.
         *     @type string[] $settings              IDs for settings tied to the partial. If undefined, `$id` will be used.
         *     @type string   $primary_setting       The ID for the setting that this partial is primarily responsible for
         *                                           rendering. If not supplied, it will default to the ID of the first setting.
         *     @type string   $capability            Capability required to edit this partial.
         *                                           Normally this is empty and the capability is derived from the capabilities
         *                                           of the associated `$settings`.
         *     @type callable $render_callback       Render callback.
         *                                           Callback is called with one argument, the instance of WP_Customize_Partial.
         *                                           The callback can either echo the partial or return the partial as a string,
         *                                           or return false if error.
         *     @type bool     $container_inclusive   Whether the container element is included in the partial, or if only
         *                                           the contents are rendered.
         *     @type bool     $fallback_refresh      Whether to refresh the entire preview in case a partial cannot be refreshed.
         *                                           A partial render is considered a failure if the render_callback returns
         *                                           false.
         * }
         */
        public function __construct(\WP_Customize_Selective_Refresh $component, $id, $args = array())
        {
        }
        /**
         * Retrieves parsed ID data for multidimensional setting.
         *
         * @since 4.5.0
         *
         * @return array {
         *     ID data for multidimensional partial.
         *
         *     @type string $base ID base.
         *     @type array  $keys Keys for multidimensional array.
         * }
         */
        public final function id_data()
        {
        }
        /**
         * Renders the template partial involving the associated settings.
         *
         * @since 4.5.0
         *
         * @param array $container_context Optional. Array of context data associated with the target container (placement).
         *                                 Default empty array.
         * @return string|array|false The rendered partial as a string, raw data array (for client-side JS template),
         *                            or false if no render applied.
         */
        public final function render($container_context = array())
        {
        }
        /**
         * Default callback used when invoking WP_Customize_Control::render().
         *
         * Note that this method may echo the partial *or* return the partial as
         * a string or array, but not both. Output buffering is performed when this
         * is called. Subclasses can override this with their specific logic, or they
         * may provide an 'render_callback' argument to the constructor.
         *
         * This method may return an HTML string for straight DOM injection, or it
         * may return an array for supporting Partial JS subclasses to render by
         * applying to client-side templating.
         *
         * @since 4.5.0
         *
         * @param WP_Customize_Partial $partial Partial.
         * @param array                $context Context.
         * @return string|array|false
         */
        public function render_callback(\WP_Customize_Partial $partial, $context = array())
        {
        }
        /**
         * Retrieves the data to export to the client via JSON.
         *
         * @since 4.5.0
         *
         * @return array Array of parameters passed to the JavaScript.
         */
        public function json()
        {
        }
        /**
         * Checks if the user can refresh this partial.
         *
         * Returns false if the user cannot manipulate one of the associated settings,
         * or if one of the associated settings does not exist.
         *
         * @since 4.5.0
         *
         * @return bool False if user can't edit one of the related settings,
         *                    or if one of the associated settings does not exist.
         */
        public final function check_capabilities()
        {
        }
    }
    /**
     * Customize API: WP_Customize_Themes_Section class
     *
     * @package WordPress
     * @subpackage Customize
     * @since 4.4.0
     */
    /**
     * Customize Themes Section class.
     *
     * A UI container for theme controls, which are displayed within sections.
     *
     * @since 4.2.0
     *
     * @see WP_Customize_Section
     */
    class WP_Customize_Themes_Section extends \WP_Customize_Section
    {
        /**
         * Section type.
         *
         * @since 4.2.0
         * @var string
         */
        public $type = 'themes';
        /**
         * Theme section action.
         *
         * Defines the type of themes to load (installed, wporg, etc.).
         *
         * @since 4.9.0
         * @var string
         */
        public $action = '';
        /**
         * Theme section filter type.
         *
         * Determines whether filters are applied to loaded (local) themes or by initiating a new remote query (remote).
         * When filtering is local, the initial themes query is not paginated by default.
         *
         * @since 4.9.0
         * @var string
         */
        public $filter_type = 'local';
        /**
         * Get section parameters for JS.
         *
         * @since 4.9.0
         * @return array Exported parameters.
         */
        public function json()
        {
        }
        /**
         * Render a themes section as a JS template.
         *
         * The template is only rendered by PHP once, so all actions are prepared at once on the server side.
         *
         * @since 4.9.0
         */
        protected function render_template()
        {
        }
        /**
         * Render the filter bar portion of a themes section as a JS template.
         *
         * The template is only rendered by PHP once, so all actions are prepared at once on the server side.
         * The filter bar container is rendered by @see `render_template()`.
         *
         * @since 4.9.0
         */
        protected function filter_bar_content_template()
        {
        }
        /**
         * Render the filter drawer portion of a themes section as a JS template.
         *
         * The filter bar container is rendered by @see `render_template()`.
         *
         * @since 4.9.0
         */
        protected function filter_drawer_content_template()
        {
        }
    }
    /**
     * Customize API: WP_Customize_Custom_CSS_Setting class
     *
     * This handles validation, sanitization and saving of the value.
     *
     * @package WordPress
     * @subpackage Customize
     * @since 4.7.0
     */
    /**
     * Custom Setting to handle WP Custom CSS.
     *
     * @since 4.7.0
     *
     * @see WP_Customize_Setting
     */
    final class WP_Customize_Custom_CSS_Setting extends \WP_Customize_Setting
    {
        /**
         * The setting type.
         *
         * @since 4.7.0
         * @var string
         */
        public $type = 'custom_css';
        /**
         * Setting Transport
         *
         * @since 4.7.0
         * @var string
         */
        public $transport = 'postMessage';
        /**
         * Capability required to edit this setting.
         *
         * @since 4.7.0
         * @var string
         */
        public $capability = 'edit_css';
        /**
         * Stylesheet
         *
         * @since 4.7.0
         * @var string
         */
        public $stylesheet = '';
        /**
         * WP_Customize_Custom_CSS_Setting constructor.
         *
         * @since 4.7.0
         *
         * @throws Exception If the setting ID does not match the pattern `custom_css[$stylesheet]`.
         *
         * @param WP_Customize_Manager $manager Customizer bootstrap instance.
         * @param string               $id      A specific ID of the setting.
         *                                      Can be a theme mod or option name.
         * @param array                $args    Setting arguments.
         */
        public function __construct($manager, $id, $args = array())
        {
        }
        /**
         * Add filter to preview post value.
         *
         * @since 4.7.9
         *
         * @return bool False when preview short-circuits due no change needing to be previewed.
         */
        public function preview()
        {
        }
        /**
         * Filters `wp_get_custom_css` for applying the customized value.
         *
         * This is used in the preview when `wp_get_custom_css()` is called for rendering the styles.
         *
         * @since 4.7.0
         *
         * @see wp_get_custom_css()
         *
         * @param string $css        Original CSS.
         * @param string $stylesheet Current stylesheet.
         * @return string CSS.
         */
        public function filter_previewed_wp_get_custom_css($css, $stylesheet)
        {
        }
        /**
         * Fetch the value of the setting. Will return the previewed value when `preview()` is called.
         *
         * @since 4.7.0
         *
         * @see WP_Customize_Setting::value()
         *
         * @return string
         */
        public function value()
        {
        }
        /**
         * Validate a received value for being valid CSS.
         *
         * Checks for imbalanced braces, brackets, and comments.
         * Notifications are rendered when the customizer state is saved.
         *
         * @since 4.7.0
         * @since 4.9.0 Checking for balanced characters has been moved client-side via linting in code editor.
         * @since 5.9.0 Renamed `$css` to `$value` for PHP 8 named parameter support.
         *
         * @param string $value CSS to validate.
         * @return true|WP_Error True if the input was validated, otherwise WP_Error.
         */
        public function validate($value)
        {
        }
        /**
         * Store the CSS setting value in the custom_css custom post type for the stylesheet.
         *
         * @since 4.7.0
         * @since 5.9.0 Renamed `$css` to `$value` for PHP 8 named parameter support.
         *
         * @param string $value CSS to update.
         * @return int|false The post ID or false if the value could not be saved.
         */
        public function update($value)
        {
        }
    }
    /**
     * Customize API: WP_Customize_Nav_Menu_Location_Control class
     *
     * @package WordPress
     * @subpackage Customize
     * @since 4.4.0
     */
    /**
     * Customize Menu Location Control Class.
     *
     * This custom control is only needed for JS.
     *
     * @since 4.3.0
     *
     * @see WP_Customize_Control
     */
    class WP_Customize_Nav_Menu_Location_Control extends \WP_Customize_Control
    {
        /**
         * Control type.
         *
         * @since 4.3.0
         * @var string
         */
        public $type = 'nav_menu_location';
        /**
         * Location ID.
         *
         * @since 4.3.0
         * @var string
         */
        public $location_id = '';
        /**
         * Refresh the parameters passed to JavaScript via JSON.
         *
         * @since 4.3.0
         *
         * @see WP_Customize_Control::to_json()
         */
        public function to_json()
        {
        }
        /**
         * Render content just like a normal select control.
         *
         * @since 4.3.0
         * @since 4.9.0 Added a button to create menus.
         */
        public function render_content()
        {
        }
    }
    /**
     * Customize API: WP_Customize_Theme_Control class
     *
     * @package WordPress
     * @subpackage Customize
     * @since 4.4.0
     */
    /**
     * Customize Theme Control class.
     *
     * @since 4.2.0
     *
     * @see WP_Customize_Control
     */
    class WP_Customize_Theme_Control extends \WP_Customize_Control
    {
        /**
         * Customize control type.
         *
         * @since 4.2.0
         * @var string
         */
        public $type = 'theme';
        /**
         * Theme object.
         *
         * @since 4.2.0
         * @var WP_Theme
         */
        public $theme;
        /**
         * Refresh the parameters passed to the JavaScript via JSON.
         *
         * @since 4.2.0
         *
         * @see WP_Customize_Control::to_json()
         */
        public function to_json()
        {
        }
        /**
         * Don't render the control content from PHP, as it's rendered via JS on load.
         *
         * @since 4.2.0
         */
        public function render_content()
        {
        }
        /**
         * Render a JS template for theme display.
         *
         * @since 4.2.0
         */
        public function content_template()
        {
        }
    }
    /**
     * Comment API: Walker_Comment class
     *
     * @package WordPress
     * @subpackage Comments
     * @since 4.4.0
     */
    /**
     * Core walker class used to create an HTML list of comments.
     *
     * @since 2.7.0
     *
     * @see Walker
     */
    class Walker_Comment extends \Walker
    {
        /**
         * What the class handles.
         *
         * @since 2.7.0
         * @var string
         *
         * @see Walker::$tree_type
         */
        public $tree_type = 'comment';
        /**
         * Database fields to use.
         *
         * @since 2.7.0
         * @var string[]
         *
         * @see Walker::$db_fields
         * @todo Decouple this
         */
        public $db_fields = array('parent' => 'comment_parent', 'id' => 'comment_ID');
        /**
         * Starts the list before the elements are added.
         *
         * @since 2.7.0
         *
         * @see Walker::start_lvl()
         * @global int $comment_depth
         *
         * @param string $output Used to append additional content (passed by reference).
         * @param int    $depth  Optional. Depth of the current comment. Default 0.
         * @param array  $args   Optional. Uses 'style' argument for type of HTML list. Default empty array.
         */
        public function start_lvl(&$output, $depth = 0, $args = array())
        {
        }
        /**
         * Ends the list of items after the elements are added.
         *
         * @since 2.7.0
         *
         * @see Walker::end_lvl()
         * @global int $comment_depth
         *
         * @param string $output Used to append additional content (passed by reference).
         * @param int    $depth  Optional. Depth of the current comment. Default 0.
         * @param array  $args   Optional. Will only append content if style argument value is 'ol' or 'ul'.
         *                       Default empty array.
         */
        public function end_lvl(&$output, $depth = 0, $args = array())
        {
        }
        /**
         * Traverses elements to create list from elements.
         *
         * This function is designed to enhance Walker::display_element() to
         * display children of higher nesting levels than selected inline on
         * the highest depth level displayed. This prevents them being orphaned
         * at the end of the comment list.
         *
         * Example: max_depth = 2, with 5 levels of nested content.
         *     1
         *      1.1
         *        1.1.1
         *        1.1.1.1
         *        1.1.1.1.1
         *        1.1.2
         *        1.1.2.1
         *     2
         *      2.2
         *
         * @since 2.7.0
         *
         * @see Walker::display_element()
         * @see wp_list_comments()
         *
         * @param WP_Comment $element           Comment data object.
         * @param array      $children_elements List of elements to continue traversing. Passed by reference.
         * @param int        $max_depth         Max depth to traverse.
         * @param int        $depth             Depth of the current element.
         * @param array      $args              An array of arguments.
         * @param string     $output            Used to append additional content. Passed by reference.
         */
        public function display_element($element, &$children_elements, $max_depth, $depth, $args, &$output)
        {
        }
        /**
         * Starts the element output.
         *
         * @since 2.7.0
         * @since 5.9.0 Renamed `$comment` to `$data_object` and `$id` to `$current_object_id`
         *              to match parent class for PHP 8 named parameter support.
         *
         * @see Walker::start_el()
         * @see wp_list_comments()
         * @global int        $comment_depth
         * @global WP_Comment $comment       Global comment object.
         *
         * @param string     $output            Used to append additional content. Passed by reference.
         * @param WP_Comment $data_object       Comment data object.
         * @param int        $depth             Optional. Depth of the current comment in reference to parents. Default 0.
         * @param array      $args              Optional. An array of arguments. Default empty array.
         * @param int        $current_object_id Optional. ID of the current comment. Default 0.
         */
        public function start_el(&$output, $data_object, $depth = 0, $args = array(), $current_object_id = 0)
        {
        }
        /**
         * Ends the element output, if needed.
         *
         * @since 2.7.0
         * @since 5.9.0 Renamed `$comment` to `$data_object` to match parent class for PHP 8 named parameter support.
         *
         * @see Walker::end_el()
         * @see wp_list_comments()
         *
         * @param string     $output      Used to append additional content. Passed by reference.
         * @param WP_Comment $data_object Comment data object.
         * @param int        $depth       Optional. Depth of the current comment. Default 0.
         * @param array      $args        Optional. An array of arguments. Default empty array.
         */
        public function end_el(&$output, $data_object, $depth = 0, $args = array())
        {
        }
        /**
         * Outputs a pingback comment.
         *
         * @since 3.6.0
         *
         * @see wp_list_comments()
         *
         * @param WP_Comment $comment The comment object.
         * @param int        $depth   Depth of the current comment.
         * @param array      $args    An array of arguments.
         */
        protected function ping($comment, $depth, $args)
        {
        }
        /**
         * Filters the comment text.
         *
         * Removes links from the pending comment's text if the commenter did not consent
         * to the comment cookies.
         *
         * @since 5.4.2
         *
         * @param string          $comment_text Text of the current comment.
         * @param WP_Comment|null $comment      The comment object. Null if not found.
         * @return string Filtered text of the current comment.
         */
        public function filter_comment_text($comment_text, $comment)
        {
        }
        /**
         * Outputs a single comment.
         *
         * @since 3.6.0
         *
         * @see wp_list_comments()
         *
         * @param WP_Comment $comment Comment to display.
         * @param int        $depth   Depth of the current comment.
         * @param array      $args    An array of arguments.
         */
        protected function comment($comment, $depth, $args)
        {
        }
        /**
         * Outputs a comment in the HTML5 format.
         *
         * @since 3.6.0
         *
         * @see wp_list_comments()
         *
         * @param WP_Comment $comment Comment to display.
         * @param int        $depth   Depth of the current comment.
         * @param array      $args    An array of arguments.
         */
        protected function html5_comment($comment, $depth, $args)
        {
        }
    }
    /**
     * Error Protection API: WP_Recovery_Mode_Cookie_Service class
     *
     * @package WordPress
     * @since 5.2.0
     */
    /**
     * Core class used to set, validate, and clear cookies that identify a Recovery Mode session.
     *
     * @since 5.2.0
     */
    final class WP_Recovery_Mode_Cookie_Service
    {
        /**
         * Checks whether the recovery mode cookie is set.
         *
         * @since 5.2.0
         *
         * @return bool True if the cookie is set, false otherwise.
         */
        public function is_cookie_set()
        {
        }
        /**
         * Sets the recovery mode cookie.
         *
         * This must be immediately followed by exiting the request.
         *
         * @since 5.2.0
         */
        public function set_cookie()
        {
        }
        /**
         * Clears the recovery mode cookie.
         *
         * @since 5.2.0
         */
        public function clear_cookie()
        {
        }
        /**
         * Validates the recovery mode cookie.
         *
         * @since 5.2.0
         *
         * @param string $cookie Optionally specify the cookie string.
         *                       If omitted, it will be retrieved from the super global.
         * @return true|WP_Error True on success, error object on failure.
         */
        public function validate_cookie($cookie = '')
        {
        }
        /**
         * Gets the session identifier from the cookie.
         *
         * The cookie should be validated before calling this API.
         *
         * @since 5.2.0
         *
         * @param string $cookie Optionally specify the cookie string.
         *                       If omitted, it will be retrieved from the super global.
         * @return string|WP_Error Session ID on success, or error object on failure.
         */
        public function get_session_id_from_cookie($cookie = '')
        {
        }
        /**
         * Parses the cookie into its four parts.
         *
         * @since 5.2.0
         *
         * @param string $cookie Cookie content.
         * @return array|WP_Error Cookie parts array, or error object on failure.
         */
        private function parse_cookie($cookie)
        {
        }
        /**
         * Generates the recovery mode cookie value.
         *
         * The cookie is a base64 encoded string with the following format:
         *
         * recovery_mode|iat|rand|signature
         *
         * Where "recovery_mode" is a constant string,
         * iat is the time the cookie was generated at,
         * rand is a randomly generated password that is also used as a session identifier
         * and signature is an hmac of the preceding 3 parts.
         *
         * @since 5.2.0
         *
         * @return string Generated cookie content.
         */
        private function generate_cookie()
        {
        }
        /**
         * Gets a form of `wp_hash()` specific to Recovery Mode.
         *
         * We cannot use `wp_hash()` because it is defined in `pluggable.php` which is not loaded until after plugins are loaded,
         * which is too late to verify the recovery mode cookie.
         *
         * This tries to use the `AUTH` salts first, but if they aren't valid specific salts will be generated and stored.
         *
         * @since 5.2.0
         *
         * @param string $data Data to hash.
         * @return string|false The hashed $data, or false on failure.
         */
        private function recovery_mode_hash($data)
        {
        }
    }
    /**
     * Site API: WP_Site_Query class
     *
     * @package WordPress
     * @subpackage Sites
     * @since 4.6.0
     */
    /**
     * Core class used for querying sites.
     *
     * @since 4.6.0
     *
     * @see WP_Site_Query::__construct() for accepted arguments.
     */
    class WP_Site_Query
    {
        /**
         * SQL for database query.
         *
         * @since 4.6.0
         * @var string
         */
        public $request;
        /**
         * SQL query clauses.
         *
         * @since 4.6.0
         * @var array
         */
        protected $sql_clauses = array('select' => '', 'from' => '', 'where' => array(), 'groupby' => '', 'orderby' => '', 'limits' => '');
        /**
         * Metadata query container.
         *
         * @since 5.1.0
         * @var WP_Meta_Query
         */
        public $meta_query = \false;
        /**
         * Metadata query clauses.
         *
         * @since 5.1.0
         * @var array
         */
        protected $meta_query_clauses;
        /**
         * Date query container.
         *
         * @since 4.6.0
         * @var WP_Date_Query A date query instance.
         */
        public $date_query = \false;
        /**
         * Query vars set by the user.
         *
         * @since 4.6.0
         * @var array
         */
        public $query_vars;
        /**
         * Default values for query vars.
         *
         * @since 4.6.0
         * @var array
         */
        public $query_var_defaults;
        /**
         * List of sites located by the query.
         *
         * @since 4.6.0
         * @var array
         */
        public $sites;
        /**
         * The amount of found sites for the current query.
         *
         * @since 4.6.0
         * @var int
         */
        public $found_sites = 0;
        /**
         * The number of pages.
         *
         * @since 4.6.0
         * @var int
         */
        public $max_num_pages = 0;
        /**
         * Sets up the site query, based on the query vars passed.
         *
         * @since 4.6.0
         * @since 4.8.0 Introduced the 'lang_id', 'lang__in', and 'lang__not_in' parameters.
         * @since 5.1.0 Introduced the 'update_site_meta_cache', 'meta_query', 'meta_key',
         *              'meta_compare_key', 'meta_value', 'meta_type', and 'meta_compare' parameters.
         * @since 5.3.0 Introduced the 'meta_type_key' parameter.
         *
         * @param string|array $query {
         *     Optional. Array or query string of site query parameters. Default empty.
         *
         *     @type int[]           $site__in               Array of site IDs to include. Default empty.
         *     @type int[]           $site__not_in           Array of site IDs to exclude. Default empty.
         *     @type bool            $count                  Whether to return a site count (true) or array of site objects.
         *                                                   Default false.
         *     @type array           $date_query             Date query clauses to limit sites by. See WP_Date_Query.
         *                                                   Default null.
         *     @type string          $fields                 Site fields to return. Accepts 'ids' (returns an array of site IDs)
         *                                                   or empty (returns an array of complete site objects). Default empty.
         *     @type int             $ID                     A site ID to only return that site. Default empty.
         *     @type int             $number                 Maximum number of sites to retrieve. Default 100.
         *     @type int             $offset                 Number of sites to offset the query. Used to build LIMIT clause.
         *                                                   Default 0.
         *     @type bool            $no_found_rows          Whether to disable the `SQL_CALC_FOUND_ROWS` query. Default true.
         *     @type string|array    $orderby                Site status or array of statuses. Accepts:
         *                                                   - 'id'
         *                                                   - 'domain'
         *                                                   - 'path'
         *                                                   - 'network_id'
         *                                                   - 'last_updated'
         *                                                   - 'registered'
         *                                                   - 'domain_length'
         *                                                   - 'path_length'
         *                                                   - 'site__in'
         *                                                   - 'network__in'
         *                                                   - 'deleted'
         *                                                   - 'mature'
         *                                                   - 'spam'
         *                                                   - 'archived'
         *                                                   - 'public'
         *                                                   - false, an empty array, or 'none' to disable `ORDER BY` clause.
         *                                                   Default 'id'.
         *     @type string          $order                  How to order retrieved sites. Accepts 'ASC', 'DESC'. Default 'ASC'.
         *     @type int             $network_id             Limit results to those affiliated with a given network ID. If 0,
         *                                                   include all networks. Default 0.
         *     @type int[]           $network__in            Array of network IDs to include affiliated sites for. Default empty.
         *     @type int[]           $network__not_in        Array of network IDs to exclude affiliated sites for. Default empty.
         *     @type string          $domain                 Limit results to those affiliated with a given domain. Default empty.
         *     @type string[]        $domain__in             Array of domains to include affiliated sites for. Default empty.
         *     @type string[]        $domain__not_in         Array of domains to exclude affiliated sites for. Default empty.
         *     @type string          $path                   Limit results to those affiliated with a given path. Default empty.
         *     @type string[]        $path__in               Array of paths to include affiliated sites for. Default empty.
         *     @type string[]        $path__not_in           Array of paths to exclude affiliated sites for. Default empty.
         *     @type int             $public                 Limit results to public sites. Accepts '1' or '0'. Default empty.
         *     @type int             $archived               Limit results to archived sites. Accepts '1' or '0'. Default empty.
         *     @type int             $mature                 Limit results to mature sites. Accepts '1' or '0'. Default empty.
         *     @type int             $spam                   Limit results to spam sites. Accepts '1' or '0'. Default empty.
         *     @type int             $deleted                Limit results to deleted sites. Accepts '1' or '0'. Default empty.
         *     @type int             $lang_id                Limit results to a language ID. Default empty.
         *     @type string[]        $lang__in               Array of language IDs to include affiliated sites for. Default empty.
         *     @type string[]        $lang__not_in           Array of language IDs to exclude affiliated sites for. Default empty.
         *     @type string          $search                 Search term(s) to retrieve matching sites for. Default empty.
         *     @type string[]        $search_columns         Array of column names to be searched. Accepts 'domain' and 'path'.
         *                                                   Default empty array.
         *     @type bool            $update_site_cache      Whether to prime the cache for found sites. Default true.
         *     @type bool            $update_site_meta_cache Whether to prime the metadata cache for found sites. Default true.
         *     @type string|string[] $meta_key               Meta key or keys to filter by.
         *     @type string|string[] $meta_value             Meta value or values to filter by.
         *     @type string          $meta_compare           MySQL operator used for comparing the meta value.
         *                                                   See WP_Meta_Query::__construct for accepted values and default value.
         *     @type string          $meta_compare_key       MySQL operator used for comparing the meta key.
         *                                                   See WP_Meta_Query::__construct for accepted values and default value.
         *     @type string          $meta_type              MySQL data type that the meta_value column will be CAST to for comparisons.
         *                                                   See WP_Meta_Query::__construct for accepted values and default value.
         *     @type string          $meta_type_key          MySQL data type that the meta_key column will be CAST to for comparisons.
         *                                                   See WP_Meta_Query::__construct for accepted values and default value.
         *     @type array           $meta_query             An associative array of WP_Meta_Query arguments.
         *                                                   See WP_Meta_Query::__construct for accepted values.
         * }
         */
        public function __construct($query = '')
        {
        }
        /**
         * Parses arguments passed to the site query with default query parameters.
         *
         * @since 4.6.0
         *
         * @see WP_Site_Query::__construct()
         *
         * @param string|array $query Array or string of WP_Site_Query arguments. See WP_Site_Query::__construct().
         */
        public function parse_query($query = '')
        {
        }
        /**
         * Sets up the WordPress query for retrieving sites.
         *
         * @since 4.6.0
         *
         * @param string|array $query Array or URL query string of parameters.
         * @return array|int List of WP_Site objects, a list of site IDs when 'fields' is set to 'ids',
         *                   or the number of sites when 'count' is passed as a query var.
         */
        public function query($query)
        {
        }
        /**
         * Retrieves a list of sites matching the query vars.
         *
         * @since 4.6.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @return array|int List of WP_Site objects, a list of site IDs when 'fields' is set to 'ids',
         *                   or the number of sites when 'count' is passed as a query var.
         */
        public function get_sites()
        {
        }
        /**
         * Used internally to get a list of site IDs matching the query vars.
         *
         * @since 4.6.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @return int|array A single count of site IDs if a count query. An array of site IDs if a full query.
         */
        protected function get_site_ids()
        {
        }
        /**
         * Populates found_sites and max_num_pages properties for the current query
         * if the limit clause was used.
         *
         * @since 4.6.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         */
        private function set_found_sites()
        {
        }
        /**
         * Used internally to generate an SQL string for searching across multiple columns.
         *
         * @since 4.6.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param string   $search  Search string.
         * @param string[] $columns Array of columns to search.
         * @return string Search SQL.
         */
        protected function get_search_sql($search, $columns)
        {
        }
        /**
         * Parses and sanitizes 'orderby' keys passed to the site query.
         *
         * @since 4.6.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param string $orderby Alias for the field to order by.
         * @return string|false Value to used in the ORDER clause. False otherwise.
         */
        protected function parse_orderby($orderby)
        {
        }
        /**
         * Parses an 'order' query variable and cast it to 'ASC' or 'DESC' as necessary.
         *
         * @since 4.6.0
         *
         * @param string $order The 'order' query variable.
         * @return string The sanitized 'order' query variable.
         */
        protected function parse_order($order)
        {
        }
    }
    /**
     * Core class used for managing HTTP transports and making HTTP requests.
     *
     * This class is used to consistently make outgoing HTTP requests easy for developers
     * while still being compatible with the many PHP configurations under which
     * WordPress runs.
     *
     * Debugging includes several actions, which pass different variables for debugging the HTTP API.
     *
     * @since 2.7.0
     */
    class WP_Http
    {
        // Aliases for HTTP response codes.
        const HTTP_CONTINUE = 100;
        const SWITCHING_PROTOCOLS = 101;
        const PROCESSING = 102;
        const EARLY_HINTS = 103;
        const OK = 200;
        const CREATED = 201;
        const ACCEPTED = 202;
        const NON_AUTHORITATIVE_INFORMATION = 203;
        const NO_CONTENT = 204;
        const RESET_CONTENT = 205;
        const PARTIAL_CONTENT = 206;
        const MULTI_STATUS = 207;
        const IM_USED = 226;
        const MULTIPLE_CHOICES = 300;
        const MOVED_PERMANENTLY = 301;
        const FOUND = 302;
        const SEE_OTHER = 303;
        const NOT_MODIFIED = 304;
        const USE_PROXY = 305;
        const RESERVED = 306;
        const TEMPORARY_REDIRECT = 307;
        const PERMANENT_REDIRECT = 308;
        const BAD_REQUEST = 400;
        const UNAUTHORIZED = 401;
        const PAYMENT_REQUIRED = 402;
        const FORBIDDEN = 403;
        const NOT_FOUND = 404;
        const METHOD_NOT_ALLOWED = 405;
        const NOT_ACCEPTABLE = 406;
        const PROXY_AUTHENTICATION_REQUIRED = 407;
        const REQUEST_TIMEOUT = 408;
        const CONFLICT = 409;
        const GONE = 410;
        const LENGTH_REQUIRED = 411;
        const PRECONDITION_FAILED = 412;
        const REQUEST_ENTITY_TOO_LARGE = 413;
        const REQUEST_URI_TOO_LONG = 414;
        const UNSUPPORTED_MEDIA_TYPE = 415;
        const REQUESTED_RANGE_NOT_SATISFIABLE = 416;
        const EXPECTATION_FAILED = 417;
        const IM_A_TEAPOT = 418;
        const MISDIRECTED_REQUEST = 421;
        const UNPROCESSABLE_ENTITY = 422;
        const LOCKED = 423;
        const FAILED_DEPENDENCY = 424;
        const UPGRADE_REQUIRED = 426;
        const PRECONDITION_REQUIRED = 428;
        const TOO_MANY_REQUESTS = 429;
        const REQUEST_HEADER_FIELDS_TOO_LARGE = 431;
        const UNAVAILABLE_FOR_LEGAL_REASONS = 451;
        const INTERNAL_SERVER_ERROR = 500;
        const NOT_IMPLEMENTED = 501;
        const BAD_GATEWAY = 502;
        const SERVICE_UNAVAILABLE = 503;
        const GATEWAY_TIMEOUT = 504;
        const HTTP_VERSION_NOT_SUPPORTED = 505;
        const VARIANT_ALSO_NEGOTIATES = 506;
        const INSUFFICIENT_STORAGE = 507;
        const NOT_EXTENDED = 510;
        const NETWORK_AUTHENTICATION_REQUIRED = 511;
        /**
         * Send an HTTP request to a URI.
         *
         * Please note: The only URI that are supported in the HTTP Transport implementation
         * are the HTTP and HTTPS protocols.
         *
         * @since 2.7.0
         *
         * @param string       $url  The request URL.
         * @param string|array $args {
         *     Optional. Array or string of HTTP request arguments.
         *
         *     @type string       $method              Request method. Accepts 'GET', 'POST', 'HEAD', 'PUT', 'DELETE',
         *                                             'TRACE', 'OPTIONS', or 'PATCH'.
         *                                             Some transports technically allow others, but should not be
         *                                             assumed. Default 'GET'.
         *     @type float        $timeout             How long the connection should stay open in seconds. Default 5.
         *     @type int          $redirection         Number of allowed redirects. Not supported by all transports.
         *                                             Default 5.
         *     @type string       $httpversion         Version of the HTTP protocol to use. Accepts '1.0' and '1.1'.
         *                                             Default '1.0'.
         *     @type string       $user-agent          User-agent value sent.
         *                                             Default 'WordPress/' . get_bloginfo( 'version' ) . '; ' . get_bloginfo( 'url' ).
         *     @type bool         $reject_unsafe_urls  Whether to pass URLs through wp_http_validate_url().
         *                                             Default false.
         *     @type bool         $blocking            Whether the calling code requires the result of the request.
         *                                             If set to false, the request will be sent to the remote server,
         *                                             and processing returned to the calling code immediately, the caller
         *                                             will know if the request succeeded or failed, but will not receive
         *                                             any response from the remote server. Default true.
         *     @type string|array $headers             Array or string of headers to send with the request.
         *                                             Default empty array.
         *     @type array        $cookies             List of cookies to send with the request. Default empty array.
         *     @type string|array $body                Body to send with the request. Default null.
         *     @type bool         $compress            Whether to compress the $body when sending the request.
         *                                             Default false.
         *     @type bool         $decompress          Whether to decompress a compressed response. If set to false and
         *                                             compressed content is returned in the response anyway, it will
         *                                             need to be separately decompressed. Default true.
         *     @type bool         $sslverify           Whether to verify SSL for the request. Default true.
         *     @type string       $sslcertificates     Absolute path to an SSL certificate .crt file.
         *                                             Default ABSPATH . WPINC . '/certificates/ca-bundle.crt'.
         *     @type bool         $stream              Whether to stream to a file. If set to true and no filename was
         *                                             given, it will be dropped it in the WP temp dir and its name will
         *                                             be set using the basename of the URL. Default false.
         *     @type string       $filename            Filename of the file to write to when streaming. $stream must be
         *                                             set to true. Default null.
         *     @type int          $limit_response_size Size in bytes to limit the response to. Default null.
         *
         * }
         * @return array|WP_Error Array containing 'headers', 'body', 'response', 'cookies', 'filename'.
         *                        A WP_Error instance upon error.
         */
        public function request($url, $args = array())
        {
        }
        /**
         * Normalizes cookies for using in Requests.
         *
         * @since 4.6.0
         *
         * @param array $cookies Array of cookies to send with the request.
         * @return Requests_Cookie_Jar Cookie holder object.
         */
        public static function normalize_cookies($cookies)
        {
        }
        /**
         * Match redirect behaviour to browser handling.
         *
         * Changes 302 redirects from POST to GET to match browser handling. Per
         * RFC 7231, user agents can deviate from the strict reading of the
         * specification for compatibility purposes.
         *
         * @since 4.6.0
         *
         * @param string            $location URL to redirect to.
         * @param array             $headers  Headers for the redirect.
         * @param string|array      $data     Body to send with the request.
         * @param array             $options  Redirect request options.
         * @param Requests_Response $original Response object.
         */
        public static function browser_redirect_compatibility($location, $headers, $data, &$options, $original)
        {
        }
        /**
         * Validate redirected URLs.
         *
         * @since 4.7.5
         *
         * @throws Requests_Exception On unsuccessful URL validation.
         * @param string $location URL to redirect to.
         */
        public static function validate_redirects($location)
        {
        }
        /**
         * Tests which transports are capable of supporting the request.
         *
         * @since 3.2.0
         *
         * @param array  $args Request arguments.
         * @param string $url  URL to request.
         * @return string|false Class name for the first transport that claims to support the request.
         *                      False if no transport claims to support the request.
         */
        public function _get_first_available_transport($args, $url = \null)
        {
        }
        /**
         * Dispatches a HTTP request to a supporting transport.
         *
         * Tests each transport in order to find a transport which matches the request arguments.
         * Also caches the transport instance to be used later.
         *
         * The order for requests is cURL, and then PHP Streams.
         *
         * @since 3.2.0
         * @deprecated 5.1.0 Use WP_Http::request()
         * @see WP_Http::request()
         *
         * @param string $url  URL to request.
         * @param array  $args Request arguments.
         * @return array|WP_Error Array containing 'headers', 'body', 'response', 'cookies', 'filename'.
         *                        A WP_Error instance upon error.
         */
        private function _dispatch_request($url, $args)
        {
        }
        /**
         * Uses the POST HTTP method.
         *
         * Used for sending data that is expected to be in the body.
         *
         * @since 2.7.0
         *
         * @param string       $url  The request URL.
         * @param string|array $args Optional. Override the defaults.
         * @return array|WP_Error Array containing 'headers', 'body', 'response', 'cookies', 'filename'.
         *                        A WP_Error instance upon error.
         */
        public function post($url, $args = array())
        {
        }
        /**
         * Uses the GET HTTP method.
         *
         * Used for sending data that is expected to be in the body.
         *
         * @since 2.7.0
         *
         * @param string       $url  The request URL.
         * @param string|array $args Optional. Override the defaults.
         * @return array|WP_Error Array containing 'headers', 'body', 'response', 'cookies', 'filename'.
         *                        A WP_Error instance upon error.
         */
        public function get($url, $args = array())
        {
        }
        /**
         * Uses the HEAD HTTP method.
         *
         * Used for sending data that is expected to be in the body.
         *
         * @since 2.7.0
         *
         * @param string       $url  The request URL.
         * @param string|array $args Optional. Override the defaults.
         * @return array|WP_Error Array containing 'headers', 'body', 'response', 'cookies', 'filename'.
         *                        A WP_Error instance upon error.
         */
        public function head($url, $args = array())
        {
        }
        /**
         * Parses the responses and splits the parts into headers and body.
         *
         * @since 2.7.0
         *
         * @param string $response The full response string.
         * @return array {
         *     Array with response headers and body.
         *
         *     @type string $headers HTTP response headers.
         *     @type string $body    HTTP response body.
         * }
         */
        public static function processResponse($response)
        {
        }
        /**
         * Transforms header string into an array.
         *
         * @since 2.7.0
         *
         * @param string|array $headers The original headers. If a string is passed, it will be converted
         *                              to an array. If an array is passed, then it is assumed to be
         *                              raw header data with numeric keys with the headers as the values.
         *                              No headers must be passed that were already processed.
         * @param string       $url     Optional. The URL that was requested. Default empty.
         * @return array {
         *     Processed string headers. If duplicate headers are encountered,
         *     then a numbered array is returned as the value of that header-key.
         *
         *     @type array            $response {
         *          @type int    $code    The response status code. Default 0.
         *          @type string $message The response message. Default empty.
         *     }
         *     @type array            $newheaders The processed header data as a multidimensional array.
         *     @type WP_Http_Cookie[] $cookies    If the original headers contain the 'Set-Cookie' key,
         *                                        an array containing `WP_Http_Cookie` objects is returned.
         * }
         */
        public static function processHeaders($headers, $url = '')
        {
        }
        /**
         * Takes the arguments for a ::request() and checks for the cookie array.
         *
         * If it's found, then it upgrades any basic name => value pairs to WP_Http_Cookie instances,
         * which are each parsed into strings and added to the Cookie: header (within the arguments array).
         * Edits the array by reference.
         *
         * @since 2.8.0
         *
         * @param array $r Full array of args passed into ::request()
         */
        public static function buildCookieHeader(&$r)
        {
        }
        /**
         * Decodes chunk transfer-encoding, based off the HTTP 1.1 specification.
         *
         * Based off the HTTP http_encoding_dechunk function.
         *
         * @link https://tools.ietf.org/html/rfc2616#section-19.4.6 Process for chunked decoding.
         *
         * @since 2.7.0
         *
         * @param string $body Body content.
         * @return string Chunked decoded body on success or raw body on failure.
         */
        public static function chunkTransferDecode($body)
        {
        }
        /**
         * Determines whether an HTTP API request to the given URL should be blocked.
         *
         * Those who are behind a proxy and want to prevent access to certain hosts may do so. This will
         * prevent plugins from working and core functionality, if you don't include `api.wordpress.org`.
         *
         * You block external URL requests by defining `WP_HTTP_BLOCK_EXTERNAL` as true in your `wp-config.php`
         * file and this will only allow localhost and your site to make requests. The constant
         * `WP_ACCESSIBLE_HOSTS` will allow additional hosts to go through for requests. The format of the
         * `WP_ACCESSIBLE_HOSTS` constant is a comma separated list of hostnames to allow, wildcard domains
         * are supported, eg `*.wordpress.org` will allow for all subdomains of `wordpress.org` to be contacted.
         *
         * @since 2.8.0
         *
         * @link https://core.trac.wordpress.org/ticket/8927 Allow preventing external requests.
         * @link https://core.trac.wordpress.org/ticket/14636 Allow wildcard domains in WP_ACCESSIBLE_HOSTS
         *
         * @param string $uri URI of url.
         * @return bool True to block, false to allow.
         */
        public function block_request($uri)
        {
        }
        /**
         * Used as a wrapper for PHP's parse_url() function that handles edgecases in < PHP 5.4.7.
         *
         * @deprecated 4.4.0 Use wp_parse_url()
         * @see wp_parse_url()
         *
         * @param string $url The URL to parse.
         * @return bool|array False on failure; Array of URL components on success;
         *                    See parse_url()'s return values.
         */
        protected static function parse_url($url)
        {
        }
        /**
         * Converts a relative URL to an absolute URL relative to a given URL.
         *
         * If an Absolute URL is provided, no processing of that URL is done.
         *
         * @since 3.4.0
         *
         * @param string $maybe_relative_path The URL which might be relative.
         * @param string $url                 The URL which $maybe_relative_path is relative to.
         * @return string An Absolute URL, in a failure condition where the URL cannot be parsed, the relative URL will be returned.
         */
        public static function make_absolute_url($maybe_relative_path, $url)
        {
        }
        /**
         * Handles an HTTP redirect and follows it if appropriate.
         *
         * @since 3.7.0
         *
         * @param string $url      The URL which was requested.
         * @param array  $args     The arguments which were used to make the request.
         * @param array  $response The response of the HTTP request.
         * @return array|false|WP_Error An HTTP API response array if the redirect is successfully followed,
         *                              false if no redirect is present, or a WP_Error object if there's an error.
         */
        public static function handle_redirects($url, $args, $response)
        {
        }
        /**
         * Determines if a specified string represents an IP address or not.
         *
         * This function also detects the type of the IP address, returning either
         * '4' or '6' to represent a IPv4 and IPv6 address respectively.
         * This does not verify if the IP is a valid IP, only that it appears to be
         * an IP address.
         *
         * @link http://home.deds.nl/~aeron/regex/ for IPv6 regex.
         *
         * @since 3.7.0
         *
         * @param string $maybe_ip A suspected IP address.
         * @return int|false Upon success, '4' or '6' to represent a IPv4 or IPv6 address, false upon failure
         */
        public static function is_ip_address($maybe_ip)
        {
        }
    }
    /**
     * Taxonomy API: Walker_CategoryDropdown class
     *
     * @package WordPress
     * @subpackage Template
     * @since 4.4.0
     */
    /**
     * Core class used to create an HTML dropdown list of Categories.
     *
     * @since 2.1.0
     *
     * @see Walker
     */
    class Walker_CategoryDropdown extends \Walker
    {
        /**
         * What the class handles.
         *
         * @since 2.1.0
         * @var string
         *
         * @see Walker::$tree_type
         */
        public $tree_type = 'category';
        /**
         * Database fields to use.
         *
         * @since 2.1.0
         * @todo Decouple this
         * @var string[]
         *
         * @see Walker::$db_fields
         */
        public $db_fields = array('parent' => 'parent', 'id' => 'term_id');
        /**
         * Starts the element output.
         *
         * @since 2.1.0
         * @since 5.9.0 Renamed `$category` to `$data_object` and `$id` to `$current_object_id`
         *              to match parent class for PHP 8 named parameter support.
         *
         * @see Walker::start_el()
         *
         * @param string  $output            Used to append additional content (passed by reference).
         * @param WP_Term $data_object       Category data object.
         * @param int     $depth             Depth of category. Used for padding.
         * @param array   $args              Uses 'selected', 'show_count', and 'value_field' keys, if they exist.
         *                                   See wp_dropdown_categories().
         * @param int     $current_object_id Optional. ID of the current category. Default 0.
         */
        public function start_el(&$output, $data_object, $depth = 0, $args = array(), $current_object_id = 0)
        {
        }
    }
    /**
     * Post API: WP_Post_Type class
     *
     * @package WordPress
     * @subpackage Post
     * @since 4.6.0
     */
    /**
     * Core class used for interacting with post types.
     *
     * @since 4.6.0
     *
     * @see register_post_type()
     */
    final class WP_Post_Type
    {
        /**
         * Post type key.
         *
         * @since 4.6.0
         * @var string $name
         */
        public $name;
        /**
         * Name of the post type shown in the menu. Usually plural.
         *
         * @since 4.6.0
         * @var string $label
         */
        public $label;
        /**
         * Labels object for this post type.
         *
         * If not set, post labels are inherited for non-hierarchical types
         * and page labels for hierarchical ones.
         *
         * @see get_post_type_labels()
         *
         * @since 4.6.0
         * @var stdClass $labels
         */
        public $labels;
        /**
         * Default labels.
         *
         * @since 6.0.0
         * @var (string|null)[][] $default_labels
         */
        protected static $default_labels = array();
        /**
         * A short descriptive summary of what the post type is.
         *
         * Default empty.
         *
         * @since 4.6.0
         * @var string $description
         */
        public $description = '';
        /**
         * Whether a post type is intended for use publicly either via the admin interface or by front-end users.
         *
         * While the default settings of $exclude_from_search, $publicly_queryable, $show_ui, and $show_in_nav_menus
         * are inherited from public, each does not rely on this relationship and controls a very specific intention.
         *
         * Default false.
         *
         * @since 4.6.0
         * @var bool $public
         */
        public $public = \false;
        /**
         * Whether the post type is hierarchical (e.g. page).
         *
         * Default false.
         *
         * @since 4.6.0
         * @var bool $hierarchical
         */
        public $hierarchical = \false;
        /**
         * Whether to exclude posts with this post type from front end search
         * results.
         *
         * Default is the opposite value of $public.
         *
         * @since 4.6.0
         * @var bool $exclude_from_search
         */
        public $exclude_from_search = \null;
        /**
         * Whether queries can be performed on the front end for the post type as part of `parse_request()`.
         *
         * Endpoints would include:
         *
         * - `?post_type={post_type_key}`
         * - `?{post_type_key}={single_post_slug}`
         * - `?{post_type_query_var}={single_post_slug}`
         *
         * Default is the value of $public.
         *
         * @since 4.6.0
         * @var bool $publicly_queryable
         */
        public $publicly_queryable = \null;
        /**
         * Whether to generate and allow a UI for managing this post type in the admin.
         *
         * Default is the value of $public.
         *
         * @since 4.6.0
         * @var bool $show_ui
         */
        public $show_ui = \null;
        /**
         * Where to show the post type in the admin menu.
         *
         * To work, $show_ui must be true. If true, the post type is shown in its own top level menu. If false, no menu is
         * shown. If a string of an existing top level menu ('tools.php' or 'edit.php?post_type=page', for example), the
         * post type will be placed as a sub-menu of that.
         *
         * Default is the value of $show_ui.
         *
         * @since 4.6.0
         * @var bool|string $show_in_menu
         */
        public $show_in_menu = \null;
        /**
         * Makes this post type available for selection in navigation menus.
         *
         * Default is the value $public.
         *
         * @since 4.6.0
         * @var bool $show_in_nav_menus
         */
        public $show_in_nav_menus = \null;
        /**
         * Makes this post type available via the admin bar.
         *
         * Default is the value of $show_in_menu.
         *
         * @since 4.6.0
         * @var bool $show_in_admin_bar
         */
        public $show_in_admin_bar = \null;
        /**
         * The position in the menu order the post type should appear.
         *
         * To work, $show_in_menu must be true. Default null (at the bottom).
         *
         * @since 4.6.0
         * @var int $menu_position
         */
        public $menu_position = \null;
        /**
         * The URL or reference to the icon to be used for this menu.
         *
         * Pass a base64-encoded SVG using a data URI, which will be colored to match the color scheme.
         * This should begin with 'data:image/svg+xml;base64,'. Pass the name of a Dashicons helper class
         * to use a font icon, e.g. 'dashicons-chart-pie'. Pass 'none' to leave div.wp-menu-image empty
         * so an icon can be added via CSS.
         *
         * Defaults to use the posts icon.
         *
         * @since 4.6.0
         * @var string $menu_icon
         */
        public $menu_icon = \null;
        /**
         * The string to use to build the read, edit, and delete capabilities.
         *
         * May be passed as an array to allow for alternative plurals when using
         * this argument as a base to construct the capabilities, e.g.
         * array( 'story', 'stories' ). Default 'post'.
         *
         * @since 4.6.0
         * @var string $capability_type
         */
        public $capability_type = 'post';
        /**
         * Whether to use the internal default meta capability handling.
         *
         * Default false.
         *
         * @since 4.6.0
         * @var bool $map_meta_cap
         */
        public $map_meta_cap = \false;
        /**
         * Provide a callback function that sets up the meta boxes for the edit form.
         *
         * Do `remove_meta_box()` and `add_meta_box()` calls in the callback. Default null.
         *
         * @since 4.6.0
         * @var callable $register_meta_box_cb
         */
        public $register_meta_box_cb = \null;
        /**
         * An array of taxonomy identifiers that will be registered for the post type.
         *
         * Taxonomies can be registered later with `register_taxonomy()` or `register_taxonomy_for_object_type()`.
         *
         * Default empty array.
         *
         * @since 4.6.0
         * @var array $taxonomies
         */
        public $taxonomies = array();
        /**
         * Whether there should be post type archives, or if a string, the archive slug to use.
         *
         * Will generate the proper rewrite rules if $rewrite is enabled. Default false.
         *
         * @since 4.6.0
         * @var bool|string $has_archive
         */
        public $has_archive = \false;
        /**
         * Sets the query_var key for this post type.
         *
         * Defaults to $post_type key. If false, a post type cannot be loaded at `?{query_var}={post_slug}`.
         * If specified as a string, the query `?{query_var_string}={post_slug}` will be valid.
         *
         * @since 4.6.0
         * @var string|bool $query_var
         */
        public $query_var;
        /**
         * Whether to allow this post type to be exported.
         *
         * Default true.
         *
         * @since 4.6.0
         * @var bool $can_export
         */
        public $can_export = \true;
        /**
         * Whether to delete posts of this type when deleting a user.
         *
         * - If true, posts of this type belonging to the user will be moved to Trash when the user is deleted.
         * - If false, posts of this type belonging to the user will *not* be trashed or deleted.
         * - If not set (the default), posts are trashed if post type supports the 'author' feature.
         *   Otherwise posts are not trashed or deleted.
         *
         * Default null.
         *
         * @since 4.6.0
         * @var bool $delete_with_user
         */
        public $delete_with_user = \null;
        /**
         * Array of blocks to use as the default initial state for an editor session.
         *
         * Each item should be an array containing block name and optional attributes.
         *
         * Default empty array.
         *
         * @link https://developer.wordpress.org/block-editor/developers/block-api/block-templates/
         *
         * @since 5.0.0
         * @var array $template
         */
        public $template = array();
        /**
         * Whether the block template should be locked if $template is set.
         *
         * - If set to 'all', the user is unable to insert new blocks, move existing blocks
         *   and delete blocks.
         * - If set to 'insert', the user is able to move existing blocks but is unable to insert
         *   new blocks and delete blocks.
         *
         * Default false.
         *
         * @link https://developer.wordpress.org/block-editor/developers/block-api/block-templates/
         *
         * @since 5.0.0
         * @var string|false $template_lock
         */
        public $template_lock = \false;
        /**
         * Whether this post type is a native or "built-in" post_type.
         *
         * Default false.
         *
         * @since 4.6.0
         * @var bool $_builtin
         */
        public $_builtin = \false;
        /**
         * URL segment to use for edit link of this post type.
         *
         * Default 'post.php?post=%d'.
         *
         * @since 4.6.0
         * @var string $_edit_link
         */
        public $_edit_link = 'post.php?post=%d';
        /**
         * Post type capabilities.
         *
         * @since 4.6.0
         * @var stdClass $cap
         */
        public $cap;
        /**
         * Triggers the handling of rewrites for this post type.
         *
         * Defaults to true, using $post_type as slug.
         *
         * @since 4.6.0
         * @var array|false $rewrite
         */
        public $rewrite;
        /**
         * The features supported by the post type.
         *
         * @since 4.6.0
         * @var array|bool $supports
         */
        public $supports;
        /**
         * Whether this post type should appear in the REST API.
         *
         * Default false. If true, standard endpoints will be registered with
         * respect to $rest_base and $rest_controller_class.
         *
         * @since 4.7.4
         * @var bool $show_in_rest
         */
        public $show_in_rest;
        /**
         * The base path for this post type's REST API endpoints.
         *
         * @since 4.7.4
         * @var string|bool $rest_base
         */
        public $rest_base;
        /**
         * The namespace for this post type's REST API endpoints.
         *
         * @since 5.9.0
         * @var string|bool $rest_namespace
         */
        public $rest_namespace;
        /**
         * The controller for this post type's REST API endpoints.
         *
         * Custom controllers must extend WP_REST_Controller.
         *
         * @since 4.7.4
         * @var string|bool $rest_controller_class
         */
        public $rest_controller_class;
        /**
         * The controller instance for this post type's REST API endpoints.
         *
         * Lazily computed. Should be accessed using {@see WP_Post_Type::get_rest_controller()}.
         *
         * @since 5.3.0
         * @var WP_REST_Controller $rest_controller
         */
        public $rest_controller;
        /**
         * Constructor.
         *
         * See the register_post_type() function for accepted arguments for `$args`.
         *
         * Will populate object properties from the provided arguments and assign other
         * default properties based on that information.
         *
         * @since 4.6.0
         *
         * @see register_post_type()
         *
         * @param string       $post_type Post type key.
         * @param array|string $args      Optional. Array or string of arguments for registering a post type.
         *                                Default empty array.
         */
        public function __construct($post_type, $args = array())
        {
        }
        /**
         * Sets post type properties.
         *
         * See the register_post_type() function for accepted arguments for `$args`.
         *
         * @since 4.6.0
         *
         * @param array|string $args Array or string of arguments for registering a post type.
         */
        public function set_props($args)
        {
        }
        /**
         * Sets the features support for the post type.
         *
         * @since 4.6.0
         */
        public function add_supports()
        {
        }
        /**
         * Adds the necessary rewrite rules for the post type.
         *
         * @since 4.6.0
         *
         * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
         * @global WP         $wp         Current WordPress environment instance.
         */
        public function add_rewrite_rules()
        {
        }
        /**
         * Registers the post type meta box if a custom callback was specified.
         *
         * @since 4.6.0
         */
        public function register_meta_boxes()
        {
        }
        /**
         * Adds the future post hook action for the post type.
         *
         * @since 4.6.0
         */
        public function add_hooks()
        {
        }
        /**
         * Registers the taxonomies for the post type.
         *
         * @since 4.6.0
         */
        public function register_taxonomies()
        {
        }
        /**
         * Removes the features support for the post type.
         *
         * @since 4.6.0
         *
         * @global array $_wp_post_type_features Post type features.
         */
        public function remove_supports()
        {
        }
        /**
         * Removes any rewrite rules, permastructs, and rules for the post type.
         *
         * @since 4.6.0
         *
         * @global WP_Rewrite $wp_rewrite          WordPress rewrite component.
         * @global WP         $wp                  Current WordPress environment instance.
         * @global array      $post_type_meta_caps Used to remove meta capabilities.
         */
        public function remove_rewrite_rules()
        {
        }
        /**
         * Unregisters the post type meta box if a custom callback was specified.
         *
         * @since 4.6.0
         */
        public function unregister_meta_boxes()
        {
        }
        /**
         * Removes the post type from all taxonomies.
         *
         * @since 4.6.0
         */
        public function unregister_taxonomies()
        {
        }
        /**
         * Removes the future post hook action for the post type.
         *
         * @since 4.6.0
         */
        public function remove_hooks()
        {
        }
        /**
         * Gets the REST API controller for this post type.
         *
         * Will only instantiate the controller class once per request.
         *
         * @since 5.3.0
         *
         * @return WP_REST_Controller|null The controller instance, or null if the post type
         *                                 is set not to show in rest.
         */
        public function get_rest_controller()
        {
        }
        /**
         * Returns the default labels for post types.
         *
         * @since 6.0.0
         *
         * @return (string|null)[][] The default labels for post types.
         */
        public static function get_default_labels()
        {
        }
        /**
         * Resets the cache for the default labels.
         *
         * @since 6.0.0
         */
        public static function reset_default_labels()
        {
        }
    }
    /**
     * Send XML response back to Ajax request.
     *
     * @package WordPress
     * @since 2.1.0
     */
    class WP_Ajax_Response
    {
        /**
         * Store XML responses to send.
         *
         * @since 2.1.0
         * @var array
         */
        public $responses = array();
        /**
         * Constructor - Passes args to WP_Ajax_Response::add().
         *
         * @since 2.1.0
         *
         * @see WP_Ajax_Response::add()
         *
         * @param string|array $args Optional. Will be passed to add() method.
         */
        public function __construct($args = '')
        {
        }
        /**
         * Appends data to an XML response based on given arguments.
         *
         * With `$args` defaults, extra data output would be:
         *
         *     <response action='{$action}_$id'>
         *      <$what id='$id' position='$position'>
         *          <response_data><![CDATA[$data]]></response_data>
         *      </$what>
         *     </response>
         *
         * @since 2.1.0
         *
         * @param string|array $args {
         *     Optional. An array or string of XML response arguments.
         *
         *     @type string          $what         XML-RPC response type. Used as a child element of `<response>`.
         *                                         Default 'object' (`<object>`).
         *     @type string|false    $action       Value to use for the `action` attribute in `<response>`. Will be
         *                                         appended with `_$id` on output. If false, `$action` will default to
         *                                         the value of `$_POST['action']`. Default false.
         *     @type int|WP_Error    $id           The response ID, used as the response type `id` attribute. Also
         *                                         accepts a `WP_Error` object if the ID does not exist. Default 0.
         *     @type int|false       $old_id       The previous response ID. Used as the value for the response type
         *                                         `old_id` attribute. False hides the attribute. Default false.
         *     @type string          $position     Value of the response type `position` attribute. Accepts 1 (bottom),
         *                                         -1 (top), HTML ID (after), or -HTML ID (before). Default 1 (bottom).
         *     @type string|WP_Error $data         The response content/message. Also accepts a WP_Error object if the
         *                                         ID does not exist. Default empty.
         *     @type array           $supplemental An array of extra strings that will be output within a `<supplemental>`
         *                                         element as CDATA. Default empty array.
         * }
         * @return string XML response.
         */
        public function add($args = '')
        {
        }
        /**
         * Display XML formatted responses.
         *
         * Sets the content type header to text/xml.
         *
         * @since 2.1.0
         */
        public function send()
        {
        }
    }
    abstract class getid3_handler
    {
        /**
         * @var getID3
         */
        protected $getid3;
        // pointer
        /**
         * Analyzing filepointer or string.
         *
         * @var bool
         */
        protected $data_string_flag = \false;
        /**
         * String to analyze.
         *
         * @var string
         */
        protected $data_string = '';
        /**
         * Seek position in string.
         *
         * @var int
         */
        protected $data_string_position = 0;
        /**
         * String length.
         *
         * @var int
         */
        protected $data_string_length = 0;
        /**
         * @var string
         */
        private $dependency_to;
        /**
         * getid3_handler constructor.
         *
         * @param getID3 $getid3
         * @param string $call_module
         */
        public function __construct(\getID3 $getid3, $call_module = \null)
        {
        }
        /**
         * Analyze from file pointer.
         *
         * @return bool
         */
        public abstract function Analyze();
        /**
         * Analyze from string instead.
         *
         * @param string $string
         */
        public function AnalyzeString($string)
        {
        }
        /**
         * @param string $string
         */
        public function setStringMode($string)
        {
        }
        /**
         * @return int|bool
         */
        protected function ftell()
        {
        }
        /**
         * @param int $bytes
         *
         * @return string|false
         *
         * @throws getid3_exception
         */
        protected function fread($bytes)
        {
        }
        /**
         * @param int $bytes
         * @param int $whence
         *
         * @return int
         *
         * @throws getid3_exception
         */
        protected function fseek($bytes, $whence = \SEEK_SET)
        {
        }
        /**
         * @return string|false
         *
         * @throws getid3_exception
         */
        protected function fgets()
        {
        }
        /**
         * @return bool
         */
        protected function feof()
        {
        }
        /**
         * @param string $module
         *
         * @return bool
         */
        protected final function isDependencyFor($module)
        {
        }
        /**
         * @param string $text
         *
         * @return bool
         */
        protected function error($text)
        {
        }
        /**
         * @param string $text
         *
         * @return bool
         */
        protected function warning($text)
        {
        }
        /**
         * @param string $text
         */
        protected function notice($text)
        {
        }
        /**
         * @param string $name
         * @param int    $offset
         * @param int    $length
         * @param string $image_mime
         *
         * @return string|null
         *
         * @throws Exception
         * @throws getid3_exception
         */
        public function saveAttachment($name, $offset, $length, $image_mime = \null)
        {
        }
    }
    //             [FD] -- Relative position of the data that should be in position of the virtual block.
    /**
    * @tutorial http://www.matroska.org/technical/specs/index.html
    *
    * @todo Rewrite EBML parser to reduce it's size and honor default element values
    * @todo After rewrite implement stream size calculation, that will provide additional useful info and enable AAC/FLAC audio bitrate detection
    */
    class getid3_matroska extends \getid3_handler
    {
        /**
         * If true, do not return information about CLUSTER chunks, since there's a lot of them
         * and they're not usually useful [default: TRUE].
         *
         * @var bool
         */
        public $hide_clusters = \true;
        /**
         * True to parse the whole file, not only header [default: FALSE].
         *
         * @var bool
         */
        public $parse_whole_file = \false;
        /*
         * Private parser settings/placeholders.
         */
        private $EBMLbuffer = '';
        private $EBMLbuffer_offset = 0;
        private $EBMLbuffer_length = 0;
        private $current_offset = 0;
        private $unuseful_elements = array(\EBML_ID_CRC32, \EBML_ID_VOID);
        /**
         * @return bool
         */
        public function Analyze()
        {
        }
        /**
         * @param array $info
         */
        private function parseEBML(&$info)
        {
        }
        /**
         * @param int $min_data
         *
         * @return bool
         */
        private function EnsureBufferHasEnoughData($min_data = 1024)
        {
        }
        /**
         * @return int|float|false
         */
        private function readEBMLint()
        {
        }
        /**
         * @param int  $length
         * @param bool $check_buffer
         *
         * @return string|false
         */
        private function readEBMLelementData($length, $check_buffer = \false)
        {
        }
        /**
         * @param array      $element
         * @param int        $parent_end
         * @param array|bool $get_data
         *
         * @return bool
         */
        private function getEBMLelement(&$element, $parent_end, $get_data = \false)
        {
        }
        /**
         * @param string $type
         * @param int    $line
         * @param array  $element
         */
        private function unhandledElement($type, $line, $element)
        {
        }
        /**
         * @param array $SimpleTagArray
         *
         * @return bool
         */
        private function ExtractCommentsSimpleTag($SimpleTagArray)
        {
        }
        /**
         * @param int $parent_end
         *
         * @return array
         */
        private function HandleEMBLSimpleTag($parent_end)
        {
        }
        /**
         * @param array $element
         * @param int   $block_type
         * @param array $info
         *
         * @return array
         */
        private function HandleEMBLClusterBlock($element, $block_type, &$info)
        {
        }
        /**
         * @param string $EBMLstring
         *
         * @return int|float|false
         */
        private static function EBML2Int($EBMLstring)
        {
        }
        /**
         * @param int $EBMLdatestamp
         *
         * @return float
         */
        private static function EBMLdate2unix($EBMLdatestamp)
        {
        }
        /**
         * @param int $target_type
         *
         * @return string|int
         */
        public static function TargetTypeValue($target_type)
        {
        }
        /**
         * @param int $lacingtype
         *
         * @return string|int
         */
        public static function BlockLacingType($lacingtype)
        {
        }
        /**
         * @param string $codecid
         *
         * @return string
         */
        public static function CodecIDtoCommonName($codecid)
        {
        }
        /**
         * @param int $value
         *
         * @return string
         */
        private static function EBMLidName($value)
        {
        }
        /**
         * @param int $value
         *
         * @return string
         */
        public static function displayUnit($value)
        {
        }
        /**
         * @param array $streams
         *
         * @return array
         */
        private static function getDefaultStreamInfo($streams)
        {
        }
    }
    class getid3_id3v1 extends \getid3_handler
    {
        /**
         * @return bool
         */
        public function Analyze()
        {
        }
        /**
         * @param string $str
         *
         * @return string
         */
        public static function cutfield($str)
        {
        }
        /**
         * @param bool $allowSCMPXextended
         *
         * @return string[]
         */
        public static function ArrayOfGenres($allowSCMPXextended = \false)
        {
        }
        /**
         * @param string $genreid
         * @param bool   $allowSCMPXextended
         *
         * @return string|false
         */
        public static function LookupGenreName($genreid, $allowSCMPXextended = \true)
        {
        }
        /**
         * @param string $genre
         * @param bool   $allowSCMPXextended
         *
         * @return string|false
         */
        public static function LookupGenreID($genre, $allowSCMPXextended = \false)
        {
        }
        /**
         * @param string $OriginalGenre
         *
         * @return string|false
         */
        public static function StandardiseID3v1GenreName($OriginalGenre)
        {
        }
        /**
         * @param string     $title
         * @param string     $artist
         * @param string     $album
         * @param string     $year
         * @param int        $genreid
         * @param string     $comment
         * @param int|string $track
         *
         * @return string
         */
        public static function GenerateID3v1Tag($title, $artist, $album, $year, $genreid, $comment, $track = '')
        {
        }
    }
    /**
    * @tutorial http://flac.sourceforge.net/format.html
    */
    class getid3_flac extends \getid3_handler
    {
        const syncword = 'fLaC';
        /**
         * @return bool
         */
        public function Analyze()
        {
        }
        /**
         * @return bool
         */
        public function parseMETAdata()
        {
        }
        /**
         * @param string $BlockData
         *
         * @return array
         */
        public static function parseSTREAMINFOdata($BlockData)
        {
        }
        /**
         * @param string $BlockData
         *
         * @return bool
         */
        private function parseSTREAMINFO($BlockData)
        {
        }
        /**
         * @param string $BlockData
         *
         * @return bool
         */
        private function parseAPPLICATION($BlockData)
        {
        }
        /**
         * @param string $BlockData
         *
         * @return bool
         */
        private function parseSEEKTABLE($BlockData)
        {
        }
        /**
         * @param string $BlockData
         *
         * @return bool
         */
        private function parseVORBIS_COMMENT($BlockData)
        {
        }
        /**
         * @param string $BlockData
         *
         * @return bool
         */
        private function parseCUESHEET($BlockData)
        {
        }
        /**
         * Parse METADATA_BLOCK_PICTURE flac structure and extract attachment
         * External usage: audio.ogg
         *
         * @return bool
         */
        public function parsePICTURE()
        {
        }
        /**
         * @param int $blocktype
         *
         * @return string
         */
        public static function metaBlockTypeLookup($blocktype)
        {
        }
        /**
         * @param int $applicationid
         *
         * @return string
         */
        public static function applicationIDLookup($applicationid)
        {
        }
        /**
         * @param int $type_id
         *
         * @return string
         */
        public static function pictureTypeLookup($type_id)
        {
        }
    }
    class getid3_ac3 extends \getid3_handler
    {
        /**
         * @var array
         */
        private $AC3header = array();
        /**
         * @var int
         */
        private $BSIoffset = 0;
        const syncword = 0xb77;
        /**
         * @return bool
         */
        public function Analyze()
        {
        }
        /**
         * @param int $length
         *
         * @return int
         */
        private function readHeaderBSI($length)
        {
        }
        /**
         * @param int $fscod
         *
         * @return int|string|false
         */
        public static function sampleRateCodeLookup($fscod)
        {
        }
        /**
         * @param int $fscod2
         *
         * @return int|string|false
         */
        public static function sampleRateCodeLookup2($fscod2)
        {
        }
        /**
         * @param int $bsmod
         * @param int $acmod
         *
         * @return string|false
         */
        public static function serviceTypeLookup($bsmod, $acmod)
        {
        }
        /**
         * @param int $acmod
         *
         * @return array|false
         */
        public static function audioCodingModeLookup($acmod)
        {
        }
        /**
         * @param int $cmixlev
         *
         * @return int|float|string|false
         */
        public static function centerMixLevelLookup($cmixlev)
        {
        }
        /**
         * @param int $surmixlev
         *
         * @return int|float|string|false
         */
        public static function surroundMixLevelLookup($surmixlev)
        {
        }
        /**
         * @param int $dsurmod
         *
         * @return string|false
         */
        public static function dolbySurroundModeLookup($dsurmod)
        {
        }
        /**
         * @param int  $acmod
         * @param bool $lfeon
         *
         * @return array
         */
        public static function channelsEnabledLookup($acmod, $lfeon)
        {
        }
        /**
         * @param int $compre
         *
         * @return float|int
         */
        public static function heavyCompression($compre)
        {
        }
        /**
         * @param int $roomtyp
         *
         * @return string|false
         */
        public static function roomTypeLookup($roomtyp)
        {
        }
        /**
         * @param int $frmsizecod
         * @param int $fscod
         *
         * @return int|false
         */
        public static function frameSizeLookup($frmsizecod, $fscod)
        {
        }
        /**
         * @param int $frmsizecod
         *
         * @return int|false
         */
        public static function bitrateLookup($frmsizecod)
        {
        }
        /**
         * @param int $numblkscod
         *
         * @return int|false
         */
        public static function blocksPerSyncFrame($numblkscod)
        {
        }
    }
    // needed for ISO 639-2 language code lookup
    class getid3_quicktime extends \getid3_handler
    {
        /** audio-video.quicktime
         * return all parsed data from all atoms if true, otherwise just returned parsed metadata
         *
         * @var bool
         */
        public $ReturnAtomData = \false;
        /** audio-video.quicktime
         * return all parsed data from all atoms if true, otherwise just returned parsed metadata
         *
         * @var bool
         */
        public $ParseAllPossibleAtoms = \false;
        /**
         * @return bool
         */
        public function Analyze()
        {
        }
        /**
         * @param string $atomname
         * @param int    $atomsize
         * @param string $atom_data
         * @param int    $baseoffset
         * @param array  $atomHierarchy
         * @param bool   $ParseAllPossibleAtoms
         *
         * @return array|false
         */
        public function QuicktimeParseAtom($atomname, $atomsize, $atom_data, $baseoffset, &$atomHierarchy, $ParseAllPossibleAtoms)
        {
        }
        /**
         * @param string $atom_data
         * @param int    $baseoffset
         * @param array  $atomHierarchy
         * @param bool   $ParseAllPossibleAtoms
         *
         * @return array|false
         */
        public function QuicktimeParseContainerAtom($atom_data, $baseoffset, &$atomHierarchy, $ParseAllPossibleAtoms)
        {
        }
        /**
         * @param string $data
         * @param int    $offset
         *
         * @return int
         */
        public function quicktime_read_mp4_descr_length($data, &$offset)
        {
        }
        /**
         * @param int $languageid
         *
         * @return string
         */
        public function QuicktimeLanguageLookup($languageid)
        {
        }
        /**
         * @param string $codecid
         *
         * @return string
         */
        public function QuicktimeVideoCodecLookup($codecid)
        {
        }
        /**
         * @param string $codecid
         *
         * @return mixed|string
         */
        public function QuicktimeAudioCodecLookup($codecid)
        {
        }
        /**
         * @param string $compressionid
         *
         * @return string
         */
        public function QuicktimeDCOMLookup($compressionid)
        {
        }
        /**
         * @param int $colordepthid
         *
         * @return string
         */
        public function QuicktimeColorNameLookup($colordepthid)
        {
        }
        /**
         * @param int $stik
         *
         * @return string
         */
        public function QuicktimeSTIKLookup($stik)
        {
        }
        /**
         * @param int $audio_profile_id
         *
         * @return string
         */
        public function QuicktimeIODSaudioProfileName($audio_profile_id)
        {
        }
        /**
         * @param int $video_profile_id
         *
         * @return string
         */
        public function QuicktimeIODSvideoProfileName($video_profile_id)
        {
        }
        /**
         * @param int $rtng
         *
         * @return string
         */
        public function QuicktimeContentRatingLookup($rtng)
        {
        }
        /**
         * @param int $akid
         *
         * @return string
         */
        public function QuicktimeStoreAccountTypeLookup($akid)
        {
        }
        /**
         * @param int $sfid
         *
         * @return string
         */
        public function QuicktimeStoreFrontCodeLookup($sfid)
        {
        }
        /**
         * @param string $keyname
         * @param string|array $data
         * @param string $boxname
         *
         * @return bool
         */
        public function CopyToAppropriateCommentsSection($keyname, $data, $boxname = '')
        {
        }
        /**
         * @param string $lstring
         * @param int    $count
         *
         * @return string
         */
        public function LociString($lstring, &$count)
        {
        }
        /**
         * @param string $nullterminatedstring
         *
         * @return string
         */
        public function NoNullString($nullterminatedstring)
        {
        }
        /**
         * @param string $pascalstring
         *
         * @return string
         */
        public function Pascal2String($pascalstring)
        {
        }
        /**
         * @param string $pascalstring
         *
         * @return string
         */
        public function MaybePascal2String($pascalstring)
        {
        }
        /**
         * Helper functions for m4b audiobook chapters
         * code by Steffen Hartmann 2015-Nov-08.
         *
         * @param array  $info
         * @param string $tag
         * @param string $history
         * @param array  $result
         */
        public function search_tag_by_key($info, $tag, $history, &$result)
        {
        }
        /**
         * @param array  $info
         * @param string $k
         * @param string $v
         * @param string $history
         * @param array  $result
         */
        public function search_tag_by_pair($info, $k, $v, $history, &$result)
        {
        }
        /**
         * @param array $info
         *
         * @return array
         */
        public function quicktime_time_to_sample_table($info)
        {
        }
        /**
         * @param array $info
         *
         * @return int
         */
        public function quicktime_bookmark_time_scale($info)
        {
        }
        /*
        // END helper functions for m4b audiobook chapters
        */
    }
    class getid3_riff extends \getid3_handler
    {
        protected $container = 'riff';
        // default
        /**
         * @return bool
         *
         * @throws getid3_exception
         */
        public function Analyze()
        {
        }
        /**
         * @param int $startoffset
         * @param int $maxoffset
         *
         * @return array|false
         *
         * @throws Exception
         * @throws getid3_exception
         */
        public function ParseRIFFAMV($startoffset, $maxoffset)
        {
        }
        /**
         * @param int $startoffset
         * @param int $maxoffset
         *
         * @return array|false
         * @throws getid3_exception
         */
        public function ParseRIFF($startoffset, $maxoffset)
        {
        }
        /**
         * @param string $RIFFdata
         *
         * @return bool
         */
        public function ParseRIFFdata(&$RIFFdata)
        {
        }
        /**
         * @param array $RIFFinfoArray
         * @param array $CommentsTargetArray
         *
         * @return bool
         */
        public static function parseComments(&$RIFFinfoArray, &$CommentsTargetArray)
        {
        }
        /**
         * @param string $WaveFormatExData
         *
         * @return array
         */
        public static function parseWAVEFORMATex($WaveFormatExData)
        {
        }
        /**
         * @param string $WavPackChunkData
         *
         * @return bool
         */
        public function parseWavPackHeader($WavPackChunkData)
        {
        }
        /**
         * @param string $BITMAPINFOHEADER
         * @param bool   $littleEndian
         *
         * @return array
         */
        public static function ParseBITMAPINFOHEADER($BITMAPINFOHEADER, $littleEndian = \true)
        {
        }
        /**
         * @param string $DIVXTAG
         * @param bool   $raw
         *
         * @return array
         */
        public static function ParseDIVXTAG($DIVXTAG, $raw = \false)
        {
        }
        /**
         * @param string $tagshortname
         *
         * @return string
         */
        public static function waveSNDMtagLookup($tagshortname)
        {
        }
        /**
         * @param int $wFormatTag
         *
         * @return string
         */
        public static function wFormatTagLookup($wFormatTag)
        {
        }
        /**
         * @param string $fourcc
         *
         * @return string
         */
        public static function fourccLookup($fourcc)
        {
        }
        /**
         * @param string $byteword
         * @param bool   $signed
         *
         * @return int|float|false
         */
        private function EitherEndian2Int($byteword, $signed = \false)
        {
        }
    }
    // End: Defines
    class getID3
    {
        /*
         * Settings
         */
        /**
         * CASE SENSITIVE! - i.e. (must be supported by iconv()). Examples:  ISO-8859-1  UTF-8  UTF-16  UTF-16BE
         *
         * @var string
         */
        public $encoding = 'UTF-8';
        /**
         * Should always be 'ISO-8859-1', but some tags may be written in other encodings such as 'EUC-CN' or 'CP1252'
         *
         * @var string
         */
        public $encoding_id3v1 = 'ISO-8859-1';
        /**
         * ID3v1 should always be 'ISO-8859-1', but some tags may be written in other encodings such as 'Windows-1251' or 'KOI8-R'. If true attempt to detect these encodings, but may return incorrect values for some tags actually in ISO-8859-1 encoding
         *
         * @var bool
         */
        public $encoding_id3v1_autodetect = \false;
        /*
         * Optional tag checks - disable for speed.
         */
        /**
         * Read and process ID3v1 tags
         *
         * @var bool
         */
        public $option_tag_id3v1 = \true;
        /**
         * Read and process ID3v2 tags
         *
         * @var bool
         */
        public $option_tag_id3v2 = \true;
        /**
         * Read and process Lyrics3 tags
         *
         * @var bool
         */
        public $option_tag_lyrics3 = \true;
        /**
         * Read and process APE tags
         *
         * @var bool
         */
        public $option_tag_apetag = \true;
        /**
         * Copy tags to root key 'tags' and encode to $this->encoding
         *
         * @var bool
         */
        public $option_tags_process = \true;
        /**
         * Copy tags to root key 'tags_html' properly translated from various encodings to HTML entities
         *
         * @var bool
         */
        public $option_tags_html = \true;
        /*
         * Optional tag/comment calculations
         */
        /**
         * Calculate additional info such as bitrate, channelmode etc
         *
         * @var bool
         */
        public $option_extra_info = \true;
        /*
         * Optional handling of embedded attachments (e.g. images)
         */
        /**
         * Defaults to true (ATTACHMENTS_INLINE) for backward compatibility
         *
         * @var bool|string
         */
        public $option_save_attachments = \true;
        /*
         * Optional calculations
         */
        /**
         * Get MD5 sum of data part - slow
         *
         * @var bool
         */
        public $option_md5_data = \false;
        /**
         * Use MD5 of source file if availble - only FLAC and OptimFROG
         *
         * @var bool
         */
        public $option_md5_data_source = \false;
        /**
         * Get SHA1 sum of data part - slow
         *
         * @var bool
         */
        public $option_sha1_data = \false;
        /**
         * Check whether file is larger than 2GB and thus not supported by 32-bit PHP (null: auto-detect based on
         * PHP_INT_MAX)
         *
         * @var bool|null
         */
        public $option_max_2gb_check;
        /**
         * Read buffer size in bytes
         *
         * @var int
         */
        public $option_fread_buffer_size = 32768;
        // module-specific options
        /** archive.rar
         * if true use PHP RarArchive extension, if false (non-extension parsing not yet written in getID3)
         *
         * @var bool
         */
        public $options_archive_rar_use_php_rar_extension = \true;
        /** archive.gzip
         * Optional file list - disable for speed.
         * Decode gzipped files, if possible, and parse recursively (.tar.gz for example).
         *
         * @var bool
         */
        public $options_archive_gzip_parse_contents = \false;
        /** audio.midi
         * if false only parse most basic information, much faster for some files but may be inaccurate
         *
         * @var bool
         */
        public $options_audio_midi_scanwholefile = \true;
        /** audio.mp3
         * Forces getID3() to scan the file byte-by-byte and log all the valid audio frame headers - extremely slow,
         * unrecommended, but may provide data from otherwise-unusable files.
         *
         * @var bool
         */
        public $options_audio_mp3_allow_bruteforce = \false;
        /** audio.mp3
         * number of frames to scan to determine if MPEG-audio sequence is valid
         * Lower this number to 5-20 for faster scanning
         * Increase this number to 50+ for most accurate detection of valid VBR/CBR mpeg-audio streams
         *
         * @var int
         */
        public $options_audio_mp3_mp3_valid_check_frames = 50;
        /** audio.wavpack
         * Avoid scanning all frames (break after finding ID_RIFF_HEADER and ID_CONFIG_BLOCK,
         * significantly faster for very large files but other data may be missed
         *
         * @var bool
         */
        public $options_audio_wavpack_quick_parsing = \false;
        /** audio-video.flv
         * Break out of the loop if too many frames have been scanned; only scan this
         * many if meta frame does not contain useful duration.
         *
         * @var int
         */
        public $options_audiovideo_flv_max_frames = 100000;
        /** audio-video.matroska
         * If true, do not return information about CLUSTER chunks, since there's a lot of them
         * and they're not usually useful [default: TRUE].
         *
         * @var bool
         */
        public $options_audiovideo_matroska_hide_clusters = \true;
        /** audio-video.matroska
         * True to parse the whole file, not only header [default: FALSE].
         *
         * @var bool
         */
        public $options_audiovideo_matroska_parse_whole_file = \false;
        /** audio-video.quicktime
         * return all parsed data from all atoms if true, otherwise just returned parsed metadata
         *
         * @var bool
         */
        public $options_audiovideo_quicktime_ReturnAtomData = \false;
        /** audio-video.quicktime
         * return all parsed data from all atoms if true, otherwise just returned parsed metadata
         *
         * @var bool
         */
        public $options_audiovideo_quicktime_ParseAllPossibleAtoms = \false;
        /** audio-video.swf
         * return all parsed tags if true, otherwise do not return tags not parsed by getID3
         *
         * @var bool
         */
        public $options_audiovideo_swf_ReturnAllTagData = \false;
        /** graphic.bmp
         * return BMP palette
         *
         * @var bool
         */
        public $options_graphic_bmp_ExtractPalette = \false;
        /** graphic.bmp
         * return image data
         *
         * @var bool
         */
        public $options_graphic_bmp_ExtractData = \false;
        /** graphic.png
         * If data chunk is larger than this do not read it completely (getID3 only needs the first
         * few dozen bytes for parsing).
         *
         * @var int
         */
        public $options_graphic_png_max_data_bytes = 10000000;
        /** misc.pdf
         * return full details of PDF Cross-Reference Table (XREF)
         *
         * @var bool
         */
        public $options_misc_pdf_returnXREF = \false;
        /** misc.torrent
         * Assume all .torrent files are less than 1MB and just read entire thing into memory for easy processing.
         * Override this value if you need to process files larger than 1MB
         *
         * @var int
         */
        public $options_misc_torrent_max_torrent_filesize = 1048576;
        // Public variables
        /**
         * Filename of file being analysed.
         *
         * @var string
         */
        public $filename;
        /**
         * Filepointer to file being analysed.
         *
         * @var resource
         */
        public $fp;
        /**
         * Result array.
         *
         * @var array
         */
        public $info;
        /**
         * @var string
         */
        public $tempdir = \GETID3_TEMP_DIR;
        /**
         * @var int
         */
        public $memory_limit = 0;
        /**
         * @var string
         */
        protected $startup_error = '';
        /**
         * @var string
         */
        protected $startup_warning = '';
        const VERSION = '1.9.21-202109171300';
        const FREAD_BUFFER_SIZE = 32768;
        const ATTACHMENTS_NONE = \false;
        const ATTACHMENTS_INLINE = \true;
        public function __construct()
        {
        }
        /**
         * @return string
         */
        public function version()
        {
        }
        /**
         * @return int
         */
        public function fread_buffer_size()
        {
        }
        /**
         * @param array $optArray
         *
         * @return bool
         */
        public function setOption($optArray)
        {
        }
        /**
         * @param string   $filename
         * @param int      $filesize
         * @param resource $fp
         *
         * @return bool
         *
         * @throws getid3_exception
         */
        public function openfile($filename, $filesize = \null, $fp = \null)
        {
        }
        /**
         * analyze file
         *
         * @param string   $filename
         * @param int      $filesize
         * @param string   $original_filename
         * @param resource $fp
         *
         * @return array
         */
        public function analyze($filename, $filesize = \null, $original_filename = '', $fp = \null)
        {
        }
        /**
         * Error handling.
         *
         * @param string $message
         *
         * @return array
         */
        public function error($message)
        {
        }
        /**
         * Warning handling.
         *
         * @param string $message
         *
         * @return bool
         */
        public function warning($message)
        {
        }
        /**
         * @return bool
         */
        private function CleanUp()
        {
        }
        /**
         * Return array containing information about all supported formats.
         *
         * @return array
         */
        public function GetFileFormatArray()
        {
        }
        /**
         * @param string $filedata
         * @param string $filename
         *
         * @return mixed|false
         */
        public function GetFileFormat(&$filedata, $filename = '')
        {
        }
        /**
         * Converts array to $encoding charset from $this->encoding.
         *
         * @param array  $array
         * @param string $encoding
         */
        public function CharConvert(&$array, $encoding)
        {
        }
        /**
         * @return bool
         */
        public function HandleAllTags()
        {
        }
        /**
         * Calls getid3_lib::CopyTagsToComments() but passes in the option_tags_html setting from this instance of getID3
         *
         * @param array $ThisFileInfo
         *
         * @return bool
         */
        public function CopyTagsToComments(&$ThisFileInfo)
        {
        }
        /**
         * @param string $algorithm
         *
         * @return array|bool
         */
        public function getHashdata($algorithm)
        {
        }
        public function ChannelsBitratePlaytimeCalculations()
        {
        }
        /**
         * @return bool
         */
        public function CalculateCompressionRatioVideo()
        {
        }
        /**
         * @return bool
         */
        public function CalculateCompressionRatioAudio()
        {
        }
        /**
         * @return bool
         */
        public function CalculateReplayGain()
        {
        }
        /**
         * @return bool
         */
        public function ProcessAudioStreams()
        {
        }
        /**
         * @return string|bool
         */
        public function getid3_tempnam()
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         *
         * @throws getid3_exception
         */
        public function include_module($name)
        {
        }
        /**
         * @param string $filename
         *
         * @return bool
         */
        public static function is_writable($filename)
        {
        }
    }
    class getid3_exception extends \Exception
    {
        public $message;
    }
    class getid3_mp3 extends \getid3_handler
    {
        /**
         * Forces getID3() to scan the file byte-by-byte and log all the valid audio frame headers - extremely slow,
         * unrecommended, but may provide data from otherwise-unusable files.
         *
         * @var bool
         */
        public $allow_bruteforce = \false;
        /**
         * number of frames to scan to determine if MPEG-audio sequence is valid
         * Lower this number to 5-20 for faster scanning
         * Increase this number to 50+ for most accurate detection of valid VBR/CBR mpeg-audio streams
         *
         * @var int
         */
        public $mp3_valid_check_frames = 50;
        /**
         * @return bool
         */
        public function Analyze()
        {
        }
        /**
         * @return string
         */
        public function GuessEncoderOptions()
        {
        }
        /**
         * @param int   $offset
         * @param array $info
         * @param bool  $recursivesearch
         * @param bool  $ScanAsCBR
         * @param bool  $FastMPEGheaderScan
         *
         * @return bool
         */
        public function decodeMPEGaudioHeader($offset, &$info, $recursivesearch = \true, $ScanAsCBR = \false, $FastMPEGheaderScan = \false)
        {
        }
        /**
         * @param int $offset
         * @param int $nextframetestoffset
         * @param bool $ScanAsCBR
         *
         * @return bool
         */
        public function RecursiveFrameScanning(&$offset, &$nextframetestoffset, $ScanAsCBR)
        {
        }
        /**
         * @param int  $offset
         * @param bool $deepscan
         *
         * @return int|false
         */
        public function FreeFormatFrameLength($offset, $deepscan = \false)
        {
        }
        /**
         * @return bool
         */
        public function getOnlyMPEGaudioInfoBruteForce()
        {
        }
        /**
         * @param int  $avdataoffset
         * @param bool $BitrateHistogram
         *
         * @return bool
         */
        public function getOnlyMPEGaudioInfo($avdataoffset, $BitrateHistogram = \false)
        {
        }
        /**
         * @return array
         */
        public static function MPEGaudioVersionArray()
        {
        }
        /**
         * @return array
         */
        public static function MPEGaudioLayerArray()
        {
        }
        /**
         * @return array
         */
        public static function MPEGaudioBitrateArray()
        {
        }
        /**
         * @return array
         */
        public static function MPEGaudioFrequencyArray()
        {
        }
        /**
         * @return array
         */
        public static function MPEGaudioChannelModeArray()
        {
        }
        /**
         * @return array
         */
        public static function MPEGaudioModeExtensionArray()
        {
        }
        /**
         * @return array
         */
        public static function MPEGaudioEmphasisArray()
        {
        }
        /**
         * @param string $head4
         * @param bool   $allowBitrate15
         *
         * @return bool
         */
        public static function MPEGaudioHeaderBytesValid($head4, $allowBitrate15 = \false)
        {
        }
        /**
         * @param array $rawarray
         * @param bool  $echoerrors
         * @param bool  $allowBitrate15
         *
         * @return bool
         */
        public static function MPEGaudioHeaderValid($rawarray, $echoerrors = \false, $allowBitrate15 = \false)
        {
        }
        /**
         * @param string $Header4Bytes
         *
         * @return array|false
         */
        public static function MPEGaudioHeaderDecode($Header4Bytes)
        {
        }
        /**
         * @param int|string $bitrate
         * @param string     $version
         * @param string     $layer
         * @param bool       $padding
         * @param int        $samplerate
         *
         * @return int|false
         */
        public static function MPEGaudioFrameLength(&$bitrate, &$version, &$layer, $padding, &$samplerate)
        {
        }
        /**
         * @param float|int $bit_rate
         *
         * @return int|float|string
         */
        public static function ClosestStandardMP3Bitrate($bit_rate)
        {
        }
        /**
         * @param string $version
         * @param string $channelmode
         *
         * @return int
         */
        public static function XingVBRidOffset($version, $channelmode)
        {
        }
        /**
         * @param int $VBRmethodID
         *
         * @return string
         */
        public static function LAMEvbrMethodLookup($VBRmethodID)
        {
        }
        /**
         * @param int $StereoModeID
         *
         * @return string
         */
        public static function LAMEmiscStereoModeLookup($StereoModeID)
        {
        }
        /**
         * @param int $SourceSampleFrequencyID
         *
         * @return string
         */
        public static function LAMEmiscSourceSampleFrequencyLookup($SourceSampleFrequencyID)
        {
        }
        /**
         * @param int $SurroundInfoID
         *
         * @return string
         */
        public static function LAMEsurroundInfoLookup($SurroundInfoID)
        {
        }
        /**
         * @param array $LAMEtag
         *
         * @return string
         */
        public static function LAMEpresetUsedLookup($LAMEtag)
        {
        }
    }
    class getid3_lyrics3 extends \getid3_handler
    {
        /**
         * @return bool
         */
        public function Analyze()
        {
        }
        /**
         * @param int $endoffset
         * @param int $version
         * @param int $length
         *
         * @return bool
         */
        public function getLyrics3Data($endoffset, $version, $length)
        {
        }
        /**
         * @param string $rawtimestamp
         *
         * @return int|false
         */
        public function Lyrics3Timestamp2Seconds($rawtimestamp)
        {
        }
        /**
         * @param array $Lyrics3data
         *
         * @return bool
         */
        public function Lyrics3LyricsTimestampParse(&$Lyrics3data)
        {
        }
        /**
         * @param string $char
         *
         * @return bool|null
         */
        public function IntString2Bool($char)
        {
        }
    }
    class getid3_asf extends \getid3_handler
    {
        /**
         * @param getID3 $getid3
         */
        public function __construct(\getID3 $getid3)
        {
        }
        /**
         * @return bool
         */
        public function Analyze()
        {
        }
        /**
         * @param int $CodecListType
         *
         * @return string
         */
        public static function codecListObjectTypeLookup($CodecListType)
        {
        }
        /**
         * @return array
         */
        public static function KnownGUIDs()
        {
        }
        /**
         * @param string $GUIDstring
         *
         * @return string|false
         */
        public static function GUIDname($GUIDstring)
        {
        }
        /**
         * @param int $id
         *
         * @return string
         */
        public static function ASFIndexObjectIndexTypeLookup($id)
        {
        }
        /**
         * @param string $GUIDstring
         *
         * @return string
         */
        public static function GUIDtoBytestring($GUIDstring)
        {
        }
        /**
         * @param string $Bytestring
         *
         * @return string
         */
        public static function BytestringToGUID($Bytestring)
        {
        }
        /**
         * @param int  $FILETIME
         * @param bool $round
         *
         * @return float|int
         */
        public static function FILETIMEtoUNIXtime($FILETIME, $round = \true)
        {
        }
        /**
         * @param int $WMpictureType
         *
         * @return string
         */
        public static function WMpictureTypeLookup($WMpictureType)
        {
        }
        /**
         * @param string $asf_header_extension_object_data
         * @param int    $unhandled_sections
         *
         * @return array
         */
        public function HeaderExtensionObjectDataParse(&$asf_header_extension_object_data, &$unhandled_sections)
        {
        }
        /**
         * @param int $id
         *
         * @return string
         */
        public static function metadataLibraryObjectDataTypeLookup($id)
        {
        }
        /**
         * @param string $data
         *
         * @return array
         */
        public function ASF_WMpicture(&$data)
        {
        }
        /**
         * Remove terminator 00 00 and convert UTF-16LE to Latin-1.
         *
         * @param string $string
         *
         * @return string
         */
        public static function TrimConvert($string)
        {
        }
        /**
         * Remove terminator 00 00.
         *
         * @param string $string
         *
         * @return string
         */
        public static function TrimTerm($string)
        {
        }
    }
    /**
    * @tutorial http://wiki.multimedia.cx/index.php?title=DTS
    */
    class getid3_dts extends \getid3_handler
    {
        /**
         * Default DTS syncword used in native .cpt or .dts formats.
         */
        const syncword = "\xfe\x80\x01";
        /**
         * @var int
         */
        private $readBinDataOffset = 0;
        /**
         * Possible syncwords indicating bitstream encoding.
         */
        public static $syncwords = array(
            0 => "\xfe\x80\x01",
            // raw big-endian
            1 => "\xfe\x01\x80",
            // raw little-endian
            2 => "\x1f\xff\xe8\x00",
            // 14-bit big-endian
            3 => "\xff\x1f\x00\xe8",
        );
        // 14-bit little-endian
        /**
         * @return bool
         */
        public function Analyze()
        {
        }
        /**
         * @param string $bin
         * @param int $length
         *
         * @return int
         */
        private function readBinData($bin, $length)
        {
        }
        /**
         * @param int $index
         *
         * @return int|string|false
         */
        public static function bitrateLookup($index)
        {
        }
        /**
         * @param int $index
         *
         * @return int|string|false
         */
        public static function sampleRateLookup($index)
        {
        }
        /**
         * @param int $index
         *
         * @return int|false
         */
        public static function bitPerSampleLookup($index)
        {
        }
        /**
         * @param int $index
         *
         * @return int|false
         */
        public static function numChannelsLookup($index)
        {
        }
        /**
         * @param int $index
         *
         * @return string
         */
        public static function channelArrangementLookup($index)
        {
        }
        /**
         * @param int $index
         * @param int $version
         *
         * @return int|false
         */
        public static function dialogNormalization($index, $version)
        {
        }
    }
    class getid3_apetag extends \getid3_handler
    {
        /**
         * true: return full data for all attachments;
         * false: return no data for all attachments;
         * integer: return data for attachments <= than this;
         * string: save as file to this directory.
         *
         * @var int|bool|string
         */
        public $inline_attachments = \true;
        public $overrideendoffset = 0;
        /**
         * @return bool
         */
        public function Analyze()
        {
        }
        /**
         * @param string $APEheaderFooterData
         *
         * @return array|false
         */
        public function parseAPEheaderFooter($APEheaderFooterData)
        {
        }
        /**
         * @param int $rawflagint
         *
         * @return array
         */
        public function parseAPEtagFlags($rawflagint)
        {
        }
        /**
         * @param int $contenttypeid
         *
         * @return string
         */
        public function APEcontentTypeFlagLookup($contenttypeid)
        {
        }
        /**
         * @param string $itemkey
         *
         * @return bool
         */
        public function APEtagItemIsUTF8Lookup($itemkey)
        {
        }
    }
    /////////////////////////////////////////////////////////////////
    /// getID3() by James Heinrich <info@getid3.org>               //
    //  available at https://github.com/JamesHeinrich/getID3       //
    //            or https://www.getid3.org                        //
    //            or http://getid3.sourceforge.net                 //
    //                                                             //
    // getid3.lib.php - part of getID3()                           //
    //  see readme.txt for more details                            //
    //                                                            ///
    /////////////////////////////////////////////////////////////////
    class getid3_lib
    {
        /**
         * @param string      $string
         * @param bool        $hex
         * @param bool        $spaces
         * @param string|bool $htmlencoding
         *
         * @return string
         */
        public static function PrintHexBytes($string, $hex = \true, $spaces = \true, $htmlencoding = 'UTF-8')
        {
        }
        /**
         * Truncates a floating-point number at the decimal point.
         *
         * @param float $floatnumber
         *
         * @return float|int returns int (if possible, otherwise float)
         */
        public static function trunc($floatnumber)
        {
        }
        /**
         * @param int|null $variable
         * @param int      $increment
         *
         * @return bool
         */
        public static function safe_inc(&$variable, $increment = 1)
        {
        }
        /**
         * @param int|float $floatnum
         *
         * @return int|float
         */
        public static function CastAsInt($floatnum)
        {
        }
        /**
         * @param int $num
         *
         * @return bool
         */
        public static function intValueSupported($num)
        {
        }
        /**
         * @param string $fraction
         *
         * @return float
         */
        public static function DecimalizeFraction($fraction)
        {
        }
        /**
         * @param string $binarynumerator
         *
         * @return float
         */
        public static function DecimalBinary2Float($binarynumerator)
        {
        }
        /**
         * @link http://www.scri.fsu.edu/~jac/MAD3401/Backgrnd/binary.html
         *
         * @param string $binarypointnumber
         * @param int    $maxbits
         *
         * @return array
         */
        public static function NormalizeBinaryPoint($binarypointnumber, $maxbits = 52)
        {
        }
        /**
         * @link http://www.scri.fsu.edu/~jac/MAD3401/Backgrnd/binary.html
         *
         * @param float $floatvalue
         *
         * @return string
         */
        public static function Float2BinaryDecimal($floatvalue)
        {
        }
        /**
         * @link http://www.scri.fsu.edu/~jac/MAD3401/Backgrnd/ieee-expl.html
         *
         * @param float $floatvalue
         * @param int $bits
         *
         * @return string|false
         */
        public static function Float2String($floatvalue, $bits)
        {
        }
        /**
         * @param string $byteword
         *
         * @return float|false
         */
        public static function LittleEndian2Float($byteword)
        {
        }
        /**
         * ANSI/IEEE Standard 754-1985, Standard for Binary Floating Point Arithmetic
         *
         * @link https://web.archive.org/web/20120325162206/http://www.psc.edu/general/software/packages/ieee/ieee.php
         * @link http://www.scri.fsu.edu/~jac/MAD3401/Backgrnd/ieee.html
         *
         * @param string $byteword
         *
         * @return float|false
         */
        public static function BigEndian2Float($byteword)
        {
        }
        /**
         * @param string $byteword
         * @param bool   $synchsafe
         * @param bool   $signed
         *
         * @return int|float|false
         * @throws Exception
         */
        public static function BigEndian2Int($byteword, $synchsafe = \false, $signed = \false)
        {
        }
        /**
         * @param string $byteword
         * @param bool   $signed
         *
         * @return int|float|false
         */
        public static function LittleEndian2Int($byteword, $signed = \false)
        {
        }
        /**
         * @param string $byteword
         *
         * @return string
         */
        public static function LittleEndian2Bin($byteword)
        {
        }
        /**
         * @param string $byteword
         *
         * @return string
         */
        public static function BigEndian2Bin($byteword)
        {
        }
        /**
         * @param int  $number
         * @param int  $minbytes
         * @param bool $synchsafe
         * @param bool $signed
         *
         * @return string
         * @throws Exception
         */
        public static function BigEndian2String($number, $minbytes = 1, $synchsafe = \false, $signed = \false)
        {
        }
        /**
         * @param int $number
         *
         * @return string
         */
        public static function Dec2Bin($number)
        {
        }
        /**
         * @param string $binstring
         * @param bool   $signed
         *
         * @return int|float
         */
        public static function Bin2Dec($binstring, $signed = \false)
        {
        }
        /**
         * @param string $binstring
         *
         * @return string
         */
        public static function Bin2String($binstring)
        {
        }
        /**
         * @param int  $number
         * @param int  $minbytes
         * @param bool $synchsafe
         *
         * @return string
         */
        public static function LittleEndian2String($number, $minbytes = 1, $synchsafe = \false)
        {
        }
        /**
         * @param mixed $array1
         * @param mixed $array2
         *
         * @return array|false
         */
        public static function array_merge_clobber($array1, $array2)
        {
        }
        /**
         * @param mixed $array1
         * @param mixed $array2
         *
         * @return array|false
         */
        public static function array_merge_noclobber($array1, $array2)
        {
        }
        /**
         * @param mixed $array1
         * @param mixed $array2
         *
         * @return array|false|null
         */
        public static function flipped_array_merge_noclobber($array1, $array2)
        {
        }
        /**
         * @param array $theArray
         *
         * @return bool
         */
        public static function ksort_recursive(&$theArray)
        {
        }
        /**
         * @param string $filename
         * @param int    $numextensions
         *
         * @return string
         */
        public static function fileextension($filename, $numextensions = 1)
        {
        }
        /**
         * @param int $seconds
         *
         * @return string
         */
        public static function PlaytimeString($seconds)
        {
        }
        /**
         * @param int $macdate
         *
         * @return int|float
         */
        public static function DateMac2Unix($macdate)
        {
        }
        /**
         * @param string $rawdata
         *
         * @return float
         */
        public static function FixedPoint8_8($rawdata)
        {
        }
        /**
         * @param string $rawdata
         *
         * @return float
         */
        public static function FixedPoint16_16($rawdata)
        {
        }
        /**
         * @param string $rawdata
         *
         * @return float
         */
        public static function FixedPoint2_30($rawdata)
        {
        }
        /**
         * @param string $ArrayPath
         * @param string $Separator
         * @param mixed $Value
         *
         * @return array
         */
        public static function CreateDeepArray($ArrayPath, $Separator, $Value)
        {
        }
        /**
         * @param array $arraydata
         * @param bool  $returnkey
         *
         * @return int|false
         */
        public static function array_max($arraydata, $returnkey = \false)
        {
        }
        /**
         * @param array $arraydata
         * @param bool  $returnkey
         *
         * @return int|false
         */
        public static function array_min($arraydata, $returnkey = \false)
        {
        }
        /**
         * @param string $XMLstring
         *
         * @return array|false
         */
        public static function XML2array($XMLstring)
        {
        }
        /**
         * @param SimpleXMLElement|array|mixed $XMLobject
         *
         * @return mixed
         */
        public static function SimpleXMLelement2array($XMLobject)
        {
        }
        /**
         * Returns checksum for a file from starting position to absolute end position.
         *
         * @param string $file
         * @param int    $offset
         * @param int    $end
         * @param string $algorithm
         *
         * @return string|false
         * @throws getid3_exception
         */
        public static function hash_data($file, $offset, $end, $algorithm)
        {
        }
        /**
         * @param string $filename_source
         * @param string $filename_dest
         * @param int    $offset
         * @param int    $length
         *
         * @return bool
         * @throws Exception
         *
         * @deprecated Unused, may be removed in future versions of getID3
         */
        public static function CopyFileParts($filename_source, $filename_dest, $offset, $length)
        {
        }
        /**
         * @param int $charval
         *
         * @return string
         */
        public static function iconv_fallback_int_utf8($charval)
        {
        }
        /**
         * ISO-8859-1 => UTF-8
         *
         * @param string $string
         * @param bool   $bom
         *
         * @return string
         */
        public static function iconv_fallback_iso88591_utf8($string, $bom = \false)
        {
        }
        /**
         * ISO-8859-1 => UTF-16BE
         *
         * @param string $string
         * @param bool   $bom
         *
         * @return string
         */
        public static function iconv_fallback_iso88591_utf16be($string, $bom = \false)
        {
        }
        /**
         * ISO-8859-1 => UTF-16LE
         *
         * @param string $string
         * @param bool   $bom
         *
         * @return string
         */
        public static function iconv_fallback_iso88591_utf16le($string, $bom = \false)
        {
        }
        /**
         * ISO-8859-1 => UTF-16LE (BOM)
         *
         * @param string $string
         *
         * @return string
         */
        public static function iconv_fallback_iso88591_utf16($string)
        {
        }
        /**
         * UTF-8 => ISO-8859-1
         *
         * @param string $string
         *
         * @return string
         */
        public static function iconv_fallback_utf8_iso88591($string)
        {
        }
        /**
         * UTF-8 => UTF-16BE
         *
         * @param string $string
         * @param bool   $bom
         *
         * @return string
         */
        public static function iconv_fallback_utf8_utf16be($string, $bom = \false)
        {
        }
        /**
         * UTF-8 => UTF-16LE
         *
         * @param string $string
         * @param bool   $bom
         *
         * @return string
         */
        public static function iconv_fallback_utf8_utf16le($string, $bom = \false)
        {
        }
        /**
         * UTF-8 => UTF-16LE (BOM)
         *
         * @param string $string
         *
         * @return string
         */
        public static function iconv_fallback_utf8_utf16($string)
        {
        }
        /**
         * UTF-16BE => UTF-8
         *
         * @param string $string
         *
         * @return string
         */
        public static function iconv_fallback_utf16be_utf8($string)
        {
        }
        /**
         * UTF-16LE => UTF-8
         *
         * @param string $string
         *
         * @return string
         */
        public static function iconv_fallback_utf16le_utf8($string)
        {
        }
        /**
         * UTF-16BE => ISO-8859-1
         *
         * @param string $string
         *
         * @return string
         */
        public static function iconv_fallback_utf16be_iso88591($string)
        {
        }
        /**
         * UTF-16LE => ISO-8859-1
         *
         * @param string $string
         *
         * @return string
         */
        public static function iconv_fallback_utf16le_iso88591($string)
        {
        }
        /**
         * UTF-16 (BOM) => ISO-8859-1
         *
         * @param string $string
         *
         * @return string
         */
        public static function iconv_fallback_utf16_iso88591($string)
        {
        }
        /**
         * UTF-16 (BOM) => UTF-8
         *
         * @param string $string
         *
         * @return string
         */
        public static function iconv_fallback_utf16_utf8($string)
        {
        }
        /**
         * @param string $in_charset
         * @param string $out_charset
         * @param string $string
         *
         * @return string
         * @throws Exception
         */
        public static function iconv_fallback($in_charset, $out_charset, $string)
        {
        }
        /**
         * @param mixed  $data
         * @param string $charset
         *
         * @return mixed
         */
        public static function recursiveMultiByteCharString2HTML($data, $charset = 'ISO-8859-1')
        {
        }
        /**
         * @param string|int|float $string
         * @param string           $charset
         *
         * @return string
         */
        public static function MultiByteCharString2HTML($string, $charset = 'ISO-8859-1')
        {
        }
        /**
         * @param int $namecode
         *
         * @return string
         */
        public static function RGADnameLookup($namecode)
        {
        }
        /**
         * @param int $originatorcode
         *
         * @return string
         */
        public static function RGADoriginatorLookup($originatorcode)
        {
        }
        /**
         * @param int $rawadjustment
         * @param int $signbit
         *
         * @return float
         */
        public static function RGADadjustmentLookup($rawadjustment, $signbit)
        {
        }
        /**
         * @param int $namecode
         * @param int $originatorcode
         * @param int $replaygain
         *
         * @return string
         */
        public static function RGADgainString($namecode, $originatorcode, $replaygain)
        {
        }
        /**
         * @param float $amplitude
         *
         * @return float
         */
        public static function RGADamplitude2dB($amplitude)
        {
        }
        /**
         * @param string $imgData
         * @param array  $imageinfo
         *
         * @return array|false
         */
        public static function GetDataImageSize($imgData, &$imageinfo = array())
        {
        }
        /**
         * @param string $mime_type
         *
         * @return string
         */
        public static function ImageExtFromMime($mime_type)
        {
        }
        /**
         * @param array $ThisFileInfo
         * @param bool  $option_tags_html default true (just as in the main getID3 class)
         *
         * @return bool
         */
        public static function CopyTagsToComments(&$ThisFileInfo, $option_tags_html = \true)
        {
        }
        /**
         * @param string $key
         * @param int    $begin
         * @param int    $end
         * @param string $file
         * @param string $name
         *
         * @return string
         */
        public static function EmbeddedLookup($key, $begin, $end, $file, $name)
        {
        }
        /**
         * @param string $filename
         * @param string $sourcefile
         * @param bool   $DieOnFailure
         *
         * @return bool
         * @throws Exception
         */
        public static function IncludeDependency($filename, $sourcefile, $DieOnFailure = \false)
        {
        }
        /**
         * @param string $string
         *
         * @return string
         */
        public static function trimNullByte($string)
        {
        }
        /**
         * @param string $path
         *
         * @return float|bool
         */
        public static function getFileSizeSyscall($path)
        {
        }
        /**
         * @param string $filename
         *
         * @return string|false
         */
        public static function truepath($filename)
        {
        }
        /**
         * Workaround for Bug #37268 (https://bugs.php.net/bug.php?id=37268)
         *
         * @param string $path A path.
         * @param string $suffix If the name component ends in suffix this will also be cut off.
         *
         * @return string
         */
        public static function mb_basename($path, $suffix = '')
        {
        }
    }
    class getid3_flv extends \getid3_handler
    {
        const magic = 'FLV';
        /**
         * Break out of the loop if too many frames have been scanned; only scan this
         * many if meta frame does not contain useful duration.
         *
         * @var int
         */
        public $max_frames = 100000;
        /**
         * @return bool
         */
        public function Analyze()
        {
        }
        /**
         * @param int $id
         *
         * @return string|false
         */
        public static function audioFormatLookup($id)
        {
        }
        /**
         * @param int $id
         *
         * @return int|false
         */
        public static function audioRateLookup($id)
        {
        }
        /**
         * @param int $id
         *
         * @return int|false
         */
        public static function audioBitDepthLookup($id)
        {
        }
        /**
         * @param int $id
         *
         * @return string|false
         */
        public static function videoCodecLookup($id)
        {
        }
    }
    class AMFStream
    {
        /**
         * @var string
         */
        public $bytes;
        /**
         * @var int
         */
        public $pos;
        /**
         * @param string $bytes
         */
        public function __construct(&$bytes)
        {
        }
        /**
         * @return int
         */
        public function readByte()
        {
        }
        /**
         * @return int
         */
        public function readInt()
        {
        }
        /**
         * @return int
         */
        public function readLong()
        {
        }
        /**
         * @return float|false
         */
        public function readDouble()
        {
        }
        /**
         * @return string
         */
        public function readUTF()
        {
        }
        /**
         * @return string
         */
        public function readLongUTF()
        {
        }
        /**
         * @param int $length
         *
         * @return string
         */
        public function read($length)
        {
        }
        /**
         * @return int
         */
        public function peekByte()
        {
        }
        /**
         * @return int
         */
        public function peekInt()
        {
        }
        /**
         * @return int
         */
        public function peekLong()
        {
        }
        /**
         * @return float|false
         */
        public function peekDouble()
        {
        }
        /**
         * @return string
         */
        public function peekUTF()
        {
        }
        /**
         * @return string
         */
        public function peekLongUTF()
        {
        }
    }
    class AMFReader
    {
        /**
         * @var AMFStream
         */
        public $stream;
        /**
         * @param AMFStream $stream
         */
        public function __construct(\AMFStream $stream)
        {
        }
        /**
         * @return mixed
         */
        public function readData()
        {
        }
        /**
         * @return float|false
         */
        public function readDouble()
        {
        }
        /**
         * @return bool
         */
        public function readBoolean()
        {
        }
        /**
         * @return string
         */
        public function readString()
        {
        }
        /**
         * @return array
         */
        public function readObject()
        {
        }
        /**
         * @return array
         */
        public function readMixedArray()
        {
        }
        /**
         * @return array
         */
        public function readArray()
        {
        }
        /**
         * @return float|false
         */
        public function readDate()
        {
        }
        /**
         * @return string
         */
        public function readLongString()
        {
        }
        /**
         * @return string
         */
        public function readXML()
        {
        }
        /**
         * @return array
         */
        public function readTypedObject()
        {
        }
    }
    class AVCSequenceParameterSetReader
    {
        /**
         * @var string
         */
        public $sps;
        public $start = 0;
        public $currentBytes = 0;
        public $currentBits = 0;
        /**
         * @var int
         */
        public $width;
        /**
         * @var int
         */
        public $height;
        /**
         * @param string $sps
         */
        public function __construct($sps)
        {
        }
        public function readData()
        {
        }
        /**
         * @param int $bits
         */
        public function skipBits($bits)
        {
        }
        /**
         * @return int
         */
        public function getBit()
        {
        }
        /**
         * @param int $bits
         *
         * @return int
         */
        public function getBits($bits)
        {
        }
        /**
         * @return int
         */
        public function expGolombUe()
        {
        }
        /**
         * @return int
         */
        public function expGolombSe()
        {
        }
        /**
         * @return int
         */
        public function getWidth()
        {
        }
        /**
         * @return int
         */
        public function getHeight()
        {
        }
    }
    class getid3_id3v2 extends \getid3_handler
    {
        public $StartingOffset = 0;
        /**
         * @return bool
         */
        public function Analyze()
        {
        }
        /**
         * @param string $genrestring
         *
         * @return array
         */
        public function ParseID3v2GenreString($genrestring)
        {
        }
        /**
         * @param array $parsedFrame
         *
         * @return bool
         */
        public function ParseID3v2Frame(&$parsedFrame)
        {
        }
        /**
         * @param string $data
         *
         * @return string
         */
        public function DeUnsynchronise($data)
        {
        }
        /**
         * @param int $index
         *
         * @return string
         */
        public function LookupExtendedHeaderRestrictionsTagSizeLimits($index)
        {
        }
        /**
         * @param int $index
         *
         * @return string
         */
        public function LookupExtendedHeaderRestrictionsTextEncodings($index)
        {
        }
        /**
         * @param int $index
         *
         * @return string
         */
        public function LookupExtendedHeaderRestrictionsTextFieldSize($index)
        {
        }
        /**
         * @param int $index
         *
         * @return string
         */
        public function LookupExtendedHeaderRestrictionsImageEncoding($index)
        {
        }
        /**
         * @param int $index
         *
         * @return string
         */
        public function LookupExtendedHeaderRestrictionsImageSizeSize($index)
        {
        }
        /**
         * @param string $currencyid
         *
         * @return string
         */
        public function LookupCurrencyUnits($currencyid)
        {
        }
        /**
         * @param string $currencyid
         *
         * @return string
         */
        public function LookupCurrencyCountry($currencyid)
        {
        }
        /**
         * @param string $languagecode
         * @param bool   $casesensitive
         *
         * @return string
         */
        public static function LanguageLookup($languagecode, $casesensitive = \false)
        {
        }
        /**
         * @param int $index
         *
         * @return string
         */
        public static function ETCOEventLookup($index)
        {
        }
        /**
         * @param int $index
         *
         * @return string
         */
        public static function SYTLContentTypeLookup($index)
        {
        }
        /**
         * @param int   $index
         * @param bool $returnarray
         *
         * @return array|string
         */
        public static function APICPictureTypeLookup($index, $returnarray = \false)
        {
        }
        /**
         * @param int $index
         *
         * @return string
         */
        public static function COMRReceivedAsLookup($index)
        {
        }
        /**
         * @param int $index
         *
         * @return string
         */
        public static function RVA2ChannelTypeLookup($index)
        {
        }
        /**
         * @param string $framename
         *
         * @return string
         */
        public static function FrameNameLongLookup($framename)
        {
        }
        /**
         * @param string $framename
         *
         * @return string
         */
        public static function FrameNameShortLookup($framename)
        {
        }
        /**
         * @param string $encoding
         *
         * @return string
         */
        public static function TextEncodingTerminatorLookup($encoding)
        {
        }
        /**
         * @param int $encoding
         *
         * @return string
         */
        public static function TextEncodingNameLookup($encoding)
        {
        }
        /**
         * @param string $string
         * @param string $terminator
         *
         * @return string
         */
        public static function RemoveStringTerminator($string, $terminator)
        {
        }
        /**
         * @param string $string
         *
         * @return string
         */
        public static function MakeUTF16emptyStringEmpty($string)
        {
        }
        /**
         * @param string $framename
         * @param int    $id3v2majorversion
         *
         * @return bool|int
         */
        public static function IsValidID3v2FrameName($framename, $id3v2majorversion)
        {
        }
        /**
         * @param string $numberstring
         * @param bool   $allowdecimal
         * @param bool   $allownegative
         *
         * @return bool
         */
        public static function IsANumber($numberstring, $allowdecimal = \false, $allownegative = \false)
        {
        }
        /**
         * @param string $datestamp
         *
         * @return bool
         */
        public static function IsValidDateStampString($datestamp)
        {
        }
        /**
         * @param int $majorversion
         *
         * @return int
         */
        public static function ID3v2HeaderLength($majorversion)
        {
        }
        /**
         * @param string $frame_name
         *
         * @return string|false
         */
        public static function ID3v22iTunesBrokenFrameName($frame_name)
        {
        }
    }
    class getid3_ogg extends \getid3_handler
    {
        /**
         * @link http://xiph.org/vorbis/doc/Vorbis_I_spec.html
         *
         * @return bool
         */
        public function Analyze()
        {
        }
        /**
         * @param string $filedata
         * @param int    $filedataoffset
         * @param array  $oggpageinfo
         *
         * @return bool
         */
        public function ParseVorbisPageHeader(&$filedata, &$filedataoffset, &$oggpageinfo)
        {
        }
        /**
         * @link http://tools.ietf.org/html/draft-ietf-codec-oggopus-03
         *
         * @param string $filedata
         * @param int    $filedataoffset
         * @param array  $oggpageinfo
         *
         * @return bool
         */
        public function ParseOpusPageHeader(&$filedata, &$filedataoffset, &$oggpageinfo)
        {
        }
        /**
         * @return array|false
         */
        public function ParseOggPageHeader()
        {
        }
        /**
         * @link http://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-810005
         *
         * @return bool
         */
        public function ParseVorbisComments()
        {
        }
        /**
         * @param int $mode
         *
         * @return string|null
         */
        public static function SpeexBandModeLookup($mode)
        {
        }
        /**
         * @param array $OggInfoArray
         * @param int   $SegmentNumber
         *
         * @return int
         */
        public static function OggPageSegmentLength($OggInfoArray, $SegmentNumber = 1)
        {
        }
        /**
         * @param int $nominal_bitrate
         *
         * @return float
         */
        public static function get_quality_from_nominal_bitrate($nominal_bitrate)
        {
        }
        /**
         * @param int $colorspace_id
         *
         * @return string|null
         */
        public static function TheoraColorSpace($colorspace_id)
        {
        }
        /**
         * @param int $pixelformat_id
         *
         * @return string|null
         */
        public static function TheoraPixelFormat($pixelformat_id)
        {
        }
    }
    /**
     * Event dispatcher
     *
     * @package Requests
     * @subpackage Utilities
     */
    /**
     * Event dispatcher
     *
     * @package Requests
     * @subpackage Utilities
     */
    interface Requests_Hooker
    {
        /**
         * Register a callback for a hook
         *
         * @param string $hook Hook name
         * @param callback $callback Function/method to call on event
         * @param int $priority Priority number. <0 is executed earlier, >0 is executed later
         */
        public function register($hook, $callback, $priority = 0);
        /**
         * Dispatch a message
         *
         * @param string $hook Hook name
         * @param array $parameters Parameters to pass to callbacks
         * @return boolean Successfulness
         */
        public function dispatch($hook, $parameters = array());
    }
    /**
     * Handles adding and dispatching events
     *
     * @package Requests
     * @subpackage Utilities
     */
    /**
     * Handles adding and dispatching events
     *
     * @package Requests
     * @subpackage Utilities
     */
    class Requests_Hooks implements \Requests_Hooker
    {
        /**
         * Registered callbacks for each hook
         *
         * @var array
         */
        protected $hooks = array();
        /**
         * Constructor
         */
        public function __construct()
        {
        }
        /**
         * Register a callback for a hook
         *
         * @param string $hook Hook name
         * @param callback $callback Function/method to call on event
         * @param int $priority Priority number. <0 is executed earlier, >0 is executed later
         */
        public function register($hook, $callback, $priority = 0)
        {
        }
        /**
         * Dispatch a message
         *
         * @param string $hook Hook name
         * @param array $parameters Parameters to pass to callbacks
         * @return boolean Successfulness
         */
        public function dispatch($hook, $parameters = array())
        {
        }
    }
    /**
     * HTTP API: Requests hook bridge class
     *
     * @package WordPress
     * @subpackage HTTP
     * @since 4.7.0
     */
    /**
     * Bridge to connect Requests internal hooks to WordPress actions.
     *
     * @since 4.7.0
     *
     * @see Requests_Hooks
     */
    class WP_HTTP_Requests_Hooks extends \Requests_Hooks
    {
        /**
         * Requested URL.
         *
         * @var string Requested URL.
         */
        protected $url;
        /**
         * WordPress WP_HTTP request data.
         *
         * @var array Request data in WP_Http format.
         */
        protected $request = array();
        /**
         * Constructor.
         *
         * @param string $url     URL to request.
         * @param array  $request Request data in WP_Http format.
         */
        public function __construct($url, $request)
        {
        }
        /**
         * Dispatch a Requests hook to a native WordPress action.
         *
         * @param string $hook       Hook name.
         * @param array  $parameters Parameters to pass to callbacks.
         * @return bool True if hooks were run, false if nothing was hooked.
         */
        public function dispatch($hook, $parameters = array())
        {
        }
    }
    /**
     * Blocks API: WP_Block_Type_Registry class
     *
     * @package WordPress
     * @subpackage Blocks
     * @since 5.0.0
     */
    /**
     * Core class used for interacting with block types.
     *
     * @since 5.0.0
     */
    final class WP_Block_Type_Registry
    {
        /**
         * Registered block types, as `$name => $instance` pairs.
         *
         * @since 5.0.0
         * @var WP_Block_Type[]
         */
        private $registered_block_types = array();
        /**
         * Container for the main instance of the class.
         *
         * @since 5.0.0
         * @var WP_Block_Type_Registry|null
         */
        private static $instance = \null;
        /**
         * Registers a block type.
         *
         * @since 5.0.0
         *
         * @see WP_Block_Type::__construct()
         *
         * @param string|WP_Block_Type $name Block type name including namespace, or alternatively
         *                                   a complete WP_Block_Type instance. In case a WP_Block_Type
         *                                   is provided, the $args parameter will be ignored.
         * @param array                $args Optional. Array of block type arguments. Accepts any public property
         *                                   of `WP_Block_Type`. See WP_Block_Type::__construct() for information
         *                                   on accepted arguments. Default empty array.
         * @return WP_Block_Type|false The registered block type on success, or false on failure.
         */
        public function register($name, $args = array())
        {
        }
        /**
         * Unregisters a block type.
         *
         * @since 5.0.0
         *
         * @param string|WP_Block_Type $name Block type name including namespace, or alternatively
         *                                   a complete WP_Block_Type instance.
         * @return WP_Block_Type|false The unregistered block type on success, or false on failure.
         */
        public function unregister($name)
        {
        }
        /**
         * Retrieves a registered block type.
         *
         * @since 5.0.0
         *
         * @param string $name Block type name including namespace.
         * @return WP_Block_Type|null The registered block type, or null if it is not registered.
         */
        public function get_registered($name)
        {
        }
        /**
         * Retrieves all registered block types.
         *
         * @since 5.0.0
         *
         * @return WP_Block_Type[] Associative array of `$block_type_name => $block_type` pairs.
         */
        public function get_all_registered()
        {
        }
        /**
         * Checks if a block type is registered.
         *
         * @since 5.0.0
         *
         * @param string $name Block type name including namespace.
         * @return bool True if the block type is registered, false otherwise.
         */
        public function is_registered($name)
        {
        }
        /**
         * Utility method to retrieve the main instance of the class.
         *
         * The instance will be created if it does not exist yet.
         *
         * @since 5.0.0
         *
         * @return WP_Block_Type_Registry The main instance.
         */
        public static function get_instance()
        {
        }
    }
    /**
     * Converts to and from JSON format.
     *
     * Brief example of use:
     *
     * <code>
     * // create a new instance of Services_JSON
     * $json = new Services_JSON();
     *
     * // convert a complex value to JSON notation, and send it to the browser
     * $value = array('foo', 'bar', array(1, 2, 'baz'), array(3, array(4)));
     * $output = $json->encode($value);
     *
     * print($output);
     * // prints: ["foo","bar",[1,2,"baz"],[3,[4]]]
     *
     * // accept incoming POST data, assumed to be in JSON notation
     * $input = file_get_contents('php://input', 1000000);
     * $value = $json->decode($input);
     * </code>
     */
    class Services_JSON
    {
        /**
         * constructs a new JSON instance
         *
         * @deprecated 5.3.0 Use the PHP native JSON extension instead.
         *
         * @param    int     $use    object behavior flags; combine with boolean-OR
         *
         *                           possible values:
         *                           - SERVICES_JSON_LOOSE_TYPE:  loose typing.
         *                                   "{...}" syntax creates associative arrays
         *                                   instead of objects in decode().
         *                           - SERVICES_JSON_SUPPRESS_ERRORS:  error suppression.
         *                                   Values which can't be encoded (e.g. resources)
         *                                   appear as NULL instead of throwing errors.
         *                                   By default, a deeply-nested resource will
         *                                   bubble up with an error, so all return values
         *                                   from encode() should be checked with isError()
         *                           - SERVICES_JSON_USE_TO_JSON:  call toJSON when serializing objects
         *                                   It serializes the return value from the toJSON call rather 
         *                                   than the object itself, toJSON can return associative arrays, 
         *                                   strings or numbers, if you return an object, make sure it does
         *                                   not have a toJSON method, otherwise an error will occur.
         */
        function __construct($use = 0)
        {
        }
        /**
         * PHP4 constructor.
         *
         * @deprecated 5.3.0 Use __construct() instead.
         *
         * @see Services_JSON::__construct()
         */
        public function Services_JSON($use = 0)
        {
        }
        // private - cache the mbstring lookup results..
        var $_mb_strlen = \false;
        var $_mb_substr = \false;
        var $_mb_convert_encoding = \false;
        /**
         * convert a string from one UTF-16 char to one UTF-8 char
         *
         * Normally should be handled by mb_convert_encoding, but
         * provides a slower PHP-only method for installations
         * that lack the multibye string extension.
         *
         * @deprecated 5.3.0 Use the PHP native JSON extension instead.
         *
         * @param    string  $utf16  UTF-16 character
         * @return   string  UTF-8 character
         * @access   private
         */
        function utf162utf8($utf16)
        {
        }
        /**
         * convert a string from one UTF-8 char to one UTF-16 char
         *
         * Normally should be handled by mb_convert_encoding, but
         * provides a slower PHP-only method for installations
         * that lack the multibyte string extension.
         *
         * @deprecated 5.3.0 Use the PHP native JSON extension instead.
         *
         * @param    string  $utf8   UTF-8 character
         * @return   string  UTF-16 character
         * @access   private
         */
        function utf82utf16($utf8)
        {
        }
        /**
         * encodes an arbitrary variable into JSON format (and sends JSON Header)
         *
         * @deprecated 5.3.0 Use the PHP native JSON extension instead.
         *
         * @param    mixed   $var    any number, boolean, string, array, or object to be encoded.
         *                           see argument 1 to Services_JSON() above for array-parsing behavior.
         *                           if var is a string, note that encode() always expects it
         *                           to be in ASCII or UTF-8 format!
         *
         * @return   mixed   JSON string representation of input var or an error if a problem occurs
         * @access   public
         */
        function encode($var)
        {
        }
        /**
         * encodes an arbitrary variable into JSON format without JSON Header - warning - may allow XSS!!!!)
         *
         * @deprecated 5.3.0 Use the PHP native JSON extension instead.
         *
         * @param    mixed   $var    any number, boolean, string, array, or object to be encoded.
         *                           see argument 1 to Services_JSON() above for array-parsing behavior.
         *                           if var is a string, note that encode() always expects it
         *                           to be in ASCII or UTF-8 format!
         *
         * @return   mixed   JSON string representation of input var or an error if a problem occurs
         * @access   public
         */
        function encodeUnsafe($var)
        {
        }
        /**
         * PRIVATE CODE that does the work of encodes an arbitrary variable into JSON format 
         *
         * @deprecated 5.3.0 Use the PHP native JSON extension instead.
         *
         * @param    mixed   $var    any number, boolean, string, array, or object to be encoded.
         *                           see argument 1 to Services_JSON() above for array-parsing behavior.
         *                           if var is a string, note that encode() always expects it
         *                           to be in ASCII or UTF-8 format!
         *
         * @return   mixed   JSON string representation of input var or an error if a problem occurs
         * @access   public
         */
        function _encode($var)
        {
        }
        /**
         * array-walking function for use in generating JSON-formatted name-value pairs
         *
         * @deprecated 5.3.0 Use the PHP native JSON extension instead.
         *
         * @param    string  $name   name of key to use
         * @param    mixed   $value  reference to an array element to be encoded
         *
         * @return   string  JSON-formatted name-value pair, like '"name":value'
         * @access   private
         */
        function name_value($name, $value)
        {
        }
        /**
         * reduce a string by removing leading and trailing comments and whitespace
         *
         * @deprecated 5.3.0 Use the PHP native JSON extension instead.
         *
         * @param    $str    string      string value to strip of comments and whitespace
         *
         * @return   string  string value stripped of comments and whitespace
         * @access   private
         */
        function reduce_string($str)
        {
        }
        /**
         * decodes a JSON string into appropriate variable
         *
         * @deprecated 5.3.0 Use the PHP native JSON extension instead.
         *
         * @param    string  $str    JSON-formatted string
         *
         * @return   mixed   number, boolean, string, array, or object
         *                   corresponding to given JSON input string.
         *                   See argument 1 to Services_JSON() above for object-output behavior.
         *                   Note that decode() always returns strings
         *                   in ASCII or UTF-8 format!
         * @access   public
         */
        function decode($str)
        {
        }
        /**
         * @deprecated 5.3.0 Use the PHP native JSON extension instead.
         *
         * @todo Ultimately, this should just call PEAR::isError()
         */
        function isError($data, $code = \null)
        {
        }
        /**
         * Calculates length of string in bytes
         *
         * @deprecated 5.3.0 Use the PHP native JSON extension instead.
         *
         * @param string
         * @return integer length
         */
        function strlen8($str)
        {
        }
        /**
         * Returns part of a string, interpreting $start and $length as number of bytes.
         *
         * @deprecated 5.3.0 Use the PHP native JSON extension instead.
         *
         * @param string
         * @param integer start
         * @param integer length
         * @return integer length
         */
        function substr8($string, $start, $length = \false)
        {
        }
    }
    /**
     * Dependencies API: WP_Styles class
     *
     * @since 2.6.0
     *
     * @package WordPress
     * @subpackage Dependencies
     */
    /**
     * Core class used to register styles.
     *
     * @since 2.6.0
     *
     * @see WP_Dependencies
     */
    class WP_Styles extends \WP_Dependencies
    {
        /**
         * Base URL for styles.
         *
         * Full URL with trailing slash.
         *
         * @since 2.6.0
         * @var string
         */
        public $base_url;
        /**
         * URL of the content directory.
         *
         * @since 2.8.0
         * @var string
         */
        public $content_url;
        /**
         * Default version string for stylesheets.
         *
         * @since 2.6.0
         * @var string
         */
        public $default_version;
        /**
         * The current text direction.
         *
         * @since 2.6.0
         * @var string
         */
        public $text_direction = 'ltr';
        /**
         * Holds a list of style handles which will be concatenated.
         *
         * @since 2.8.0
         * @var string
         */
        public $concat = '';
        /**
         * Holds a string which contains style handles and their version.
         *
         * @since 2.8.0
         * @deprecated 3.4.0
         * @var string
         */
        public $concat_version = '';
        /**
         * Whether to perform concatenation.
         *
         * @since 2.8.0
         * @var bool
         */
        public $do_concat = \false;
        /**
         * Holds HTML markup of styles and additional data if concatenation
         * is enabled.
         *
         * @since 2.8.0
         * @var string
         */
        public $print_html = '';
        /**
         * Holds inline styles if concatenation is enabled.
         *
         * @since 3.3.0
         * @var string
         */
        public $print_code = '';
        /**
         * List of default directories.
         *
         * @since 2.8.0
         * @var array
         */
        public $default_dirs;
        /**
         * Holds a string which contains the type attribute for style tag.
         *
         * If the active theme does not declare HTML5 support for 'style',
         * then it initializes as `type='text/css'`.
         *
         * @since 5.3.0
         * @var string
         */
        private $type_attr = '';
        /**
         * Constructor.
         *
         * @since 2.6.0
         */
        public function __construct()
        {
        }
        /**
         * Processes a style dependency.
         *
         * @since 2.6.0
         * @since 5.5.0 Added the `$group` parameter.
         *
         * @see WP_Dependencies::do_item()
         *
         * @param string    $handle The style's registered handle.
         * @param int|false $group  Optional. Group level: level (int), no groups (false).
         *                          Default false.
         * @return bool True on success, false on failure.
         */
        public function do_item($handle, $group = \false)
        {
        }
        /**
         * Adds extra CSS styles to a registered stylesheet.
         *
         * @since 3.3.0
         *
         * @param string $handle The style's registered handle.
         * @param string $code   String containing the CSS styles to be added.
         * @return bool True on success, false on failure.
         */
        public function add_inline_style($handle, $code)
        {
        }
        /**
         * Prints extra CSS styles of a registered stylesheet.
         *
         * @since 3.3.0
         *
         * @param string $handle  The style's registered handle.
         * @param bool   $display Optional. Whether to print the inline style
         *                        instead of just returning it. Default true.
         * @return string|bool False if no data exists, inline styles if `$display` is true,
         *                     true otherwise.
         */
        public function print_inline_style($handle, $display = \true)
        {
        }
        /**
         * Determines style dependencies.
         *
         * @since 2.6.0
         *
         * @see WP_Dependencies::all_deps()
         *
         * @param string|string[] $handles   Item handle (string) or item handles (array of strings).
         * @param bool            $recursion Optional. Internal flag that function is calling itself.
         *                                   Default false.
         * @param int|false       $group     Optional. Group level: level (int), no groups (false).
         *                                   Default false.
         * @return bool True on success, false on failure.
         */
        public function all_deps($handles, $recursion = \false, $group = \false)
        {
        }
        /**
         * Generates an enqueued style's fully-qualified URL.
         *
         * @since 2.6.0
         *
         * @param string $src    The source of the enqueued style.
         * @param string $ver    The version of the enqueued style.
         * @param string $handle The style's registered handle.
         * @return string Style's fully-qualified URL.
         */
        public function _css_href($src, $ver, $handle)
        {
        }
        /**
         * Whether a handle's source is in a default directory.
         *
         * @since 2.8.0
         *
         * @param string $src The source of the enqueued style.
         * @return bool True if found, false if not.
         */
        public function in_default_dir($src)
        {
        }
        /**
         * Processes items and dependencies for the footer group.
         *
         * HTML 5 allows styles in the body, grab late enqueued items and output them in the footer.
         *
         * @since 3.3.0
         *
         * @see WP_Dependencies::do_items()
         *
         * @return string[] Handles of items that have been processed.
         */
        public function do_footer_items()
        {
        }
        /**
         * Resets class properties.
         *
         * @since 3.3.0
         */
        public function reset()
        {
        }
    }
    /**
     * User API: WP_Role class
     *
     * @package WordPress
     * @subpackage Users
     * @since 4.4.0
     */
    /**
     * Core class used to extend the user roles API.
     *
     * @since 2.0.0
     */
    class WP_Role
    {
        /**
         * Role name.
         *
         * @since 2.0.0
         * @var string
         */
        public $name;
        /**
         * List of capabilities the role contains.
         *
         * @since 2.0.0
         * @var bool[] Array of key/value pairs where keys represent a capability name and boolean values
         *             represent whether the role has that capability.
         */
        public $capabilities;
        /**
         * Constructor - Set up object properties.
         *
         * The list of capabilities must have the key as the name of the capability
         * and the value a boolean of whether it is granted to the role.
         *
         * @since 2.0.0
         *
         * @param string $role         Role name.
         * @param bool[] $capabilities Array of key/value pairs where keys represent a capability name and boolean values
         *                             represent whether the role has that capability.
         */
        public function __construct($role, $capabilities)
        {
        }
        /**
         * Assign role a capability.
         *
         * @since 2.0.0
         *
         * @param string $cap   Capability name.
         * @param bool   $grant Whether role has capability privilege.
         */
        public function add_cap($cap, $grant = \true)
        {
        }
        /**
         * Removes a capability from a role.
         *
         * @since 2.0.0
         *
         * @param string $cap Capability name.
         */
        public function remove_cap($cap)
        {
        }
        /**
         * Determines whether the role has the given capability.
         *
         * @since 2.0.0
         *
         * @param string $cap Capability name.
         * @return bool Whether the role has the given capability.
         */
        public function has_cap($cap)
        {
        }
    }
    /**
     * Error Protection API: WP_Fatal_Error_Handler class
     *
     * @package WordPress
     * @since 5.2.0
     */
    /**
     * Core class used as the default shutdown handler for fatal errors.
     *
     * A drop-in 'fatal-error-handler.php' can be used to override the instance of this class and use a custom
     * implementation for the fatal error handler that WordPress registers. The custom class should extend this class and
     * can override its methods individually as necessary. The file must return the instance of the class that should be
     * registered.
     *
     * @since 5.2.0
     */
    class WP_Fatal_Error_Handler
    {
        /**
         * Runs the shutdown handler.
         *
         * This method is registered via `register_shutdown_function()`.
         *
         * @since 5.2.0
         */
        public function handle()
        {
        }
        /**
         * Detects the error causing the crash if it should be handled.
         *
         * @since 5.2.0
         *
         * @return array|null Error information returned by `error_get_last()`, or null
         *                    if none was recorded or the error should not be handled.
         */
        protected function detect_error()
        {
        }
        /**
         * Determines whether we are dealing with an error that WordPress should handle
         * in order to protect the admin backend against WSODs.
         *
         * @since 5.2.0
         *
         * @param array $error Error information retrieved from `error_get_last()`.
         * @return bool Whether WordPress should handle this error.
         */
        protected function should_handle_error($error)
        {
        }
        /**
         * Displays the PHP error template and sends the HTTP status code, typically 500.
         *
         * A drop-in 'php-error.php' can be used as a custom template. This drop-in should control the HTTP status code and
         * print the HTML markup indicating that a PHP error occurred. Note that this drop-in may potentially be executed
         * very early in the WordPress bootstrap process, so any core functions used that are not part of
         * `wp-includes/load.php` should be checked for before being called.
         *
         * If no such drop-in is available, this will call {@see WP_Fatal_Error_Handler::display_default_error_template()}.
         *
         * @since 5.2.0
         * @since 5.3.0 The `$handled` parameter was added.
         *
         * @param array         $error   Error information retrieved from `error_get_last()`.
         * @param true|WP_Error $handled Whether Recovery Mode handled the fatal error.
         */
        protected function display_error_template($error, $handled)
        {
        }
        /**
         * Displays the default PHP error template.
         *
         * This method is called conditionally if no 'php-error.php' drop-in is available.
         *
         * It calls {@see wp_die()} with a message indicating that the site is experiencing technical difficulties and a
         * login link to the admin backend. The {@see 'wp_php_error_message'} and {@see 'wp_php_error_args'} filters can
         * be used to modify these parameters.
         *
         * @since 5.2.0
         * @since 5.3.0 The `$handled` parameter was added.
         *
         * @param array         $error   Error information retrieved from `error_get_last()`.
         * @param true|WP_Error $handled Whether Recovery Mode handled the fatal error.
         */
        protected function display_default_error_template($error, $handled)
        {
        }
    }
    /**
     * WordPress database access abstraction class.
     *
     * This class is used to interact with a database without needing to use raw SQL statements.
     * By default, WordPress uses this class to instantiate the global $wpdb object, providing
     * access to the WordPress database.
     *
     * It is possible to replace this class with your own by setting the $wpdb global variable
     * in wp-content/db.php file to your class. The wpdb class will still be included, so you can
     * extend it or simply use your own.
     *
     * @link https://developer.wordpress.org/reference/classes/wpdb/
     *
     * @since 0.71
     */
    class wpdb
    {
        /**
         * Whether to show SQL/DB errors.
         *
         * Default is to show errors if both WP_DEBUG and WP_DEBUG_DISPLAY evaluate to true.
         *
         * @since 0.71
         *
         * @var bool
         */
        public $show_errors = \false;
        /**
         * Whether to suppress errors during the DB bootstrapping. Default false.
         *
         * @since 2.5.0
         *
         * @var bool
         */
        public $suppress_errors = \false;
        /**
         * The error encountered during the last query.
         *
         * @since 2.5.0
         *
         * @var string
         */
        public $last_error = '';
        /**
         * The number of queries made.
         *
         * @since 1.2.0
         *
         * @var int
         */
        public $num_queries = 0;
        /**
         * Count of rows returned by the last query.
         *
         * @since 0.71
         *
         * @var int
         */
        public $num_rows = 0;
        /**
         * Count of rows affected by the last query.
         *
         * @since 0.71
         *
         * @var int
         */
        public $rows_affected = 0;
        /**
         * The ID generated for an AUTO_INCREMENT column by the last query (usually INSERT).
         *
         * @since 0.71
         *
         * @var int
         */
        public $insert_id = 0;
        /**
         * The last query made.
         *
         * @since 0.71
         *
         * @var string
         */
        public $last_query;
        /**
         * Results of the last query.
         *
         * @since 0.71
         *
         * @var stdClass[]|null
         */
        public $last_result;
        /**
         * Database query result.
         *
         * Possible values:
         *
         * - For successful SELECT, SHOW, DESCRIBE, or EXPLAIN queries:
         *   - `mysqli_result` instance when the `mysqli` driver is in use
         *   - `resource` when the older `mysql` driver is in use
         * - `true` for other query types that were successful
         * - `null` if a query is yet to be made or if the result has since been flushed
         * - `false` if the query returned an error
         *
         * @since 0.71
         *
         * @var mysqli_result|resource|bool|null
         */
        protected $result;
        /**
         * Cached column info, for sanity checking data before inserting.
         *
         * @since 4.2.0
         *
         * @var array
         */
        protected $col_meta = array();
        /**
         * Calculated character sets keyed by table name.
         *
         * @since 4.2.0
         *
         * @var string[]
         */
        protected $table_charset = array();
        /**
         * Whether text fields in the current query need to be sanity checked.
         *
         * @since 4.2.0
         *
         * @var bool
         */
        protected $check_current_query = \true;
        /**
         * Flag to ensure we don't run into recursion problems when checking the collation.
         *
         * @since 4.2.0
         *
         * @see wpdb::check_safe_collation()
         * @var bool
         */
        private $checking_collation = \false;
        /**
         * Saved info on the table column.
         *
         * @since 0.71
         *
         * @var array
         */
        protected $col_info;
        /**
         * Log of queries that were executed, for debugging purposes.
         *
         * @since 1.5.0
         * @since 2.5.0 The third element in each query log was added to record the calling functions.
         * @since 5.1.0 The fourth element in each query log was added to record the start time.
         * @since 5.3.0 The fifth element in each query log was added to record custom data.
         *
         * @var array[] {
         *     Array of arrays containing information about queries that were executed.
         *
         *     @type array ...$0 {
         *         Data for each query.
         *
         *         @type string $0 The query's SQL.
         *         @type float  $1 Total time spent on the query, in seconds.
         *         @type string $2 Comma-separated list of the calling functions.
         *         @type float  $3 Unix timestamp of the time at the start of the query.
         *         @type array  $4 Custom query data.
         *     }
         * }
         */
        public $queries;
        /**
         * The number of times to retry reconnecting before dying. Default 5.
         *
         * @since 3.9.0
         *
         * @see wpdb::check_connection()
         * @var int
         */
        protected $reconnect_retries = 5;
        /**
         * WordPress table prefix.
         *
         * You can set this to have multiple WordPress installations in a single database.
         * The second reason is for possible security precautions.
         *
         * @since 2.5.0
         *
         * @var string
         */
        public $prefix = '';
        /**
         * WordPress base table prefix.
         *
         * @since 3.0.0
         *
         * @var string
         */
        public $base_prefix;
        /**
         * Whether the database queries are ready to start executing.
         *
         * @since 2.3.2
         *
         * @var bool
         */
        public $ready = \false;
        /**
         * Blog ID.
         *
         * @since 3.0.0
         *
         * @var int
         */
        public $blogid = 0;
        /**
         * Site ID.
         *
         * @since 3.0.0
         *
         * @var int
         */
        public $siteid = 0;
        /**
         * List of WordPress per-site tables.
         *
         * @since 2.5.0
         *
         * @see wpdb::tables()
         * @var string[]
         */
        public $tables = array('posts', 'comments', 'links', 'options', 'postmeta', 'terms', 'term_taxonomy', 'term_relationships', 'termmeta', 'commentmeta');
        /**
         * List of deprecated WordPress tables.
         *
         * 'categories', 'post2cat', and 'link2cat' were deprecated in 2.3.0, db version 5539.
         *
         * @since 2.9.0
         *
         * @see wpdb::tables()
         * @var string[]
         */
        public $old_tables = array('categories', 'post2cat', 'link2cat');
        /**
         * List of WordPress global tables.
         *
         * @since 3.0.0
         *
         * @see wpdb::tables()
         * @var string[]
         */
        public $global_tables = array('users', 'usermeta');
        /**
         * List of Multisite global tables.
         *
         * @since 3.0.0
         *
         * @see wpdb::tables()
         * @var string[]
         */
        public $ms_global_tables = array('blogs', 'blogmeta', 'signups', 'site', 'sitemeta', 'sitecategories', 'registration_log');
        /**
         * WordPress Comments table.
         *
         * @since 1.5.0
         *
         * @var string
         */
        public $comments;
        /**
         * WordPress Comment Metadata table.
         *
         * @since 2.9.0
         *
         * @var string
         */
        public $commentmeta;
        /**
         * WordPress Links table.
         *
         * @since 1.5.0
         *
         * @var string
         */
        public $links;
        /**
         * WordPress Options table.
         *
         * @since 1.5.0
         *
         * @var string
         */
        public $options;
        /**
         * WordPress Post Metadata table.
         *
         * @since 1.5.0
         *
         * @var string
         */
        public $postmeta;
        /**
         * WordPress Posts table.
         *
         * @since 1.5.0
         *
         * @var string
         */
        public $posts;
        /**
         * WordPress Terms table.
         *
         * @since 2.3.0
         *
         * @var string
         */
        public $terms;
        /**
         * WordPress Term Relationships table.
         *
         * @since 2.3.0
         *
         * @var string
         */
        public $term_relationships;
        /**
         * WordPress Term Taxonomy table.
         *
         * @since 2.3.0
         *
         * @var string
         */
        public $term_taxonomy;
        /**
         * WordPress Term Meta table.
         *
         * @since 4.4.0
         *
         * @var string
         */
        public $termmeta;
        //
        // Global and Multisite tables
        //
        /**
         * WordPress User Metadata table.
         *
         * @since 2.3.0
         *
         * @var string
         */
        public $usermeta;
        /**
         * WordPress Users table.
         *
         * @since 1.5.0
         *
         * @var string
         */
        public $users;
        /**
         * Multisite Blogs table.
         *
         * @since 3.0.0
         *
         * @var string
         */
        public $blogs;
        /**
         * Multisite Blog Metadata table.
         *
         * @since 5.1.0
         *
         * @var string
         */
        public $blogmeta;
        /**
         * Multisite Registration Log table.
         *
         * @since 3.0.0
         *
         * @var string
         */
        public $registration_log;
        /**
         * Multisite Signups table.
         *
         * @since 3.0.0
         *
         * @var string
         */
        public $signups;
        /**
         * Multisite Sites table.
         *
         * @since 3.0.0
         *
         * @var string
         */
        public $site;
        /**
         * Multisite Sitewide Terms table.
         *
         * @since 3.0.0
         *
         * @var string
         */
        public $sitecategories;
        /**
         * Multisite Site Metadata table.
         *
         * @since 3.0.0
         *
         * @var string
         */
        public $sitemeta;
        /**
         * Format specifiers for DB columns.
         *
         * Columns not listed here default to %s. Initialized during WP load.
         * Keys are column names, values are format types: 'ID' => '%d'.
         *
         * @since 2.8.0
         *
         * @see wpdb::prepare()
         * @see wpdb::insert()
         * @see wpdb::update()
         * @see wpdb::delete()
         * @see wp_set_wpdb_vars()
         * @var array
         */
        public $field_types = array();
        /**
         * Database table columns charset.
         *
         * @since 2.2.0
         *
         * @var string
         */
        public $charset;
        /**
         * Database table columns collate.
         *
         * @since 2.2.0
         *
         * @var string
         */
        public $collate;
        /**
         * Database Username.
         *
         * @since 2.9.0
         *
         * @var string
         */
        protected $dbuser;
        /**
         * Database Password.
         *
         * @since 3.1.0
         *
         * @var string
         */
        protected $dbpassword;
        /**
         * Database Name.
         *
         * @since 3.1.0
         *
         * @var string
         */
        protected $dbname;
        /**
         * Database Host.
         *
         * @since 3.1.0
         *
         * @var string
         */
        protected $dbhost;
        /**
         * Database handle.
         *
         * Possible values:
         *
         * - `mysqli` instance when the `mysqli` driver is in use
         * - `resource` when the older `mysql` driver is in use
         * - `null` if the connection is yet to be made or has been closed
         * - `false` if the connection has failed
         *
         * @since 0.71
         *
         * @var mysqli|resource|false|null
         */
        protected $dbh;
        /**
         * A textual description of the last query/get_row/get_var call.
         *
         * @since 3.0.0
         *
         * @var string
         */
        public $func_call;
        /**
         * Whether MySQL is used as the database engine.
         *
         * Set in wpdb::db_connect() to true, by default. This is used when checking
         * against the required MySQL version for WordPress. Normally, a replacement
         * database drop-in (db.php) will skip these checks, but setting this to true
         * will force the checks to occur.
         *
         * @since 3.3.0
         *
         * @var bool
         */
        public $is_mysql = \null;
        /**
         * A list of incompatible SQL modes.
         *
         * @since 3.9.0
         *
         * @var string[]
         */
        protected $incompatible_modes = array('NO_ZERO_DATE', 'ONLY_FULL_GROUP_BY', 'STRICT_TRANS_TABLES', 'STRICT_ALL_TABLES', 'TRADITIONAL', 'ANSI');
        /**
         * Whether to use mysqli over mysql. Default false.
         *
         * @since 3.9.0
         *
         * @var bool
         */
        private $use_mysqli = \false;
        /**
         * Whether we've managed to successfully connect at some point.
         *
         * @since 3.9.0
         *
         * @var bool
         */
        private $has_connected = \false;
        /**
         * Time when the last query was performed.
         *
         * Only set when `SAVEQUERIES` is defined and truthy.
         *
         * @since 1.5.0
         *
         * @var float
         */
        public $time_start = \null;
        /**
         * The last SQL error that was encountered.
         *
         * @since 2.5.0
         *
         * @var WP_Error|string
         */
        public $error = \null;
        /**
         * Connects to the database server and selects a database.
         *
         * Does the actual setting up
         * of the class properties and connection to the database.
         *
         * @since 2.0.8
         *
         * @link https://core.trac.wordpress.org/ticket/3354
         *
         * @param string $dbuser     Database user.
         * @param string $dbpassword Database password.
         * @param string $dbname     Database name.
         * @param string $dbhost     Database host.
         */
        public function __construct($dbuser, $dbpassword, $dbname, $dbhost)
        {
        }
        /**
         * Makes private properties readable for backward compatibility.
         *
         * @since 3.5.0
         *
         * @param string $name The private member to get, and optionally process.
         * @return mixed The private member.
         */
        public function __get($name)
        {
        }
        /**
         * Makes private properties settable for backward compatibility.
         *
         * @since 3.5.0
         *
         * @param string $name  The private member to set.
         * @param mixed  $value The value to set.
         */
        public function __set($name, $value)
        {
        }
        /**
         * Makes private properties check-able for backward compatibility.
         *
         * @since 3.5.0
         *
         * @param string $name The private member to check.
         * @return bool If the member is set or not.
         */
        public function __isset($name)
        {
        }
        /**
         * Makes private properties un-settable for backward compatibility.
         *
         * @since 3.5.0
         *
         * @param string $name  The private member to unset
         */
        public function __unset($name)
        {
        }
        /**
         * Sets $this->charset and $this->collate.
         *
         * @since 3.1.0
         */
        public function init_charset()
        {
        }
        /**
         * Determines the best charset and collation to use given a charset and collation.
         *
         * For example, when able, utf8mb4 should be used instead of utf8.
         *
         * @since 4.6.0
         *
         * @param string $charset The character set to check.
         * @param string $collate The collation to check.
         * @return array {
         *     The most appropriate character set and collation to use.
         *
         *     @type string $charset Character set.
         *     @type string $collate Collation.
         * }
         */
        public function determine_charset($charset, $collate)
        {
        }
        /**
         * Sets the connection's character set.
         *
         * @since 3.1.0
         *
         * @param mysqli|resource $dbh     The connection returned by `mysqli_connect()` or `mysql_connect()`.
         * @param string          $charset Optional. The character set. Default null.
         * @param string          $collate Optional. The collation. Default null.
         */
        public function set_charset($dbh, $charset = \null, $collate = \null)
        {
        }
        /**
         * Changes the current SQL mode, and ensures its WordPress compatibility.
         *
         * If no modes are passed, it will ensure the current MySQL server modes are compatible.
         *
         * @since 3.9.0
         *
         * @param array $modes Optional. A list of SQL modes to set. Default empty array.
         */
        public function set_sql_mode($modes = array())
        {
        }
        /**
         * Sets the table prefix for the WordPress tables.
         *
         * @since 2.5.0
         *
         * @param string $prefix          Alphanumeric name for the new prefix.
         * @param bool   $set_table_names Optional. Whether the table names, e.g. wpdb::$posts,
         *                                should be updated or not. Default true.
         * @return string|WP_Error Old prefix or WP_Error on error.
         */
        public function set_prefix($prefix, $set_table_names = \true)
        {
        }
        /**
         * Sets blog ID.
         *
         * @since 3.0.0
         *
         * @param int $blog_id
         * @param int $network_id Optional.
         * @return int Previous blog ID.
         */
        public function set_blog_id($blog_id, $network_id = 0)
        {
        }
        /**
         * Gets blog prefix.
         *
         * @since 3.0.0
         *
         * @param int $blog_id Optional.
         * @return string Blog prefix.
         */
        public function get_blog_prefix($blog_id = \null)
        {
        }
        /**
         * Returns an array of WordPress tables.
         *
         * Also allows for the `CUSTOM_USER_TABLE` and `CUSTOM_USER_META_TABLE` to override the WordPress users
         * and usermeta tables that would otherwise be determined by the prefix.
         *
         * The `$scope` argument can take one of the following:
         *
         * - 'all' - returns 'all' and 'global' tables. No old tables are returned.
         * - 'blog' - returns the blog-level tables for the queried blog.
         * - 'global' - returns the global tables for the installation, returning multisite tables only on multisite.
         * - 'ms_global' - returns the multisite global tables, regardless if current installation is multisite.
         * - 'old' - returns tables which are deprecated.
         *
         * @since 3.0.0
         *
         * @uses wpdb::$tables
         * @uses wpdb::$old_tables
         * @uses wpdb::$global_tables
         * @uses wpdb::$ms_global_tables
         *
         * @param string $scope   Optional. Possible values include 'all', 'global', 'ms_global', 'blog',
         *                        or 'old' tables. Default 'all'.
         * @param bool   $prefix  Optional. Whether to include table prefixes. If blog prefix is requested,
         *                        then the custom users and usermeta tables will be mapped. Default true.
         * @param int    $blog_id Optional. The blog_id to prefix. Used only when prefix is requested.
         *                        Defaults to `wpdb::$blogid`.
         * @return string[] Table names. When a prefix is requested, the key is the unprefixed table name.
         */
        public function tables($scope = 'all', $prefix = \true, $blog_id = 0)
        {
        }
        /**
         * Selects a database using the current or provided database connection.
         *
         * The database name will be changed based on the current database connection.
         * On failure, the execution will bail and display a DB error.
         *
         * @since 0.71
         *
         * @param string          $db  Database name.
         * @param mysqli|resource $dbh Optional database connection.
         */
        public function select($db, $dbh = \null)
        {
        }
        /**
         * Do not use, deprecated.
         *
         * Use esc_sql() or wpdb::prepare() instead.
         *
         * @since 2.8.0
         * @deprecated 3.6.0 Use wpdb::prepare()
         * @see wpdb::prepare()
         * @see esc_sql()
         *
         * @param string $string
         * @return string
         */
        public function _weak_escape($string)
        {
        }
        /**
         * Real escape, using mysqli_real_escape_string() or mysql_real_escape_string().
         *
         * @since 2.8.0
         *
         * @see mysqli_real_escape_string()
         * @see mysql_real_escape_string()
         *
         * @param string $string String to escape.
         * @return string Escaped string.
         */
        public function _real_escape($string)
        {
        }
        /**
         * Escapes data. Works on arrays.
         *
         * @since 2.8.0
         *
         * @uses wpdb::_real_escape()
         *
         * @param string|array $data Data to escape.
         * @return string|array Escaped data, in the same type as supplied.
         */
        public function _escape($data)
        {
        }
        /**
         * Do not use, deprecated.
         *
         * Use esc_sql() or wpdb::prepare() instead.
         *
         * @since 0.71
         * @deprecated 3.6.0 Use wpdb::prepare()
         * @see wpdb::prepare()
         * @see esc_sql()
         *
         * @param string|array $data Data to escape.
         * @return string|array Escaped data, in the same type as supplied.
         */
        public function escape($data)
        {
        }
        /**
         * Escapes content by reference for insertion into the database, for security.
         *
         * @uses wpdb::_real_escape()
         *
         * @since 2.3.0
         *
         * @param string $string String to escape.
         */
        public function escape_by_ref(&$string)
        {
        }
        /**
         * Prepares a SQL query for safe execution.
         *
         * Uses sprintf()-like syntax. The following placeholders can be used in the query string:
         *
         * - %d (integer)
         * - %f (float)
         * - %s (string)
         *
         * All placeholders MUST be left unquoted in the query string. A corresponding argument
         * MUST be passed for each placeholder.
         *
         * Note: There is one exception to the above: for compatibility with old behavior,
         * numbered or formatted string placeholders (eg, `%1$s`, `%5s`) will not have quotes
         * added by this function, so should be passed with appropriate quotes around them.
         *
         * Literal percentage signs (`%`) in the query string must be written as `%%`. Percentage wildcards
         * (for example, to use in LIKE syntax) must be passed via a substitution argument containing
         * the complete LIKE string, these cannot be inserted directly in the query string.
         * Also see wpdb::esc_like().
         *
         * Arguments may be passed as individual arguments to the method, or as a single array
         * containing all arguments. A combination of the two is not supported.
         *
         * Examples:
         *
         *     $wpdb->prepare( "SELECT * FROM `table` WHERE `column` = %s AND `field` = %d OR `other_field` LIKE %s", array( 'foo', 1337, '%bar' ) );
         *     $wpdb->prepare( "SELECT DATE_FORMAT(`field`, '%%c') FROM `table` WHERE `column` = %s", 'foo' );
         *
         * @since 2.3.0
         * @since 5.3.0 Formalized the existing and already documented `...$args` parameter
         *              by updating the function signature. The second parameter was changed
         *              from `$args` to `...$args`.
         *
         * @link https://www.php.net/sprintf Description of syntax.
         *
         * @param string      $query   Query statement with sprintf()-like placeholders.
         * @param array|mixed $args    The array of variables to substitute into the query's placeholders
         *                             if being called with an array of arguments, or the first variable
         *                             to substitute into the query's placeholders if being called with
         *                             individual arguments.
         * @param mixed       ...$args Further variables to substitute into the query's placeholders
         *                             if being called with individual arguments.
         * @return string|void Sanitized query string, if there is a query to prepare.
         */
        public function prepare($query, ...$args)
        {
        }
        /**
         * First half of escaping for `LIKE` special characters `%` and `_` before preparing for SQL.
         *
         * Use this only before wpdb::prepare() or esc_sql(). Reversing the order is very bad for security.
         *
         * Example Prepared Statement:
         *
         *     $wild = '%';
         *     $find = 'only 43% of planets';
         *     $like = $wild . $wpdb->esc_like( $find ) . $wild;
         *     $sql  = $wpdb->prepare( "SELECT * FROM $wpdb->posts WHERE post_content LIKE %s", $like );
         *
         * Example Escape Chain:
         *
         *     $sql  = esc_sql( $wpdb->esc_like( $input ) );
         *
         * @since 4.0.0
         *
         * @param string $text The raw text to be escaped. The input typed by the user
         *                     should have no extra or deleted slashes.
         * @return string Text in the form of a LIKE phrase. The output is not SQL safe.
         *                Call wpdb::prepare() or wpdb::_real_escape() next.
         */
        public function esc_like($text)
        {
        }
        /**
         * Prints SQL/DB error.
         *
         * @since 0.71
         *
         * @global array $EZSQL_ERROR Stores error information of query and error string.
         *
         * @param string $str The error to display.
         * @return void|false Void if the showing of errors is enabled, false if disabled.
         */
        public function print_error($str = '')
        {
        }
        /**
         * Enables showing of database errors.
         *
         * This function should be used only to enable showing of errors.
         * wpdb::hide_errors() should be used instead for hiding errors.
         *
         * @since 0.71
         *
         * @see wpdb::hide_errors()
         *
         * @param bool $show Optional. Whether to show errors. Default true.
         * @return bool Whether showing of errors was previously active.
         */
        public function show_errors($show = \true)
        {
        }
        /**
         * Disables showing of database errors.
         *
         * By default database errors are not shown.
         *
         * @since 0.71
         *
         * @see wpdb::show_errors()
         *
         * @return bool Whether showing of errors was previously active.
         */
        public function hide_errors()
        {
        }
        /**
         * Enables or disables suppressing of database errors.
         *
         * By default database errors are suppressed.
         *
         * @since 2.5.0
         *
         * @see wpdb::hide_errors()
         *
         * @param bool $suppress Optional. Whether to suppress errors. Default true.
         * @return bool Whether suppressing of errors was previously active.
         */
        public function suppress_errors($suppress = \true)
        {
        }
        /**
         * Kills cached query results.
         *
         * @since 0.71
         */
        public function flush()
        {
        }
        /**
         * Connects to and selects database.
         *
         * If `$allow_bail` is false, the lack of database connection will need to be handled manually.
         *
         * @since 3.0.0
         * @since 3.9.0 $allow_bail parameter added.
         *
         * @param bool $allow_bail Optional. Allows the function to bail. Default true.
         * @return bool True with a successful connection, false on failure.
         */
        public function db_connect($allow_bail = \true)
        {
        }
        /**
         * Parses the DB_HOST setting to interpret it for mysqli_real_connect().
         *
         * mysqli_real_connect() doesn't support the host param including a port or socket
         * like mysql_connect() does. This duplicates how mysql_connect() detects a port
         * and/or socket file.
         *
         * @since 4.9.0
         *
         * @param string $host The DB_HOST setting to parse.
         * @return array|false {
         *     Array containing the host, the port, the socket and
         *     whether it is an IPv6 address, in that order.
         *     False if the host couldn't be parsed.
         *
         *     @type string      $0 Host name.
         *     @type string|null $1 Port.
         *     @type string|null $2 Socket.
         *     @type bool        $3 Whether it is an IPv6 address.
         * }
         */
        public function parse_db_host($host)
        {
        }
        /**
         * Checks that the connection to the database is still up. If not, try to reconnect.
         *
         * If this function is unable to reconnect, it will forcibly die, or if called
         * after the {@see 'template_redirect'} hook has been fired, return false instead.
         *
         * If `$allow_bail` is false, the lack of database connection will need to be handled manually.
         *
         * @since 3.9.0
         *
         * @param bool $allow_bail Optional. Allows the function to bail. Default true.
         * @return bool|void True if the connection is up.
         */
        public function check_connection($allow_bail = \true)
        {
        }
        /**
         * Performs a database query, using current database connection.
         *
         * More information can be found on the documentation page.
         *
         * @since 0.71
         *
         * @link https://developer.wordpress.org/reference/classes/wpdb/
         *
         * @param string $query Database query.
         * @return int|bool Boolean true for CREATE, ALTER, TRUNCATE and DROP queries. Number of rows
         *                  affected/selected for all other queries. Boolean false on error.
         */
        public function query($query)
        {
        }
        /**
         * Internal function to perform the mysql_query() call.
         *
         * @since 3.9.0
         *
         * @see wpdb::query()
         *
         * @param string $query The query to run.
         */
        private function _do_query($query)
        {
        }
        /**
         * Logs query data.
         *
         * @since 5.3.0
         *
         * @param string $query           The query's SQL.
         * @param float  $query_time      Total time spent on the query, in seconds.
         * @param string $query_callstack Comma-separated list of the calling functions.
         * @param float  $query_start     Unix timestamp of the time at the start of the query.
         * @param array  $query_data      Custom query data.
         */
        public function log_query($query, $query_time, $query_callstack, $query_start, $query_data)
        {
        }
        /**
         * Generates and returns a placeholder escape string for use in queries returned by ::prepare().
         *
         * @since 4.8.3
         *
         * @return string String to escape placeholders.
         */
        public function placeholder_escape()
        {
        }
        /**
         * Adds a placeholder escape string, to escape anything that resembles a printf() placeholder.
         *
         * @since 4.8.3
         *
         * @param string $query The query to escape.
         * @return string The query with the placeholder escape string inserted where necessary.
         */
        public function add_placeholder_escape($query)
        {
        }
        /**
         * Removes the placeholder escape strings from a query.
         *
         * @since 4.8.3
         *
         * @param string $query The query from which the placeholder will be removed.
         * @return string The query with the placeholder removed.
         */
        public function remove_placeholder_escape($query)
        {
        }
        /**
         * Inserts a row into the table.
         *
         * Examples:
         *
         *     wpdb::insert( 'table', array( 'column' => 'foo', 'field' => 'bar' ) )
         *     wpdb::insert( 'table', array( 'column' => 'foo', 'field' => 1337 ), array( '%s', '%d' ) )
         *
         * @since 2.5.0
         *
         * @see wpdb::prepare()
         * @see wpdb::$field_types
         * @see wp_set_wpdb_vars()
         *
         * @param string       $table  Table name.
         * @param array        $data   Data to insert (in column => value pairs).
         *                             Both $data columns and $data values should be "raw" (neither should be SQL escaped).
         *                             Sending a null value will cause the column to be set to NULL - the corresponding
         *                             format is ignored in this case.
         * @param array|string $format Optional. An array of formats to be mapped to each of the value in $data.
         *                             If string, that format will be used for all of the values in $data.
         *                             A format is one of '%d', '%f', '%s' (integer, float, string).
         *                             If omitted, all values in $data will be treated as strings unless otherwise
         *                             specified in wpdb::$field_types.
         * @return int|false The number of rows inserted, or false on error.
         */
        public function insert($table, $data, $format = \null)
        {
        }
        /**
         * Replaces a row in the table.
         *
         * Examples:
         *
         *     wpdb::replace( 'table', array( 'column' => 'foo', 'field' => 'bar' ) )
         *     wpdb::replace( 'table', array( 'column' => 'foo', 'field' => 1337 ), array( '%s', '%d' ) )
         *
         * @since 3.0.0
         *
         * @see wpdb::prepare()
         * @see wpdb::$field_types
         * @see wp_set_wpdb_vars()
         *
         * @param string       $table  Table name.
         * @param array        $data   Data to insert (in column => value pairs).
         *                             Both $data columns and $data values should be "raw" (neither should be SQL escaped).
         *                             Sending a null value will cause the column to be set to NULL - the corresponding
         *                             format is ignored in this case.
         * @param array|string $format Optional. An array of formats to be mapped to each of the value in $data.
         *                             If string, that format will be used for all of the values in $data.
         *                             A format is one of '%d', '%f', '%s' (integer, float, string).
         *                             If omitted, all values in $data will be treated as strings unless otherwise
         *                             specified in wpdb::$field_types.
         * @return int|false The number of rows affected, or false on error.
         */
        public function replace($table, $data, $format = \null)
        {
        }
        /**
         * Helper function for insert and replace.
         *
         * Runs an insert or replace query based on $type argument.
         *
         * @since 3.0.0
         *
         * @see wpdb::prepare()
         * @see wpdb::$field_types
         * @see wp_set_wpdb_vars()
         *
         * @param string       $table  Table name.
         * @param array        $data   Data to insert (in column => value pairs).
         *                             Both $data columns and $data values should be "raw" (neither should be SQL escaped).
         *                             Sending a null value will cause the column to be set to NULL - the corresponding
         *                             format is ignored in this case.
         * @param array|string $format Optional. An array of formats to be mapped to each of the value in $data.
         *                             If string, that format will be used for all of the values in $data.
         *                             A format is one of '%d', '%f', '%s' (integer, float, string).
         *                             If omitted, all values in $data will be treated as strings unless otherwise
         *                             specified in wpdb::$field_types.
         * @param string       $type   Optional. Type of operation. Possible values include 'INSERT' or 'REPLACE'.
         *                             Default 'INSERT'.
         * @return int|false The number of rows affected, or false on error.
         */
        public function _insert_replace_helper($table, $data, $format = \null, $type = 'INSERT')
        {
        }
        /**
         * Updates a row in the table.
         *
         * Examples:
         *
         *     wpdb::update( 'table', array( 'column' => 'foo', 'field' => 'bar' ), array( 'ID' => 1 ) )
         *     wpdb::update( 'table', array( 'column' => 'foo', 'field' => 1337 ), array( 'ID' => 1 ), array( '%s', '%d' ), array( '%d' ) )
         *
         * @since 2.5.0
         *
         * @see wpdb::prepare()
         * @see wpdb::$field_types
         * @see wp_set_wpdb_vars()
         *
         * @param string       $table        Table name.
         * @param array        $data         Data to update (in column => value pairs).
         *                                   Both $data columns and $data values should be "raw" (neither should be SQL escaped).
         *                                   Sending a null value will cause the column to be set to NULL - the corresponding
         *                                   format is ignored in this case.
         * @param array        $where        A named array of WHERE clauses (in column => value pairs).
         *                                   Multiple clauses will be joined with ANDs.
         *                                   Both $where columns and $where values should be "raw".
         *                                   Sending a null value will create an IS NULL comparison - the corresponding
         *                                   format will be ignored in this case.
         * @param array|string $format       Optional. An array of formats to be mapped to each of the values in $data.
         *                                   If string, that format will be used for all of the values in $data.
         *                                   A format is one of '%d', '%f', '%s' (integer, float, string).
         *                                   If omitted, all values in $data will be treated as strings unless otherwise
         *                                   specified in wpdb::$field_types.
         * @param array|string $where_format Optional. An array of formats to be mapped to each of the values in $where.
         *                                   If string, that format will be used for all of the items in $where.
         *                                   A format is one of '%d', '%f', '%s' (integer, float, string).
         *                                   If omitted, all values in $where will be treated as strings.
         * @return int|false The number of rows updated, or false on error.
         */
        public function update($table, $data, $where, $format = \null, $where_format = \null)
        {
        }
        /**
         * Deletes a row in the table.
         *
         * Examples:
         *
         *     wpdb::delete( 'table', array( 'ID' => 1 ) )
         *     wpdb::delete( 'table', array( 'ID' => 1 ), array( '%d' ) )
         *
         * @since 3.4.0
         *
         * @see wpdb::prepare()
         * @see wpdb::$field_types
         * @see wp_set_wpdb_vars()
         *
         * @param string       $table        Table name.
         * @param array        $where        A named array of WHERE clauses (in column => value pairs).
         *                                   Multiple clauses will be joined with ANDs.
         *                                   Both $where columns and $where values should be "raw".
         *                                   Sending a null value will create an IS NULL comparison - the corresponding
         *                                   format will be ignored in this case.
         * @param array|string $where_format Optional. An array of formats to be mapped to each of the values in $where.
         *                                   If string, that format will be used for all of the items in $where.
         *                                   A format is one of '%d', '%f', '%s' (integer, float, string).
         *                                   If omitted, all values in $data will be treated as strings unless otherwise
         *                                   specified in wpdb::$field_types.
         * @return int|false The number of rows updated, or false on error.
         */
        public function delete($table, $where, $where_format = \null)
        {
        }
        /**
         * Processes arrays of field/value pairs and field formats.
         *
         * This is a helper method for wpdb's CRUD methods, which take field/value pairs
         * for inserts, updates, and where clauses. This method first pairs each value
         * with a format. Then it determines the charset of that field, using that
         * to determine if any invalid text would be stripped. If text is stripped,
         * then field processing is rejected and the query fails.
         *
         * @since 4.2.0
         *
         * @param string $table  Table name.
         * @param array  $data   Field/value pair.
         * @param mixed  $format Format for each field.
         * @return array|false An array of fields that contain paired value and formats.
         *                     False for invalid values.
         */
        protected function process_fields($table, $data, $format)
        {
        }
        /**
         * Prepares arrays of value/format pairs as passed to wpdb CRUD methods.
         *
         * @since 4.2.0
         *
         * @param array $data   Array of fields to values.
         * @param mixed $format Formats to be mapped to the values in $data.
         * @return array Array, keyed by field names with values being an array
         *               of 'value' and 'format' keys.
         */
        protected function process_field_formats($data, $format)
        {
        }
        /**
         * Adds field charsets to field/value/format arrays generated by wpdb::process_field_formats().
         *
         * @since 4.2.0
         *
         * @param array  $data  As it comes from the wpdb::process_field_formats() method.
         * @param string $table Table name.
         * @return array|false The same array as $data with additional 'charset' keys.
         *                     False on failure.
         */
        protected function process_field_charsets($data, $table)
        {
        }
        /**
         * For string fields, records the maximum string length that field can safely save.
         *
         * @since 4.2.1
         *
         * @param array  $data  As it comes from the wpdb::process_field_charsets() method.
         * @param string $table Table name.
         * @return array|false The same array as $data with additional 'length' keys, or false if
         *                     any of the values were too long for their corresponding field.
         */
        protected function process_field_lengths($data, $table)
        {
        }
        /**
         * Retrieves one variable from the database.
         *
         * Executes a SQL query and returns the value from the SQL result.
         * If the SQL result contains more than one column and/or more than one row,
         * the value in the column and row specified is returned. If $query is null,
         * the value in the specified column and row from the previous SQL result is returned.
         *
         * @since 0.71
         *
         * @param string|null $query Optional. SQL query. Defaults to null, use the result from the previous query.
         * @param int         $x     Optional. Column of value to return. Indexed from 0.
         * @param int         $y     Optional. Row of value to return. Indexed from 0.
         * @return string|null Database query result (as string), or null on failure.
         */
        public function get_var($query = \null, $x = 0, $y = 0)
        {
        }
        /**
         * Retrieves one row from the database.
         *
         * Executes a SQL query and returns the row from the SQL result.
         *
         * @since 0.71
         *
         * @param string|null $query  SQL query.
         * @param string      $output Optional. The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which
         *                            correspond to an stdClass object, an associative array, or a numeric array,
         *                            respectively. Default OBJECT.
         * @param int         $y      Optional. Row to return. Indexed from 0.
         * @return array|object|null|void Database query result in format specified by $output or null on failure.
         */
        public function get_row($query = \null, $output = \OBJECT, $y = 0)
        {
        }
        /**
         * Retrieves one column from the database.
         *
         * Executes a SQL query and returns the column from the SQL result.
         * If the SQL result contains more than one column, the column specified is returned.
         * If $query is null, the specified column from the previous SQL result is returned.
         *
         * @since 0.71
         *
         * @param string|null $query Optional. SQL query. Defaults to previous query.
         * @param int         $x     Optional. Column to return. Indexed from 0.
         * @return array Database query result. Array indexed from 0 by SQL result row number.
         */
        public function get_col($query = \null, $x = 0)
        {
        }
        /**
         * Retrieves an entire SQL result set from the database (i.e., many rows).
         *
         * Executes a SQL query and returns the entire SQL result.
         *
         * @since 0.71
         *
         * @param string $query  SQL query.
         * @param string $output Optional. Any of ARRAY_A | ARRAY_N | OBJECT | OBJECT_K constants.
         *                       With one of the first three, return an array of rows indexed
         *                       from 0 by SQL result row number. Each row is an associative array
         *                       (column => value, ...), a numerically indexed array (0 => value, ...),
         *                       or an object ( ->column = value ), respectively. With OBJECT_K,
         *                       return an associative array of row objects keyed by the value
         *                       of each row's first column's value. Duplicate keys are discarded.
         * @return array|object|null Database query results.
         */
        public function get_results($query = \null, $output = \OBJECT)
        {
        }
        /**
         * Retrieves the character set for the given table.
         *
         * @since 4.2.0
         *
         * @param string $table Table name.
         * @return string|WP_Error Table character set, WP_Error object if it couldn't be found.
         */
        protected function get_table_charset($table)
        {
        }
        /**
         * Retrieves the character set for the given column.
         *
         * @since 4.2.0
         *
         * @param string $table  Table name.
         * @param string $column Column name.
         * @return string|false|WP_Error Column character set as a string. False if the column has
         *                               no character set. WP_Error object if there was an error.
         */
        public function get_col_charset($table, $column)
        {
        }
        /**
         * Retrieves the maximum string length allowed in a given column.
         *
         * The length may either be specified as a byte length or a character length.
         *
         * @since 4.2.1
         *
         * @param string $table  Table name.
         * @param string $column Column name.
         * @return array|false|WP_Error {
         *     Array of column length information, false if the column has no length (for
         *     example, numeric column), WP_Error object if there was an error.
         *
         *     @type int    $length The column length.
         *     @type string $type   One of 'byte' or 'char'.
         */
        public function get_col_length($table, $column)
        {
        }
        /**
         * Checks if a string is ASCII.
         *
         * The negative regex is faster for non-ASCII strings, as it allows
         * the search to finish as soon as it encounters a non-ASCII character.
         *
         * @since 4.2.0
         *
         * @param string $string String to check.
         * @return bool True if ASCII, false if not.
         */
        protected function check_ascii($string)
        {
        }
        /**
         * Checks if the query is accessing a collation considered safe on the current version of MySQL.
         *
         * @since 4.2.0
         *
         * @param string $query The query to check.
         * @return bool True if the collation is safe, false if it isn't.
         */
        protected function check_safe_collation($query)
        {
        }
        /**
         * Strips any invalid characters based on value/charset pairs.
         *
         * @since 4.2.0
         *
         * @param array $data Array of value arrays. Each value array has the keys 'value' and 'charset'.
         *                    An optional 'ascii' key can be set to false to avoid redundant ASCII checks.
         * @return array|WP_Error The $data parameter, with invalid characters removed from each value.
         *                        This works as a passthrough: any additional keys such as 'field' are
         *                        retained in each value array. If we cannot remove invalid characters,
         *                        a WP_Error object is returned.
         */
        protected function strip_invalid_text($data)
        {
        }
        /**
         * Strips any invalid characters from the query.
         *
         * @since 4.2.0
         *
         * @param string $query Query to convert.
         * @return string|WP_Error The converted query, or a WP_Error object if the conversion fails.
         */
        protected function strip_invalid_text_from_query($query)
        {
        }
        /**
         * Strips any invalid characters from the string for a given table and column.
         *
         * @since 4.2.0
         *
         * @param string $table  Table name.
         * @param string $column Column name.
         * @param string $value  The text to check.
         * @return string|WP_Error The converted string, or a WP_Error object if the conversion fails.
         */
        public function strip_invalid_text_for_column($table, $column, $value)
        {
        }
        /**
         * Finds the first table name referenced in a query.
         *
         * @since 4.2.0
         *
         * @param string $query The query to search.
         * @return string|false The table name found, or false if a table couldn't be found.
         */
        protected function get_table_from_query($query)
        {
        }
        /**
         * Loads the column metadata from the last query.
         *
         * @since 3.5.0
         */
        protected function load_col_info()
        {
        }
        /**
         * Retrieves column metadata from the last query.
         *
         * @since 0.71
         *
         * @param string $info_type  Optional. Possible values include 'name', 'table', 'def', 'max_length',
         *                           'not_null', 'primary_key', 'multiple_key', 'unique_key', 'numeric',
         *                           'blob', 'type', 'unsigned', 'zerofill'. Default 'name'.
         * @param int    $col_offset Optional. 0: col name. 1: which table the col's in. 2: col's max length.
         *                           3: if the col is numeric. 4: col's type. Default -1.
         * @return mixed Column results.
         */
        public function get_col_info($info_type = 'name', $col_offset = -1)
        {
        }
        /**
         * Starts the timer, for debugging purposes.
         *
         * @since 1.5.0
         *
         * @return true
         */
        public function timer_start()
        {
        }
        /**
         * Stops the debugging timer.
         *
         * @since 1.5.0
         *
         * @return float Total time spent on the query, in seconds.
         */
        public function timer_stop()
        {
        }
        /**
         * Wraps errors in a nice header and footer and dies.
         *
         * Will not die if wpdb::$show_errors is false.
         *
         * @since 1.5.0
         *
         * @param string $message    The error message.
         * @param string $error_code Optional. A computer-readable string to identify the error.
         *                           Default '500'.
         * @return void|false Void if the showing of errors is enabled, false if disabled.
         */
        public function bail($message, $error_code = '500')
        {
        }
        /**
         * Closes the current database connection.
         *
         * @since 4.5.0
         *
         * @return bool True if the connection was successfully closed,
         *              false if it wasn't, or if the connection doesn't exist.
         */
        public function close()
        {
        }
        /**
         * Determines whether MySQL database is at least the required minimum version.
         *
         * @since 2.5.0
         *
         * @global string $wp_version             The WordPress version string.
         * @global string $required_mysql_version The required MySQL version string.
         * @return void|WP_Error
         */
        public function check_database_version()
        {
        }
        /**
         * Determines whether the database supports collation.
         *
         * Called when WordPress is generating the table scheme.
         *
         * Use `wpdb::has_cap( 'collation' )`.
         *
         * @since 2.5.0
         * @deprecated 3.5.0 Use wpdb::has_cap()
         *
         * @return bool True if collation is supported, false if not.
         */
        public function supports_collation()
        {
        }
        /**
         * Retrieves the database character collate.
         *
         * @since 3.5.0
         *
         * @return string The database character collate.
         */
        public function get_charset_collate()
        {
        }
        /**
         * Determines if a database supports a particular feature.
         *
         * @since 2.7.0
         * @since 4.1.0 Added support for the 'utf8mb4' feature.
         * @since 4.6.0 Added support for the 'utf8mb4_520' feature.
         *
         * @see wpdb::db_version()
         *
         * @param string $db_cap The feature to check for. Accepts 'collation', 'group_concat',
         *                       'subqueries', 'set_charset', 'utf8mb4', or 'utf8mb4_520'.
         * @return int|false Whether the database feature is supported, false otherwise.
         */
        public function has_cap($db_cap)
        {
        }
        /**
         * Retrieves a comma-separated list of the names of the functions that called wpdb.
         *
         * @since 2.5.0
         *
         * @return string Comma-separated list of the calling functions.
         */
        public function get_caller()
        {
        }
        /**
         * Retrieves the database server version.
         *
         * @since 2.7.0
         *
         * @return string|null Version number on success, null on failure.
         */
        public function db_version()
        {
        }
        /**
         * Retrieves full database server information.
         *
         * @since 5.5.0
         *
         * @return string|false Server info on success, false on failure.
         */
        public function db_server_info()
        {
        }
    }
    /**
     * WordPress Customize Manager classes
     *
     * @package WordPress
     * @subpackage Customize
     * @since 3.4.0
     */
    /**
     * Customize Manager class.
     *
     * Bootstraps the Customize experience on the server-side.
     *
     * Sets up the theme-switching process if a theme other than the active one is
     * being previewed and customized.
     *
     * Serves as a factory for Customize Controls and Settings, and
     * instantiates default Customize Controls and Settings.
     *
     * @since 3.4.0
     */
    final class WP_Customize_Manager
    {
        /**
         * An instance of the theme being previewed.
         *
         * @since 3.4.0
         * @var WP_Theme
         */
        protected $theme;
        /**
         * The directory name of the previously active theme (within the theme_root).
         *
         * @since 3.4.0
         * @var string
         */
        protected $original_stylesheet;
        /**
         * Whether this is a Customizer pageload.
         *
         * @since 3.4.0
         * @var bool
         */
        protected $previewing = \false;
        /**
         * Methods and properties dealing with managing widgets in the Customizer.
         *
         * @since 3.9.0
         * @var WP_Customize_Widgets
         */
        public $widgets;
        /**
         * Methods and properties dealing with managing nav menus in the Customizer.
         *
         * @since 4.3.0
         * @var WP_Customize_Nav_Menus
         */
        public $nav_menus;
        /**
         * Methods and properties dealing with selective refresh in the Customizer preview.
         *
         * @since 4.5.0
         * @var WP_Customize_Selective_Refresh
         */
        public $selective_refresh;
        /**
         * Registered instances of WP_Customize_Setting.
         *
         * @since 3.4.0
         * @var array
         */
        protected $settings = array();
        /**
         * Sorted top-level instances of WP_Customize_Panel and WP_Customize_Section.
         *
         * @since 4.0.0
         * @var array
         */
        protected $containers = array();
        /**
         * Registered instances of WP_Customize_Panel.
         *
         * @since 4.0.0
         * @var array
         */
        protected $panels = array();
        /**
         * List of core components.
         *
         * @since 4.5.0
         * @var array
         */
        protected $components = array('widgets', 'nav_menus');
        /**
         * Registered instances of WP_Customize_Section.
         *
         * @since 3.4.0
         * @var array
         */
        protected $sections = array();
        /**
         * Registered instances of WP_Customize_Control.
         *
         * @since 3.4.0
         * @var array
         */
        protected $controls = array();
        /**
         * Panel types that may be rendered from JS templates.
         *
         * @since 4.3.0
         * @var array
         */
        protected $registered_panel_types = array();
        /**
         * Section types that may be rendered from JS templates.
         *
         * @since 4.3.0
         * @var array
         */
        protected $registered_section_types = array();
        /**
         * Control types that may be rendered from JS templates.
         *
         * @since 4.1.0
         * @var array
         */
        protected $registered_control_types = array();
        /**
         * Initial URL being previewed.
         *
         * @since 4.4.0
         * @var string
         */
        protected $preview_url;
        /**
         * URL to link the user to when closing the Customizer.
         *
         * @since 4.4.0
         * @var string
         */
        protected $return_url;
        /**
         * Mapping of 'panel', 'section', 'control' to the ID which should be autofocused.
         *
         * @since 4.4.0
         * @var string[]
         */
        protected $autofocus = array();
        /**
         * Messenger channel.
         *
         * @since 4.7.0
         * @var string
         */
        protected $messenger_channel;
        /**
         * Whether the autosave revision of the changeset should be loaded.
         *
         * @since 4.9.0
         * @var bool
         */
        protected $autosaved = \false;
        /**
         * Whether the changeset branching is allowed.
         *
         * @since 4.9.0
         * @var bool
         */
        protected $branching = \true;
        /**
         * Whether settings should be previewed.
         *
         * @since 4.9.0
         * @var bool
         */
        protected $settings_previewed = \true;
        /**
         * Whether a starter content changeset was saved.
         *
         * @since 4.9.0
         * @var bool
         */
        protected $saved_starter_content_changeset = \false;
        /**
         * Unsanitized values for Customize Settings parsed from $_POST['customized'].
         *
         * @var array
         */
        private $_post_values;
        /**
         * Changeset UUID.
         *
         * @since 4.7.0
         * @var string
         */
        private $_changeset_uuid;
        /**
         * Changeset post ID.
         *
         * @since 4.7.0
         * @var int|false
         */
        private $_changeset_post_id;
        /**
         * Changeset data loaded from a customize_changeset post.
         *
         * @since 4.7.0
         * @var array|null
         */
        private $_changeset_data;
        /**
         * Constructor.
         *
         * @since 3.4.0
         * @since 4.7.0 Added `$args` parameter.
         *
         * @param array $args {
         *     Args.
         *
         *     @type null|string|false $changeset_uuid     Changeset UUID, the `post_name` for the customize_changeset post containing the customized state.
         *                                                 Defaults to `null` resulting in a UUID to be immediately generated. If `false` is provided, then
         *                                                 then the changeset UUID will be determined during `after_setup_theme`: when the
         *                                                 `customize_changeset_branching` filter returns false, then the default UUID will be that
         *                                                 of the most recent `customize_changeset` post that has a status other than 'auto-draft',
         *                                                 'publish', or 'trash'. Otherwise, if changeset branching is enabled, then a random UUID will be used.
         *     @type string            $theme              Theme to be previewed (for theme switch). Defaults to customize_theme or theme query params.
         *     @type string            $messenger_channel  Messenger channel. Defaults to customize_messenger_channel query param.
         *     @type bool              $settings_previewed If settings should be previewed. Defaults to true.
         *     @type bool              $branching          If changeset branching is allowed; otherwise, changesets are linear. Defaults to true.
         *     @type bool              $autosaved          If data from a changeset's autosaved revision should be loaded if it exists. Defaults to false.
         * }
         */
        public function __construct($args = array())
        {
        }
        /**
         * Returns true if it's an Ajax request.
         *
         * @since 3.4.0
         * @since 4.2.0 Added `$action` param.
         *
         * @param string|null $action Whether the supplied Ajax action is being run.
         * @return bool True if it's an Ajax request, false otherwise.
         */
        public function doing_ajax($action = \null)
        {
        }
        /**
         * Custom wp_die wrapper. Returns either the standard message for UI
         * or the Ajax message.
         *
         * @since 3.4.0
         *
         * @param string|WP_Error $ajax_message Ajax return.
         * @param string          $message      Optional. UI message.
         */
        protected function wp_die($ajax_message, $message = \null)
        {
        }
        /**
         * Returns the Ajax wp_die() handler if it's a customized request.
         *
         * @since 3.4.0
         * @deprecated 4.7.0
         *
         * @return callable Die handler.
         */
        public function wp_die_handler()
        {
        }
        /**
         * Starts preview and customize theme.
         *
         * Check if customize query variable exist. Init filters to filter the active theme.
         *
         * @since 3.4.0
         *
         * @global string $pagenow The filename of the current screen.
         */
        public function setup_theme()
        {
        }
        /**
         * Establishes the loaded changeset.
         *
         * This method runs right at after_setup_theme and applies the 'customize_changeset_branching' filter to determine
         * whether concurrent changesets are allowed. Then if the Customizer is not initialized with a `changeset_uuid` param,
         * this method will determine which UUID should be used. If changeset branching is disabled, then the most saved
         * changeset will be loaded by default. Otherwise, if there are no existing saved changesets or if changeset branching is
         * enabled, then a new UUID will be generated.
         *
         * @since 4.9.0
         *
         * @global string $pagenow The filename of the current screen.
         */
        public function establish_loaded_changeset()
        {
        }
        /**
         * Callback to validate a theme once it is loaded
         *
         * @since 3.4.0
         */
        public function after_setup_theme()
        {
        }
        /**
         * If the theme to be previewed isn't the active theme, add filter callbacks
         * to swap it out at runtime.
         *
         * @since 3.4.0
         */
        public function start_previewing_theme()
        {
        }
        /**
         * Stops previewing the selected theme.
         *
         * Removes filters to change the active theme.
         *
         * @since 3.4.0
         */
        public function stop_previewing_theme()
        {
        }
        /**
         * Gets whether settings are or will be previewed.
         *
         * @since 4.9.0
         *
         * @see WP_Customize_Setting::preview()
         *
         * @return bool
         */
        public function settings_previewed()
        {
        }
        /**
         * Gets whether data from a changeset's autosaved revision should be loaded if it exists.
         *
         * @since 4.9.0
         *
         * @see WP_Customize_Manager::changeset_data()
         *
         * @return bool Is using autosaved changeset revision.
         */
        public function autosaved()
        {
        }
        /**
         * Whether the changeset branching is allowed.
         *
         * @since 4.9.0
         *
         * @see WP_Customize_Manager::establish_loaded_changeset()
         *
         * @return bool Is changeset branching.
         */
        public function branching()
        {
        }
        /**
         * Gets the changeset UUID.
         *
         * @since 4.7.0
         *
         * @see WP_Customize_Manager::establish_loaded_changeset()
         *
         * @return string UUID.
         */
        public function changeset_uuid()
        {
        }
        /**
         * Gets the theme being customized.
         *
         * @since 3.4.0
         *
         * @return WP_Theme
         */
        public function theme()
        {
        }
        /**
         * Gets the registered settings.
         *
         * @since 3.4.0
         *
         * @return array
         */
        public function settings()
        {
        }
        /**
         * Gets the registered controls.
         *
         * @since 3.4.0
         *
         * @return array
         */
        public function controls()
        {
        }
        /**
         * Gets the registered containers.
         *
         * @since 4.0.0
         *
         * @return array
         */
        public function containers()
        {
        }
        /**
         * Gets the registered sections.
         *
         * @since 3.4.0
         *
         * @return array
         */
        public function sections()
        {
        }
        /**
         * Gets the registered panels.
         *
         * @since 4.0.0
         *
         * @return array Panels.
         */
        public function panels()
        {
        }
        /**
         * Checks if the current theme is active.
         *
         * @since 3.4.0
         *
         * @return bool
         */
        public function is_theme_active()
        {
        }
        /**
         * Registers styles/scripts and initialize the preview of each setting
         *
         * @since 3.4.0
         */
        public function wp_loaded()
        {
        }
        /**
         * Prevents Ajax requests from following redirects when previewing a theme
         * by issuing a 200 response instead of a 30x.
         *
         * Instead, the JS will sniff out the location header.
         *
         * @since 3.4.0
         * @deprecated 4.7.0
         *
         * @param int $status Status.
         * @return int
         */
        public function wp_redirect_status($status)
        {
        }
        /**
         * Finds the changeset post ID for a given changeset UUID.
         *
         * @since 4.7.0
         *
         * @param string $uuid Changeset UUID.
         * @return int|null Returns post ID on success and null on failure.
         */
        public function find_changeset_post_id($uuid)
        {
        }
        /**
         * Gets changeset posts.
         *
         * @since 4.9.0
         *
         * @param array $args {
         *     Args to pass into `get_posts()` to query changesets.
         *
         *     @type int    $posts_per_page             Number of posts to return. Defaults to -1 (all posts).
         *     @type int    $author                     Post author. Defaults to current user.
         *     @type string $post_status                Status of changeset. Defaults to 'auto-draft'.
         *     @type bool   $exclude_restore_dismissed  Whether to exclude changeset auto-drafts that have been dismissed. Defaults to true.
         * }
         * @return WP_Post[] Auto-draft changesets.
         */
        protected function get_changeset_posts($args = array())
        {
        }
        /**
         * Dismisses all of the current user's auto-drafts (other than the present one).
         *
         * @since 4.9.0
         * @return int The number of auto-drafts that were dismissed.
         */
        protected function dismiss_user_auto_draft_changesets()
        {
        }
        /**
         * Gets the changeset post ID for the loaded changeset.
         *
         * @since 4.7.0
         *
         * @return int|null Post ID on success or null if there is no post yet saved.
         */
        public function changeset_post_id()
        {
        }
        /**
         * Gets the data stored in a changeset post.
         *
         * @since 4.7.0
         *
         * @param int $post_id Changeset post ID.
         * @return array|WP_Error Changeset data or WP_Error on error.
         */
        protected function get_changeset_post_data($post_id)
        {
        }
        /**
         * Gets changeset data.
         *
         * @since 4.7.0
         * @since 4.9.0 This will return the changeset's data with a user's autosave revision merged on top, if one exists and $autosaved is true.
         *
         * @return array Changeset data.
         */
        public function changeset_data()
        {
        }
        /**
         * Starter content setting IDs.
         *
         * @since 4.7.0
         * @var array
         */
        protected $pending_starter_content_settings_ids = array();
        /**
         * Imports theme starter content into the customized state.
         *
         * @since 4.7.0
         *
         * @param array $starter_content Starter content. Defaults to `get_theme_starter_content()`.
         */
        public function import_theme_starter_content($starter_content = array())
        {
        }
        /**
         * Prepares starter content attachments.
         *
         * Ensure that the attachments are valid and that they have slugs and file name/path.
         *
         * @since 4.7.0
         *
         * @param array $attachments Attachments.
         * @return array Prepared attachments.
         */
        protected function prepare_starter_content_attachments($attachments)
        {
        }
        /**
         * Saves starter content changeset.
         *
         * @since 4.7.0
         */
        public function _save_starter_content_changeset()
        {
        }
        /**
         * Gets dirty pre-sanitized setting values in the current customized state.
         *
         * The returned array consists of a merge of three sources:
         * 1. If the theme is not currently active, then the base array is any stashed
         *    theme mods that were modified previously but never published.
         * 2. The values from the current changeset, if it exists.
         * 3. If the user can customize, the values parsed from the incoming
         *    `$_POST['customized']` JSON data.
         * 4. Any programmatically-set post values via `WP_Customize_Manager::set_post_value()`.
         *
         * The name "unsanitized_post_values" is a carry-over from when the customized
         * state was exclusively sourced from `$_POST['customized']`. Nevertheless,
         * the value returned will come from the current changeset post and from the
         * incoming post data.
         *
         * @since 4.1.1
         * @since 4.7.0 Added `$args` parameter and merging with changeset values and stashed theme mods.
         *
         * @param array $args {
         *     Args.
         *
         *     @type bool $exclude_changeset Whether the changeset values should also be excluded. Defaults to false.
         *     @type bool $exclude_post_data Whether the post input values should also be excluded. Defaults to false when lacking the customize capability.
         * }
         * @return array
         */
        public function unsanitized_post_values($args = array())
        {
        }
        /**
         * Returns the sanitized value for a given setting from the current customized state.
         *
         * The name "post_value" is a carry-over from when the customized state was exclusively
         * sourced from `$_POST['customized']`. Nevertheless, the value returned will come
         * from the current changeset post and from the incoming post data.
         *
         * @since 3.4.0
         * @since 4.1.1 Introduced the `$default_value` parameter.
         * @since 4.6.0 `$default_value` is now returned early when the setting post value is invalid.
         *
         * @see WP_REST_Server::dispatch()
         * @see WP_REST_Request::sanitize_params()
         * @see WP_REST_Request::has_valid_params()
         *
         * @param WP_Customize_Setting $setting       A WP_Customize_Setting derived object.
         * @param mixed                $default_value Value returned if `$setting` has no post value (added in 4.2.0)
         *                                            or the post value is invalid (added in 4.6.0).
         * @return string|mixed Sanitized value or the `$default_value` provided.
         */
        public function post_value($setting, $default_value = \null)
        {
        }
        /**
         * Overrides a setting's value in the current customized state.
         *
         * The name "post_value" is a carry-over from when the customized state was
         * exclusively sourced from `$_POST['customized']`.
         *
         * @since 4.2.0
         *
         * @param string $setting_id ID for the WP_Customize_Setting instance.
         * @param mixed  $value      Post value.
         */
        public function set_post_value($setting_id, $value)
        {
        }
        /**
         * Prints JavaScript settings.
         *
         * @since 3.4.0
         */
        public function customize_preview_init()
        {
        }
        /**
         * Filters the X-Frame-Options and Content-Security-Policy headers to ensure frontend can load in customizer.
         *
         * @since 4.7.0
         *
         * @param array $headers Headers.
         * @return array Headers.
         */
        public function filter_iframe_security_headers($headers)
        {
        }
        /**
         * Adds customize state query params to a given URL if preview is allowed.
         *
         * @since 4.7.0
         *
         * @see wp_redirect()
         * @see WP_Customize_Manager::get_allowed_url()
         *
         * @param string $url URL.
         * @return string URL.
         */
        public function add_state_query_params($url)
        {
        }
        /**
         * Prevents sending a 404 status when returning the response for the customize
         * preview, since it causes the jQuery Ajax to fail. Send 200 instead.
         *
         * @since 4.0.0
         * @deprecated 4.7.0
         */
        public function customize_preview_override_404_status()
        {
        }
        /**
         * Prints base element for preview frame.
         *
         * @since 3.4.0
         * @deprecated 4.7.0
         */
        public function customize_preview_base()
        {
        }
        /**
         * Prints a workaround to handle HTML5 tags in IE < 9.
         *
         * @since 3.4.0
         * @deprecated 4.7.0 Customizer no longer supports IE8, so all supported browsers recognize HTML5.
         */
        public function customize_preview_html5()
        {
        }
        /**
         * Prints CSS for loading indicators for the Customizer preview.
         *
         * @since 4.2.0
         */
        public function customize_preview_loading_style()
        {
        }
        /**
         * Removes customize_messenger_channel query parameter from the preview window when it is not in an iframe.
         *
         * This ensures that the admin bar will be shown. It also ensures that link navigation will
         * work as expected since the parent frame is not being sent the URL to navigate to.
         *
         * @since 4.7.0
         */
        public function remove_frameless_preview_messenger_channel()
        {
        }
        /**
         * Prints JavaScript settings for preview frame.
         *
         * @since 3.4.0
         */
        public function customize_preview_settings()
        {
        }
        /**
         * Prints a signature so we can ensure the Customizer was properly executed.
         *
         * @since 3.4.0
         * @deprecated 4.7.0
         */
        public function customize_preview_signature()
        {
        }
        /**
         * Removes the signature in case we experience a case where the Customizer was not properly executed.
         *
         * @since 3.4.0
         * @deprecated 4.7.0
         *
         * @param callable|null $callback Optional. Value passed through for {@see 'wp_die_handler'} filter.
         *                                Default null.
         * @return callable|null Value passed through for {@see 'wp_die_handler'} filter.
         */
        public function remove_preview_signature($callback = \null)
        {
        }
        /**
         * Determines whether it is a theme preview or not.
         *
         * @since 3.4.0
         *
         * @return bool True if it's a preview, false if not.
         */
        public function is_preview()
        {
        }
        /**
         * Retrieves the template name of the previewed theme.
         *
         * @since 3.4.0
         *
         * @return string Template name.
         */
        public function get_template()
        {
        }
        /**
         * Retrieves the stylesheet name of the previewed theme.
         *
         * @since 3.4.0
         *
         * @return string Stylesheet name.
         */
        public function get_stylesheet()
        {
        }
        /**
         * Retrieves the template root of the previewed theme.
         *
         * @since 3.4.0
         *
         * @return string Theme root.
         */
        public function get_template_root()
        {
        }
        /**
         * Retrieves the stylesheet root of the previewed theme.
         *
         * @since 3.4.0
         *
         * @return string Theme root.
         */
        public function get_stylesheet_root()
        {
        }
        /**
         * Filters the active theme and return the name of the previewed theme.
         *
         * @since 3.4.0
         *
         * @param mixed $current_theme {@internal Parameter is not used}
         * @return string Theme name.
         */
        public function current_theme($current_theme)
        {
        }
        /**
         * Validates setting values.
         *
         * Validation is skipped for unregistered settings or for values that are
         * already null since they will be skipped anyway. Sanitization is applied
         * to values that pass validation, and values that become null or `WP_Error`
         * after sanitizing are marked invalid.
         *
         * @since 4.6.0
         *
         * @see WP_REST_Request::has_valid_params()
         * @see WP_Customize_Setting::validate()
         *
         * @param array $setting_values Mapping of setting IDs to values to validate and sanitize.
         * @param array $options {
         *     Options.
         *
         *     @type bool $validate_existence  Whether a setting's existence will be checked.
         *     @type bool $validate_capability Whether the setting capability will be checked.
         * }
         * @return array Mapping of setting IDs to return value of validate method calls, either `true` or `WP_Error`.
         */
        public function validate_setting_values($setting_values, $options = array())
        {
        }
        /**
         * Prepares setting validity for exporting to the client (JS).
         *
         * Converts `WP_Error` instance into array suitable for passing into the
         * `wp.customize.Notification` JS model.
         *
         * @since 4.6.0
         *
         * @param true|WP_Error $validity Setting validity.
         * @return true|array If `$validity` was a WP_Error, the error codes will be array-mapped
         *                    to their respective `message` and `data` to pass into the
         *                    `wp.customize.Notification` JS model.
         */
        public function prepare_setting_validity_for_js($validity)
        {
        }
        /**
         * Handles customize_save WP Ajax request to save/update a changeset.
         *
         * @since 3.4.0
         * @since 4.7.0 The semantics of this method have changed to update a changeset, optionally to also change the status and other attributes.
         */
        public function save()
        {
        }
        /**
         * Saves the post for the loaded changeset.
         *
         * @since 4.7.0
         *
         * @param array $args {
         *     Args for changeset post.
         *
         *     @type array  $data            Optional additional changeset data. Values will be merged on top of any existing post values.
         *     @type string $status          Post status. Optional. If supplied, the save will be transactional and a post revision will be allowed.
         *     @type string $title           Post title. Optional.
         *     @type string $date_gmt        Date in GMT. Optional.
         *     @type int    $user_id         ID for user who is saving the changeset. Optional, defaults to the current user ID.
         *     @type bool   $starter_content Whether the data is starter content. If false (default), then $starter_content will be cleared for any $data being saved.
         *     @type bool   $autosave        Whether this is a request to create an autosave revision.
         * }
         *
         * @return array|WP_Error Returns array on success and WP_Error with array data on error.
         */
        public function save_changeset_post($args = array())
        {
        }
        /**
         * Preserves the initial JSON post_content passed to save into the post.
         *
         * This is needed to prevent KSES and other {@see 'content_save_pre'} filters
         * from corrupting JSON data.
         *
         * Note that WP_Customize_Manager::validate_setting_values() have already
         * run on the setting values being serialized as JSON into the post content
         * so it is pre-sanitized.
         *
         * Also, the sanitization logic is re-run through the respective
         * WP_Customize_Setting::sanitize() method when being read out of the
         * changeset, via WP_Customize_Manager::post_value(), and this sanitized
         * value will also be sent into WP_Customize_Setting::update() for
         * persisting to the DB.
         *
         * Multiple users can collaborate on a single changeset, where one user may
         * have the unfiltered_html capability but another may not. A user with
         * unfiltered_html may add a script tag to some field which needs to be kept
         * intact even when another user updates the changeset to modify another field
         * when they do not have unfiltered_html.
         *
         * @since 5.4.1
         *
         * @param array $data                An array of slashed and processed post data.
         * @param array $postarr             An array of sanitized (and slashed) but otherwise unmodified post data.
         * @param array $unsanitized_postarr An array of slashed yet *unsanitized* and unprocessed post data as originally passed to wp_insert_post().
         * @return array Filtered post data.
         */
        public function preserve_insert_changeset_post_content($data, $postarr, $unsanitized_postarr)
        {
        }
        /**
         * Trashes or deletes a changeset post.
         *
         * The following re-formulates the logic from `wp_trash_post()` as done in
         * `wp_publish_post()`. The reason for bypassing `wp_trash_post()` is that it
         * will mutate the the `post_content` and the `post_name` when they should be
         * untouched.
         *
         * @since 4.9.0
         *
         * @see wp_trash_post()
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param int|WP_Post $post The changeset post.
         * @return mixed A WP_Post object for the trashed post or an empty value on failure.
         */
        public function trash_changeset_post($post)
        {
        }
        /**
         * Handles request to trash a changeset.
         *
         * @since 4.9.0
         */
        public function handle_changeset_trash_request()
        {
        }
        /**
         * Re-maps 'edit_post' meta cap for a customize_changeset post to be the same as 'customize' maps.
         *
         * There is essentially a "meta meta" cap in play here, where 'edit_post' meta cap maps to
         * the 'customize' meta cap which then maps to 'edit_theme_options'. This is currently
         * required in core for `wp_create_post_autosave()` because it will call
         * `_wp_translate_postdata()` which in turn will check if a user can 'edit_post', but the
         * the caps for the customize_changeset post type are all mapping to the meta capability.
         * This should be able to be removed once #40922 is addressed in core.
         *
         * @since 4.9.0
         *
         * @link https://core.trac.wordpress.org/ticket/40922
         * @see WP_Customize_Manager::save_changeset_post()
         * @see _wp_translate_postdata()
         *
         * @param string[] $caps    Array of the user's capabilities.
         * @param string   $cap     Capability name.
         * @param int      $user_id The user ID.
         * @param array    $args    Adds the context to the cap. Typically the object ID.
         * @return array Capabilities.
         */
        public function grant_edit_post_capability_for_changeset($caps, $cap, $user_id, $args)
        {
        }
        /**
         * Marks the changeset post as being currently edited by the current user.
         *
         * @since 4.9.0
         *
         * @param int  $changeset_post_id Changeset post ID.
         * @param bool $take_over Whether to take over the changeset. Default false.
         */
        public function set_changeset_lock($changeset_post_id, $take_over = \false)
        {
        }
        /**
         * Refreshes changeset lock with the current time if current user edited the changeset before.
         *
         * @since 4.9.0
         *
         * @param int $changeset_post_id Changeset post ID.
         */
        public function refresh_changeset_lock($changeset_post_id)
        {
        }
        /**
         * Filters heartbeat settings for the Customizer.
         *
         * @since 4.9.0
         *
         * @global string $pagenow The filename of the current screen.
         *
         * @param array $settings Current settings to filter.
         * @return array Heartbeat settings.
         */
        public function add_customize_screen_to_heartbeat_settings($settings)
        {
        }
        /**
         * Gets lock user data.
         *
         * @since 4.9.0
         *
         * @param int $user_id User ID.
         * @return array|null User data formatted for client.
         */
        protected function get_lock_user_data($user_id)
        {
        }
        /**
         * Checks locked changeset with heartbeat API.
         *
         * @since 4.9.0
         *
         * @param array  $response  The Heartbeat response.
         * @param array  $data      The $_POST data sent.
         * @param string $screen_id The screen id.
         * @return array The Heartbeat response.
         */
        public function check_changeset_lock_with_heartbeat($response, $data, $screen_id)
        {
        }
        /**
         * Removes changeset lock when take over request is sent via Ajax.
         *
         * @since 4.9.0
         */
        public function handle_override_changeset_lock_request()
        {
        }
        /**
         * Determines whether a changeset revision should be made.
         *
         * @since 4.7.0
         * @var bool
         */
        protected $store_changeset_revision;
        /**
         * Filters whether a changeset has changed to create a new revision.
         *
         * Note that this will not be called while a changeset post remains in auto-draft status.
         *
         * @since 4.7.0
         *
         * @param bool    $post_has_changed Whether the post has changed.
         * @param WP_Post $last_revision    The last revision post object.
         * @param WP_Post $post             The post object.
         * @return bool Whether a revision should be made.
         */
        public function _filter_revision_post_has_changed($post_has_changed, $last_revision, $post)
        {
        }
        /**
         * Publishes the values of a changeset.
         *
         * This will publish the values contained in a changeset, even changesets that do not
         * correspond to current manager instance. This is called by
         * `_wp_customize_publish_changeset()` when a customize_changeset post is
         * transitioned to the `publish` status. As such, this method should not be
         * called directly and instead `wp_publish_post()` should be used.
         *
         * Please note that if the settings in the changeset are for a non-activated
         * theme, the theme must first be switched to (via `switch_theme()`) before
         * invoking this method.
         *
         * @since 4.7.0
         *
         * @see _wp_customize_publish_changeset()
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param int $changeset_post_id ID for customize_changeset post. Defaults to the changeset for the current manager instance.
         * @return true|WP_Error True or error info.
         */
        public function _publish_changeset_values($changeset_post_id)
        {
        }
        /**
         * Updates stashed theme mod settings.
         *
         * @since 4.7.0
         *
         * @param array $inactive_theme_mod_settings Mapping of stylesheet to arrays of theme mod settings.
         * @return array|false Returns array of updated stashed theme mods or false if the update failed or there were no changes.
         */
        protected function update_stashed_theme_mod_settings($inactive_theme_mod_settings)
        {
        }
        /**
         * Refreshes nonces for the current preview.
         *
         * @since 4.2.0
         */
        public function refresh_nonces()
        {
        }
        /**
         * Deletes a given auto-draft changeset or the autosave revision for a given changeset or delete changeset lock.
         *
         * @since 4.9.0
         */
        public function handle_dismiss_autosave_or_lock_request()
        {
        }
        /**
         * Adds a customize setting.
         *
         * @since 3.4.0
         * @since 4.5.0 Return added WP_Customize_Setting instance.
         *
         * @see WP_Customize_Setting::__construct()
         * @link https://developer.wordpress.org/themes/customize-api
         *
         * @param WP_Customize_Setting|string $id   Customize Setting object, or ID.
         * @param array                       $args Optional. Array of properties for the new Setting object.
         *                                          See WP_Customize_Setting::__construct() for information
         *                                          on accepted arguments. Default empty array.
         * @return WP_Customize_Setting The instance of the setting that was added.
         */
        public function add_setting($id, $args = array())
        {
        }
        /**
         * Registers any dynamically-created settings, such as those from $_POST['customized']
         * that have no corresponding setting created.
         *
         * This is a mechanism to "wake up" settings that have been dynamically created
         * on the front end and have been sent to WordPress in `$_POST['customized']`. When WP
         * loads, the dynamically-created settings then will get created and previewed
         * even though they are not directly created statically with code.
         *
         * @since 4.2.0
         *
         * @param array $setting_ids The setting IDs to add.
         * @return array The WP_Customize_Setting objects added.
         */
        public function add_dynamic_settings($setting_ids)
        {
        }
        /**
         * Retrieves a customize setting.
         *
         * @since 3.4.0
         *
         * @param string $id Customize Setting ID.
         * @return WP_Customize_Setting|void The setting, if set.
         */
        public function get_setting($id)
        {
        }
        /**
         * Removes a customize setting.
         *
         * Note that removing the setting doesn't destroy the WP_Customize_Setting instance or remove its filters.
         *
         * @since 3.4.0
         *
         * @param string $id Customize Setting ID.
         */
        public function remove_setting($id)
        {
        }
        /**
         * Adds a customize panel.
         *
         * @since 4.0.0
         * @since 4.5.0 Return added WP_Customize_Panel instance.
         *
         * @see WP_Customize_Panel::__construct()
         *
         * @param WP_Customize_Panel|string $id   Customize Panel object, or ID.
         * @param array                     $args Optional. Array of properties for the new Panel object.
         *                                        See WP_Customize_Panel::__construct() for information
         *                                        on accepted arguments. Default empty array.
         * @return WP_Customize_Panel The instance of the panel that was added.
         */
        public function add_panel($id, $args = array())
        {
        }
        /**
         * Retrieves a customize panel.
         *
         * @since 4.0.0
         *
         * @param string $id Panel ID to get.
         * @return WP_Customize_Panel|void Requested panel instance, if set.
         */
        public function get_panel($id)
        {
        }
        /**
         * Removes a customize panel.
         *
         * Note that removing the panel doesn't destroy the WP_Customize_Panel instance or remove its filters.
         *
         * @since 4.0.0
         *
         * @param string $id Panel ID to remove.
         */
        public function remove_panel($id)
        {
        }
        /**
         * Registers a customize panel type.
         *
         * Registered types are eligible to be rendered via JS and created dynamically.
         *
         * @since 4.3.0
         *
         * @see WP_Customize_Panel
         *
         * @param string $panel Name of a custom panel which is a subclass of WP_Customize_Panel.
         */
        public function register_panel_type($panel)
        {
        }
        /**
         * Renders JS templates for all registered panel types.
         *
         * @since 4.3.0
         */
        public function render_panel_templates()
        {
        }
        /**
         * Adds a customize section.
         *
         * @since 3.4.0
         * @since 4.5.0 Return added WP_Customize_Section instance.
         *
         * @see WP_Customize_Section::__construct()
         *
         * @param WP_Customize_Section|string $id   Customize Section object, or ID.
         * @param array                       $args Optional. Array of properties for the new Section object.
         *                                          See WP_Customize_Section::__construct() for information
         *                                          on accepted arguments. Default empty array.
         * @return WP_Customize_Section The instance of the section that was added.
         */
        public function add_section($id, $args = array())
        {
        }
        /**
         * Retrieves a customize section.
         *
         * @since 3.4.0
         *
         * @param string $id Section ID.
         * @return WP_Customize_Section|void The section, if set.
         */
        public function get_section($id)
        {
        }
        /**
         * Removes a customize section.
         *
         * Note that removing the section doesn't destroy the WP_Customize_Section instance or remove its filters.
         *
         * @since 3.4.0
         *
         * @param string $id Section ID.
         */
        public function remove_section($id)
        {
        }
        /**
         * Registers a customize section type.
         *
         * Registered types are eligible to be rendered via JS and created dynamically.
         *
         * @since 4.3.0
         *
         * @see WP_Customize_Section
         *
         * @param string $section Name of a custom section which is a subclass of WP_Customize_Section.
         */
        public function register_section_type($section)
        {
        }
        /**
         * Renders JS templates for all registered section types.
         *
         * @since 4.3.0
         */
        public function render_section_templates()
        {
        }
        /**
         * Adds a customize control.
         *
         * @since 3.4.0
         * @since 4.5.0 Return added WP_Customize_Control instance.
         *
         * @see WP_Customize_Control::__construct()
         *
         * @param WP_Customize_Control|string $id   Customize Control object, or ID.
         * @param array                       $args Optional. Array of properties for the new Control object.
         *                                          See WP_Customize_Control::__construct() for information
         *                                          on accepted arguments. Default empty array.
         * @return WP_Customize_Control The instance of the control that was added.
         */
        public function add_control($id, $args = array())
        {
        }
        /**
         * Retrieves a customize control.
         *
         * @since 3.4.0
         *
         * @param string $id ID of the control.
         * @return WP_Customize_Control|void The control object, if set.
         */
        public function get_control($id)
        {
        }
        /**
         * Removes a customize control.
         *
         * Note that removing the control doesn't destroy the WP_Customize_Control instance or remove its filters.
         *
         * @since 3.4.0
         *
         * @param string $id ID of the control.
         */
        public function remove_control($id)
        {
        }
        /**
         * Registers a customize control type.
         *
         * Registered types are eligible to be rendered via JS and created dynamically.
         *
         * @since 4.1.0
         *
         * @param string $control Name of a custom control which is a subclass of
         *                        WP_Customize_Control.
         */
        public function register_control_type($control)
        {
        }
        /**
         * Renders JS templates for all registered control types.
         *
         * @since 4.1.0
         */
        public function render_control_templates()
        {
        }
        /**
         * Helper function to compare two objects by priority, ensuring sort stability via instance_number.
         *
         * @since 3.4.0
         * @deprecated 4.7.0 Use wp_list_sort()
         *
         * @param WP_Customize_Panel|WP_Customize_Section|WP_Customize_Control $a Object A.
         * @param WP_Customize_Panel|WP_Customize_Section|WP_Customize_Control $b Object B.
         * @return int
         */
        protected function _cmp_priority($a, $b)
        {
        }
        /**
         * Prepares panels, sections, and controls.
         *
         * For each, check if required related components exist,
         * whether the user has the necessary capabilities,
         * and sort by priority.
         *
         * @since 3.4.0
         */
        public function prepare_controls()
        {
        }
        /**
         * Enqueues scripts for customize controls.
         *
         * @since 3.4.0
         */
        public function enqueue_control_scripts()
        {
        }
        /**
         * Determines whether the user agent is iOS.
         *
         * @since 4.4.0
         *
         * @return bool Whether the user agent is iOS.
         */
        public function is_ios()
        {
        }
        /**
         * Gets the template string for the Customizer pane document title.
         *
         * @since 4.4.0
         *
         * @return string The template string for the document title.
         */
        public function get_document_title_template()
        {
        }
        /**
         * Sets the initial URL to be previewed.
         *
         * URL is validated.
         *
         * @since 4.4.0
         *
         * @param string $preview_url URL to be previewed.
         */
        public function set_preview_url($preview_url)
        {
        }
        /**
         * Gets the initial URL to be previewed.
         *
         * @since 4.4.0
         *
         * @return string URL being previewed.
         */
        public function get_preview_url()
        {
        }
        /**
         * Determines whether the admin and the frontend are on different domains.
         *
         * @since 4.7.0
         *
         * @return bool Whether cross-domain.
         */
        public function is_cross_domain()
        {
        }
        /**
         * Gets URLs allowed to be previewed.
         *
         * If the front end and the admin are served from the same domain, load the
         * preview over ssl if the Customizer is being loaded over ssl. This avoids
         * insecure content warnings. This is not attempted if the admin and front end
         * are on different domains to avoid the case where the front end doesn't have
         * ssl certs. Domain mapping plugins can allow other urls in these conditions
         * using the customize_allowed_urls filter.
         *
         * @since 4.7.0
         *
         * @return array Allowed URLs.
         */
        public function get_allowed_urls()
        {
        }
        /**
         * Gets messenger channel.
         *
         * @since 4.7.0
         *
         * @return string Messenger channel.
         */
        public function get_messenger_channel()
        {
        }
        /**
         * Sets URL to link the user to when closing the Customizer.
         *
         * URL is validated.
         *
         * @since 4.4.0
         *
         * @param string $return_url URL for return link.
         */
        public function set_return_url($return_url)
        {
        }
        /**
         * Gets URL to link the user to when closing the Customizer.
         *
         * @since 4.4.0
         *
         * @global array $_registered_pages
         *
         * @return string URL for link to close Customizer.
         */
        public function get_return_url()
        {
        }
        /**
         * Sets the autofocused constructs.
         *
         * @since 4.4.0
         *
         * @param array $autofocus {
         *     Mapping of 'panel', 'section', 'control' to the ID which should be autofocused.
         *
         *     @type string $control ID for control to be autofocused.
         *     @type string $section ID for section to be autofocused.
         *     @type string $panel   ID for panel to be autofocused.
         * }
         */
        public function set_autofocus($autofocus)
        {
        }
        /**
         * Gets the autofocused constructs.
         *
         * @since 4.4.0
         *
         * @return string[] {
         *     Mapping of 'panel', 'section', 'control' to the ID which should be autofocused.
         *
         *     @type string $control ID for control to be autofocused.
         *     @type string $section ID for section to be autofocused.
         *     @type string $panel   ID for panel to be autofocused.
         * }
         */
        public function get_autofocus()
        {
        }
        /**
         * Gets nonces for the Customizer.
         *
         * @since 4.5.0
         *
         * @return array Nonces.
         */
        public function get_nonces()
        {
        }
        /**
         * Prints JavaScript settings for parent window.
         *
         * @since 4.4.0
         */
        public function customize_pane_settings()
        {
        }
        /**
         * Returns a list of devices to allow previewing.
         *
         * @since 4.5.0
         *
         * @return array List of devices with labels and default setting.
         */
        public function get_previewable_devices()
        {
        }
        /**
         * Registers some default controls.
         *
         * @since 3.4.0
         */
        public function register_controls()
        {
        }
        /**
         * Returns whether there are published pages.
         *
         * Used as active callback for static front page section and controls.
         *
         * @since 4.7.0
         *
         * @return bool Whether there are published (or to be published) pages.
         */
        public function has_published_pages()
        {
        }
        /**
         * Adds settings from the POST data that were not added with code, e.g. dynamically-created settings for Widgets
         *
         * @since 4.2.0
         *
         * @see add_dynamic_settings()
         */
        public function register_dynamic_settings()
        {
        }
        /**
         * Loads themes into the theme browsing/installation UI.
         *
         * @since 4.9.0
         */
        public function handle_load_themes_request()
        {
        }
        /**
         * Callback for validating the header_textcolor value.
         *
         * Accepts 'blank', and otherwise uses sanitize_hex_color_no_hash().
         * Returns default text color if hex color is empty.
         *
         * @since 3.4.0
         *
         * @param string $color
         * @return mixed
         */
        public function _sanitize_header_textcolor($color)
        {
        }
        /**
         * Callback for validating a background setting value.
         *
         * @since 4.7.0
         *
         * @param string               $value   Repeat value.
         * @param WP_Customize_Setting $setting Setting.
         * @return string|WP_Error Background value or validation error.
         */
        public function _sanitize_background_setting($value, $setting)
        {
        }
        /**
         * Exports header video settings to facilitate selective refresh.
         *
         * @since 4.7.0
         *
         * @param array                          $response          Response.
         * @param WP_Customize_Selective_Refresh $selective_refresh Selective refresh component.
         * @param array                          $partials          Array of partials.
         * @return array
         */
        public function export_header_video_settings($response, $selective_refresh, $partials)
        {
        }
        /**
         * Callback for validating the header_video value.
         *
         * Ensures that the selected video is less than 8MB and provides an error message.
         *
         * @since 4.7.0
         *
         * @param WP_Error $validity
         * @param mixed    $value
         * @return mixed
         */
        public function _validate_header_video($validity, $value)
        {
        }
        /**
         * Callback for validating the external_header_video value.
         *
         * Ensures that the provided URL is supported.
         *
         * @since 4.7.0
         *
         * @param WP_Error $validity
         * @param mixed    $value
         * @return mixed
         */
        public function _validate_external_header_video($validity, $value)
        {
        }
        /**
         * Callback for sanitizing the external_header_video value.
         *
         * @since 4.7.1
         *
         * @param string $value URL.
         * @return string Sanitized URL.
         */
        public function _sanitize_external_header_video($value)
        {
        }
        /**
         * Callback for rendering the custom logo, used in the custom_logo partial.
         *
         * This method exists because the partial object and context data are passed
         * into a partial's render_callback so we cannot use get_custom_logo() as
         * the render_callback directly since it expects a blog ID as the first
         * argument. When WP no longer supports PHP 5.3, this method can be removed
         * in favor of an anonymous function.
         *
         * @see WP_Customize_Manager::register_controls()
         *
         * @since 4.5.0
         *
         * @return string Custom logo.
         */
        public function _render_custom_logo_partial()
        {
        }
    }
    /**
     * WordPress List utility class
     *
     * @package WordPress
     * @since 4.7.0
     */
    /**
     * List utility.
     *
     * Utility class to handle operations on an array of objects or arrays.
     *
     * @since 4.7.0
     */
    class WP_List_Util
    {
        /**
         * The input array.
         *
         * @since 4.7.0
         * @var array
         */
        private $input = array();
        /**
         * The output array.
         *
         * @since 4.7.0
         * @var array
         */
        private $output = array();
        /**
         * Temporary arguments for sorting.
         *
         * @since 4.7.0
         * @var string[]
         */
        private $orderby = array();
        /**
         * Constructor.
         *
         * Sets the input array.
         *
         * @since 4.7.0
         *
         * @param array $input Array to perform operations on.
         */
        public function __construct($input)
        {
        }
        /**
         * Returns the original input array.
         *
         * @since 4.7.0
         *
         * @return array The input array.
         */
        public function get_input()
        {
        }
        /**
         * Returns the output array.
         *
         * @since 4.7.0
         *
         * @return array The output array.
         */
        public function get_output()
        {
        }
        /**
         * Filters the list, based on a set of key => value arguments.
         *
         * Retrieves the objects from the list that match the given arguments.
         * Key represents property name, and value represents property value.
         *
         * If an object has more properties than those specified in arguments,
         * that will not disqualify it. When using the 'AND' operator,
         * any missing properties will disqualify it.
         *
         * @since 4.7.0
         *
         * @param array  $args     Optional. An array of key => value arguments to match
         *                         against each object. Default empty array.
         * @param string $operator Optional. The logical operation to perform. 'AND' means
         *                         all elements from the array must match. 'OR' means only
         *                         one element needs to match. 'NOT' means no elements may
         *                         match. Default 'AND'.
         * @return array Array of found values.
         */
        public function filter($args = array(), $operator = 'AND')
        {
        }
        /**
         * Plucks a certain field out of each element in the input array.
         *
         * This has the same functionality and prototype of
         * array_column() (PHP 5.5) but also supports objects.
         *
         * @since 4.7.0
         *
         * @param int|string $field     Field to fetch from the object or array.
         * @param int|string $index_key Optional. Field from the element to use as keys for the new array.
         *                              Default null.
         * @return array Array of found values. If `$index_key` is set, an array of found values with keys
         *               corresponding to `$index_key`. If `$index_key` is null, array keys from the original
         *               `$list` will be preserved in the results.
         */
        public function pluck($field, $index_key = \null)
        {
        }
        /**
         * Sorts the input array based on one or more orderby arguments.
         *
         * @since 4.7.0
         *
         * @param string|array $orderby       Optional. Either the field name to order by or an array
         *                                    of multiple orderby fields as $orderby => $order.
         * @param string       $order         Optional. Either 'ASC' or 'DESC'. Only used if $orderby
         *                                    is a string.
         * @param bool         $preserve_keys Optional. Whether to preserve keys. Default false.
         * @return array The sorted array.
         */
        public function sort($orderby = array(), $order = 'ASC', $preserve_keys = \false)
        {
        }
        /**
         * Callback to sort an array by specific fields.
         *
         * @since 4.7.0
         *
         * @see WP_List_Util::sort()
         *
         * @param object|array $a One object to compare.
         * @param object|array $b The other object to compare.
         * @return int 0 if both objects equal. -1 if second object should come first, 1 otherwise.
         */
        private function sort_callback($a, $b)
        {
        }
    }
    /**
     * Error Protection API: WP_Recovery_Mode_Email_Link class
     *
     * @package WordPress
     * @since 5.2.0
     */
    /**
     * Core class used to send an email with a link to begin Recovery Mode.
     *
     * @since 5.2.0
     */
    final class WP_Recovery_Mode_Email_Service
    {
        const RATE_LIMIT_OPTION = 'recovery_mode_email_last_sent';
        /**
         * Service to generate recovery mode URLs.
         *
         * @since 5.2.0
         * @var WP_Recovery_Mode_Link_Service
         */
        private $link_service;
        /**
         * WP_Recovery_Mode_Email_Service constructor.
         *
         * @since 5.2.0
         *
         * @param WP_Recovery_Mode_Link_Service $link_service
         */
        public function __construct(\WP_Recovery_Mode_Link_Service $link_service)
        {
        }
        /**
         * Sends the recovery mode email if the rate limit has not been sent.
         *
         * @since 5.2.0
         *
         * @param int   $rate_limit Number of seconds before another email can be sent.
         * @param array $error      Error details from `error_get_last()`.
         * @param array $extension {
         *     The extension that caused the error.
         *
         *     @type string $slug The extension slug. The plugin or theme's directory.
         *     @type string $type The extension type. Either 'plugin' or 'theme'.
         * }
         * @return true|WP_Error True if email sent, WP_Error otherwise.
         */
        public function maybe_send_recovery_mode_email($rate_limit, $error, $extension)
        {
        }
        /**
         * Clears the rate limit, allowing a new recovery mode email to be sent immediately.
         *
         * @since 5.2.0
         *
         * @return bool True on success, false on failure.
         */
        public function clear_rate_limit()
        {
        }
        /**
         * Sends the Recovery Mode email to the site admin email address.
         *
         * @since 5.2.0
         *
         * @param int   $rate_limit Number of seconds before another email can be sent.
         * @param array $error      Error details from `error_get_last()`.
         * @param array $extension {
         *     The extension that caused the error.
         *
         *     @type string $slug The extension slug. The directory of the plugin or theme.
         *     @type string $type The extension type. Either 'plugin' or 'theme'.
         * }
         * @return bool Whether the email was sent successfully.
         */
        private function send_recovery_mode_email($rate_limit, $error, $extension)
        {
        }
        /**
         * Gets the email address to send the recovery mode link to.
         *
         * @since 5.2.0
         *
         * @return string Email address to send recovery mode link to.
         */
        private function get_recovery_mode_email_address()
        {
        }
        /**
         * Gets the description indicating the possible cause for the error.
         *
         * @since 5.2.0
         *
         * @param array $extension {
         *     The extension that caused the error.
         *
         *     @type string $slug The extension slug. The directory of the plugin or theme.
         *     @type string $type The extension type. Either 'plugin' or 'theme'.
         * }
         * @return string Message about which extension caused the error.
         */
        private function get_cause($extension)
        {
        }
        /**
         * Return the details for a single plugin based on the extension data from an error.
         *
         * @since 5.3.0
         *
         * @param array $extension {
         *     The extension that caused the error.
         *
         *     @type string $slug The extension slug. The directory of the plugin or theme.
         *     @type string $type The extension type. Either 'plugin' or 'theme'.
         * }
         * @return array|false A plugin array {@see get_plugins()} or `false` if no plugin was found.
         */
        private function get_plugin($extension)
        {
        }
        /**
         * Return debug information in an easy to manipulate format.
         *
         * @since 5.3.0
         *
         * @param array $extension {
         *     The extension that caused the error.
         *
         *     @type string $slug The extension slug. The directory of the plugin or theme.
         *     @type string $type The extension type. Either 'plugin' or 'theme'.
         * }
         * @return array An associative array of debug information.
         */
        private function get_debug($extension)
        {
        }
    }
    /**
     * WP_HTTP_IXR_Client
     *
     * @package WordPress
     * @since 3.1.0
     */
    class WP_HTTP_IXR_Client extends \IXR_Client
    {
        public $scheme;
        /**
         * @var IXR_Error
         */
        public $error;
        /**
         * @param string       $server
         * @param string|false $path
         * @param int|false    $port
         * @param int          $timeout
         */
        public function __construct($server, $path = \false, $port = \false, $timeout = 15)
        {
        }
        /**
         * @since 3.1.0
         * @since 5.5.0 Formalized the existing `...$args` parameter by adding it
         *              to the function signature.
         *
         * @return bool
         */
        public function query(...$args)
        {
        }
    }
    /**
     * HTTP API: WP_HTTP_Proxy class
     *
     * @package WordPress
     * @subpackage HTTP
     * @since 4.4.0
     */
    /**
     * Core class used to implement HTTP API proxy support.
     *
     * There are caveats to proxy support. It requires that defines be made in the wp-config.php file to
     * enable proxy support. There are also a few filters that plugins can hook into for some of the
     * constants.
     *
     * Please note that only BASIC authentication is supported by most transports.
     * cURL MAY support more methods (such as NTLM authentication) depending on your environment.
     *
     * The constants are as follows:
     * <ol>
     * <li>WP_PROXY_HOST - Enable proxy support and host for connecting.</li>
     * <li>WP_PROXY_PORT - Proxy port for connection. No default, must be defined.</li>
     * <li>WP_PROXY_USERNAME - Proxy username, if it requires authentication.</li>
     * <li>WP_PROXY_PASSWORD - Proxy password, if it requires authentication.</li>
     * <li>WP_PROXY_BYPASS_HOSTS - Will prevent the hosts in this list from going through the proxy.
     * You do not need to have localhost and the site host in this list, because they will not be passed
     * through the proxy. The list should be presented in a comma separated list, wildcards using * are supported. Example: *.wordpress.org</li>
     * </ol>
     *
     * An example can be as seen below.
     *
     *     define('WP_PROXY_HOST', '192.168.84.101');
     *     define('WP_PROXY_PORT', '8080');
     *     define('WP_PROXY_BYPASS_HOSTS', 'localhost, www.example.com, *.wordpress.org');
     *
     * @link https://core.trac.wordpress.org/ticket/4011 Proxy support ticket in WordPress.
     * @link https://core.trac.wordpress.org/ticket/14636 Allow wildcard domains in WP_PROXY_BYPASS_HOSTS
     *
     * @since 2.8.0
     */
    class WP_HTTP_Proxy
    {
        /**
         * Whether proxy connection should be used.
         *
         * Constants which control this behaviour:
         *
         * - `WP_PROXY_HOST`
         * - `WP_PROXY_PORT`
         *
         * @since 2.8.0
         *
         * @return bool
         */
        public function is_enabled()
        {
        }
        /**
         * Whether authentication should be used.
         *
         * Constants which control this behaviour:
         *
         * - `WP_PROXY_USERNAME`
         * - `WP_PROXY_PASSWORD`
         *
         * @since 2.8.0
         *
         * @return bool
         */
        public function use_authentication()
        {
        }
        /**
         * Retrieve the host for the proxy server.
         *
         * @since 2.8.0
         *
         * @return string
         */
        public function host()
        {
        }
        /**
         * Retrieve the port for the proxy server.
         *
         * @since 2.8.0
         *
         * @return string
         */
        public function port()
        {
        }
        /**
         * Retrieve the username for proxy authentication.
         *
         * @since 2.8.0
         *
         * @return string
         */
        public function username()
        {
        }
        /**
         * Retrieve the password for proxy authentication.
         *
         * @since 2.8.0
         *
         * @return string
         */
        public function password()
        {
        }
        /**
         * Retrieve authentication string for proxy authentication.
         *
         * @since 2.8.0
         *
         * @return string
         */
        public function authentication()
        {
        }
        /**
         * Retrieve header string for proxy authentication.
         *
         * @since 2.8.0
         *
         * @return string
         */
        public function authentication_header()
        {
        }
        /**
         * Determines whether the request should be sent through a proxy.
         *
         * We want to keep localhost and the site URL from being sent through the proxy, because
         * some proxies can not handle this. We also have the constant available for defining other
         * hosts that won't be sent through the proxy.
         *
         * @since 2.8.0
         *
         * @param string $uri URL of the request.
         * @return bool Whether to send the request through the proxy.
         */
        public function send_through_proxy($uri)
        {
        }
    }
    /**
     * WordPress Customize Widgets classes
     *
     * @package WordPress
     * @subpackage Customize
     * @since 3.9.0
     */
    /**
     * Customize Widgets class.
     *
     * Implements widget management in the Customizer.
     *
     * @since 3.9.0
     *
     * @see WP_Customize_Manager
     */
    final class WP_Customize_Widgets
    {
        /**
         * WP_Customize_Manager instance.
         *
         * @since 3.9.0
         * @var WP_Customize_Manager
         */
        public $manager;
        /**
         * All id_bases for widgets defined in core.
         *
         * @since 3.9.0
         * @var array
         */
        protected $core_widget_id_bases = array('archives', 'calendar', 'categories', 'custom_html', 'links', 'media_audio', 'media_image', 'media_video', 'meta', 'nav_menu', 'pages', 'recent-comments', 'recent-posts', 'rss', 'search', 'tag_cloud', 'text');
        /**
         * @since 3.9.0
         * @var array
         */
        protected $rendered_sidebars = array();
        /**
         * @since 3.9.0
         * @var array
         */
        protected $rendered_widgets = array();
        /**
         * @since 3.9.0
         * @var array
         */
        protected $old_sidebars_widgets = array();
        /**
         * Mapping of widget ID base to whether it supports selective refresh.
         *
         * @since 4.5.0
         * @var array
         */
        protected $selective_refreshable_widgets;
        /**
         * Mapping of setting type to setting ID pattern.
         *
         * @since 4.2.0
         * @var array
         */
        protected $setting_id_patterns = array('widget_instance' => '/^widget_(?P<id_base>.+?)(?:\\[(?P<widget_number>\\d+)\\])?$/', 'sidebar_widgets' => '/^sidebars_widgets\\[(?P<sidebar_id>.+?)\\]$/');
        /**
         * Initial loader.
         *
         * @since 3.9.0
         *
         * @param WP_Customize_Manager $manager Customizer bootstrap instance.
         */
        public function __construct($manager)
        {
        }
        /**
         * List whether each registered widget can be use selective refresh.
         *
         * If the theme does not support the customize-selective-refresh-widgets feature,
         * then this will always return an empty array.
         *
         * @since 4.5.0
         *
         * @global WP_Widget_Factory $wp_widget_factory
         *
         * @return array Mapping of id_base to support. If theme doesn't support
         *               selective refresh, an empty array is returned.
         */
        public function get_selective_refreshable_widgets()
        {
        }
        /**
         * Determines if a widget supports selective refresh.
         *
         * @since 4.5.0
         *
         * @param string $id_base Widget ID Base.
         * @return bool Whether the widget can be selective refreshed.
         */
        public function is_widget_selective_refreshable($id_base)
        {
        }
        /**
         * Retrieves the widget setting type given a setting ID.
         *
         * @since 4.2.0
         *
         * @param string $setting_id Setting ID.
         * @return string|void Setting type.
         */
        protected function get_setting_type($setting_id)
        {
        }
        /**
         * Inspects the incoming customized data for any widget settings, and dynamically adds
         * them up-front so widgets will be initialized properly.
         *
         * @since 4.2.0
         */
        public function register_settings()
        {
        }
        /**
         * Determines the arguments for a dynamically-created setting.
         *
         * @since 4.2.0
         *
         * @param false|array $args       The arguments to the WP_Customize_Setting constructor.
         * @param string      $setting_id ID for dynamic setting, usually coming from `$_POST['customized']`.
         * @return array|false Setting arguments, false otherwise.
         */
        public function filter_customize_dynamic_setting_args($args, $setting_id)
        {
        }
        /**
         * Retrieves an unslashed post value or return a default.
         *
         * @since 3.9.0
         *
         * @param string $name          Post value.
         * @param mixed  $default_value Default post value.
         * @return mixed Unslashed post value or default value.
         */
        protected function get_post_value($name, $default_value = \null)
        {
        }
        /**
         * Override sidebars_widgets for theme switch.
         *
         * When switching a theme via the Customizer, supply any previously-configured
         * sidebars_widgets from the target theme as the initial sidebars_widgets
         * setting. Also store the old theme's existing settings so that they can
         * be passed along for storing in the sidebars_widgets theme_mod when the
         * theme gets switched.
         *
         * @since 3.9.0
         *
         * @global array $sidebars_widgets
         * @global array $_wp_sidebars_widgets
         */
        public function override_sidebars_widgets_for_theme_switch()
        {
        }
        /**
         * Filters old_sidebars_widgets_data Customizer setting.
         *
         * When switching themes, filter the Customizer setting old_sidebars_widgets_data
         * to supply initial $sidebars_widgets before they were overridden by retrieve_widgets().
         * The value for old_sidebars_widgets_data gets set in the old theme's sidebars_widgets
         * theme_mod.
         *
         * @since 3.9.0
         *
         * @see WP_Customize_Widgets::handle_theme_switch()
         *
         * @param array $old_sidebars_widgets
         * @return array
         */
        public function filter_customize_value_old_sidebars_widgets_data($old_sidebars_widgets)
        {
        }
        /**
         * Filters sidebars_widgets option for theme switch.
         *
         * When switching themes, the retrieve_widgets() function is run when the Customizer initializes,
         * and then the new sidebars_widgets here get supplied as the default value for the sidebars_widgets
         * option.
         *
         * @since 3.9.0
         *
         * @see WP_Customize_Widgets::handle_theme_switch()
         * @global array $sidebars_widgets
         *
         * @param array $sidebars_widgets
         * @return array
         */
        public function filter_option_sidebars_widgets_for_theme_switch($sidebars_widgets)
        {
        }
        /**
         * Ensures all widgets get loaded into the Customizer.
         *
         * Note: these actions are also fired in wp_ajax_update_widget().
         *
         * @since 3.9.0
         */
        public function customize_controls_init()
        {
        }
        /**
         * Ensures widgets are available for all types of previews.
         *
         * When in preview, hook to {@see 'customize_register'} for settings after WordPress is loaded
         * so that all filters have been initialized (e.g. Widget Visibility).
         *
         * @since 3.9.0
         */
        public function schedule_customize_register()
        {
        }
        /**
         * Registers Customizer settings and controls for all sidebars and widgets.
         *
         * @since 3.9.0
         *
         * @global array $wp_registered_widgets
         * @global array $wp_registered_widget_controls
         * @global array $wp_registered_sidebars
         */
        public function customize_register()
        {
        }
        /**
         * Determines whether the widgets panel is active, based on whether there are sidebars registered.
         *
         * @since 4.4.0
         *
         * @see WP_Customize_Panel::$active_callback
         *
         * @global array $wp_registered_sidebars
         * @return bool Active.
         */
        public function is_panel_active()
        {
        }
        /**
         * Converts a widget_id into its corresponding Customizer setting ID (option name).
         *
         * @since 3.9.0
         *
         * @param string $widget_id Widget ID.
         * @return string Maybe-parsed widget ID.
         */
        public function get_setting_id($widget_id)
        {
        }
        /**
         * Determines whether the widget is considered "wide".
         *
         * Core widgets which may have controls wider than 250, but can still be shown
         * in the narrow Customizer panel. The RSS and Text widgets in Core, for example,
         * have widths of 400 and yet they still render fine in the Customizer panel.
         *
         * This method will return all Core widgets as being not wide, but this can be
         * overridden with the {@see 'is_wide_widget_in_customizer'} filter.
         *
         * @since 3.9.0
         *
         * @global array $wp_registered_widget_controls
         *
         * @param string $widget_id Widget ID.
         * @return bool Whether or not the widget is a "wide" widget.
         */
        public function is_wide_widget($widget_id)
        {
        }
        /**
         * Converts a widget ID into its id_base and number components.
         *
         * @since 3.9.0
         *
         * @param string $widget_id Widget ID.
         * @return array Array containing a widget's id_base and number components.
         */
        public function parse_widget_id($widget_id)
        {
        }
        /**
         * Converts a widget setting ID (option path) to its id_base and number components.
         *
         * @since 3.9.0
         *
         * @param string $setting_id Widget setting ID.
         * @return array|WP_Error Array containing a widget's id_base and number components,
         *                        or a WP_Error object.
         */
        public function parse_widget_setting_id($setting_id)
        {
        }
        /**
         * Calls admin_print_styles-widgets.php and admin_print_styles hooks to
         * allow custom styles from plugins.
         *
         * @since 3.9.0
         */
        public function print_styles()
        {
        }
        /**
         * Calls admin_print_scripts-widgets.php and admin_print_scripts hooks to
         * allow custom scripts from plugins.
         *
         * @since 3.9.0
         */
        public function print_scripts()
        {
        }
        /**
         * Enqueues scripts and styles for Customizer panel and export data to JavaScript.
         *
         * @since 3.9.0
         *
         * @global WP_Scripts $wp_scripts
         * @global array $wp_registered_sidebars
         * @global array $wp_registered_widgets
         */
        public function enqueue_scripts()
        {
        }
        /**
         * Renders the widget form control templates into the DOM.
         *
         * @since 3.9.0
         */
        public function output_widget_control_templates()
        {
        }
        /**
         * Calls admin_print_footer_scripts and admin_print_scripts hooks to
         * allow custom scripts from plugins.
         *
         * @since 3.9.0
         */
        public function print_footer_scripts()
        {
        }
        /**
         * Retrieves common arguments to supply when constructing a Customizer setting.
         *
         * @since 3.9.0
         *
         * @param string $id        Widget setting ID.
         * @param array  $overrides Array of setting overrides.
         * @return array Possibly modified setting arguments.
         */
        public function get_setting_args($id, $overrides = array())
        {
        }
        /**
         * Ensures sidebar widget arrays only ever contain widget IDS.
         *
         * Used as the 'sanitize_callback' for each $sidebars_widgets setting.
         *
         * @since 3.9.0
         *
         * @param string[] $widget_ids Array of widget IDs.
         * @return string[] Array of sanitized widget IDs.
         */
        public function sanitize_sidebar_widgets($widget_ids)
        {
        }
        /**
         * Builds up an index of all available widgets for use in Backbone models.
         *
         * @since 3.9.0
         *
         * @global array $wp_registered_widgets
         * @global array $wp_registered_widget_controls
         *
         * @see wp_list_widgets()
         *
         * @return array List of available widgets.
         */
        public function get_available_widgets()
        {
        }
        /**
         * Naturally orders available widgets by name.
         *
         * @since 3.9.0
         *
         * @param array $widget_a The first widget to compare.
         * @param array $widget_b The second widget to compare.
         * @return int Reorder position for the current widget comparison.
         */
        protected function _sort_name_callback($widget_a, $widget_b)
        {
        }
        /**
         * Retrieves the widget control markup.
         *
         * @since 3.9.0
         *
         * @param array $args Widget control arguments.
         * @return string Widget control form HTML markup.
         */
        public function get_widget_control($args)
        {
        }
        /**
         * Retrieves the widget control markup parts.
         *
         * @since 4.4.0
         *
         * @param array $args Widget control arguments.
         * @return array {
         *     @type string $control Markup for widget control wrapping form.
         *     @type string $content The contents of the widget form itself.
         * }
         */
        public function get_widget_control_parts($args)
        {
        }
        /**
         * Adds hooks for the Customizer preview.
         *
         * @since 3.9.0
         */
        public function customize_preview_init()
        {
        }
        /**
         * Refreshes the nonce for widget updates.
         *
         * @since 4.2.0
         *
         * @param array $nonces Array of nonces.
         * @return array Array of nonces.
         */
        public function refresh_nonces($nonces)
        {
        }
        /**
         * Tells the script loader to load the scripts and styles of custom blocks
         * if the widgets block editor is enabled.
         *
         * @since 5.8.0
         *
         * @param bool $is_block_editor_screen Current decision about loading block assets.
         * @return bool Filtered decision about loading block assets.
         */
        public function should_load_block_editor_scripts_and_styles($is_block_editor_screen)
        {
        }
        /**
         * When previewing, ensures the proper previewing widgets are used.
         *
         * Because wp_get_sidebars_widgets() gets called early at {@see 'init' } (via
         * wp_convert_widget_settings()) and can set global variable `$_wp_sidebars_widgets`
         * to the value of `get_option( 'sidebars_widgets' )` before the Customizer preview
         * filter is added, it has to be reset after the filter has been added.
         *
         * @since 3.9.0
         *
         * @param array $sidebars_widgets List of widgets for the current sidebar.
         * @return array
         */
        public function preview_sidebars_widgets($sidebars_widgets)
        {
        }
        /**
         * Enqueues scripts for the Customizer preview.
         *
         * @since 3.9.0
         */
        public function customize_preview_enqueue()
        {
        }
        /**
         * Inserts default style for highlighted widget at early point so theme
         * stylesheet can override.
         *
         * @since 3.9.0
         */
        public function print_preview_css()
        {
        }
        /**
         * Communicates the sidebars that appeared on the page at the very end of the page,
         * and at the very end of the wp_footer,
         *
         * @since 3.9.0
         *
         * @global array $wp_registered_sidebars
         * @global array $wp_registered_widgets
         */
        public function export_preview_data()
        {
        }
        /**
         * Tracks the widgets that were rendered.
         *
         * @since 3.9.0
         *
         * @param array $widget Rendered widget to tally.
         */
        public function tally_rendered_widgets($widget)
        {
        }
        /**
         * Determine if a widget is rendered on the page.
         *
         * @since 4.0.0
         *
         * @param string $widget_id Widget ID to check.
         * @return bool Whether the widget is rendered.
         */
        public function is_widget_rendered($widget_id)
        {
        }
        /**
         * Determines if a sidebar is rendered on the page.
         *
         * @since 4.0.0
         *
         * @param string $sidebar_id Sidebar ID to check.
         * @return bool Whether the sidebar is rendered.
         */
        public function is_sidebar_rendered($sidebar_id)
        {
        }
        /**
         * Tallies the sidebars rendered via is_active_sidebar().
         *
         * Keep track of the times that is_active_sidebar() is called in the template,
         * and assume that this means that the sidebar would be rendered on the template
         * if there were widgets populating it.
         *
         * @since 3.9.0
         *
         * @param bool   $is_active  Whether the sidebar is active.
         * @param string $sidebar_id Sidebar ID.
         * @return bool Whether the sidebar is active.
         */
        public function tally_sidebars_via_is_active_sidebar_calls($is_active, $sidebar_id)
        {
        }
        /**
         * Tallies the sidebars rendered via dynamic_sidebar().
         *
         * Keep track of the times that dynamic_sidebar() is called in the template,
         * and assume this means the sidebar would be rendered on the template if
         * there were widgets populating it.
         *
         * @since 3.9.0
         *
         * @param bool   $has_widgets Whether the current sidebar has widgets.
         * @param string $sidebar_id  Sidebar ID.
         * @return bool Whether the current sidebar has widgets.
         */
        public function tally_sidebars_via_dynamic_sidebar_calls($has_widgets, $sidebar_id)
        {
        }
        /**
         * Retrieves MAC for a serialized widget instance string.
         *
         * Allows values posted back from JS to be rejected if any tampering of the
         * data has occurred.
         *
         * @since 3.9.0
         *
         * @param string $serialized_instance Widget instance.
         * @return string MAC for serialized widget instance.
         */
        protected function get_instance_hash_key($serialized_instance)
        {
        }
        /**
         * Sanitizes a widget instance.
         *
         * Unserialize the JS-instance for storing in the options. It's important that this filter
         * only get applied to an instance *once*.
         *
         * @since 3.9.0
         * @since 5.8.0 Added the `$id_base` parameter.
         *
         * @global WP_Widget_Factory $wp_widget_factory
         *
         * @param array  $value   Widget instance to sanitize.
         * @param string $id_base Optional. Base of the ID of the widget being sanitized. Default null.
         * @return array|void Sanitized widget instance.
         */
        public function sanitize_widget_instance($value, $id_base = \null)
        {
        }
        /**
         * Converts a widget instance into JSON-representable format.
         *
         * @since 3.9.0
         * @since 5.8.0 Added the `$id_base` parameter.
         *
         * @global WP_Widget_Factory $wp_widget_factory
         *
         * @param array  $value   Widget instance to convert to JSON.
         * @param string $id_base Optional. Base of the ID of the widget being sanitized. Default null.
         * @return array JSON-converted widget instance.
         */
        public function sanitize_widget_js_instance($value, $id_base = \null)
        {
        }
        /**
         * Strips out widget IDs for widgets which are no longer registered.
         *
         * One example where this might happen is when a plugin orphans a widget
         * in a sidebar upon deactivation.
         *
         * @since 3.9.0
         *
         * @global array $wp_registered_widgets
         *
         * @param array $widget_ids List of widget IDs.
         * @return array Parsed list of widget IDs.
         */
        public function sanitize_sidebar_widgets_js_instance($widget_ids)
        {
        }
        /**
         * Finds and invokes the widget update and control callbacks.
         *
         * Requires that `$_POST` be populated with the instance data.
         *
         * @since 3.9.0
         *
         * @global array $wp_registered_widget_updates
         * @global array $wp_registered_widget_controls
         *
         * @param string $widget_id Widget ID.
         * @return array|WP_Error Array containing the updated widget information.
         *                        A WP_Error object, otherwise.
         */
        public function call_widget_update($widget_id)
        {
        }
        /**
         * Updates widget settings asynchronously.
         *
         * Allows the Customizer to update a widget using its form, but return the new
         * instance info via Ajax instead of saving it to the options table.
         *
         * Most code here copied from wp_ajax_save_widget().
         *
         * @since 3.9.0
         *
         * @see wp_ajax_save_widget()
         */
        public function wp_ajax_update_widget()
        {
        }
        /*
         * Selective Refresh Methods
         */
        /**
         * Filters arguments for dynamic widget partials.
         *
         * @since 4.5.0
         *
         * @param array|false $partial_args Partial arguments.
         * @param string      $partial_id   Partial ID.
         * @return array (Maybe) modified partial arguments.
         */
        public function customize_dynamic_partial_args($partial_args, $partial_id)
        {
        }
        /**
         * Adds hooks for selective refresh.
         *
         * @since 4.5.0
         */
        public function selective_refresh_init()
        {
        }
        /**
         * Inject selective refresh data attributes into widget container elements.
         *
         * @since 4.5.0
         *
         * @param array $params {
         *     Dynamic sidebar params.
         *
         *     @type array $args        Sidebar args.
         *     @type array $widget_args Widget args.
         * }
         * @see WP_Customize_Nav_Menus::filter_wp_nav_menu_args()
         *
         * @return array Params.
         */
        public function filter_dynamic_sidebar_params($params)
        {
        }
        /**
         * List of the tag names seen for before_widget strings.
         *
         * This is used in the {@see 'filter_wp_kses_allowed_html'} filter to ensure that the
         * data-* attributes can be allowed.
         *
         * @since 4.5.0
         * @var array
         */
        protected $before_widget_tags_seen = array();
        /**
         * Ensures the HTML data-* attributes for selective refresh are allowed by kses.
         *
         * This is needed in case the `$before_widget` is run through wp_kses() when printed.
         *
         * @since 4.5.0
         *
         * @param array $allowed_html Allowed HTML.
         * @return array (Maybe) modified allowed HTML.
         */
        public function filter_wp_kses_allowed_data_attributes($allowed_html)
        {
        }
        /**
         * Keep track of the number of times that dynamic_sidebar() was called for a given sidebar index.
         *
         * This helps facilitate the uncommon scenario where a single sidebar is rendered multiple times on a template.
         *
         * @since 4.5.0
         * @var array
         */
        protected $sidebar_instance_count = array();
        /**
         * The current request's sidebar_instance_number context.
         *
         * @since 4.5.0
         * @var int|null
         */
        protected $context_sidebar_instance_number;
        /**
         * Current sidebar ID being rendered.
         *
         * @since 4.5.0
         * @var array
         */
        protected $current_dynamic_sidebar_id_stack = array();
        /**
         * Begins keeping track of the current sidebar being rendered.
         *
         * Insert marker before widgets are rendered in a dynamic sidebar.
         *
         * @since 4.5.0
         *
         * @param int|string $index Index, name, or ID of the dynamic sidebar.
         */
        public function start_dynamic_sidebar($index)
        {
        }
        /**
         * Finishes keeping track of the current sidebar being rendered.
         *
         * Inserts a marker after widgets are rendered in a dynamic sidebar.
         *
         * @since 4.5.0
         *
         * @param int|string $index Index, name, or ID of the dynamic sidebar.
         */
        public function end_dynamic_sidebar($index)
        {
        }
        /**
         * Current sidebar being rendered.
         *
         * @since 4.5.0
         * @var string|null
         */
        protected $rendering_widget_id;
        /**
         * Current widget being rendered.
         *
         * @since 4.5.0
         * @var string|null
         */
        protected $rendering_sidebar_id;
        /**
         * Filters sidebars_widgets to ensure the currently-rendered widget is the only widget in the current sidebar.
         *
         * @since 4.5.0
         *
         * @param array $sidebars_widgets Sidebars widgets.
         * @return array Filtered sidebars widgets.
         */
        public function filter_sidebars_widgets_for_rendering_widget($sidebars_widgets)
        {
        }
        /**
         * Renders a specific widget using the supplied sidebar arguments.
         *
         * @since 4.5.0
         *
         * @see dynamic_sidebar()
         *
         * @param WP_Customize_Partial $partial Partial.
         * @param array                $context {
         *     Sidebar args supplied as container context.
         *
         *     @type string $sidebar_id              ID for sidebar for widget to render into.
         *     @type int    $sidebar_instance_number Disambiguating instance number.
         * }
         * @return string|false
         */
        public function render_widget_partial($partial, $context)
        {
        }
        //
        // Option Update Capturing.
        //
        /**
         * List of captured widget option updates.
         *
         * @since 3.9.0
         * @var array $_captured_options Values updated while option capture is happening.
         */
        protected $_captured_options = array();
        /**
         * Whether option capture is currently happening.
         *
         * @since 3.9.0
         * @var bool $_is_current Whether option capture is currently happening or not.
         */
        protected $_is_capturing_option_updates = \false;
        /**
         * Determines whether the captured option update should be ignored.
         *
         * @since 3.9.0
         *
         * @param string $option_name Option name.
         * @return bool Whether the option capture is ignored.
         */
        protected function is_option_capture_ignored($option_name)
        {
        }
        /**
         * Retrieves captured widget option updates.
         *
         * @since 3.9.0
         *
         * @return array Array of captured options.
         */
        protected function get_captured_options()
        {
        }
        /**
         * Retrieves the option that was captured from being saved.
         *
         * @since 4.2.0
         *
         * @param string $option_name   Option name.
         * @param mixed  $default_value Optional. Default value to return if the option does not exist. Default false.
         * @return mixed Value set for the option.
         */
        protected function get_captured_option($option_name, $default_value = \false)
        {
        }
        /**
         * Retrieves the number of captured widget option updates.
         *
         * @since 3.9.0
         *
         * @return int Number of updated options.
         */
        protected function count_captured_options()
        {
        }
        /**
         * Begins keeping track of changes to widget options, caching new values.
         *
         * @since 3.9.0
         */
        protected function start_capturing_option_updates()
        {
        }
        /**
         * Pre-filters captured option values before updating.
         *
         * @since 3.9.0
         *
         * @param mixed  $new_value   The new option value.
         * @param string $option_name Name of the option.
         * @param mixed  $old_value   The old option value.
         * @return mixed Filtered option value.
         */
        public function capture_filter_pre_update_option($new_value, $option_name, $old_value)
        {
        }
        /**
         * Pre-filters captured option values before retrieving.
         *
         * @since 3.9.0
         *
         * @param mixed $value Value to return instead of the option value.
         * @return mixed Filtered option value.
         */
        public function capture_filter_pre_get_option($value)
        {
        }
        /**
         * Undoes any changes to the options since options capture began.
         *
         * @since 3.9.0
         */
        protected function stop_capturing_option_updates()
        {
        }
        /**
         * {@internal Missing Summary}
         *
         * See the {@see 'customize_dynamic_setting_args'} filter.
         *
         * @since 3.9.0
         * @deprecated 4.2.0 Deprecated in favor of the {@see 'customize_dynamic_setting_args'} filter.
         */
        public function setup_widget_addition_previews()
        {
        }
        /**
         * {@internal Missing Summary}
         *
         * See the {@see 'customize_dynamic_setting_args'} filter.
         *
         * @since 3.9.0
         * @deprecated 4.2.0 Deprecated in favor of the {@see 'customize_dynamic_setting_args'} filter.
         */
        public function prepreview_added_sidebars_widgets()
        {
        }
        /**
         * {@internal Missing Summary}
         *
         * See the {@see 'customize_dynamic_setting_args'} filter.
         *
         * @since 3.9.0
         * @deprecated 4.2.0 Deprecated in favor of the {@see 'customize_dynamic_setting_args'} filter.
         */
        public function prepreview_added_widget_instance()
        {
        }
        /**
         * {@internal Missing Summary}
         *
         * See the {@see 'customize_dynamic_setting_args'} filter.
         *
         * @since 3.9.0
         * @deprecated 4.2.0 Deprecated in favor of the {@see 'customize_dynamic_setting_args'} filter.
         */
        public function remove_prepreview_filters()
        {
        }
    }
    /**
     * HTTP API: WP_Http_Cookie class
     *
     * @package WordPress
     * @subpackage HTTP
     * @since 4.4.0
     */
    /**
     * Core class used to encapsulate a single cookie object for internal use.
     *
     * Returned cookies are represented using this class, and when cookies are set, if they are not
     * already a WP_Http_Cookie() object, then they are turned into one.
     *
     * @todo The WordPress convention is to use underscores instead of camelCase for function and method
     * names. Need to switch to use underscores instead for the methods.
     *
     * @since 2.8.0
     */
    class WP_Http_Cookie
    {
        /**
         * Cookie name.
         *
         * @since 2.8.0
         *
         * @var string
         */
        public $name;
        /**
         * Cookie value.
         *
         * @since 2.8.0
         *
         * @var string
         */
        public $value;
        /**
         * When the cookie expires. Unix timestamp or formatted date.
         *
         * @since 2.8.0
         *
         * @var string|int|null
         */
        public $expires;
        /**
         * Cookie URL path.
         *
         * @since 2.8.0
         *
         * @var string
         */
        public $path;
        /**
         * Cookie Domain.
         *
         * @since 2.8.0
         *
         * @var string
         */
        public $domain;
        /**
         * Cookie port or comma-separated list of ports.
         *
         * @since 2.8.0
         *
         * @var int|string
         */
        public $port;
        /**
         * host-only flag.
         *
         * @since 5.2.0
         *
         * @var bool
         */
        public $host_only;
        /**
         * Sets up this cookie object.
         *
         * The parameter $data should be either an associative array containing the indices names below
         * or a header string detailing it.
         *
         * @since 2.8.0
         * @since 5.2.0 Added `host_only` to the `$data` parameter.
         *
         * @param string|array $data {
         *     Raw cookie data as header string or data array.
         *
         *     @type string          $name      Cookie name.
         *     @type mixed           $value     Value. Should NOT already be urlencoded.
         *     @type string|int|null $expires   Optional. Unix timestamp or formatted date. Default null.
         *     @type string          $path      Optional. Path. Default '/'.
         *     @type string          $domain    Optional. Domain. Default host of parsed $requested_url.
         *     @type int|string      $port      Optional. Port or comma-separated list of ports. Default null.
         *     @type bool            $host_only Optional. host-only storage flag. Default true.
         * }
         * @param string       $requested_url The URL which the cookie was set on, used for default $domain
         *                                    and $port values.
         */
        public function __construct($data, $requested_url = '')
        {
        }
        /**
         * Confirms that it's OK to send this cookie to the URL checked against.
         *
         * Decision is based on RFC 2109/2965, so look there for details on validity.
         *
         * @since 2.8.0
         *
         * @param string $url URL you intend to send this cookie to
         * @return bool true if allowed, false otherwise.
         */
        public function test($url)
        {
        }
        /**
         * Convert cookie name and value back to header string.
         *
         * @since 2.8.0
         *
         * @return string Header encoded cookie name and value.
         */
        public function getHeaderValue()
        {
        }
        /**
         * Retrieve cookie header for usage in the rest of the WordPress HTTP API.
         *
         * @since 2.8.0
         *
         * @return string
         */
        public function getFullHeader()
        {
        }
        /**
         * Retrieves cookie attributes.
         *
         * @since 4.6.0
         *
         * @return array {
         *     List of attributes.
         *
         *     @type string|int|null $expires When the cookie expires. Unix timestamp or formatted date.
         *     @type string          $path    Cookie URL path.
         *     @type string          $domain  Cookie domain.
         * }
         */
        public function get_attributes()
        {
        }
    }
    /**
     * Widget API: WP_Widget_Text class
     *
     * @package WordPress
     * @subpackage Widgets
     * @since 4.4.0
     */
    /**
     * Core class used to implement a Text widget.
     *
     * @since 2.8.0
     *
     * @see WP_Widget
     */
    class WP_Widget_Text extends \WP_Widget
    {
        /**
         * Whether or not the widget has been registered yet.
         *
         * @since 4.8.1
         * @var bool
         */
        protected $registered = \false;
        /**
         * Sets up a new Text widget instance.
         *
         * @since 2.8.0
         */
        public function __construct()
        {
        }
        /**
         * Add hooks for enqueueing assets when registering all widget instances of this widget class.
         *
         * @param int $number Optional. The unique order number of this widget instance
         *                    compared to other instances of the same class. Default -1.
         */
        public function _register_one($number = -1)
        {
        }
        /**
         * Determines whether a given instance is legacy and should bypass using TinyMCE.
         *
         * @since 4.8.1
         *
         * @param array $instance {
         *     Instance data.
         *
         *     @type string      $text   Content.
         *     @type bool|string $filter Whether autop or content filters should apply.
         *     @type bool        $legacy Whether widget is in legacy mode.
         * }
         * @return bool Whether Text widget instance contains legacy data.
         */
        public function is_legacy_instance($instance)
        {
        }
        /**
         * Filters gallery shortcode attributes.
         *
         * Prevents all of a site's attachments from being shown in a gallery displayed on a
         * non-singular template where a $post context is not available.
         *
         * @since 4.9.0
         *
         * @param array $attrs Attributes.
         * @return array Attributes.
         */
        public function _filter_gallery_shortcode_attrs($attrs)
        {
        }
        /**
         * Outputs the content for the current Text widget instance.
         *
         * @since 2.8.0
         *
         * @global WP_Post $post Global post object.
         *
         * @param array $args     Display arguments including 'before_title', 'after_title',
         *                        'before_widget', and 'after_widget'.
         * @param array $instance Settings for the current Text widget instance.
         */
        public function widget($args, $instance)
        {
        }
        /**
         * Inject max-width and remove height for videos too constrained to fit inside sidebars on frontend.
         *
         * @since 4.9.0
         *
         * @see WP_Widget_Media_Video::inject_video_max_width_style()
         *
         * @param array $matches Pattern matches from preg_replace_callback.
         * @return string HTML Output.
         */
        public function inject_video_max_width_style($matches)
        {
        }
        /**
         * Handles updating settings for the current Text widget instance.
         *
         * @since 2.8.0
         *
         * @param array $new_instance New settings for this instance as input by the user via
         *                            WP_Widget::form().
         * @param array $old_instance Old settings for this instance.
         * @return array Settings to save or bool false to cancel saving.
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * Enqueue preview scripts.
         *
         * These scripts normally are enqueued just-in-time when a playlist shortcode is used.
         * However, in the customizer, a playlist shortcode may be used in a text widget and
         * dynamically added via selective refresh, so it is important to unconditionally enqueue them.
         *
         * @since 4.9.3
         */
        public function enqueue_preview_scripts()
        {
        }
        /**
         * Loads the required scripts and styles for the widget control.
         *
         * @since 4.8.0
         */
        public function enqueue_admin_scripts()
        {
        }
        /**
         * Outputs the Text widget settings form.
         *
         * @since 2.8.0
         * @since 4.8.0 Form only contains hidden inputs which are synced with JS template.
         * @since 4.8.1 Restored original form to be displayed when in legacy mode.
         *
         * @see WP_Widget_Text::render_control_template_scripts()
         * @see _WP_Editors::editor()
         *
         * @param array $instance Current settings.
         */
        public function form($instance)
        {
        }
        /**
         * Render form template scripts.
         *
         * @since 4.8.0
         * @since 4.9.0 The method is now static.
         */
        public static function render_control_template_scripts()
        {
        }
    }
    /**
     * Widget API: WP_Widget_Pages class
     *
     * @package WordPress
     * @subpackage Widgets
     * @since 4.4.0
     */
    /**
     * Core class used to implement a Pages widget.
     *
     * @since 2.8.0
     *
     * @see WP_Widget
     */
    class WP_Widget_Pages extends \WP_Widget
    {
        /**
         * Sets up a new Pages widget instance.
         *
         * @since 2.8.0
         */
        public function __construct()
        {
        }
        /**
         * Outputs the content for the current Pages widget instance.
         *
         * @since 2.8.0
         *
         * @param array $args     Display arguments including 'before_title', 'after_title',
         *                        'before_widget', and 'after_widget'.
         * @param array $instance Settings for the current Pages widget instance.
         */
        public function widget($args, $instance)
        {
        }
        /**
         * Handles updating settings for the current Pages widget instance.
         *
         * @since 2.8.0
         *
         * @param array $new_instance New settings for this instance as input by the user via
         *                            WP_Widget::form().
         * @param array $old_instance Old settings for this instance.
         * @return array Updated settings to save.
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * Outputs the settings form for the Pages widget.
         *
         * @since 2.8.0
         *
         * @param array $instance Current settings.
         */
        public function form($instance)
        {
        }
    }
    /**
     * Widget API: WP_Widget_RSS class
     *
     * @package WordPress
     * @subpackage Widgets
     * @since 4.4.0
     */
    /**
     * Core class used to implement a RSS widget.
     *
     * @since 2.8.0
     *
     * @see WP_Widget
     */
    class WP_Widget_RSS extends \WP_Widget
    {
        /**
         * Sets up a new RSS widget instance.
         *
         * @since 2.8.0
         */
        public function __construct()
        {
        }
        /**
         * Outputs the content for the current RSS widget instance.
         *
         * @since 2.8.0
         *
         * @param array $args     Display arguments including 'before_title', 'after_title',
         *                        'before_widget', and 'after_widget'.
         * @param array $instance Settings for the current RSS widget instance.
         */
        public function widget($args, $instance)
        {
        }
        /**
         * Handles updating settings for the current RSS widget instance.
         *
         * @since 2.8.0
         *
         * @param array $new_instance New settings for this instance as input by the user via
         *                            WP_Widget::form().
         * @param array $old_instance Old settings for this instance.
         * @return array Updated settings to save.
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * Outputs the settings form for the RSS widget.
         *
         * @since 2.8.0
         *
         * @param array $instance Current settings.
         */
        public function form($instance)
        {
        }
    }
    /**
     * Widget API: WP_Media_Widget class
     *
     * @package WordPress
     * @subpackage Widgets
     * @since 4.8.0
     */
    /**
     * Core class that implements a media widget.
     *
     * @since 4.8.0
     *
     * @see WP_Widget
     */
    abstract class WP_Widget_Media extends \WP_Widget
    {
        /**
         * Translation labels.
         *
         * @since 4.8.0
         * @var array
         */
        public $l10n = array('add_to_widget' => '', 'replace_media' => '', 'edit_media' => '', 'media_library_state_multi' => '', 'media_library_state_single' => '', 'missing_attachment' => '', 'no_media_selected' => '', 'add_media' => '');
        /**
         * Whether or not the widget has been registered yet.
         *
         * @since 4.8.1
         * @var bool
         */
        protected $registered = \false;
        /**
         * The default widget description.
         *
         * @since 6.0.0
         * @var string
         */
        protected static $default_description = '';
        /**
         * The default localized strings used by the widget.
         *
         * @since 6.0.0
         * @var string[]
         */
        protected static $l10n_defaults = array();
        /**
         * Constructor.
         *
         * @since 4.8.0
         *
         * @param string $id_base         Base ID for the widget, lowercase and unique.
         * @param string $name            Name for the widget displayed on the configuration page.
         * @param array  $widget_options  Optional. Widget options. See wp_register_sidebar_widget() for
         *                                information on accepted arguments. Default empty array.
         * @param array  $control_options Optional. Widget control options. See wp_register_widget_control()
         *                                for information on accepted arguments. Default empty array.
         */
        public function __construct($id_base, $name, $widget_options = array(), $control_options = array())
        {
        }
        /**
         * Add hooks while registering all widget instances of this widget class.
         *
         * @since 4.8.0
         *
         * @param int $number Optional. The unique order number of this widget instance
         *                    compared to other instances of the same class. Default -1.
         */
        public function _register_one($number = -1)
        {
        }
        /**
         * Get schema for properties of a widget instance (item).
         *
         * @since 4.8.0
         *
         * @see WP_REST_Controller::get_item_schema()
         * @see WP_REST_Controller::get_additional_fields()
         * @link https://core.trac.wordpress.org/ticket/35574
         *
         * @return array Schema for properties.
         */
        public function get_instance_schema()
        {
        }
        /**
         * Determine if the supplied attachment is for a valid attachment post with the specified MIME type.
         *
         * @since 4.8.0
         *
         * @param int|WP_Post $attachment Attachment post ID or object.
         * @param string      $mime_type  MIME type.
         * @return bool Is matching MIME type.
         */
        public function is_attachment_with_mime_type($attachment, $mime_type)
        {
        }
        /**
         * Sanitize a token list string, such as used in HTML rel and class attributes.
         *
         * @since 4.8.0
         *
         * @link http://w3c.github.io/html/infrastructure.html#space-separated-tokens
         * @link https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList
         * @param string|array $tokens List of tokens separated by spaces, or an array of tokens.
         * @return string Sanitized token string list.
         */
        public function sanitize_token_list($tokens)
        {
        }
        /**
         * Displays the widget on the front-end.
         *
         * @since 4.8.0
         *
         * @see WP_Widget::widget()
         *
         * @param array $args     Display arguments including before_title, after_title, before_widget, and after_widget.
         * @param array $instance Saved setting from the database.
         */
        public function widget($args, $instance)
        {
        }
        /**
         * Sanitizes the widget form values as they are saved.
         *
         * @since 4.8.0
         * @since 5.9.0 Renamed `$instance` to `$old_instance` to match parent class
         *              for PHP 8 named parameter support.
         *
         * @see WP_Widget::update()
         * @see WP_REST_Request::has_valid_params()
         * @see WP_REST_Request::sanitize_params()
         *
         * @param array $new_instance Values just sent to be saved.
         * @param array $old_instance Previously saved values from database.
         * @return array Updated safe values to be saved.
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * Render the media on the frontend.
         *
         * @since 4.8.0
         *
         * @param array $instance Widget instance props.
         */
        public abstract function render_media($instance);
        /**
         * Outputs the settings update form.
         *
         * Note that the widget UI itself is rendered with JavaScript via `MediaWidgetControl#render()`.
         *
         * @since 4.8.0
         *
         * @see \WP_Widget_Media::render_control_template_scripts() Where the JS template is located.
         *
         * @param array $instance Current settings.
         */
        public final function form($instance)
        {
        }
        /**
         * Filters the default media display states for items in the Media list table.
         *
         * @since 4.8.0
         *
         * @param array   $states An array of media states.
         * @param WP_Post $post   The current attachment object.
         * @return array
         */
        public function display_media_state($states, $post = \null)
        {
        }
        /**
         * Enqueue preview scripts.
         *
         * These scripts normally are enqueued just-in-time when a widget is rendered.
         * In the customizer, however, widgets can be dynamically added and rendered via
         * selective refresh, and so it is important to unconditionally enqueue them in
         * case a widget does get added.
         *
         * @since 4.8.0
         */
        public function enqueue_preview_scripts()
        {
        }
        /**
         * Loads the required scripts and styles for the widget control.
         *
         * @since 4.8.0
         */
        public function enqueue_admin_scripts()
        {
        }
        /**
         * Render form template scripts.
         *
         * @since 4.8.0
         */
        public function render_control_template_scripts()
        {
        }
        /**
         * Resets the cache for the default labels.
         *
         * @since 6.0.0
         */
        public static function reset_default_labels()
        {
        }
        /**
         * Whether the widget has content to show.
         *
         * @since 4.8.0
         *
         * @param array $instance Widget instance props.
         * @return bool Whether widget has content.
         */
        protected function has_content($instance)
        {
        }
        /**
         * Returns the default description of the widget.
         *
         * @since 6.0.0
         *
         * @return string
         */
        protected static function get_default_description()
        {
        }
        /**
         * Returns the default localized strings used by the widget.
         *
         * @since 6.0.0
         *
         * @return (string|array)[]
         */
        protected static function get_l10n_defaults()
        {
        }
    }
    /**
     * Widget API: WP_Widget_Media_Gallery class
     *
     * @package WordPress
     * @subpackage Widgets
     * @since 4.9.0
     */
    /**
     * Core class that implements a gallery widget.
     *
     * @since 4.9.0
     *
     * @see WP_Widget_Media
     * @see WP_Widget
     */
    class WP_Widget_Media_Gallery extends \WP_Widget_Media
    {
        /**
         * Constructor.
         *
         * @since 4.9.0
         */
        public function __construct()
        {
        }
        /**
         * Get schema for properties of a widget instance (item).
         *
         * @since 4.9.0
         *
         * @see WP_REST_Controller::get_item_schema()
         * @see WP_REST_Controller::get_additional_fields()
         * @link https://core.trac.wordpress.org/ticket/35574
         *
         * @return array Schema for properties.
         */
        public function get_instance_schema()
        {
        }
        /**
         * Render the media on the frontend.
         *
         * @since 4.9.0
         *
         * @param array $instance Widget instance props.
         */
        public function render_media($instance)
        {
        }
        /**
         * Loads the required media files for the media manager and scripts for media widgets.
         *
         * @since 4.9.0
         */
        public function enqueue_admin_scripts()
        {
        }
        /**
         * Render form template scripts.
         *
         * @since 4.9.0
         */
        public function render_control_template_scripts()
        {
        }
        /**
         * Whether the widget has content to show.
         *
         * @since 4.9.0
         * @access protected
         *
         * @param array $instance Widget instance props.
         * @return bool Whether widget has content.
         */
        protected function has_content($instance)
        {
        }
    }
    /**
     * Widget API: WP_Widget_Archives class
     *
     * @package WordPress
     * @subpackage Widgets
     * @since 4.4.0
     */
    /**
     * Core class used to implement the Archives widget.
     *
     * @since 2.8.0
     *
     * @see WP_Widget
     */
    class WP_Widget_Archives extends \WP_Widget
    {
        /**
         * Sets up a new Archives widget instance.
         *
         * @since 2.8.0
         */
        public function __construct()
        {
        }
        /**
         * Outputs the content for the current Archives widget instance.
         *
         * @since 2.8.0
         *
         * @param array $args     Display arguments including 'before_title', 'after_title',
         *                        'before_widget', and 'after_widget'.
         * @param array $instance Settings for the current Archives widget instance.
         */
        public function widget($args, $instance)
        {
        }
        /**
         * Handles updating settings for the current Archives widget instance.
         *
         * @since 2.8.0
         *
         * @param array $new_instance New settings for this instance as input by the user via
         *                            WP_Widget_Archives::form().
         * @param array $old_instance Old settings for this instance.
         * @return array Updated settings to save.
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * Outputs the settings form for the Archives widget.
         *
         * @since 2.8.0
         *
         * @param array $instance Current settings.
         */
        public function form($instance)
        {
        }
    }
    /**
     * Widget API: WP_Widget_Media_Video class
     *
     * @package WordPress
     * @subpackage Widgets
     * @since 4.8.0
     */
    /**
     * Core class that implements a video widget.
     *
     * @since 4.8.0
     *
     * @see WP_Widget_Media
     * @see WP_Widget
     */
    class WP_Widget_Media_Video extends \WP_Widget_Media
    {
        /**
         * Constructor.
         *
         * @since 4.8.0
         */
        public function __construct()
        {
        }
        /**
         * Get schema for properties of a widget instance (item).
         *
         * @since 4.8.0
         *
         * @see WP_REST_Controller::get_item_schema()
         * @see WP_REST_Controller::get_additional_fields()
         * @link https://core.trac.wordpress.org/ticket/35574
         *
         * @return array Schema for properties.
         */
        public function get_instance_schema()
        {
        }
        /**
         * Render the media on the frontend.
         *
         * @since 4.8.0
         *
         * @param array $instance Widget instance props.
         */
        public function render_media($instance)
        {
        }
        /**
         * Inject max-width and remove height for videos too constrained to fit inside sidebars on frontend.
         *
         * @since 4.8.0
         *
         * @param string $html Video shortcode HTML output.
         * @return string HTML Output.
         */
        public function inject_video_max_width_style($html)
        {
        }
        /**
         * Enqueue preview scripts.
         *
         * These scripts normally are enqueued just-in-time when a video shortcode is used.
         * In the customizer, however, widgets can be dynamically added and rendered via
         * selective refresh, and so it is important to unconditionally enqueue them in
         * case a widget does get added.
         *
         * @since 4.8.0
         */
        public function enqueue_preview_scripts()
        {
        }
        /**
         * Loads the required scripts and styles for the widget control.
         *
         * @since 4.8.0
         */
        public function enqueue_admin_scripts()
        {
        }
        /**
         * Render form template scripts.
         *
         * @since 4.8.0
         */
        public function render_control_template_scripts()
        {
        }
    }
    /**
     * Widget API: WP_Widget_Search class
     *
     * @package WordPress
     * @subpackage Widgets
     * @since 4.4.0
     */
    /**
     * Core class used to implement a Search widget.
     *
     * @since 2.8.0
     *
     * @see WP_Widget
     */
    class WP_Widget_Search extends \WP_Widget
    {
        /**
         * Sets up a new Search widget instance.
         *
         * @since 2.8.0
         */
        public function __construct()
        {
        }
        /**
         * Outputs the content for the current Search widget instance.
         *
         * @since 2.8.0
         *
         * @param array $args     Display arguments including 'before_title', 'after_title',
         *                        'before_widget', and 'after_widget'.
         * @param array $instance Settings for the current Search widget instance.
         */
        public function widget($args, $instance)
        {
        }
        /**
         * Outputs the settings form for the Search widget.
         *
         * @since 2.8.0
         *
         * @param array $instance Current settings.
         */
        public function form($instance)
        {
        }
        /**
         * Handles updating settings for the current Search widget instance.
         *
         * @since 2.8.0
         *
         * @param array $new_instance New settings for this instance as input by the user via
         *                            WP_Widget::form().
         * @param array $old_instance Old settings for this instance.
         * @return array Updated settings.
         */
        public function update($new_instance, $old_instance)
        {
        }
    }
    /**
     * Widget API: WP_Widget_Block class
     *
     * @package WordPress
     * @subpackage Widgets
     * @since 5.8.0
     */
    /**
     * Core class used to implement a Block widget.
     *
     * @since 5.8.0
     *
     * @see WP_Widget
     */
    class WP_Widget_Block extends \WP_Widget
    {
        /**
         * Default instance.
         *
         * @since 5.8.0
         * @var array
         */
        protected $default_instance = array('content' => '');
        /**
         * Sets up a new Block widget instance.
         *
         * @since 5.8.0
         */
        public function __construct()
        {
        }
        /**
         * Outputs the content for the current Block widget instance.
         *
         * @since 5.8.0
         *
         * @param array $args     Display arguments including 'before_title', 'after_title',
         *                        'before_widget', and 'after_widget'.
         * @param array $instance Settings for the current Block widget instance.
         */
        public function widget($args, $instance)
        {
        }
        /**
         * Calculates the classname to use in the block widget's container HTML.
         *
         * Usually this is set to `$this->widget_options['classname']` by
         * dynamic_sidebar(). In this case, however, we want to set the classname
         * dynamically depending on the block contained by this block widget.
         *
         * If a block widget contains a block that has an equivalent legacy widget,
         * we display that legacy widget's class name. This helps with theme
         * backwards compatibility.
         *
         * @since 5.8.0
         *
         * @param string $content The HTML content of the current block widget.
         * @return string The classname to use in the block widget's container HTML.
         */
        private function get_dynamic_classname($content)
        {
        }
        /**
         * Handles updating settings for the current Block widget instance.
         *
         * @since 5.8.0
         * @param array $new_instance New settings for this instance as input by the user via
         *                            WP_Widget::form().
         * @param array $old_instance Old settings for this instance.
         * @return array Settings to save or bool false to cancel saving.
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * Outputs the Block widget settings form.
         *
         * @since 5.8.0
         *
         * @see WP_Widget_Custom_HTML::render_control_template_scripts()
         *
         * @param array $instance Current instance.
         */
        public function form($instance)
        {
        }
        /**
         * Makes sure no block widget is considered to be wide.
         *
         * @since 5.8.0
         *
         * @param bool   $is_wide   Whether the widget is considered wide.
         * @param string $widget_id Widget ID.
         * @return bool Updated `is_wide` value.
         */
        public function set_is_wide_widget_in_customizer($is_wide, $widget_id)
        {
        }
    }
    /**
     * Widget API: WP_Widget_Media_Audio class
     *
     * @package WordPress
     * @subpackage Widgets
     * @since 4.8.0
     */
    /**
     * Core class that implements an audio widget.
     *
     * @since 4.8.0
     *
     * @see WP_Widget_Media
     * @see WP_Widget
     */
    class WP_Widget_Media_Audio extends \WP_Widget_Media
    {
        /**
         * Constructor.
         *
         * @since 4.8.0
         */
        public function __construct()
        {
        }
        /**
         * Get schema for properties of a widget instance (item).
         *
         * @since 4.8.0
         *
         * @see WP_REST_Controller::get_item_schema()
         * @see WP_REST_Controller::get_additional_fields()
         * @link https://core.trac.wordpress.org/ticket/35574
         *
         * @return array Schema for properties.
         */
        public function get_instance_schema()
        {
        }
        /**
         * Render the media on the frontend.
         *
         * @since 4.8.0
         *
         * @param array $instance Widget instance props.
         */
        public function render_media($instance)
        {
        }
        /**
         * Enqueue preview scripts.
         *
         * These scripts normally are enqueued just-in-time when an audio shortcode is used.
         * In the customizer, however, widgets can be dynamically added and rendered via
         * selective refresh, and so it is important to unconditionally enqueue them in
         * case a widget does get added.
         *
         * @since 4.8.0
         */
        public function enqueue_preview_scripts()
        {
        }
        /**
         * Loads the required media files for the media manager and scripts for media widgets.
         *
         * @since 4.8.0
         */
        public function enqueue_admin_scripts()
        {
        }
        /**
         * Render form template scripts.
         *
         * @since 4.8.0
         */
        public function render_control_template_scripts()
        {
        }
    }
    /**
     * Widget API: WP_Widget_Links class
     *
     * @package WordPress
     * @subpackage Widgets
     * @since 4.4.0
     */
    /**
     * Core class used to implement a Links widget.
     *
     * @since 2.8.0
     *
     * @see WP_Widget
     */
    class WP_Widget_Links extends \WP_Widget
    {
        /**
         * Sets up a new Links widget instance.
         *
         * @since 2.8.0
         */
        public function __construct()
        {
        }
        /**
         * Outputs the content for the current Links widget instance.
         *
         * @since 2.8.0
         *
         * @param array $args     Display arguments including 'before_title', 'after_title',
         *                        'before_widget', and 'after_widget'.
         * @param array $instance Settings for the current Links widget instance.
         */
        public function widget($args, $instance)
        {
        }
        /**
         * Handles updating settings for the current Links widget instance.
         *
         * @since 2.8.0
         *
         * @param array $new_instance New settings for this instance as input by the user via
         *                            WP_Widget::form().
         * @param array $old_instance Old settings for this instance.
         * @return array Updated settings to save.
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * Outputs the settings form for the Links widget.
         *
         * @since 2.8.0
         *
         * @param array $instance Current settings.
         */
        public function form($instance)
        {
        }
    }
    /**
     * Widget API: WP_Widget_Categories class
     *
     * @package WordPress
     * @subpackage Widgets
     * @since 4.4.0
     */
    /**
     * Core class used to implement a Categories widget.
     *
     * @since 2.8.0
     *
     * @see WP_Widget
     */
    class WP_Widget_Categories extends \WP_Widget
    {
        /**
         * Sets up a new Categories widget instance.
         *
         * @since 2.8.0
         */
        public function __construct()
        {
        }
        /**
         * Outputs the content for the current Categories widget instance.
         *
         * @since 2.8.0
         * @since 4.2.0 Creates a unique HTML ID for the `<select>` element
         *              if more than one instance is displayed on the page.
         *
         * @param array $args     Display arguments including 'before_title', 'after_title',
         *                        'before_widget', and 'after_widget'.
         * @param array $instance Settings for the current Categories widget instance.
         */
        public function widget($args, $instance)
        {
        }
        /**
         * Handles updating settings for the current Categories widget instance.
         *
         * @since 2.8.0
         *
         * @param array $new_instance New settings for this instance as input by the user via
         *                            WP_Widget::form().
         * @param array $old_instance Old settings for this instance.
         * @return array Updated settings to save.
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * Outputs the settings form for the Categories widget.
         *
         * @since 2.8.0
         *
         * @param array $instance Current settings.
         */
        public function form($instance)
        {
        }
    }
    /**
     * Widget API: WP_Widget_Meta class
     *
     * @package WordPress
     * @subpackage Widgets
     * @since 4.4.0
     */
    /**
     * Core class used to implement a Meta widget.
     *
     * Displays log in/out, RSS feed links, etc.
     *
     * @since 2.8.0
     *
     * @see WP_Widget
     */
    class WP_Widget_Meta extends \WP_Widget
    {
        /**
         * Sets up a new Meta widget instance.
         *
         * @since 2.8.0
         */
        public function __construct()
        {
        }
        /**
         * Outputs the content for the current Meta widget instance.
         *
         * @since 2.8.0
         *
         * @param array $args     Display arguments including 'before_title', 'after_title',
         *                        'before_widget', and 'after_widget'.
         * @param array $instance Settings for the current Meta widget instance.
         */
        public function widget($args, $instance)
        {
        }
        /**
         * Handles updating settings for the current Meta widget instance.
         *
         * @since 2.8.0
         *
         * @param array $new_instance New settings for this instance as input by the user via
         *                            WP_Widget::form().
         * @param array $old_instance Old settings for this instance.
         * @return array Updated settings to save.
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * Outputs the settings form for the Meta widget.
         *
         * @since 2.8.0
         *
         * @param array $instance Current settings.
         */
        public function form($instance)
        {
        }
    }
    /**
     * Widget API: WP_Widget_Media_Image class
     *
     * @package WordPress
     * @subpackage Widgets
     * @since 4.8.0
     */
    /**
     * Core class that implements an image widget.
     *
     * @since 4.8.0
     *
     * @see WP_Widget_Media
     * @see WP_Widget
     */
    class WP_Widget_Media_Image extends \WP_Widget_Media
    {
        /**
         * Constructor.
         *
         * @since 4.8.0
         */
        public function __construct()
        {
        }
        /**
         * Get schema for properties of a widget instance (item).
         *
         * @since 4.8.0
         *
         * @see WP_REST_Controller::get_item_schema()
         * @see WP_REST_Controller::get_additional_fields()
         * @link https://core.trac.wordpress.org/ticket/35574
         *
         * @return array Schema for properties.
         */
        public function get_instance_schema()
        {
        }
        /**
         * Render the media on the frontend.
         *
         * @since 4.8.0
         *
         * @param array $instance Widget instance props.
         */
        public function render_media($instance)
        {
        }
        /**
         * Loads the required media files for the media manager and scripts for media widgets.
         *
         * @since 4.8.0
         */
        public function enqueue_admin_scripts()
        {
        }
        /**
         * Render form template scripts.
         *
         * @since 4.8.0
         */
        public function render_control_template_scripts()
        {
        }
    }
    /**
     * Widget API: WP_Nav_Menu_Widget class
     *
     * @package WordPress
     * @subpackage Widgets
     * @since 4.4.0
     */
    /**
     * Core class used to implement the Navigation Menu widget.
     *
     * @since 3.0.0
     *
     * @see WP_Widget
     */
    class WP_Nav_Menu_Widget extends \WP_Widget
    {
        /**
         * Sets up a new Navigation Menu widget instance.
         *
         * @since 3.0.0
         */
        public function __construct()
        {
        }
        /**
         * Outputs the content for the current Navigation Menu widget instance.
         *
         * @since 3.0.0
         *
         * @param array $args     Display arguments including 'before_title', 'after_title',
         *                        'before_widget', and 'after_widget'.
         * @param array $instance Settings for the current Navigation Menu widget instance.
         */
        public function widget($args, $instance)
        {
        }
        /**
         * Handles updating settings for the current Navigation Menu widget instance.
         *
         * @since 3.0.0
         *
         * @param array $new_instance New settings for this instance as input by the user via
         *                            WP_Widget::form().
         * @param array $old_instance Old settings for this instance.
         * @return array Updated settings to save.
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * Outputs the settings form for the Navigation Menu widget.
         *
         * @since 3.0.0
         *
         * @param array $instance Current settings.
         * @global WP_Customize_Manager $wp_customize
         */
        public function form($instance)
        {
        }
    }
    /**
     * Widget API: WP_Widget_Custom_HTML class
     *
     * @package WordPress
     * @subpackage Widgets
     * @since 4.8.1
     */
    /**
     * Core class used to implement a Custom HTML widget.
     *
     * @since 4.8.1
     *
     * @see WP_Widget
     */
    class WP_Widget_Custom_HTML extends \WP_Widget
    {
        /**
         * Whether or not the widget has been registered yet.
         *
         * @since 4.9.0
         * @var bool
         */
        protected $registered = \false;
        /**
         * Default instance.
         *
         * @since 4.8.1
         * @var array
         */
        protected $default_instance = array('title' => '', 'content' => '');
        /**
         * Sets up a new Custom HTML widget instance.
         *
         * @since 4.8.1
         */
        public function __construct()
        {
        }
        /**
         * Add hooks for enqueueing assets when registering all widget instances of this widget class.
         *
         * @since 4.9.0
         *
         * @param int $number Optional. The unique order number of this widget instance
         *                    compared to other instances of the same class. Default -1.
         */
        public function _register_one($number = -1)
        {
        }
        /**
         * Filters gallery shortcode attributes.
         *
         * Prevents all of a site's attachments from being shown in a gallery displayed on a
         * non-singular template where a $post context is not available.
         *
         * @since 4.9.0
         *
         * @param array $attrs Attributes.
         * @return array Attributes.
         */
        public function _filter_gallery_shortcode_attrs($attrs)
        {
        }
        /**
         * Outputs the content for the current Custom HTML widget instance.
         *
         * @since 4.8.1
         *
         * @global WP_Post $post Global post object.
         *
         * @param array $args     Display arguments including 'before_title', 'after_title',
         *                        'before_widget', and 'after_widget'.
         * @param array $instance Settings for the current Custom HTML widget instance.
         */
        public function widget($args, $instance)
        {
        }
        /**
         * Handles updating settings for the current Custom HTML widget instance.
         *
         * @since 4.8.1
         *
         * @param array $new_instance New settings for this instance as input by the user via
         *                            WP_Widget::form().
         * @param array $old_instance Old settings for this instance.
         * @return array Settings to save or bool false to cancel saving.
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * Loads the required scripts and styles for the widget control.
         *
         * @since 4.9.0
         */
        public function enqueue_admin_scripts()
        {
        }
        /**
         * Outputs the Custom HTML widget settings form.
         *
         * @since 4.8.1
         * @since 4.9.0 The form contains only hidden sync inputs. For the control UI, see `WP_Widget_Custom_HTML::render_control_template_scripts()`.
         *
         * @see WP_Widget_Custom_HTML::render_control_template_scripts()
         *
         * @param array $instance Current instance.
         */
        public function form($instance)
        {
        }
        /**
         * Render form template scripts.
         *
         * @since 4.9.0
         */
        public static function render_control_template_scripts()
        {
        }
        /**
         * Add help text to widgets admin screen.
         *
         * @since 4.9.0
         */
        public static function add_help_text()
        {
        }
    }
    /**
     * Widget API: WP_Widget_Recent_Comments class
     *
     * @package WordPress
     * @subpackage Widgets
     * @since 4.4.0
     */
    /**
     * Core class used to implement a Recent Comments widget.
     *
     * @since 2.8.0
     *
     * @see WP_Widget
     */
    class WP_Widget_Recent_Comments extends \WP_Widget
    {
        /**
         * Sets up a new Recent Comments widget instance.
         *
         * @since 2.8.0
         */
        public function __construct()
        {
        }
        /**
         * Outputs the default styles for the Recent Comments widget.
         *
         * @since 2.8.0
         */
        public function recent_comments_style()
        {
        }
        /**
         * Outputs the content for the current Recent Comments widget instance.
         *
         * @since 2.8.0
         * @since 5.4.0 Creates a unique HTML ID for the `<ul>` element
         *              if more than one instance is displayed on the page.
         *
         * @param array $args     Display arguments including 'before_title', 'after_title',
         *                        'before_widget', and 'after_widget'.
         * @param array $instance Settings for the current Recent Comments widget instance.
         */
        public function widget($args, $instance)
        {
        }
        /**
         * Handles updating settings for the current Recent Comments widget instance.
         *
         * @since 2.8.0
         *
         * @param array $new_instance New settings for this instance as input by the user via
         *                            WP_Widget::form().
         * @param array $old_instance Old settings for this instance.
         * @return array Updated settings to save.
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * Outputs the settings form for the Recent Comments widget.
         *
         * @since 2.8.0
         *
         * @param array $instance Current settings.
         */
        public function form($instance)
        {
        }
        /**
         * Flushes the Recent Comments widget cache.
         *
         * @since 2.8.0
         *
         * @deprecated 4.4.0 Fragment caching was removed in favor of split queries.
         */
        public function flush_widget_cache()
        {
        }
    }
    /**
     * Widget API: WP_Widget_Recent_Posts class
     *
     * @package WordPress
     * @subpackage Widgets
     * @since 4.4.0
     */
    /**
     * Core class used to implement a Recent Posts widget.
     *
     * @since 2.8.0
     *
     * @see WP_Widget
     */
    class WP_Widget_Recent_Posts extends \WP_Widget
    {
        /**
         * Sets up a new Recent Posts widget instance.
         *
         * @since 2.8.0
         */
        public function __construct()
        {
        }
        /**
         * Outputs the content for the current Recent Posts widget instance.
         *
         * @since 2.8.0
         *
         * @param array $args     Display arguments including 'before_title', 'after_title',
         *                        'before_widget', and 'after_widget'.
         * @param array $instance Settings for the current Recent Posts widget instance.
         */
        public function widget($args, $instance)
        {
        }
        /**
         * Handles updating the settings for the current Recent Posts widget instance.
         *
         * @since 2.8.0
         *
         * @param array $new_instance New settings for this instance as input by the user via
         *                            WP_Widget::form().
         * @param array $old_instance Old settings for this instance.
         * @return array Updated settings to save.
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * Outputs the settings form for the Recent Posts widget.
         *
         * @since 2.8.0
         *
         * @param array $instance Current settings.
         */
        public function form($instance)
        {
        }
    }
    /**
     * Widget API: WP_Widget_Tag_Cloud class
     *
     * @package WordPress
     * @subpackage Widgets
     * @since 4.4.0
     */
    /**
     * Core class used to implement a Tag cloud widget.
     *
     * @since 2.8.0
     *
     * @see WP_Widget
     */
    class WP_Widget_Tag_Cloud extends \WP_Widget
    {
        /**
         * Sets up a new Tag Cloud widget instance.
         *
         * @since 2.8.0
         */
        public function __construct()
        {
        }
        /**
         * Outputs the content for the current Tag Cloud widget instance.
         *
         * @since 2.8.0
         *
         * @param array $args     Display arguments including 'before_title', 'after_title',
         *                        'before_widget', and 'after_widget'.
         * @param array $instance Settings for the current Tag Cloud widget instance.
         */
        public function widget($args, $instance)
        {
        }
        /**
         * Handles updating settings for the current Tag Cloud widget instance.
         *
         * @since 2.8.0
         *
         * @param array $new_instance New settings for this instance as input by the user via
         *                            WP_Widget::form().
         * @param array $old_instance Old settings for this instance.
         * @return array Settings to save or bool false to cancel saving.
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * Outputs the Tag Cloud widget settings form.
         *
         * @since 2.8.0
         *
         * @param array $instance Current settings.
         */
        public function form($instance)
        {
        }
        /**
         * Retrieves the taxonomy for the current Tag cloud widget instance.
         *
         * @since 4.4.0
         *
         * @param array $instance Current settings.
         * @return string Name of the current taxonomy if set, otherwise 'post_tag'.
         */
        public function _get_current_taxonomy($instance)
        {
        }
    }
    /**
     * Widget API: WP_Widget_Calendar class
     *
     * @package WordPress
     * @subpackage Widgets
     * @since 4.4.0
     */
    /**
     * Core class used to implement the Calendar widget.
     *
     * @since 2.8.0
     *
     * @see WP_Widget
     */
    class WP_Widget_Calendar extends \WP_Widget
    {
        /**
         * Ensure that the ID attribute only appears in the markup once
         *
         * @since 4.4.0
         * @var int
         */
        private static $instance = 0;
        /**
         * Sets up a new Calendar widget instance.
         *
         * @since 2.8.0
         */
        public function __construct()
        {
        }
        /**
         * Outputs the content for the current Calendar widget instance.
         *
         * @since 2.8.0
         *
         * @param array $args     Display arguments including 'before_title', 'after_title',
         *                        'before_widget', and 'after_widget'.
         * @param array $instance The settings for the particular instance of the widget.
         */
        public function widget($args, $instance)
        {
        }
        /**
         * Handles updating settings for the current Calendar widget instance.
         *
         * @since 2.8.0
         *
         * @param array $new_instance New settings for this instance as input by the user via
         *                            WP_Widget::form().
         * @param array $old_instance Old settings for this instance.
         * @return array Updated settings to save.
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * Outputs the settings form for the Calendar widget.
         *
         * @since 2.8.0
         *
         * @param array $instance Current settings.
         */
        public function form($instance)
        {
        }
    }
    /**
     * Core class used to implement a feed cache.
     *
     * @since 2.8.0
     *
     * @see SimplePie_Cache
     */
    class WP_Feed_Cache extends \SimplePie_Cache
    {
        /**
         * Creates a new SimplePie_Cache object.
         *
         * @since 2.8.0
         *
         * @param string $location  URL location (scheme is used to determine handler).
         * @param string $filename  Unique identifier for cache object.
         * @param string $extension 'spi' or 'spc'.
         * @return WP_Feed_Cache_Transient Feed cache handler object that uses transients.
         */
        public function create($location, $filename, $extension)
        {
        }
    }
    /**
     * Portable PHP password hashing framework.
     * @package phpass
     * @since 2.5.0
     * @version 0.5 / WordPress
     * @link https://www.openwall.com/phpass/
     */
    #
    # Portable PHP password hashing framework.
    #
    # Version 0.5 / WordPress.
    #
    # Written by Solar Designer <solar at openwall.com> in 2004-2006 and placed in
    # the public domain.  Revised in subsequent years, still public domain.
    #
    # There's absolutely no warranty.
    #
    # The homepage URL for this framework is:
    #
    #	http://www.openwall.com/phpass/
    #
    # Please be sure to update the Version line if you edit this file in any way.
    # It is suggested that you leave the main version number intact, but indicate
    # your project name (after the slash) and add your own revision information.
    #
    # Please do not change the "private" password hashing method implemented in
    # here, thereby making your hashes incompatible.  However, if you must, please
    # change the hash type identifier (the "$P$") to something different.
    #
    # Obviously, since this code is in the public domain, the above are not
    # requirements (there can be none), but merely suggestions.
    #
    /**
     * Portable PHP password hashing framework.
     *
     * @package phpass
     * @version 0.5 / WordPress
     * @link https://www.openwall.com/phpass/
     * @since 2.5.0
     */
    class PasswordHash
    {
        var $itoa64;
        var $iteration_count_log2;
        var $portable_hashes;
        var $random_state;
        function __construct($iteration_count_log2, $portable_hashes)
        {
        }
        function PasswordHash($iteration_count_log2, $portable_hashes)
        {
        }
        function get_random_bytes($count)
        {
        }
        function encode64($input, $count)
        {
        }
        function gensalt_private($input)
        {
        }
        function crypt_private($password, $setting)
        {
        }
        function gensalt_blowfish($input)
        {
        }
        function HashPassword($password)
        {
        }
        function CheckPassword($password, $stored_hash)
        {
        }
    }
    /**
     * WP_Theme_JSON_Schema class
     *
     * @package WordPress
     * @subpackage Theme
     * @since 5.9.0
     */
    /**
     * Class that migrates a given theme.json structure to the latest schema.
     *
     * This class is for internal core usage and is not supposed to be used by extenders (plugins and/or themes).
     * This is a low-level API that may need to do breaking changes. Please,
     * use get_global_settings, get_global_styles, and get_global_stylesheet instead.
     *
     * @since 5.9.0
     * @access private
     */
    class WP_Theme_JSON_Schema
    {
        /**
         * Maps old properties to their new location within the schema's settings.
         * This will be applied at both the defaults and individual block levels.
         */
        const V1_TO_V2_RENAMED_PATHS = array('border.customRadius' => 'border.radius', 'spacing.customMargin' => 'spacing.margin', 'spacing.customPadding' => 'spacing.padding', 'typography.customLineHeight' => 'typography.lineHeight');
        /**
         * Function that migrates a given theme.json structure to the last version.
         *
         * @since 5.9.0
         *
         * @param array $theme_json The structure to migrate.
         *
         * @return array The structure in the last version.
         */
        public static function migrate($theme_json)
        {
        }
        /**
         * Removes the custom prefixes for a few properties
         * that were part of v1:
         *
         * 'border.customRadius'         => 'border.radius',
         * 'spacing.customMargin'        => 'spacing.margin',
         * 'spacing.customPadding'       => 'spacing.padding',
         * 'typography.customLineHeight' => 'typography.lineHeight',
         *
         * @since 5.9.0
         *
         * @param array $old Data to migrate.
         *
         * @return array Data without the custom prefixes.
         */
        private static function migrate_v1_to_v2($old)
        {
        }
        /**
         * Processes the settings subtree.
         *
         * @since 5.9.0
         *
         * @param array $settings        Array to process.
         * @param array $paths_to_rename Paths to rename.
         *
         * @return array The settings in the new format.
         */
        private static function rename_paths($settings, $paths_to_rename)
        {
        }
        /**
         * Processes a settings array, renaming or moving properties.
         *
         * @since 5.9.0
         *
         * @param array $settings        Reference to settings either defaults or an individual block's.
         * @param array $paths_to_rename Paths to rename.
         */
        private static function rename_settings(&$settings, $paths_to_rename)
        {
        }
        /**
         * Removes a property from within the provided settings by its path.
         *
         * @since 5.9.0
         *
         * @param array $settings Reference to the current settings array.
         * @param array $path Path to the property to be removed.
         *
         * @return void
         */
        private static function unset_setting_by_path(&$settings, $path)
        {
        }
    }
    /**
     * Taxonomy API: WP_Term class
     *
     * @package WordPress
     * @subpackage Taxonomy
     * @since 4.4.0
     */
    /**
     * Core class used to implement the WP_Term object.
     *
     * @since 4.4.0
     *
     * @property-read object $data Sanitized term data.
     */
    final class WP_Term
    {
        /**
         * Term ID.
         *
         * @since 4.4.0
         * @var int
         */
        public $term_id;
        /**
         * The term's name.
         *
         * @since 4.4.0
         * @var string
         */
        public $name = '';
        /**
         * The term's slug.
         *
         * @since 4.4.0
         * @var string
         */
        public $slug = '';
        /**
         * The term's term_group.
         *
         * @since 4.4.0
         * @var int
         */
        public $term_group = '';
        /**
         * Term Taxonomy ID.
         *
         * @since 4.4.0
         * @var int
         */
        public $term_taxonomy_id = 0;
        /**
         * The term's taxonomy name.
         *
         * @since 4.4.0
         * @var string
         */
        public $taxonomy = '';
        /**
         * The term's description.
         *
         * @since 4.4.0
         * @var string
         */
        public $description = '';
        /**
         * ID of a term's parent term.
         *
         * @since 4.4.0
         * @var int
         */
        public $parent = 0;
        /**
         * Cached object count for this term.
         *
         * @since 4.4.0
         * @var int
         */
        public $count = 0;
        /**
         * Stores the term object's sanitization level.
         *
         * Does not correspond to a database field.
         *
         * @since 4.4.0
         * @var string
         */
        public $filter = 'raw';
        /**
         * Retrieve WP_Term instance.
         *
         * @since 4.4.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param int    $term_id  Term ID.
         * @param string $taxonomy Optional. Limit matched terms to those matching `$taxonomy`. Only used for
         *                         disambiguating potentially shared terms.
         * @return WP_Term|WP_Error|false Term object, if found. WP_Error if `$term_id` is shared between taxonomies and
         *                                there's insufficient data to distinguish which term is intended.
         *                                False for other failures.
         */
        public static function get_instance($term_id, $taxonomy = \null)
        {
        }
        /**
         * Constructor.
         *
         * @since 4.4.0
         *
         * @param WP_Term|object $term Term object.
         */
        public function __construct($term)
        {
        }
        /**
         * Sanitizes term fields, according to the filter type provided.
         *
         * @since 4.4.0
         *
         * @param string $filter Filter context. Accepts 'edit', 'db', 'display', 'attribute', 'js', 'rss', or 'raw'.
         */
        public function filter($filter)
        {
        }
        /**
         * Converts an object to array.
         *
         * @since 4.4.0
         *
         * @return array Object as array.
         */
        public function to_array()
        {
        }
        /**
         * Getter.
         *
         * @since 4.4.0
         *
         * @param string $key Property to get.
         * @return mixed Property value.
         */
        public function __get($key)
        {
        }
    }
    /**
     * Taxonomy API: WP_Tax_Query class
     *
     * @package WordPress
     * @subpackage Taxonomy
     * @since 4.4.0
     */
    /**
     * Core class used to implement taxonomy queries for the Taxonomy API.
     *
     * Used for generating SQL clauses that filter a primary query according to object
     * taxonomy terms.
     *
     * WP_Tax_Query is a helper that allows primary query classes, such as WP_Query, to filter
     * their results by object metadata, by generating `JOIN` and `WHERE` subclauses to be
     * attached to the primary SQL query string.
     *
     * @since 3.1.0
     */
    class WP_Tax_Query
    {
        /**
         * Array of taxonomy queries.
         *
         * See WP_Tax_Query::__construct() for information on tax query arguments.
         *
         * @since 3.1.0
         * @var array
         */
        public $queries = array();
        /**
         * The relation between the queries. Can be one of 'AND' or 'OR'.
         *
         * @since 3.1.0
         * @var string
         */
        public $relation;
        /**
         * Standard response when the query should not return any rows.
         *
         * @since 3.2.0
         * @var string
         */
        private static $no_results = array('join' => array(''), 'where' => array('0 = 1'));
        /**
         * A flat list of table aliases used in the JOIN clauses.
         *
         * @since 4.1.0
         * @var array
         */
        protected $table_aliases = array();
        /**
         * Terms and taxonomies fetched by this query.
         *
         * We store this data in a flat array because they are referenced in a
         * number of places by WP_Query.
         *
         * @since 4.1.0
         * @var array
         */
        public $queried_terms = array();
        /**
         * Database table that where the metadata's objects are stored (eg $wpdb->users).
         *
         * @since 4.1.0
         * @var string
         */
        public $primary_table;
        /**
         * Column in 'primary_table' that represents the ID of the object.
         *
         * @since 4.1.0
         * @var string
         */
        public $primary_id_column;
        /**
         * Constructor.
         *
         * @since 3.1.0
         * @since 4.1.0 Added support for `$operator` 'NOT EXISTS' and 'EXISTS' values.
         *
         * @param array $tax_query {
         *     Array of taxonomy query clauses.
         *
         *     @type string $relation Optional. The MySQL keyword used to join
         *                            the clauses of the query. Accepts 'AND', or 'OR'. Default 'AND'.
         *     @type array  ...$0 {
         *         An array of first-order clause parameters, or another fully-formed tax query.
         *
         *         @type string           $taxonomy         Taxonomy being queried. Optional when field=term_taxonomy_id.
         *         @type string|int|array $terms            Term or terms to filter by.
         *         @type string           $field            Field to match $terms against. Accepts 'term_id', 'slug',
         *                                                 'name', or 'term_taxonomy_id'. Default: 'term_id'.
         *         @type string           $operator         MySQL operator to be used with $terms in the WHERE clause.
         *                                                  Accepts 'AND', 'IN', 'NOT IN', 'EXISTS', 'NOT EXISTS'.
         *                                                  Default: 'IN'.
         *         @type bool             $include_children Optional. Whether to include child terms.
         *                                                  Requires a $taxonomy. Default: true.
         *     }
         * }
         */
        public function __construct($tax_query)
        {
        }
        /**
         * Ensure the 'tax_query' argument passed to the class constructor is well-formed.
         *
         * Ensures that each query-level clause has a 'relation' key, and that
         * each first-order clause contains all the necessary keys from `$defaults`.
         *
         * @since 4.1.0
         *
         * @param array $queries Array of queries clauses.
         * @return array Sanitized array of query clauses.
         */
        public function sanitize_query($queries)
        {
        }
        /**
         * Sanitize a 'relation' operator.
         *
         * @since 4.1.0
         *
         * @param string $relation Raw relation key from the query argument.
         * @return string Sanitized relation ('AND' or 'OR').
         */
        public function sanitize_relation($relation)
        {
        }
        /**
         * Determine whether a clause is first-order.
         *
         * A "first-order" clause is one that contains any of the first-order
         * clause keys ('terms', 'taxonomy', 'include_children', 'field',
         * 'operator'). An empty clause also counts as a first-order clause,
         * for backward compatibility. Any clause that doesn't meet this is
         * determined, by process of elimination, to be a higher-order query.
         *
         * @since 4.1.0
         *
         * @param array $query Tax query arguments.
         * @return bool Whether the query clause is a first-order clause.
         */
        protected static function is_first_order_clause($query)
        {
        }
        /**
         * Generates SQL clauses to be appended to a main query.
         *
         * @since 3.1.0
         *
         * @param string $primary_table     Database table where the object being filtered is stored (eg wp_users).
         * @param string $primary_id_column ID column for the filtered object in $primary_table.
         * @return string[] {
         *     Array containing JOIN and WHERE SQL clauses to append to the main query.
         *
         *     @type string $join  SQL fragment to append to the main JOIN clause.
         *     @type string $where SQL fragment to append to the main WHERE clause.
         * }
         */
        public function get_sql($primary_table, $primary_id_column)
        {
        }
        /**
         * Generate SQL clauses to be appended to a main query.
         *
         * Called by the public WP_Tax_Query::get_sql(), this method
         * is abstracted out to maintain parity with the other Query classes.
         *
         * @since 4.1.0
         *
         * @return string[] {
         *     Array containing JOIN and WHERE SQL clauses to append to the main query.
         *
         *     @type string $join  SQL fragment to append to the main JOIN clause.
         *     @type string $where SQL fragment to append to the main WHERE clause.
         * }
         */
        protected function get_sql_clauses()
        {
        }
        /**
         * Generate SQL clauses for a single query array.
         *
         * If nested subqueries are found, this method recurses the tree to
         * produce the properly nested SQL.
         *
         * @since 4.1.0
         *
         * @param array $query Query to parse (passed by reference).
         * @param int   $depth Optional. Number of tree levels deep we currently are.
         *                     Used to calculate indentation. Default 0.
         * @return string[] {
         *     Array containing JOIN and WHERE SQL clauses to append to a single query array.
         *
         *     @type string $join  SQL fragment to append to the main JOIN clause.
         *     @type string $where SQL fragment to append to the main WHERE clause.
         * }
         */
        protected function get_sql_for_query(&$query, $depth = 0)
        {
        }
        /**
         * Generate SQL JOIN and WHERE clauses for a "first-order" query clause.
         *
         * @since 4.1.0
         *
         * @global wpdb $wpdb The WordPress database abstraction object.
         *
         * @param array $clause       Query clause (passed by reference).
         * @param array $parent_query Parent query array.
         * @return string[] {
         *     Array containing JOIN and WHERE SQL clauses to append to a first-order query.
         *
         *     @type string $join  SQL fragment to append to the main JOIN clause.
         *     @type string $where SQL fragment to append to the main WHERE clause.
         * }
         */
        public function get_sql_for_clause(&$clause, $parent_query)
        {
        }
        /**
         * Identify an existing table alias that is compatible with the current query clause.
         *
         * We avoid unnecessary table joins by allowing each clause to look for
         * an existing table alias that is compatible with the query that it
         * needs to perform.
         *
         * An existing alias is compatible if (a) it is a sibling of `$clause`
         * (ie, it's under the scope of the same relation), and (b) the combination
         * of operator and relation between the clauses allows for a shared table
         * join. In the case of WP_Tax_Query, this only applies to 'IN'
         * clauses that are connected by the relation 'OR'.
         *
         * @since 4.1.0
         *
         * @param array $clause       Query clause.
         * @param array $parent_query Parent query of $clause.
         * @return string|false Table alias if found, otherwise false.
         */
        protected function find_compatible_table_alias($clause, $parent_query)
        {
        }
        /**
         * Validates a single query.
         *
         * @since 3.2.0
         *
         * @param array $query The single query. Passed by reference.
         */
        private function clean_query(&$query)
        {
        }
        /**
         * Transforms a single query, from one field to another.
         *
         * Operates on the `$query` object by reference. In the case of error,
         * `$query` is converted to a WP_Error object.
         *
         * @since 3.2.0
         *
         * @global wpdb $wpdb The WordPress database abstraction object.
         *
         * @param array  $query           The single query. Passed by reference.
         * @param string $resulting_field The resulting field. Accepts 'slug', 'name', 'term_taxonomy_id',
         *                                or 'term_id'. Default 'term_id'.
         */
        public function transform_query(&$query, $resulting_field)
        {
        }
    }
    /**
     * HTTP API: WP_HTTP_Requests_Response class
     *
     * @package WordPress
     * @subpackage HTTP
     * @since 4.6.0
     */
    /**
     * Core wrapper object for a Requests_Response for standardisation.
     *
     * @since 4.6.0
     *
     * @see WP_HTTP_Response
     */
    class WP_HTTP_Requests_Response extends \WP_HTTP_Response
    {
        /**
         * Requests Response object.
         *
         * @since 4.6.0
         * @var Requests_Response
         */
        protected $response;
        /**
         * Filename the response was saved to.
         *
         * @since 4.6.0
         * @var string|null
         */
        protected $filename;
        /**
         * Constructor.
         *
         * @since 4.6.0
         *
         * @param Requests_Response $response HTTP response.
         * @param string            $filename Optional. File name. Default empty.
         */
        public function __construct(\Requests_Response $response, $filename = '')
        {
        }
        /**
         * Retrieves the response object for the request.
         *
         * @since 4.6.0
         *
         * @return Requests_Response HTTP response.
         */
        public function get_response_object()
        {
        }
        /**
         * Retrieves headers associated with the response.
         *
         * @since 4.6.0
         *
         * @return \Requests_Utility_CaseInsensitiveDictionary Map of header name to header value.
         */
        public function get_headers()
        {
        }
        /**
         * Sets all header values.
         *
         * @since 4.6.0
         *
         * @param array $headers Map of header name to header value.
         */
        public function set_headers($headers)
        {
        }
        /**
         * Sets a single HTTP header.
         *
         * @since 4.6.0
         *
         * @param string $key     Header name.
         * @param string $value   Header value.
         * @param bool   $replace Optional. Whether to replace an existing header of the same name.
         *                        Default true.
         */
        public function header($key, $value, $replace = \true)
        {
        }
        /**
         * Retrieves the HTTP return code for the response.
         *
         * @since 4.6.0
         *
         * @return int The 3-digit HTTP status code.
         */
        public function get_status()
        {
        }
        /**
         * Sets the 3-digit HTTP status code.
         *
         * @since 4.6.0
         *
         * @param int $code HTTP status.
         */
        public function set_status($code)
        {
        }
        /**
         * Retrieves the response data.
         *
         * @since 4.6.0
         *
         * @return string Response data.
         */
        public function get_data()
        {
        }
        /**
         * Sets the response data.
         *
         * @since 4.6.0
         *
         * @param string $data Response data.
         */
        public function set_data($data)
        {
        }
        /**
         * Retrieves cookies from the response.
         *
         * @since 4.6.0
         *
         * @return WP_HTTP_Cookie[] List of cookie objects.
         */
        public function get_cookies()
        {
        }
        /**
         * Converts the object to a WP_Http response array.
         *
         * @since 4.6.0
         *
         * @return array WP_Http response array, per WP_Http::request().
         */
        public function to_array()
        {
        }
    }
    /**
     * Blocks API: WP_Block_List class
     *
     * @package WordPress
     * @since 5.5.0
     */
    /**
     * Class representing a list of block instances.
     *
     * @since 5.5.0
     */
    class WP_Block_List implements \Iterator, \ArrayAccess, \Countable
    {
        /**
         * Original array of parsed block data, or block instances.
         *
         * @since 5.5.0
         * @var array[]|WP_Block[]
         * @access protected
         */
        protected $blocks;
        /**
         * All available context of the current hierarchy.
         *
         * @since 5.5.0
         * @var array
         * @access protected
         */
        protected $available_context;
        /**
         * Block type registry to use in constructing block instances.
         *
         * @since 5.5.0
         * @var WP_Block_Type_Registry
         * @access protected
         */
        protected $registry;
        /**
         * Constructor.
         *
         * Populates object properties from the provided block instance argument.
         *
         * @since 5.5.0
         *
         * @param array[]|WP_Block[]     $blocks            Array of parsed block data, or block instances.
         * @param array                  $available_context Optional array of ancestry context values.
         * @param WP_Block_Type_Registry $registry          Optional block type registry.
         */
        public function __construct($blocks, $available_context = array(), $registry = \null)
        {
        }
        /**
         * Returns true if a block exists by the specified block index, or false
         * otherwise.
         *
         * @since 5.5.0
         *
         * @link https://www.php.net/manual/en/arrayaccess.offsetexists.php
         *
         * @param string $index Index of block to check.
         * @return bool Whether block exists.
         */
        #[\ReturnTypeWillChange]
        public function offsetExists($index)
        {
        }
        /**
         * Returns the value by the specified block index.
         *
         * @since 5.5.0
         *
         * @link https://www.php.net/manual/en/arrayaccess.offsetget.php
         *
         * @param string $index Index of block value to retrieve.
         * @return mixed|null Block value if exists, or null.
         */
        #[\ReturnTypeWillChange]
        public function offsetGet($index)
        {
        }
        /**
         * Assign a block value by the specified block index.
         *
         * @since 5.5.0
         *
         * @link https://www.php.net/manual/en/arrayaccess.offsetset.php
         *
         * @param string $index Index of block value to set.
         * @param mixed  $value Block value.
         */
        #[\ReturnTypeWillChange]
        public function offsetSet($index, $value)
        {
        }
        /**
         * Unset a block.
         *
         * @since 5.5.0
         *
         * @link https://www.php.net/manual/en/arrayaccess.offsetunset.php
         *
         * @param string $index Index of block value to unset.
         */
        #[\ReturnTypeWillChange]
        public function offsetUnset($index)
        {
        }
        /**
         * Rewinds back to the first element of the Iterator.
         *
         * @since 5.5.0
         *
         * @link https://www.php.net/manual/en/iterator.rewind.php
         */
        #[\ReturnTypeWillChange]
        public function rewind()
        {
        }
        /**
         * Returns the current element of the block list.
         *
         * @since 5.5.0
         *
         * @link https://www.php.net/manual/en/iterator.current.php
         *
         * @return mixed Current element.
         */
        #[\ReturnTypeWillChange]
        public function current()
        {
        }
        /**
         * Returns the key of the current element of the block list.
         *
         * @since 5.5.0
         *
         * @link https://www.php.net/manual/en/iterator.key.php
         *
         * @return mixed Key of the current element.
         */
        #[\ReturnTypeWillChange]
        public function key()
        {
        }
        /**
         * Moves the current position of the block list to the next element.
         *
         * @since 5.5.0
         *
         * @link https://www.php.net/manual/en/iterator.next.php
         */
        #[\ReturnTypeWillChange]
        public function next()
        {
        }
        /**
         * Checks if current position is valid.
         *
         * @since 5.5.0
         *
         * @link https://www.php.net/manual/en/iterator.valid.php
         */
        #[\ReturnTypeWillChange]
        public function valid()
        {
        }
        /**
         * Returns the count of blocks in the list.
         *
         * @since 5.5.0
         *
         * @link https://www.php.net/manual/en/countable.count.php
         *
         * @return int Block count.
         */
        #[\ReturnTypeWillChange]
        public function count()
        {
        }
    }
    /**
     * Requests for PHP
     *
     * Inspired by Requests for Python.
     *
     * Based on concepts from SimplePie_File, RequestCore and WP_Http.
     *
     * @package Requests
     */
    /**
     * Requests for PHP
     *
     * Inspired by Requests for Python.
     *
     * Based on concepts from SimplePie_File, RequestCore and WP_Http.
     *
     * @package Requests
     */
    class Requests
    {
        /**
         * POST method
         *
         * @var string
         */
        const POST = 'POST';
        /**
         * PUT method
         *
         * @var string
         */
        const PUT = 'PUT';
        /**
         * GET method
         *
         * @var string
         */
        const GET = 'GET';
        /**
         * HEAD method
         *
         * @var string
         */
        const HEAD = 'HEAD';
        /**
         * DELETE method
         *
         * @var string
         */
        const DELETE = 'DELETE';
        /**
         * OPTIONS method
         *
         * @var string
         */
        const OPTIONS = 'OPTIONS';
        /**
         * TRACE method
         *
         * @var string
         */
        const TRACE = 'TRACE';
        /**
         * PATCH method
         *
         * @link https://tools.ietf.org/html/rfc5789
         * @var string
         */
        const PATCH = 'PATCH';
        /**
         * Default size of buffer size to read streams
         *
         * @var integer
         */
        const BUFFER_SIZE = 1160;
        /**
         * Current version of Requests
         *
         * @var string
         */
        const VERSION = '1.8.1';
        /**
         * Registered transport classes
         *
         * @var array
         */
        protected static $transports = array();
        /**
         * Selected transport name
         *
         * Use {@see get_transport()} instead
         *
         * @var array
         */
        public static $transport = array();
        /**
         * Default certificate path.
         *
         * @see Requests::get_certificate_path()
         * @see Requests::set_certificate_path()
         *
         * @var string
         */
        protected static $certificate_path;
        /**
         * This is a static class, do not instantiate it
         *
         * @codeCoverageIgnore
         */
        private function __construct()
        {
        }
        /**
         * Autoloader for Requests
         *
         * Register this with {@see register_autoloader()} if you'd like to avoid
         * having to create your own.
         *
         * (You can also use `spl_autoload_register` directly if you'd prefer.)
         *
         * @codeCoverageIgnore
         *
         * @param string $class Class name to load
         */
        public static function autoloader($class)
        {
        }
        /**
         * Register the built-in autoloader
         *
         * @codeCoverageIgnore
         */
        public static function register_autoloader()
        {
        }
        /**
         * Register a transport
         *
         * @param string $transport Transport class to add, must support the Requests_Transport interface
         */
        public static function add_transport($transport)
        {
        }
        /**
         * Get a working transport
         *
         * @throws Requests_Exception If no valid transport is found (`notransport`)
         * @return Requests_Transport
         */
        protected static function get_transport($capabilities = array())
        {
        }
        /**#@+
         * @see request()
         * @param string $url
         * @param array $headers
         * @param array $options
         * @return Requests_Response
         */
        /**
         * Send a GET request
         */
        public static function get($url, $headers = array(), $options = array())
        {
        }
        /**
         * Send a HEAD request
         */
        public static function head($url, $headers = array(), $options = array())
        {
        }
        /**
         * Send a DELETE request
         */
        public static function delete($url, $headers = array(), $options = array())
        {
        }
        /**
         * Send a TRACE request
         */
        public static function trace($url, $headers = array(), $options = array())
        {
        }
        /**#@-*/
        /**#@+
         * @see request()
         * @param string $url
         * @param array $headers
         * @param array $data
         * @param array $options
         * @return Requests_Response
         */
        /**
         * Send a POST request
         */
        public static function post($url, $headers = array(), $data = array(), $options = array())
        {
        }
        /**
         * Send a PUT request
         */
        public static function put($url, $headers = array(), $data = array(), $options = array())
        {
        }
        /**
         * Send an OPTIONS request
         */
        public static function options($url, $headers = array(), $data = array(), $options = array())
        {
        }
        /**
         * Send a PATCH request
         *
         * Note: Unlike {@see post} and {@see put}, `$headers` is required, as the
         * specification recommends that should send an ETag
         *
         * @link https://tools.ietf.org/html/rfc5789
         */
        public static function patch($url, $headers, $data = array(), $options = array())
        {
        }
        /**#@-*/
        /**
         * Main interface for HTTP requests
         *
         * This method initiates a request and sends it via a transport before
         * parsing.
         *
         * The `$options` parameter takes an associative array with the following
         * options:
         *
         * - `timeout`: How long should we wait for a response?
         *    Note: for cURL, a minimum of 1 second applies, as DNS resolution
         *    operates at second-resolution only.
         *    (float, seconds with a millisecond precision, default: 10, example: 0.01)
         * - `connect_timeout`: How long should we wait while trying to connect?
         *    (float, seconds with a millisecond precision, default: 10, example: 0.01)
         * - `useragent`: Useragent to send to the server
         *    (string, default: php-requests/$version)
         * - `follow_redirects`: Should we follow 3xx redirects?
         *    (boolean, default: true)
         * - `redirects`: How many times should we redirect before erroring?
         *    (integer, default: 10)
         * - `blocking`: Should we block processing on this request?
         *    (boolean, default: true)
         * - `filename`: File to stream the body to instead.
         *    (string|boolean, default: false)
         * - `auth`: Authentication handler or array of user/password details to use
         *    for Basic authentication
         *    (Requests_Auth|array|boolean, default: false)
         * - `proxy`: Proxy details to use for proxy by-passing and authentication
         *    (Requests_Proxy|array|string|boolean, default: false)
         * - `max_bytes`: Limit for the response body size.
         *    (integer|boolean, default: false)
         * - `idn`: Enable IDN parsing
         *    (boolean, default: true)
         * - `transport`: Custom transport. Either a class name, or a
         *    transport object. Defaults to the first working transport from
         *    {@see getTransport()}
         *    (string|Requests_Transport, default: {@see getTransport()})
         * - `hooks`: Hooks handler.
         *    (Requests_Hooker, default: new Requests_Hooks())
         * - `verify`: Should we verify SSL certificates? Allows passing in a custom
         *    certificate file as a string. (Using true uses the system-wide root
         *    certificate store instead, but this may have different behaviour
         *    across transports.)
         *    (string|boolean, default: library/Requests/Transport/cacert.pem)
         * - `verifyname`: Should we verify the common name in the SSL certificate?
         *    (boolean, default: true)
         * - `data_format`: How should we send the `$data` parameter?
         *    (string, one of 'query' or 'body', default: 'query' for
         *    HEAD/GET/DELETE, 'body' for POST/PUT/OPTIONS/PATCH)
         *
         * @throws Requests_Exception On invalid URLs (`nonhttp`)
         *
         * @param string $url URL to request
         * @param array $headers Extra headers to send with the request
         * @param array|null $data Data to send either as a query string for GET/HEAD requests, or in the body for POST requests
         * @param string $type HTTP request type (use Requests constants)
         * @param array $options Options for the request (see description for more information)
         * @return Requests_Response
         */
        public static function request($url, $headers = array(), $data = array(), $type = self::GET, $options = array())
        {
        }
        /**
         * Send multiple HTTP requests simultaneously
         *
         * The `$requests` parameter takes an associative or indexed array of
         * request fields. The key of each request can be used to match up the
         * request with the returned data, or with the request passed into your
         * `multiple.request.complete` callback.
         *
         * The request fields value is an associative array with the following keys:
         *
         * - `url`: Request URL Same as the `$url` parameter to
         *    {@see Requests::request}
         *    (string, required)
         * - `headers`: Associative array of header fields. Same as the `$headers`
         *    parameter to {@see Requests::request}
         *    (array, default: `array()`)
         * - `data`: Associative array of data fields or a string. Same as the
         *    `$data` parameter to {@see Requests::request}
         *    (array|string, default: `array()`)
         * - `type`: HTTP request type (use Requests constants). Same as the `$type`
         *    parameter to {@see Requests::request}
         *    (string, default: `Requests::GET`)
         * - `cookies`: Associative array of cookie name to value, or cookie jar.
         *    (array|Requests_Cookie_Jar)
         *
         * If the `$options` parameter is specified, individual requests will
         * inherit options from it. This can be used to use a single hooking system,
         * or set all the types to `Requests::POST`, for example.
         *
         * In addition, the `$options` parameter takes the following global options:
         *
         * - `complete`: A callback for when a request is complete. Takes two
         *    parameters, a Requests_Response/Requests_Exception reference, and the
         *    ID from the request array (Note: this can also be overridden on a
         *    per-request basis, although that's a little silly)
         *    (callback)
         *
         * @param array $requests Requests data (see description for more information)
         * @param array $options Global and default options (see {@see Requests::request})
         * @return array Responses (either Requests_Response or a Requests_Exception object)
         */
        public static function request_multiple($requests, $options = array())
        {
        }
        /**
         * Get the default options
         *
         * @see Requests::request() for values returned by this method
         * @param boolean $multirequest Is this a multirequest?
         * @return array Default option values
         */
        protected static function get_default_options($multirequest = \false)
        {
        }
        /**
         * Get default certificate path.
         *
         * @return string Default certificate path.
         */
        public static function get_certificate_path()
        {
        }
        /**
         * Set default certificate path.
         *
         * @param string $path Certificate path, pointing to a PEM file.
         */
        public static function set_certificate_path($path)
        {
        }
        /**
         * Set the default values
         *
         * @param string $url URL to request
         * @param array $headers Extra headers to send with the request
         * @param array|null $data Data to send either as a query string for GET/HEAD requests, or in the body for POST requests
         * @param string $type HTTP request type
         * @param array $options Options for the request
         * @return array $options
         */
        protected static function set_defaults(&$url, &$headers, &$data, &$type, &$options)
        {
        }
        /**
         * HTTP response parser
         *
         * @throws Requests_Exception On missing head/body separator (`requests.no_crlf_separator`)
         * @throws Requests_Exception On missing head/body separator (`noversion`)
         * @throws Requests_Exception On missing head/body separator (`toomanyredirects`)
         *
         * @param string $headers Full response text including headers and body
         * @param string $url Original request URL
         * @param array $req_headers Original $headers array passed to {@link request()}, in case we need to follow redirects
         * @param array $req_data Original $data array passed to {@link request()}, in case we need to follow redirects
         * @param array $options Original $options array passed to {@link request()}, in case we need to follow redirects
         * @return Requests_Response
         */
        protected static function parse_response($headers, $url, $req_headers, $req_data, $options)
        {
        }
        /**
         * Callback for `transport.internal.parse_response`
         *
         * Internal use only. Converts a raw HTTP response to a Requests_Response
         * while still executing a multiple request.
         *
         * @param string $response Full response text including headers and body (will be overwritten with Response instance)
         * @param array $request Request data as passed into {@see Requests::request_multiple()}
         * @return null `$response` is either set to a Requests_Response instance, or a Requests_Exception object
         */
        public static function parse_multiple(&$response, $request)
        {
        }
        /**
         * Decoded a chunked body as per RFC 2616
         *
         * @see https://tools.ietf.org/html/rfc2616#section-3.6.1
         * @param string $data Chunked body
         * @return string Decoded body
         */
        protected static function decode_chunked($data)
        {
        }
        // @codeCoverageIgnoreEnd
        /**
         * Convert a key => value array to a 'key: value' array for headers
         *
         * @param array $array Dictionary of header values
         * @return array List of headers
         */
        public static function flatten($array)
        {
        }
        /**
         * Convert a key => value array to a 'key: value' array for headers
         *
         * @codeCoverageIgnore
         * @deprecated Misspelling of {@see Requests::flatten}
         * @param array $array Dictionary of header values
         * @return array List of headers
         */
        public static function flattern($array)
        {
        }
        /**
         * Decompress an encoded body
         *
         * Implements gzip, compress and deflate. Guesses which it is by attempting
         * to decode.
         *
         * @param string $data Compressed data in one of the above formats
         * @return string Decompressed string
         */
        public static function decompress($data)
        {
        }
        /**
         * Decompression of deflated string while staying compatible with the majority of servers.
         *
         * Certain Servers will return deflated data with headers which PHP's gzinflate()
         * function cannot handle out of the box. The following function has been created from
         * various snippets on the gzinflate() PHP documentation.
         *
         * Warning: Magic numbers within. Due to the potential different formats that the compressed
         * data may be returned in, some "magic offsets" are needed to ensure proper decompression
         * takes place. For a simple progmatic way to determine the magic offset in use, see:
         * https://core.trac.wordpress.org/ticket/18273
         *
         * @since 2.8.1
         * @link https://core.trac.wordpress.org/ticket/18273
         * @link https://secure.php.net/manual/en/function.gzinflate.php#70875
         * @link https://secure.php.net/manual/en/function.gzinflate.php#77336
         *
         * @param string $gz_data String to decompress.
         * @return string|bool False on failure.
         */
        public static function compatible_gzinflate($gz_data)
        {
        }
        public static function match_domain($host, $reference)
        {
        }
    }
    /**
     * WordPress Customize Nav Menus classes
     *
     * @package WordPress
     * @subpackage Customize
     * @since 4.3.0
     */
    /**
     * Customize Nav Menus class.
     *
     * Implements menu management in the Customizer.
     *
     * @since 4.3.0
     *
     * @see WP_Customize_Manager
     */
    final class WP_Customize_Nav_Menus
    {
        /**
         * WP_Customize_Manager instance.
         *
         * @since 4.3.0
         * @var WP_Customize_Manager
         */
        public $manager;
        /**
         * Original nav menu locations before the theme was switched.
         *
         * @since 4.9.0
         * @var array
         */
        protected $original_nav_menu_locations;
        /**
         * Constructor.
         *
         * @since 4.3.0
         *
         * @param WP_Customize_Manager $manager Customizer bootstrap instance.
         */
        public function __construct($manager)
        {
        }
        /**
         * Adds a nonce for customizing menus.
         *
         * @since 4.5.0
         *
         * @param string[] $nonces Array of nonces.
         * @return string[] Modified array of nonces.
         */
        public function filter_nonces($nonces)
        {
        }
        /**
         * Ajax handler for loading available menu items.
         *
         * @since 4.3.0
         */
        public function ajax_load_available_items()
        {
        }
        /**
         * Performs the post_type and taxonomy queries for loading available menu items.
         *
         * @since 4.3.0
         *
         * @param string $object_type Optional. Accepts any custom object type and has built-in support for
         *                            'post_type' and 'taxonomy'. Default is 'post_type'.
         * @param string $object_name Optional. Accepts any registered taxonomy or post type name. Default is 'page'.
         * @param int    $page        Optional. The page number used to generate the query offset. Default is '0'.
         * @return array|WP_Error An array of menu items on success, a WP_Error object on failure.
         */
        public function load_available_items_query($object_type = 'post_type', $object_name = 'page', $page = 0)
        {
        }
        /**
         * Ajax handler for searching available menu items.
         *
         * @since 4.3.0
         */
        public function ajax_search_available_items()
        {
        }
        /**
         * Performs post queries for available-item searching.
         *
         * Based on WP_Editor::wp_link_query().
         *
         * @since 4.3.0
         *
         * @param array $args Optional. Accepts 'pagenum' and 's' (search) arguments.
         * @return array Menu items.
         */
        public function search_available_items_query($args = array())
        {
        }
        /**
         * Enqueues scripts and styles for Customizer pane.
         *
         * @since 4.3.0
         */
        public function enqueue_scripts()
        {
        }
        /**
         * Filters a dynamic setting's constructor args.
         *
         * For a dynamic setting to be registered, this filter must be employed
         * to override the default false value with an array of args to pass to
         * the WP_Customize_Setting constructor.
         *
         * @since 4.3.0
         *
         * @param false|array $setting_args The arguments to the WP_Customize_Setting constructor.
         * @param string      $setting_id   ID for dynamic setting, usually coming from `$_POST['customized']`.
         * @return array|false
         */
        public function filter_dynamic_setting_args($setting_args, $setting_id)
        {
        }
        /**
         * Allows non-statically created settings to be constructed with custom WP_Customize_Setting subclass.
         *
         * @since 4.3.0
         *
         * @param string $setting_class WP_Customize_Setting or a subclass.
         * @param string $setting_id    ID for dynamic setting, usually coming from `$_POST['customized']`.
         * @param array  $setting_args  WP_Customize_Setting or a subclass.
         * @return string
         */
        public function filter_dynamic_setting_class($setting_class, $setting_id, $setting_args)
        {
        }
        /**
         * Adds the customizer settings and controls.
         *
         * @since 4.3.0
         */
        public function customize_register()
        {
        }
        /**
         * Gets the base10 intval.
         *
         * This is used as a setting's sanitize_callback; we can't use just plain
         * intval because the second argument is not what intval() expects.
         *
         * @since 4.3.0
         *
         * @param mixed $value Number to convert.
         * @return int Integer.
         */
        public function intval_base10($value)
        {
        }
        /**
         * Returns an array of all the available item types.
         *
         * @since 4.3.0
         * @since 4.7.0  Each array item now includes a `$type_label` in addition to `$title`, `$type`, and `$object`.
         *
         * @return array The available menu item types.
         */
        public function available_item_types()
        {
        }
        /**
         * Adds a new `auto-draft` post.
         *
         * @since 4.7.0
         *
         * @param array $postarr {
         *     Post array. Note that post_status is overridden to be `auto-draft`.
         *
         * @var string $post_title   Post title. Required.
         * @var string $post_type    Post type. Required.
         * @var string $post_name    Post name.
         * @var string $post_content Post content.
         * }
         * @return WP_Post|WP_Error Inserted auto-draft post object or error.
         */
        public function insert_auto_draft_post($postarr)
        {
        }
        /**
         * Ajax handler for adding a new auto-draft post.
         *
         * @since 4.7.0
         */
        public function ajax_insert_auto_draft_post()
        {
        }
        /**
         * Prints the JavaScript templates used to render Menu Customizer components.
         *
         * Templates are imported into the JS use wp.template.
         *
         * @since 4.3.0
         */
        public function print_templates()
        {
        }
        /**
         * Prints the HTML template used to render the add-menu-item frame.
         *
         * @since 4.3.0
         */
        public function available_items_template()
        {
        }
        /**
         * Prints the markup for new menu items.
         *
         * To be used in the template #available-menu-items.
         *
         * @since 4.7.0
         *
         * @param array $available_item_type Menu item data to output, including title, type, and label.
         */
        protected function print_post_type_container($available_item_type)
        {
        }
        /**
         * Prints the markup for available menu item custom links.
         *
         * @since 4.7.0
         */
        protected function print_custom_links_available_menu_item()
        {
        }
        //
        // Start functionality specific to partial-refresh of menu changes in Customizer preview.
        //
        /**
         * Nav menu args used for each instance, keyed by the args HMAC.
         *
         * @since 4.3.0
         * @var array
         */
        public $preview_nav_menu_instance_args = array();
        /**
         * Filters arguments for dynamic nav_menu selective refresh partials.
         *
         * @since 4.5.0
         *
         * @param array|false $partial_args Partial args.
         * @param string      $partial_id   Partial ID.
         * @return array Partial args.
         */
        public function customize_dynamic_partial_args($partial_args, $partial_id)
        {
        }
        /**
         * Adds hooks for the Customizer preview.
         *
         * @since 4.3.0
         */
        public function customize_preview_init()
        {
        }
        /**
         * Makes the auto-draft status protected so that it can be queried.
         *
         * @since 4.7.0
         *
         * @global stdClass[] $wp_post_statuses List of post statuses.
         */
        public function make_auto_draft_status_previewable()
        {
        }
        /**
         * Sanitizes post IDs for posts created for nav menu items to be published.
         *
         * @since 4.7.0
         *
         * @param array $value Post IDs.
         * @return array Post IDs.
         */
        public function sanitize_nav_menus_created_posts($value)
        {
        }
        /**
         * Publishes the auto-draft posts that were created for nav menu items.
         *
         * The post IDs will have been sanitized by already by
         * `WP_Customize_Nav_Menu_Items::sanitize_nav_menus_created_posts()` to
         * remove any post IDs for which the user cannot publish or for which the
         * post is not an auto-draft.
         *
         * @since 4.7.0
         *
         * @param WP_Customize_Setting $setting Customizer setting object.
         */
        public function save_nav_menus_created_posts($setting)
        {
        }
        /**
         * Keeps track of the arguments that are being passed to wp_nav_menu().
         *
         * @since 4.3.0
         *
         * @see wp_nav_menu()
         * @see WP_Customize_Widgets::filter_dynamic_sidebar_params()
         *
         * @param array $args An array containing wp_nav_menu() arguments.
         * @return array Arguments.
         */
        public function filter_wp_nav_menu_args($args)
        {
        }
        /**
         * Prepares wp_nav_menu() calls for partial refresh.
         *
         * Injects attributes into container element.
         *
         * @since 4.3.0
         *
         * @see wp_nav_menu()
         *
         * @param string $nav_menu_content The HTML content for the navigation menu.
         * @param object $args             An object containing wp_nav_menu() arguments.
         * @return string Nav menu HTML with selective refresh attributes added if partial can be refreshed.
         */
        public function filter_wp_nav_menu($nav_menu_content, $args)
        {
        }
        /**
         * Hashes (hmac) the nav menu arguments to ensure they are not tampered with when
         * submitted in the Ajax request.
         *
         * Note that the array is expected to be pre-sorted.
         *
         * @since 4.3.0
         *
         * @param array $args The arguments to hash.
         * @return string Hashed nav menu arguments.
         */
        public function hash_nav_menu_args($args)
        {
        }
        /**
         * Enqueues scripts for the Customizer preview.
         *
         * @since 4.3.0
         */
        public function customize_preview_enqueue_deps()
        {
        }
        /**
         * Exports data from PHP to JS.
         *
         * @since 4.3.0
         */
        public function export_preview_data()
        {
        }
        /**
         * Exports any wp_nav_menu() calls during the rendering of any partials.
         *
         * @since 4.5.0
         *
         * @param array $response Response.
         * @return array Response.
         */
        public function export_partial_rendered_nav_menu_instances($response)
        {
        }
        /**
         * Renders a specific menu via wp_nav_menu() using the supplied arguments.
         *
         * @since 4.3.0
         *
         * @see wp_nav_menu()
         *
         * @param WP_Customize_Partial $partial       Partial.
         * @param array                $nav_menu_args Nav menu args supplied as container context.
         * @return string|false
         */
        public function render_nav_menu_partial($partial, $nav_menu_args)
        {
        }
    }
    /**
     * WP_Application_Passwords class
     *
     * @package WordPress
     * @since   5.6.0
     */
    /**
     * Class for displaying, modifying, and sanitizing application passwords.
     *
     * @package WordPress
     */
    class WP_Application_Passwords
    {
        /**
         * The application passwords user meta key.
         *
         * @since 5.6.0
         *
         * @var string
         */
        const USERMETA_KEY_APPLICATION_PASSWORDS = '_application_passwords';
        /**
         * The option name used to store whether application passwords is in use.
         *
         * @since 5.6.0
         *
         * @var string
         */
        const OPTION_KEY_IN_USE = 'using_application_passwords';
        /**
         * The generated application password length.
         *
         * @since 5.6.0
         *
         * @var int
         */
        const PW_LENGTH = 24;
        /**
         * Checks if Application Passwords are being used by the site.
         *
         * This returns true if at least one Application Password has ever been created.
         *
         * @since 5.6.0
         *
         * @return bool
         */
        public static function is_in_use()
        {
        }
        /**
         * Creates a new application password.
         *
         * @since 5.6.0
         * @since 5.7.0 Returns WP_Error if application name already exists.
         *
         * @param int   $user_id  User ID.
         * @param array $args     {
         *     Arguments used to create the application password.
         *
         *     @type string $name   The name of the application password.
         *     @type string $app_id A UUID provided by the application to uniquely identify it.
         * }
         * @return array|WP_Error The first key in the array is the new password, the second is its detailed information.
         *                        A WP_Error instance is returned on error.
         */
        public static function create_new_application_password($user_id, $args = array())
        {
        }
        /**
         * Gets a user's application passwords.
         *
         * @since 5.6.0
         *
         * @param int $user_id User ID.
         * @return array {
         *     The list of app passwords.
         *
         *     @type array ...$0 {
         *         @type string      $uuid      The unique identifier for the application password.
         *         @type string      $app_id    A UUID provided by the application to uniquely identify it.
         *         @type string      $name      The name of the application password.
         *         @type string      $password  A one-way hash of the password.
         *         @type int         $created   Unix timestamp of when the password was created.
         *         @type int|null    $last_used The Unix timestamp of the GMT date the application password was last used.
         *         @type string|null $last_ip   The IP address the application password was last used by.
         *     }
         * }
         */
        public static function get_user_application_passwords($user_id)
        {
        }
        /**
         * Gets a user's application password with the given UUID.
         *
         * @since 5.6.0
         *
         * @param int    $user_id User ID.
         * @param string $uuid    The password's UUID.
         * @return array|null The application password if found, null otherwise.
         */
        public static function get_user_application_password($user_id, $uuid)
        {
        }
        /**
         * Checks if an application password with the given name exists for this user.
         *
         * @since 5.7.0
         *
         * @param int    $user_id User ID.
         * @param string $name    Application name.
         * @return bool Whether the provided application name exists.
         */
        public static function application_name_exists_for_user($user_id, $name)
        {
        }
        /**
         * Updates an application password.
         *
         * @since 5.6.0
         *
         * @param int    $user_id User ID.
         * @param string $uuid    The password's UUID.
         * @param array  $update  Information about the application password to update.
         * @return true|WP_Error True if successful, otherwise a WP_Error instance is returned on error.
         */
        public static function update_application_password($user_id, $uuid, $update = array())
        {
        }
        /**
         * Records that an application password has been used.
         *
         * @since 5.6.0
         *
         * @param int    $user_id User ID.
         * @param string $uuid    The password's UUID.
         * @return true|WP_Error True if the usage was recorded, a WP_Error if an error occurs.
         */
        public static function record_application_password_usage($user_id, $uuid)
        {
        }
        /**
         * Deletes an application password.
         *
         * @since 5.6.0
         *
         * @param int    $user_id User ID.
         * @param string $uuid    The password's UUID.
         * @return true|WP_Error Whether the password was successfully found and deleted, a WP_Error otherwise.
         */
        public static function delete_application_password($user_id, $uuid)
        {
        }
        /**
         * Deletes all application passwords for the given user.
         *
         * @since 5.6.0
         *
         * @param int $user_id User ID.
         * @return int|WP_Error The number of passwords that were deleted or a WP_Error on failure.
         */
        public static function delete_all_application_passwords($user_id)
        {
        }
        /**
         * Sets a user's application passwords.
         *
         * @since 5.6.0
         *
         * @param int   $user_id   User ID.
         * @param array $passwords Application passwords.
         *
         * @return bool
         */
        protected static function set_user_application_passwords($user_id, $passwords)
        {
        }
        /**
         * Sanitizes and then splits a password into smaller chunks.
         *
         * @since 5.6.0
         *
         * @param string $raw_password The raw application password.
         * @return string The chunked password.
         */
        public static function chunk_password($raw_password)
        {
        }
    }
    /**
     * XML-RPC protocol support for WordPress
     *
     * @package WordPress
     * @subpackage Publishing
     */
    /**
     * WordPress XMLRPC server implementation.
     *
     * Implements compatibility for Blogger API, MetaWeblog API, MovableType, and
     * pingback. Additional WordPress API for managing comments, pages, posts,
     * options, etc.
     *
     * As of WordPress 3.5.0, XML-RPC is enabled by default. It can be disabled
     * via the {@see 'xmlrpc_enabled'} filter found in wp_xmlrpc_server::set_is_enabled().
     *
     * @since 1.5.0
     *
     * @see IXR_Server
     */
    class wp_xmlrpc_server extends \IXR_Server
    {
        /**
         * Methods.
         *
         * @var array
         */
        public $methods;
        /**
         * Blog options.
         *
         * @var array
         */
        public $blog_options;
        /**
         * IXR_Error instance.
         *
         * @var IXR_Error
         */
        public $error;
        /**
         * Flags that the user authentication has failed in this instance of wp_xmlrpc_server.
         *
         * @var bool
         */
        protected $auth_failed = \false;
        /**
         * Flags that XML-RPC is enabled
         *
         * @var bool
         */
        private $is_enabled;
        /**
         * Registers all of the XMLRPC methods that XMLRPC server understands.
         *
         * Sets up server and method property. Passes XMLRPC
         * methods through the {@see 'xmlrpc_methods'} filter to allow plugins to extend
         * or replace XML-RPC methods.
         *
         * @since 1.5.0
         */
        public function __construct()
        {
        }
        /**
         * Set wp_xmlrpc_server::$is_enabled property.
         *
         * Determine whether the xmlrpc server is enabled on this WordPress install
         * and set the is_enabled property accordingly.
         *
         * @since 5.7.3
         */
        private function set_is_enabled()
        {
        }
        /**
         * Make private/protected methods readable for backward compatibility.
         *
         * @since 4.0.0
         *
         * @param string $name      Method to call.
         * @param array  $arguments Arguments to pass when calling.
         * @return array|IXR_Error|false Return value of the callback, false otherwise.
         */
        public function __call($name, $arguments)
        {
        }
        /**
         * Serves the XML-RPC request.
         *
         * @since 2.9.0
         */
        public function serve_request()
        {
        }
        /**
         * Test XMLRPC API by saying, "Hello!" to client.
         *
         * @since 1.5.0
         *
         * @return string Hello string response.
         */
        public function sayHello()
        {
        }
        /**
         * Test XMLRPC API by adding two numbers for client.
         *
         * @since 1.5.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int $number1 A number to add.
         *     @type int $number2 A second number to add.
         * }
         * @return int Sum of the two given numbers.
         */
        public function addTwoNumbers($args)
        {
        }
        /**
         * Log user in.
         *
         * @since 2.8.0
         *
         * @param string $username User's username.
         * @param string $password User's password.
         * @return WP_User|false WP_User object if authentication passed, false otherwise
         */
        public function login($username, $password)
        {
        }
        /**
         * Check user's credentials. Deprecated.
         *
         * @since 1.5.0
         * @deprecated 2.8.0 Use wp_xmlrpc_server::login()
         * @see wp_xmlrpc_server::login()
         *
         * @param string $username User's username.
         * @param string $password User's password.
         * @return bool Whether authentication passed.
         */
        public function login_pass_ok($username, $password)
        {
        }
        /**
         * Escape string or array of strings for database.
         *
         * @since 1.5.2
         *
         * @param string|array $data Escape single string or array of strings.
         * @return string|void Returns with string is passed, alters by-reference
         *                     when array is passed.
         */
        public function escape(&$data)
        {
        }
        /**
         * Send error response to client.
         *
         * Send an XML error response to the client. If the endpoint is enabled
         * an HTTP 200 response is always sent per the XML-RPC specification.
         *
         * @since 5.7.3
         *
         * @param IXR_Error|string $error   Error code or an error object.
         * @param false            $message Error message. Optional.
         */
        public function error($error, $message = \false)
        {
        }
        /**
         * Retrieve custom fields for post.
         *
         * @since 2.5.0
         *
         * @param int $post_id Post ID.
         * @return array Custom fields, if exist.
         */
        public function get_custom_fields($post_id)
        {
        }
        /**
         * Set custom fields for post.
         *
         * @since 2.5.0
         *
         * @param int   $post_id Post ID.
         * @param array $fields  Custom fields.
         */
        public function set_custom_fields($post_id, $fields)
        {
        }
        /**
         * Retrieve custom fields for a term.
         *
         * @since 4.9.0
         *
         * @param int $term_id Term ID.
         * @return array Array of custom fields, if they exist.
         */
        public function get_term_custom_fields($term_id)
        {
        }
        /**
         * Set custom fields for a term.
         *
         * @since 4.9.0
         *
         * @param int   $term_id Term ID.
         * @param array $fields  Custom fields.
         */
        public function set_term_custom_fields($term_id, $fields)
        {
        }
        /**
         * Set up blog options property.
         *
         * Passes property through {@see 'xmlrpc_blog_options'} filter.
         *
         * @since 2.6.0
         */
        public function initialise_blog_option_info()
        {
        }
        /**
         * Retrieve the blogs of the user.
         *
         * @since 2.6.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type string $username Username.
         *     @type string $password Password.
         * }
         * @return array|IXR_Error Array contains:
         *  - 'isAdmin'
         *  - 'isPrimary' - whether the blog is the user's primary blog
         *  - 'url'
         *  - 'blogid'
         *  - 'blogName'
         *  - 'xmlrpc' - url of xmlrpc endpoint
         */
        public function wp_getUsersBlogs($args)
        {
        }
        /**
         * Checks if the method received at least the minimum number of arguments.
         *
         * @since 3.4.0
         *
         * @param array $args  An array of arguments to check.
         * @param int   $count Minimum number of arguments.
         * @return bool True if `$args` contains at least `$count` arguments, false otherwise.
         */
        protected function minimum_args($args, $count)
        {
        }
        /**
         * Prepares taxonomy data for return in an XML-RPC object.
         *
         * @param WP_Taxonomy $taxonomy The unprepared taxonomy data.
         * @param array       $fields   The subset of taxonomy fields to return.
         * @return array The prepared taxonomy data.
         */
        protected function _prepare_taxonomy($taxonomy, $fields)
        {
        }
        /**
         * Prepares term data for return in an XML-RPC object.
         *
         * @param array|object $term The unprepared term data.
         * @return array The prepared term data.
         */
        protected function _prepare_term($term)
        {
        }
        /**
         * Convert a WordPress date string to an IXR_Date object.
         *
         * @param string $date Date string to convert.
         * @return IXR_Date IXR_Date object.
         */
        protected function _convert_date($date)
        {
        }
        /**
         * Convert a WordPress GMT date string to an IXR_Date object.
         *
         * @param string $date_gmt WordPress GMT date string.
         * @param string $date     Date string.
         * @return IXR_Date IXR_Date object.
         */
        protected function _convert_date_gmt($date_gmt, $date)
        {
        }
        /**
         * Prepares post data for return in an XML-RPC object.
         *
         * @param array $post   The unprepared post data.
         * @param array $fields The subset of post type fields to return.
         * @return array The prepared post data.
         */
        protected function _prepare_post($post, $fields)
        {
        }
        /**
         * Prepares post data for return in an XML-RPC object.
         *
         * @since 3.4.0
         * @since 4.6.0 Converted the `$post_type` parameter to accept a WP_Post_Type object.
         *
         * @param WP_Post_Type $post_type Post type object.
         * @param array        $fields    The subset of post fields to return.
         * @return array The prepared post type data.
         */
        protected function _prepare_post_type($post_type, $fields)
        {
        }
        /**
         * Prepares media item data for return in an XML-RPC object.
         *
         * @param WP_Post $media_item     The unprepared media item data.
         * @param string  $thumbnail_size The image size to use for the thumbnail URL.
         * @return array The prepared media item data.
         */
        protected function _prepare_media_item($media_item, $thumbnail_size = 'thumbnail')
        {
        }
        /**
         * Prepares page data for return in an XML-RPC object.
         *
         * @param WP_Post $page The unprepared page data.
         * @return array The prepared page data.
         */
        protected function _prepare_page($page)
        {
        }
        /**
         * Prepares comment data for return in an XML-RPC object.
         *
         * @param WP_Comment $comment The unprepared comment data.
         * @return array The prepared comment data.
         */
        protected function _prepare_comment($comment)
        {
        }
        /**
         * Prepares user data for return in an XML-RPC object.
         *
         * @param WP_User $user   The unprepared user object.
         * @param array   $fields The subset of user fields to return.
         * @return array The prepared user data.
         */
        protected function _prepare_user($user, $fields)
        {
        }
        /**
         * Create a new post for any registered post type.
         *
         * @since 3.4.0
         *
         * @link https://en.wikipedia.org/wiki/RSS_enclosure for information on RSS enclosures.
         *
         * @param array $args {
         *     Method arguments. Note: top-level arguments must be ordered as documented.
         *
         *     @type int    $blog_id        Blog ID (unused).
         *     @type string $username       Username.
         *     @type string $password       Password.
         *     @type array  $content_struct {
         *         Content struct for adding a new post. See wp_insert_post() for information on
         *         additional post fields
         *
         *         @type string $post_type      Post type. Default 'post'.
         *         @type string $post_status    Post status. Default 'draft'
         *         @type string $post_title     Post title.
         *         @type int    $post_author    Post author ID.
         *         @type string $post_excerpt   Post excerpt.
         *         @type string $post_content   Post content.
         *         @type string $post_date_gmt  Post date in GMT.
         *         @type string $post_date      Post date.
         *         @type string $post_password  Post password (20-character limit).
         *         @type string $comment_status Post comment enabled status. Accepts 'open' or 'closed'.
         *         @type string $ping_status    Post ping status. Accepts 'open' or 'closed'.
         *         @type bool   $sticky         Whether the post should be sticky. Automatically false if
         *                                      `$post_status` is 'private'.
         *         @type int    $post_thumbnail ID of an image to use as the post thumbnail/featured image.
         *         @type array  $custom_fields  Array of meta key/value pairs to add to the post.
         *         @type array  $terms          Associative array with taxonomy names as keys and arrays
         *                                      of term IDs as values.
         *         @type array  $terms_names    Associative array with taxonomy names as keys and arrays
         *                                      of term names as values.
         *         @type array  $enclosure      {
         *             Array of feed enclosure data to add to post meta.
         *
         *             @type string $url    URL for the feed enclosure.
         *             @type int    $length Size in bytes of the enclosure.
         *             @type string $type   Mime-type for the enclosure.
         *         }
         *     }
         * }
         * @return int|IXR_Error Post ID on success, IXR_Error instance otherwise.
         */
        public function wp_newPost($args)
        {
        }
        /**
         * Helper method for filtering out elements from an array.
         *
         * @since 3.4.0
         *
         * @param int $count Number to compare to one.
         * @return bool True if the number is greater than one, false otherwise.
         */
        private function _is_greater_than_one($count)
        {
        }
        /**
         * Encapsulate the logic for sticking a post
         * and determining if the user has permission to do so
         *
         * @since 4.3.0
         *
         * @param array $post_data
         * @param bool  $update
         * @return void|IXR_Error
         */
        private function _toggle_sticky($post_data, $update = \false)
        {
        }
        /**
         * Helper method for wp_newPost() and wp_editPost(), containing shared logic.
         *
         * @since 3.4.0
         *
         * @see wp_insert_post()
         *
         * @param WP_User         $user           The post author if post_author isn't set in $content_struct.
         * @param array|IXR_Error $content_struct Post data to insert.
         * @return IXR_Error|string
         */
        protected function _insert_post($user, $content_struct)
        {
        }
        /**
         * Edit a post for any registered post type.
         *
         * The $content_struct parameter only needs to contain fields that
         * should be changed. All other fields will retain their existing values.
         *
         * @since 3.4.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id        Blog ID (unused).
         *     @type string $username       Username.
         *     @type string $password       Password.
         *     @type int    $post_id        Post ID.
         *     @type array  $content_struct Extra content arguments.
         * }
         * @return true|IXR_Error True on success, IXR_Error on failure.
         */
        public function wp_editPost($args)
        {
        }
        /**
         * Delete a post for any registered post type.
         *
         * @since 3.4.0
         *
         * @see wp_delete_post()
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id  Blog ID (unused).
         *     @type string $username Username.
         *     @type string $password Password.
         *     @type int    $post_id  Post ID.
         * }
         * @return true|IXR_Error True on success, IXR_Error instance on failure.
         */
        public function wp_deletePost($args)
        {
        }
        /**
         * Retrieve a post.
         *
         * @since 3.4.0
         *
         * The optional $fields parameter specifies what fields will be included
         * in the response array. This should be a list of field names. 'post_id' will
         * always be included in the response regardless of the value of $fields.
         *
         * Instead of, or in addition to, individual field names, conceptual group
         * names can be used to specify multiple fields. The available conceptual
         * groups are 'post' (all basic fields), 'taxonomies', 'custom_fields',
         * and 'enclosure'.
         *
         * @see get_post()
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id  Blog ID (unused).
         *     @type string $username Username.
         *     @type string $password Password.
         *     @type int    $post_id  Post ID.
         *     @type array  $fields   The subset of post type fields to return.
         * }
         * @return array|IXR_Error Array contains (based on $fields parameter):
         *  - 'post_id'
         *  - 'post_title'
         *  - 'post_date'
         *  - 'post_date_gmt'
         *  - 'post_modified'
         *  - 'post_modified_gmt'
         *  - 'post_status'
         *  - 'post_type'
         *  - 'post_name'
         *  - 'post_author'
         *  - 'post_password'
         *  - 'post_excerpt'
         *  - 'post_content'
         *  - 'link'
         *  - 'comment_status'
         *  - 'ping_status'
         *  - 'sticky'
         *  - 'custom_fields'
         *  - 'terms'
         *  - 'categories'
         *  - 'tags'
         *  - 'enclosure'
         */
        public function wp_getPost($args)
        {
        }
        /**
         * Retrieve posts.
         *
         * @since 3.4.0
         *
         * @see wp_get_recent_posts()
         * @see wp_getPost() for more on `$fields`
         * @see get_posts() for more on `$filter` values
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id  Blog ID (unused).
         *     @type string $username Username.
         *     @type string $password Password.
         *     @type array  $filter   Optional. Modifies the query used to retrieve posts. Accepts 'post_type',
         *                            'post_status', 'number', 'offset', 'orderby', 's', and 'order'.
         *                            Default empty array.
         *     @type array  $fields   Optional. The subset of post type fields to return in the response array.
         * }
         * @return array|IXR_Error Array contains a collection of posts.
         */
        public function wp_getPosts($args)
        {
        }
        /**
         * Create a new term.
         *
         * @since 3.4.0
         *
         * @see wp_insert_term()
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id        Blog ID (unused).
         *     @type string $username       Username.
         *     @type string $password       Password.
         *     @type array  $content_struct Content struct for adding a new term. The struct must contain
         *                                  the term 'name' and 'taxonomy'. Optional accepted values include
         *                                  'parent', 'description', and 'slug'.
         * }
         * @return int|IXR_Error The term ID on success, or an IXR_Error object on failure.
         */
        public function wp_newTerm($args)
        {
        }
        /**
         * Edit a term.
         *
         * @since 3.4.0
         *
         * @see wp_update_term()
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id        Blog ID (unused).
         *     @type string $username       Username.
         *     @type string $password       Password.
         *     @type int    $term_id        Term ID.
         *     @type array  $content_struct Content struct for editing a term. The struct must contain the
         *                                  term ''taxonomy'. Optional accepted values include 'name', 'parent',
         *                                  'description', and 'slug'.
         * }
         * @return true|IXR_Error True on success, IXR_Error instance on failure.
         */
        public function wp_editTerm($args)
        {
        }
        /**
         * Delete a term.
         *
         * @since 3.4.0
         *
         * @see wp_delete_term()
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id       Blog ID (unused).
         *     @type string $username      Username.
         *     @type string $password      Password.
         *     @type string $taxonomy_name Taxonomy name.
         *     @type int    $term_id       Term ID.
         * }
         * @return true|IXR_Error True on success, IXR_Error instance on failure.
         */
        public function wp_deleteTerm($args)
        {
        }
        /**
         * Retrieve a term.
         *
         * @since 3.4.0
         *
         * @see get_term()
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id  Blog ID (unused).
         *     @type string $username Username.
         *     @type string $password Password.
         *     @type string $taxonomy Taxonomy name.
         *     @type string $term_id  Term ID.
         * }
         * @return array|IXR_Error IXR_Error on failure, array on success, containing:
         *  - 'term_id'
         *  - 'name'
         *  - 'slug'
         *  - 'term_group'
         *  - 'term_taxonomy_id'
         *  - 'taxonomy'
         *  - 'description'
         *  - 'parent'
         *  - 'count'
         */
        public function wp_getTerm($args)
        {
        }
        /**
         * Retrieve all terms for a taxonomy.
         *
         * @since 3.4.0
         *
         * The optional $filter parameter modifies the query used to retrieve terms.
         * Accepted keys are 'number', 'offset', 'orderby', 'order', 'hide_empty', and 'search'.
         *
         * @see get_terms()
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id  Blog ID (unused).
         *     @type string $username Username.
         *     @type string $password Password.
         *     @type string $taxonomy Taxonomy name.
         *     @type array  $filter   Optional. Modifies the query used to retrieve posts. Accepts 'number',
         *                            'offset', 'orderby', 'order', 'hide_empty', and 'search'. Default empty array.
         * }
         * @return array|IXR_Error An associative array of terms data on success, IXR_Error instance otherwise.
         */
        public function wp_getTerms($args)
        {
        }
        /**
         * Retrieve a taxonomy.
         *
         * @since 3.4.0
         *
         * @see get_taxonomy()
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id  Blog ID (unused).
         *     @type string $username Username.
         *     @type string $password Password.
         *     @type string $taxonomy Taxonomy name.
         *     @type array  $fields   Optional. Array of taxonomy fields to limit to in the return.
         *                            Accepts 'labels', 'cap', 'menu', and 'object_type'.
         *                            Default empty array.
         * }
         * @return array|IXR_Error An array of taxonomy data on success, IXR_Error instance otherwise.
         */
        public function wp_getTaxonomy($args)
        {
        }
        /**
         * Retrieve all taxonomies.
         *
         * @since 3.4.0
         *
         * @see get_taxonomies()
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id  Blog ID (unused).
         *     @type string $username Username.
         *     @type string $password Password.
         *     @type array  $filter   Optional. An array of arguments for retrieving taxonomies.
         *     @type array  $fields   Optional. The subset of taxonomy fields to return.
         * }
         * @return array|IXR_Error An associative array of taxonomy data with returned fields determined
         *                         by `$fields`, or an IXR_Error instance on failure.
         */
        public function wp_getTaxonomies($args)
        {
        }
        /**
         * Retrieve a user.
         *
         * The optional $fields parameter specifies what fields will be included
         * in the response array. This should be a list of field names. 'user_id' will
         * always be included in the response regardless of the value of $fields.
         *
         * Instead of, or in addition to, individual field names, conceptual group
         * names can be used to specify multiple fields. The available conceptual
         * groups are 'basic' and 'all'.
         *
         * @uses get_userdata()
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         *     @type int    $user_id
         *     @type array  $fields (optional)
         * }
         * @return array|IXR_Error Array contains (based on $fields parameter):
         *  - 'user_id'
         *  - 'username'
         *  - 'first_name'
         *  - 'last_name'
         *  - 'registered'
         *  - 'bio'
         *  - 'email'
         *  - 'nickname'
         *  - 'nicename'
         *  - 'url'
         *  - 'display_name'
         *  - 'roles'
         */
        public function wp_getUser($args)
        {
        }
        /**
         * Retrieve users.
         *
         * The optional $filter parameter modifies the query used to retrieve users.
         * Accepted keys are 'number' (default: 50), 'offset' (default: 0), 'role',
         * 'who', 'orderby', and 'order'.
         *
         * The optional $fields parameter specifies what fields will be included
         * in the response array.
         *
         * @uses get_users()
         * @see wp_getUser() for more on $fields and return values
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         *     @type array  $filter (optional)
         *     @type array  $fields (optional)
         * }
         * @return array|IXR_Error users data
         */
        public function wp_getUsers($args)
        {
        }
        /**
         * Retrieve information about the requesting user.
         *
         * @uses get_userdata()
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         *     @type array  $fields (optional)
         * }
         * @return array|IXR_Error (@see wp_getUser)
         */
        public function wp_getProfile($args)
        {
        }
        /**
         * Edit user's profile.
         *
         * @uses wp_update_user()
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         *     @type array  $content_struct It can optionally contain:
         *      - 'first_name'
         *      - 'last_name'
         *      - 'website'
         *      - 'display_name'
         *      - 'nickname'
         *      - 'nicename'
         *      - 'bio'
         * }
         * @return true|IXR_Error True, on success.
         */
        public function wp_editProfile($args)
        {
        }
        /**
         * Retrieve page.
         *
         * @since 2.2.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type int    $page_id
         *     @type string $username
         *     @type string $password
         * }
         * @return array|IXR_Error
         */
        public function wp_getPage($args)
        {
        }
        /**
         * Retrieve Pages.
         *
         * @since 2.2.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         *     @type int    $num_pages
         * }
         * @return array|IXR_Error
         */
        public function wp_getPages($args)
        {
        }
        /**
         * Create new page.
         *
         * @since 2.2.0
         *
         * @see wp_xmlrpc_server::mw_newPost()
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         *     @type array  $content_struct
         * }
         * @return int|IXR_Error
         */
        public function wp_newPage($args)
        {
        }
        /**
         * Delete page.
         *
         * @since 2.2.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         *     @type int    $page_id
         * }
         * @return true|IXR_Error True, if success.
         */
        public function wp_deletePage($args)
        {
        }
        /**
         * Edit page.
         *
         * @since 2.2.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type int    $page_id
         *     @type string $username
         *     @type string $password
         *     @type string $content
         *     @type string $publish
         * }
         * @return array|IXR_Error
         */
        public function wp_editPage($args)
        {
        }
        /**
         * Retrieve page list.
         *
         * @since 2.2.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         * }
         * @return array|IXR_Error
         */
        public function wp_getPageList($args)
        {
        }
        /**
         * Retrieve authors list.
         *
         * @since 2.2.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         * }
         * @return array|IXR_Error
         */
        public function wp_getAuthors($args)
        {
        }
        /**
         * Get list of all tags
         *
         * @since 2.7.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         * }
         * @return array|IXR_Error
         */
        public function wp_getTags($args)
        {
        }
        /**
         * Create new category.
         *
         * @since 2.2.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         *     @type array  $category
         * }
         * @return int|IXR_Error Category ID.
         */
        public function wp_newCategory($args)
        {
        }
        /**
         * Remove category.
         *
         * @since 2.5.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         *     @type int    $category_id
         * }
         * @return bool|IXR_Error See wp_delete_term() for return info.
         */
        public function wp_deleteCategory($args)
        {
        }
        /**
         * Retrieve category list.
         *
         * @since 2.2.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         *     @type array  $category
         *     @type int    $max_results
         * }
         * @return array|IXR_Error
         */
        public function wp_suggestCategories($args)
        {
        }
        /**
         * Retrieve comment.
         *
         * @since 2.7.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         *     @type int    $comment_id
         * }
         * @return array|IXR_Error
         */
        public function wp_getComment($args)
        {
        }
        /**
         * Retrieve comments.
         *
         * Besides the common blog_id (unused), username, and password arguments, it takes a filter
         * array as last argument.
         *
         * Accepted 'filter' keys are 'status', 'post_id', 'offset', and 'number'.
         *
         * The defaults are as follows:
         * - 'status' - Default is ''. Filter by status (e.g., 'approve', 'hold')
         * - 'post_id' - Default is ''. The post where the comment is posted. Empty string shows all comments.
         * - 'number' - Default is 10. Total number of media items to retrieve.
         * - 'offset' - Default is 0. See WP_Query::query() for more.
         *
         * @since 2.7.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         *     @type array  $struct
         * }
         * @return array|IXR_Error Contains a collection of comments. See wp_xmlrpc_server::wp_getComment() for a description of each item contents
         */
        public function wp_getComments($args)
        {
        }
        /**
         * Delete a comment.
         *
         * By default, the comment will be moved to the Trash instead of deleted.
         * See wp_delete_comment() for more information on this behavior.
         *
         * @since 2.7.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         *     @type int    $comment_ID
         * }
         * @return bool|IXR_Error See wp_delete_comment().
         */
        public function wp_deleteComment($args)
        {
        }
        /**
         * Edit comment.
         *
         * Besides the common blog_id (unused), username, and password arguments, it takes a
         * comment_id integer and a content_struct array as last argument.
         *
         * The allowed keys in the content_struct array are:
         *  - 'author'
         *  - 'author_url'
         *  - 'author_email'
         *  - 'content'
         *  - 'date_created_gmt'
         *  - 'status'. Common statuses are 'approve', 'hold', 'spam'. See get_comment_statuses() for more details
         *
         * @since 2.7.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         *     @type int    $comment_ID
         *     @type array  $content_struct
         * }
         * @return true|IXR_Error True, on success.
         */
        public function wp_editComment($args)
        {
        }
        /**
         * Create new comment.
         *
         * @since 2.7.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int        $blog_id (unused)
         *     @type string     $username
         *     @type string     $password
         *     @type string|int $post
         *     @type array      $content_struct
         * }
         * @return int|IXR_Error See wp_new_comment().
         */
        public function wp_newComment($args)
        {
        }
        /**
         * Retrieve all of the comment status.
         *
         * @since 2.7.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         * }
         * @return array|IXR_Error
         */
        public function wp_getCommentStatusList($args)
        {
        }
        /**
         * Retrieve comment count.
         *
         * @since 2.5.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         *     @type int    $post_id
         * }
         * @return array|IXR_Error
         */
        public function wp_getCommentCount($args)
        {
        }
        /**
         * Retrieve post statuses.
         *
         * @since 2.5.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         * }
         * @return array|IXR_Error
         */
        public function wp_getPostStatusList($args)
        {
        }
        /**
         * Retrieve page statuses.
         *
         * @since 2.5.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         * }
         * @return array|IXR_Error
         */
        public function wp_getPageStatusList($args)
        {
        }
        /**
         * Retrieve page templates.
         *
         * @since 2.6.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         * }
         * @return array|IXR_Error
         */
        public function wp_getPageTemplates($args)
        {
        }
        /**
         * Retrieve blog options.
         *
         * @since 2.6.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         *     @type array  $options
         * }
         * @return array|IXR_Error
         */
        public function wp_getOptions($args)
        {
        }
        /**
         * Retrieve blog options value from list.
         *
         * @since 2.6.0
         *
         * @param array $options Options to retrieve.
         * @return array
         */
        public function _getOptions($options)
        {
        }
        /**
         * Update blog options.
         *
         * @since 2.6.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         *     @type array  $options
         * }
         * @return array|IXR_Error
         */
        public function wp_setOptions($args)
        {
        }
        /**
         * Retrieve a media item by ID
         *
         * @since 3.1.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         *     @type int    $attachment_id
         * }
         * @return array|IXR_Error Associative array contains:
         *  - 'date_created_gmt'
         *  - 'parent'
         *  - 'link'
         *  - 'thumbnail'
         *  - 'title'
         *  - 'caption'
         *  - 'description'
         *  - 'metadata'
         */
        public function wp_getMediaItem($args)
        {
        }
        /**
         * Retrieves a collection of media library items (or attachments)
         *
         * Besides the common blog_id (unused), username, and password arguments, it takes a filter
         * array as last argument.
         *
         * Accepted 'filter' keys are 'parent_id', 'mime_type', 'offset', and 'number'.
         *
         * The defaults are as follows:
         * - 'number' - Default is 5. Total number of media items to retrieve.
         * - 'offset' - Default is 0. See WP_Query::query() for more.
         * - 'parent_id' - Default is ''. The post where the media item is attached. Empty string shows all media items. 0 shows unattached media items.
         * - 'mime_type' - Default is ''. Filter by mime type (e.g., 'image/jpeg', 'application/pdf')
         *
         * @since 3.1.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         *     @type array  $struct
         * }
         * @return array|IXR_Error Contains a collection of media items. See wp_xmlrpc_server::wp_getMediaItem() for a description of each item contents
         */
        public function wp_getMediaLibrary($args)
        {
        }
        /**
         * Retrieves a list of post formats used by the site.
         *
         * @since 3.1.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         * }
         * @return array|IXR_Error List of post formats, otherwise IXR_Error object.
         */
        public function wp_getPostFormats($args)
        {
        }
        /**
         * Retrieves a post type
         *
         * @since 3.4.0
         *
         * @see get_post_type_object()
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         *     @type string $post_type_name
         *     @type array  $fields (optional)
         * }
         * @return array|IXR_Error Array contains:
         *  - 'labels'
         *  - 'description'
         *  - 'capability_type'
         *  - 'cap'
         *  - 'map_meta_cap'
         *  - 'hierarchical'
         *  - 'menu_position'
         *  - 'taxonomies'
         *  - 'supports'
         */
        public function wp_getPostType($args)
        {
        }
        /**
         * Retrieves a post types
         *
         * @since 3.4.0
         *
         * @see get_post_types()
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         *     @type array  $filter (optional)
         *     @type array  $fields (optional)
         * }
         * @return array|IXR_Error
         */
        public function wp_getPostTypes($args)
        {
        }
        /**
         * Retrieve revisions for a specific post.
         *
         * @since 3.5.0
         *
         * The optional $fields parameter specifies what fields will be included
         * in the response array.
         *
         * @uses wp_get_post_revisions()
         * @see wp_getPost() for more on $fields
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         *     @type int    $post_id
         *     @type array  $fields (optional)
         * }
         * @return array|IXR_Error contains a collection of posts.
         */
        public function wp_getRevisions($args)
        {
        }
        /**
         * Restore a post revision
         *
         * @since 3.5.0
         *
         * @uses wp_restore_post_revision()
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         *     @type int    $revision_id
         * }
         * @return bool|IXR_Error false if there was an error restoring, true if success.
         */
        public function wp_restoreRevision($args)
        {
        }
        /*
         * Blogger API functions.
         * Specs on http://plant.blogger.com/api and https://groups.yahoo.com/group/bloggerDev/
         */
        /**
         * Retrieve blogs that user owns.
         *
         * Will make more sense once we support multiple blogs.
         *
         * @since 1.5.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         * }
         * @return array|IXR_Error
         */
        public function blogger_getUsersBlogs($args)
        {
        }
        /**
         * Private function for retrieving a users blogs for multisite setups
         *
         * @since 3.0.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type string $username Username.
         *     @type string $password Password.
         * }
         * @return array|IXR_Error
         */
        protected function _multisite_getUsersBlogs($args)
        {
        }
        /**
         * Retrieve user's data.
         *
         * Gives your client some info about you, so you don't have to.
         *
         * @since 1.5.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         * }
         * @return array|IXR_Error
         */
        public function blogger_getUserInfo($args)
        {
        }
        /**
         * Retrieve post.
         *
         * @since 1.5.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type int    $post_ID
         *     @type string $username
         *     @type string $password
         * }
         * @return array|IXR_Error
         */
        public function blogger_getPost($args)
        {
        }
        /**
         * Retrieve list of recent posts.
         *
         * @since 1.5.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type string $appkey (unused)
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         *     @type int    $numberposts (optional)
         * }
         * @return array|IXR_Error
         */
        public function blogger_getRecentPosts($args)
        {
        }
        /**
         * Deprecated.
         *
         * @since 1.5.0
         * @deprecated 3.5.0
         *
         * @param array $args Unused.
         * @return IXR_Error Error object.
         */
        public function blogger_getTemplate($args)
        {
        }
        /**
         * Deprecated.
         *
         * @since 1.5.0
         * @deprecated 3.5.0
         *
         * @param array $args Unused.
         * @return IXR_Error Error object.
         */
        public function blogger_setTemplate($args)
        {
        }
        /**
         * Creates new post.
         *
         * @since 1.5.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type string $appkey (unused)
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         *     @type string $content
         *     @type string $publish
         * }
         * @return int|IXR_Error
         */
        public function blogger_newPost($args)
        {
        }
        /**
         * Edit a post.
         *
         * @since 1.5.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type int    $post_ID
         *     @type string $username
         *     @type string $password
         *     @type string $content
         *     @type bool   $publish
         * }
         * @return true|IXR_Error true when done.
         */
        public function blogger_editPost($args)
        {
        }
        /**
         * Remove a post.
         *
         * @since 1.5.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type int    $post_ID
         *     @type string $username
         *     @type string $password
         * }
         * @return true|IXR_Error True when post is deleted.
         */
        public function blogger_deletePost($args)
        {
        }
        /*
         * MetaWeblog API functions.
         * Specs on wherever Dave Winer wants them to be.
         */
        /**
         * Create a new post.
         *
         * The 'content_struct' argument must contain:
         *  - title
         *  - description
         *  - mt_excerpt
         *  - mt_text_more
         *  - mt_keywords
         *  - mt_tb_ping_urls
         *  - categories
         *
         * Also, it can optionally contain:
         *  - wp_slug
         *  - wp_password
         *  - wp_page_parent_id
         *  - wp_page_order
         *  - wp_author_id
         *  - post_status | page_status - can be 'draft', 'private', 'publish', or 'pending'
         *  - mt_allow_comments - can be 'open' or 'closed'
         *  - mt_allow_pings - can be 'open' or 'closed'
         *  - date_created_gmt
         *  - dateCreated
         *  - wp_post_thumbnail
         *
         * @since 1.5.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         *     @type array  $content_struct
         *     @type int    $publish
         * }
         * @return int|IXR_Error
         */
        public function mw_newPost($args)
        {
        }
        /**
         * Adds an enclosure to a post if it's new.
         *
         * @since 2.8.0
         *
         * @param int   $post_ID   Post ID.
         * @param array $enclosure Enclosure data.
         */
        public function add_enclosure_if_new($post_ID, $enclosure)
        {
        }
        /**
         * Attach upload to a post.
         *
         * @since 2.1.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param int    $post_ID      Post ID.
         * @param string $post_content Post Content for attachment.
         */
        public function attach_uploads($post_ID, $post_content)
        {
        }
        /**
         * Edit a post.
         *
         * @since 1.5.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         *     @type array  $content_struct
         *     @type int    $publish
         * }
         * @return true|IXR_Error True on success.
         */
        public function mw_editPost($args)
        {
        }
        /**
         * Retrieve post.
         *
         * @since 1.5.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type int    $post_ID
         *     @type string $username
         *     @type string $password
         * }
         * @return array|IXR_Error
         */
        public function mw_getPost($args)
        {
        }
        /**
         * Retrieve list of recent posts.
         *
         * @since 1.5.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         *     @type int    $numberposts
         * }
         * @return array|IXR_Error
         */
        public function mw_getRecentPosts($args)
        {
        }
        /**
         * Retrieve the list of categories on a given blog.
         *
         * @since 1.5.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         * }
         * @return array|IXR_Error
         */
        public function mw_getCategories($args)
        {
        }
        /**
         * Uploads a file, following your settings.
         *
         * Adapted from a patch by Johann Richard.
         *
         * @link http://mycvs.org/archives/2004/06/30/file-upload-to-wordpress-in-ecto/
         *
         * @since 1.5.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         *     @type array  $data
         * }
         * @return array|IXR_Error
         */
        public function mw_newMediaObject($args)
        {
        }
        /*
         * MovableType API functions.
         * Specs on http://www.movabletype.org/docs/mtmanual_programmatic.html
         */
        /**
         * Retrieve the post titles of recent posts.
         *
         * @since 1.5.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         *     @type int    $numberposts
         * }
         * @return array|IXR_Error
         */
        public function mt_getRecentPostTitles($args)
        {
        }
        /**
         * Retrieve list of all categories on blog.
         *
         * @since 1.5.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $blog_id (unused)
         *     @type string $username
         *     @type string $password
         * }
         * @return array|IXR_Error
         */
        public function mt_getCategoryList($args)
        {
        }
        /**
         * Retrieve post categories.
         *
         * @since 1.5.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $post_ID
         *     @type string $username
         *     @type string $password
         * }
         * @return array|IXR_Error
         */
        public function mt_getPostCategories($args)
        {
        }
        /**
         * Sets categories for a post.
         *
         * @since 1.5.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $post_ID
         *     @type string $username
         *     @type string $password
         *     @type array  $categories
         * }
         * @return true|IXR_Error True on success.
         */
        public function mt_setPostCategories($args)
        {
        }
        /**
         * Retrieve an array of methods supported by this server.
         *
         * @since 1.5.0
         *
         * @return array
         */
        public function mt_supportedMethods()
        {
        }
        /**
         * Retrieve an empty array because we don't support per-post text filters.
         *
         * @since 1.5.0
         */
        public function mt_supportedTextFilters()
        {
        }
        /**
         * Retrieve trackbacks sent to a given post.
         *
         * @since 1.5.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param int $post_ID
         * @return array|IXR_Error
         */
        public function mt_getTrackbackPings($post_ID)
        {
        }
        /**
         * Sets a post's publish status to 'publish'.
         *
         * @since 1.5.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type int    $post_ID
         *     @type string $username
         *     @type string $password
         * }
         * @return int|IXR_Error
         */
        public function mt_publishPost($args)
        {
        }
        /*
         * Pingback functions.
         * Specs on www.hixie.ch/specs/pingback/pingback
         */
        /**
         * Retrieves a pingback and registers it.
         *
         * @since 1.5.0
         *
         * @param array $args {
         *     Method arguments. Note: arguments must be ordered as documented.
         *
         *     @type string $pagelinkedfrom
         *     @type string $pagelinkedto
         * }
         * @return string|IXR_Error
         */
        public function pingback_ping($args)
        {
        }
        /**
         * Retrieve array of URLs that pingbacked the given URL.
         *
         * Specs on http://www.aquarionics.com/misc/archives/blogite/0198.html
         *
         * @since 1.5.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param string $url
         * @return array|IXR_Error
         */
        public function pingback_extensions_getPingbacks($url)
        {
        }
        /**
         * Sends a pingback error based on the given error code and message.
         *
         * @since 3.6.0
         *
         * @param int    $code    Error code.
         * @param string $message Error message.
         * @return IXR_Error Error object.
         */
        protected function pingback_error($code, $message)
        {
        }
    }
    class MagpieRSS
    {
        var $parser;
        var $current_item = array();
        // item currently being parsed
        var $items = array();
        // collection of parsed items
        var $channel = array();
        // hash of channel fields
        var $textinput = array();
        var $image = array();
        var $feed_type;
        var $feed_version;
        // parser variables
        var $stack = array();
        // parser stack
        var $inchannel = \false;
        var $initem = \false;
        var $incontent = \false;
        // if in Atom <content mode="xml"> field
        var $intextinput = \false;
        var $inimage = \false;
        var $current_field = '';
        var $current_namespace = \false;
        //var $ERROR = "";
        var $_CONTENT_CONSTRUCTS = array('content', 'summary', 'info', 'title', 'tagline', 'copyright');
        /**
         * PHP5 constructor.
         */
        function __construct($source)
        {
        }
        /**
         * PHP4 constructor.
         */
        public function MagpieRSS($source)
        {
        }
        function feed_start_element($p, $element, &$attrs)
        {
        }
        function feed_cdata($p, $text)
        {
        }
        function feed_end_element($p, $el)
        {
        }
        function concat(&$str1, $str2 = "")
        {
        }
        function append_content($text)
        {
        }
        // smart append - field and namespace aware
        function append($el, $text)
        {
        }
        function normalize()
        {
        }
        function is_rss()
        {
        }
        function is_atom()
        {
        }
        function map_attrs($k, $v)
        {
        }
        function error($errormsg, $lvl = \E_USER_WARNING)
        {
        }
    }
    class RSSCache
    {
        var $BASE_CACHE;
        // where the cache files are stored
        var $MAX_AGE = 43200;
        // when are files stale, default twelve hours
        var $ERROR = '';
        // accumulate error messages
        /**
         * PHP5 constructor.
         */
        function __construct($base = '', $age = '')
        {
        }
        /**
         * PHP4 constructor.
         */
        public function RSSCache($base = '', $age = '')
        {
        }
        /*=======================================================================*\
        	Function:	set
        	Purpose:	add an item to the cache, keyed on url
        	Input:		url from which the rss file was fetched
        	Output:		true on success
        \*=======================================================================*/
        function set($url, $rss)
        {
        }
        /*=======================================================================*\
        	Function:	get
        	Purpose:	fetch an item from the cache
        	Input:		url from which the rss file was fetched
        	Output:		cached object on HIT, false on MISS
        \*=======================================================================*/
        function get($url)
        {
        }
        /*=======================================================================*\
        	Function:	check_cache
        	Purpose:	check a url for membership in the cache
        				and whether the object is older then MAX_AGE (ie. STALE)
        	Input:		url from which the rss file was fetched
        	Output:		cached object on HIT, false on MISS
        \*=======================================================================*/
        function check_cache($url)
        {
        }
        /*=======================================================================*\
        	Function:	serialize
        \*=======================================================================*/
        function serialize($rss)
        {
        }
        /*=======================================================================*\
        	Function:	unserialize
        \*=======================================================================*/
        function unserialize($data)
        {
        }
        /*=======================================================================*\
        	Function:	file_name
        	Purpose:	map url to location in cache
        	Input:		url from which the rss file was fetched
        	Output:		a file name
        \*=======================================================================*/
        function file_name($url)
        {
        }
        /*=======================================================================*\
        	Function:	error
        	Purpose:	register error
        \*=======================================================================*/
        function error($errormsg, $lvl = \E_USER_WARNING)
        {
        }
        function debug($debugmsg, $lvl = \E_USER_NOTICE)
        {
        }
    }
    /**
     * Feed API: WP_Feed_Cache_Transient class
     *
     * @package WordPress
     * @subpackage Feed
     * @since 4.7.0
     */
    /**
     * Core class used to implement feed cache transients.
     *
     * @since 2.8.0
     */
    class WP_Feed_Cache_Transient
    {
        /**
         * Holds the transient name.
         *
         * @since 2.8.0
         * @var string
         */
        public $name;
        /**
         * Holds the transient mod name.
         *
         * @since 2.8.0
         * @var string
         */
        public $mod_name;
        /**
         * Holds the cache duration in seconds.
         *
         * Defaults to 43200 seconds (12 hours).
         *
         * @since 2.8.0
         * @var int
         */
        public $lifetime = 43200;
        /**
         * Constructor.
         *
         * @since 2.8.0
         * @since 3.2.0 Updated to use a PHP5 constructor.
         *
         * @param string $location  URL location (scheme is used to determine handler).
         * @param string $filename  Unique identifier for cache object.
         * @param string $extension 'spi' or 'spc'.
         */
        public function __construct($location, $filename, $extension)
        {
        }
        /**
         * Sets the transient.
         *
         * @since 2.8.0
         *
         * @param SimplePie $data Data to save.
         * @return true Always true.
         */
        public function save($data)
        {
        }
        /**
         * Gets the transient.
         *
         * @since 2.8.0
         *
         * @return mixed Transient value.
         */
        public function load()
        {
        }
        /**
         * Gets mod transient.
         *
         * @since 2.8.0
         *
         * @return mixed Transient value.
         */
        public function mtime()
        {
        }
        /**
         * Sets mod transient.
         *
         * @since 2.8.0
         *
         * @return bool False if value was not set and true if value was set.
         */
        public function touch()
        {
        }
        /**
         * Deletes transients.
         *
         * @since 2.8.0
         *
         * @return true Always true.
         */
        public function unlink()
        {
        }
    }
    /**
     * WordPress Imagick Image Editor
     *
     * @package WordPress
     * @subpackage Image_Editor
     */
    /**
     * WordPress Image Editor Class for Image Manipulation through Imagick PHP Module
     *
     * @since 3.5.0
     *
     * @see WP_Image_Editor
     */
    class WP_Image_Editor_Imagick extends \WP_Image_Editor
    {
        /**
         * Imagick object.
         *
         * @var Imagick
         */
        protected $image;
        public function __destruct()
        {
        }
        /**
         * Checks to see if current environment supports Imagick.
         *
         * We require Imagick 2.2.0 or greater, based on whether the queryFormats()
         * method can be called statically.
         *
         * @since 3.5.0
         *
         * @param array $args
         * @return bool
         */
        public static function test($args = array())
        {
        }
        /**
         * Checks to see if editor supports the mime-type specified.
         *
         * @since 3.5.0
         *
         * @param string $mime_type
         * @return bool
         */
        public static function supports_mime_type($mime_type)
        {
        }
        /**
         * Loads image from $this->file into new Imagick Object.
         *
         * @since 3.5.0
         *
         * @return true|WP_Error True if loaded; WP_Error on failure.
         */
        public function load()
        {
        }
        /**
         * Sets Image Compression quality on a 1-100% scale.
         *
         * @since 3.5.0
         *
         * @param int $quality Compression Quality. Range: [1,100]
         * @return true|WP_Error True if set successfully; WP_Error on failure.
         */
        public function set_quality($quality = \null)
        {
        }
        /**
         * Sets or updates current image size.
         *
         * @since 3.5.0
         *
         * @param int $width
         * @param int $height
         * @return true|WP_Error
         */
        protected function update_size($width = \null, $height = \null)
        {
        }
        /**
         * Resizes current image.
         *
         * At minimum, either a height or width must be provided.
         * If one of the two is set to null, the resize will
         * maintain aspect ratio according to the provided dimension.
         *
         * @since 3.5.0
         *
         * @param int|null $max_w Image width.
         * @param int|null $max_h Image height.
         * @param bool     $crop
         * @return true|WP_Error
         */
        public function resize($max_w, $max_h, $crop = \false)
        {
        }
        /**
         * Efficiently resize the current image
         *
         * This is a WordPress specific implementation of Imagick::thumbnailImage(),
         * which resizes an image to given dimensions and removes any associated profiles.
         *
         * @since 4.5.0
         *
         * @param int    $dst_w       The destination width.
         * @param int    $dst_h       The destination height.
         * @param string $filter_name Optional. The Imagick filter to use when resizing. Default 'FILTER_TRIANGLE'.
         * @param bool   $strip_meta  Optional. Strip all profiles, excluding color profiles, from the image. Default true.
         * @return void|WP_Error
         */
        protected function thumbnail_image($dst_w, $dst_h, $filter_name = 'FILTER_TRIANGLE', $strip_meta = \true)
        {
        }
        /**
         * Create multiple smaller images from a single source.
         *
         * Attempts to create all sub-sizes and returns the meta data at the end. This
         * may result in the server running out of resources. When it fails there may be few
         * "orphaned" images left over as the meta data is never returned and saved.
         *
         * As of 5.3.0 the preferred way to do this is with `make_subsize()`. It creates
         * the new images one at a time and allows for the meta data to be saved after
         * each new image is created.
         *
         * @since 3.5.0
         *
         * @param array $sizes {
         *     An array of image size data arrays.
         *
         *     Either a height or width must be provided.
         *     If one of the two is set to null, the resize will
         *     maintain aspect ratio according to the provided dimension.
         *
         *     @type array ...$0 {
         *         Array of height, width values, and whether to crop.
         *
         *         @type int  $width  Image width. Optional if `$height` is specified.
         *         @type int  $height Image height. Optional if `$width` is specified.
         *         @type bool $crop   Optional. Whether to crop the image. Default false.
         *     }
         * }
         * @return array An array of resized images' metadata by size.
         */
        public function multi_resize($sizes)
        {
        }
        /**
         * Create an image sub-size and return the image meta data value for it.
         *
         * @since 5.3.0
         *
         * @param array $size_data {
         *     Array of size data.
         *
         *     @type int  $width  The maximum width in pixels.
         *     @type int  $height The maximum height in pixels.
         *     @type bool $crop   Whether to crop the image to exact dimensions.
         * }
         * @return array|WP_Error The image data array for inclusion in the `sizes` array in the image meta,
         *                        WP_Error object on error.
         */
        public function make_subsize($size_data)
        {
        }
        /**
         * Crops Image.
         *
         * @since 3.5.0
         *
         * @param int  $src_x   The start x position to crop from.
         * @param int  $src_y   The start y position to crop from.
         * @param int  $src_w   The width to crop.
         * @param int  $src_h   The height to crop.
         * @param int  $dst_w   Optional. The destination width.
         * @param int  $dst_h   Optional. The destination height.
         * @param bool $src_abs Optional. If the source crop points are absolute.
         * @return true|WP_Error
         */
        public function crop($src_x, $src_y, $src_w, $src_h, $dst_w = \null, $dst_h = \null, $src_abs = \false)
        {
        }
        /**
         * Rotates current image counter-clockwise by $angle.
         *
         * @since 3.5.0
         *
         * @param float $angle
         * @return true|WP_Error
         */
        public function rotate($angle)
        {
        }
        /**
         * Flips current image.
         *
         * @since 3.5.0
         *
         * @param bool $horz Flip along Horizontal Axis
         * @param bool $vert Flip along Vertical Axis
         * @return true|WP_Error
         */
        public function flip($horz, $vert)
        {
        }
        /**
         * Check if a JPEG image has EXIF Orientation tag and rotate it if needed.
         *
         * As ImageMagick copies the EXIF data to the flipped/rotated image, proceed only
         * if EXIF Orientation can be reset afterwards.
         *
         * @since 5.3.0
         *
         * @return bool|WP_Error True if the image was rotated. False if no EXIF data or if the image doesn't need rotation.
         *                       WP_Error if error while rotating.
         */
        public function maybe_exif_rotate()
        {
        }
        /**
         * Saves current image to file.
         *
         * @since 3.5.0
         *
         * @param string $destfilename Optional. Destination filename. Default null.
         * @param string $mime_type    Optional. The mime-type. Default null.
         * @return array|WP_Error {'path'=>string, 'file'=>string, 'width'=>int, 'height'=>int, 'mime-type'=>string}
         */
        public function save($destfilename = \null, $mime_type = \null)
        {
        }
        /**
         * @param Imagick $image
         * @param string  $filename
         * @param string  $mime_type
         * @return array|WP_Error
         */
        protected function _save($image, $filename = \null, $mime_type = \null)
        {
        }
        /**
         * Writes an image to a file or stream.
         *
         * @since 5.6.0
         *
         * @param Imagick $image
         * @param string  $filename The destination filename or stream URL.
         * @return true|WP_Error
         */
        private function write_image($image, $filename)
        {
        }
        /**
         * Streams current image to browser.
         *
         * @since 3.5.0
         *
         * @param string $mime_type The mime type of the image.
         * @return true|WP_Error True on success, WP_Error object on failure.
         */
        public function stream($mime_type = \null)
        {
        }
        /**
         * Strips all image meta except color profiles from an image.
         *
         * @since 4.5.0
         *
         * @return true|WP_Error True if stripping metadata was successful. WP_Error object on error.
         */
        protected function strip_meta()
        {
        }
        /**
         * Sets up Imagick for PDF processing.
         * Increases rendering DPI and only loads first page.
         *
         * @since 4.7.0
         *
         * @return string|WP_Error File to load or WP_Error on failure.
         */
        protected function pdf_setup()
        {
        }
        /**
         * Load the image produced by Ghostscript.
         *
         * Includes a workaround for a bug in Ghostscript 8.70 that prevents processing of some PDF files
         * when `use-cropbox` is set.
         *
         * @since 5.6.0
         *
         * @return true|WP_Error
         */
        protected function pdf_load_source()
        {
        }
    }
    /**
     * Post API: Walker_PageDropdown class
     *
     * @package WordPress
     * @subpackage Post
     * @since 4.4.0
     */
    /**
     * Core class used to create an HTML drop-down list of pages.
     *
     * @since 2.1.0
     *
     * @see Walker
     */
    class Walker_PageDropdown extends \Walker
    {
        /**
         * What the class handles.
         *
         * @since 2.1.0
         * @var string
         *
         * @see Walker::$tree_type
         */
        public $tree_type = 'page';
        /**
         * Database fields to use.
         *
         * @since 2.1.0
         * @var string[]
         *
         * @see Walker::$db_fields
         * @todo Decouple this
         */
        public $db_fields = array('parent' => 'post_parent', 'id' => 'ID');
        /**
         * Starts the element output.
         *
         * @since 2.1.0
         * @since 5.9.0 Renamed `$page` to `$data_object` and `$id` to `$current_object_id`
         *              to match parent class for PHP 8 named parameter support.
         *
         * @see Walker::start_el()
         *
         * @param string  $output            Used to append additional content. Passed by reference.
         * @param WP_Post $data_object       Page data object.
         * @param int     $depth             Optional. Depth of page in reference to parent pages.
         *                                   Used for padding. Default 0.
         * @param array   $args              Optional. Uses 'selected' argument for selected page to
         *                                   set selected HTML attribute for option element. Uses
         *                                   'value_field' argument to fill "value" attribute.
         *                                   See wp_dropdown_pages(). Default empty array.
         * @param int     $current_object_id Optional. ID of the current page. Default 0.
         */
        public function start_el(&$output, $data_object, $depth = 0, $args = array(), $current_object_id = 0)
        {
        }
    }
    /**
     * HTTP API: WP_Http_Streams class
     *
     * @package WordPress
     * @subpackage HTTP
     * @since 4.4.0
     */
    /**
     * Core class used to integrate PHP Streams as an HTTP transport.
     *
     * @since 2.7.0
     * @since 3.7.0 Combined with the fsockopen transport and switched to `stream_socket_client()`.
     */
    class WP_Http_Streams
    {
        /**
         * Send a HTTP request to a URI using PHP Streams.
         *
         * @see WP_Http::request For default options descriptions.
         *
         * @since 2.7.0
         * @since 3.7.0 Combined with the fsockopen transport and switched to stream_socket_client().
         *
         * @param string       $url  The request URL.
         * @param string|array $args Optional. Override the defaults.
         * @return array|WP_Error Array containing 'headers', 'body', 'response', 'cookies', 'filename'. A WP_Error instance upon error
         */
        public function request($url, $args = array())
        {
        }
        /**
         * Verifies the received SSL certificate against its Common Names and subjectAltName fields.
         *
         * PHP's SSL verifications only verify that it's a valid Certificate, it doesn't verify if
         * the certificate is valid for the hostname which was requested.
         * This function verifies the requested hostname against certificate's subjectAltName field,
         * if that is empty, or contains no DNS entries, a fallback to the Common Name field is used.
         *
         * IP Address support is included if the request is being made to an IP address.
         *
         * @since 3.7.0
         *
         * @param resource $stream The PHP Stream which the SSL request is being made over
         * @param string   $host   The hostname being requested
         * @return bool If the certificate presented in $stream is valid for $host
         */
        public static function verify_ssl_certificate($stream, $host)
        {
        }
        /**
         * Determines whether this class can be used for retrieving a URL.
         *
         * @since 2.7.0
         * @since 3.7.0 Combined with the fsockopen transport and switched to stream_socket_client().
         *
         * @param array $args Optional. Array of request arguments. Default empty array.
         * @return bool False means this class can not be used, true means it can.
         */
        public static function test($args = array())
        {
        }
    }
    /**
     * Deprecated HTTP Transport method which used fsockopen.
     *
     * This class is not used, and is included for backward compatibility only.
     * All code should make use of WP_Http directly through its API.
     *
     * @see WP_HTTP::request
     *
     * @since 2.7.0
     * @deprecated 3.7.0 Please use WP_HTTP::request() directly
     */
    class WP_HTTP_Fsockopen extends \WP_Http_Streams
    {
        // For backward compatibility for users who are using the class directly.
    }
    /**
     * Feed API: WP_SimplePie_File class
     *
     * @package WordPress
     * @subpackage Feed
     * @since 4.7.0
     */
    /**
     * Core class for fetching remote files and reading local files with SimplePie.
     *
     * This uses Core's HTTP API to make requests, which gives plugins the ability
     * to hook into the process.
     *
     * @since 2.8.0
     *
     * @see SimplePie_File
     */
    class WP_SimplePie_File extends \SimplePie_File
    {
        /**
         * Constructor.
         *
         * @since 2.8.0
         * @since 3.2.0 Updated to use a PHP5 constructor.
         * @since 5.6.1 Multiple headers are concatenated into a comma-separated string,
         *              rather than remaining an array.
         *
         * @param string       $url             Remote file URL.
         * @param int          $timeout         Optional. How long the connection should stay open in seconds.
         *                                      Default 10.
         * @param int          $redirects       Optional. The number of allowed redirects. Default 5.
         * @param string|array $headers         Optional. Array or string of headers to send with the request.
         *                                      Default null.
         * @param string       $useragent       Optional. User-agent value sent. Default null.
         * @param bool         $force_fsockopen Optional. Whether to force opening internet or unix domain socket
         *                                      connection or not. Default false.
         */
        public function __construct($url, $timeout = 10, $redirects = 5, $headers = \null, $useragent = \null, $force_fsockopen = \false)
        {
        }
    }
    /**
     * Session API: WP_Session_Tokens class
     *
     * @package WordPress
     * @subpackage Session
     * @since 4.7.0
     */
    /**
     * Abstract class for managing user session tokens.
     *
     * @since 4.0.0
     */
    abstract class WP_Session_Tokens
    {
        /**
         * User ID.
         *
         * @since 4.0.0
         * @var int User ID.
         */
        protected $user_id;
        /**
         * Protected constructor. Use the `get_instance()` method to get the instance.
         *
         * @since 4.0.0
         *
         * @param int $user_id User whose session to manage.
         */
        protected function __construct($user_id)
        {
        }
        /**
         * Retrieves a session manager instance for a user.
         *
         * This method contains a {@see 'session_token_manager'} filter, allowing a plugin to swap out
         * the session manager for a subclass of `WP_Session_Tokens`.
         *
         * @since 4.0.0
         *
         * @param int $user_id User whose session to manage.
         * @return WP_Session_Tokens The session object, which is by default an instance of
         *                           the `WP_User_Meta_Session_Tokens` class.
         */
        public static final function get_instance($user_id)
        {
        }
        /**
         * Hashes the given session token for storage.
         *
         * @since 4.0.0
         *
         * @param string $token Session token to hash.
         * @return string A hash of the session token (a verifier).
         */
        private function hash_token($token)
        {
        }
        /**
         * Retrieves a user's session for the given token.
         *
         * @since 4.0.0
         *
         * @param string $token Session token.
         * @return array|null The session, or null if it does not exist.
         */
        public final function get($token)
        {
        }
        /**
         * Validates the given session token for authenticity and validity.
         *
         * Checks that the given token is present and hasn't expired.
         *
         * @since 4.0.0
         *
         * @param string $token Token to verify.
         * @return bool Whether the token is valid for the user.
         */
        public final function verify($token)
        {
        }
        /**
         * Generates a session token and attaches session information to it.
         *
         * A session token is a long, random string. It is used in a cookie
         * to link that cookie to an expiration time and to ensure the cookie
         * becomes invalidated when the user logs out.
         *
         * This function generates a token and stores it with the associated
         * expiration time (and potentially other session information via the
         * {@see 'attach_session_information'} filter).
         *
         * @since 4.0.0
         *
         * @param int $expiration Session expiration timestamp.
         * @return string Session token.
         */
        public final function create($expiration)
        {
        }
        /**
         * Updates the data for the session with the given token.
         *
         * @since 4.0.0
         *
         * @param string $token Session token to update.
         * @param array  $session Session information.
         */
        public final function update($token, $session)
        {
        }
        /**
         * Destroys the session with the given token.
         *
         * @since 4.0.0
         *
         * @param string $token Session token to destroy.
         */
        public final function destroy($token)
        {
        }
        /**
         * Destroys all sessions for this user except the one with the given token (presumably the one in use).
         *
         * @since 4.0.0
         *
         * @param string $token_to_keep Session token to keep.
         */
        public final function destroy_others($token_to_keep)
        {
        }
        /**
         * Determines whether a session is still valid, based on its expiration timestamp.
         *
         * @since 4.0.0
         *
         * @param array $session Session to check.
         * @return bool Whether session is valid.
         */
        protected final function is_still_valid($session)
        {
        }
        /**
         * Destroys all sessions for a user.
         *
         * @since 4.0.0
         */
        public final function destroy_all()
        {
        }
        /**
         * Destroys all sessions for all users.
         *
         * @since 4.0.0
         */
        public static final function destroy_all_for_all_users()
        {
        }
        /**
         * Retrieves all sessions for a user.
         *
         * @since 4.0.0
         *
         * @return array Sessions for a user.
         */
        public final function get_all()
        {
        }
        /**
         * Retrieves all sessions of the user.
         *
         * @since 4.0.0
         *
         * @return array Sessions of the user.
         */
        protected abstract function get_sessions();
        /**
         * Retrieves a session based on its verifier (token hash).
         *
         * @since 4.0.0
         *
         * @param string $verifier Verifier for the session to retrieve.
         * @return array|null The session, or null if it does not exist.
         */
        protected abstract function get_session($verifier);
        /**
         * Updates a session based on its verifier (token hash).
         *
         * Omitting the second argument destroys the session.
         *
         * @since 4.0.0
         *
         * @param string $verifier Verifier for the session to update.
         * @param array  $session  Optional. Session. Omitting this argument destroys the session.
         */
        protected abstract function update_session($verifier, $session = \null);
        /**
         * Destroys all sessions for this user, except the single session with the given verifier.
         *
         * @since 4.0.0
         *
         * @param string $verifier Verifier of the session to keep.
         */
        protected abstract function destroy_other_sessions($verifier);
        /**
         * Destroys all sessions for the user.
         *
         * @since 4.0.0
         */
        protected abstract function destroy_all_sessions();
        /**
         * Destroys all sessions for all users.
         *
         * @since 4.0.0
         */
        public static function drop_sessions()
        {
        }
    }
    /**
     * WP_Theme Class
     *
     * @package WordPress
     * @subpackage Theme
     * @since 3.4.0
     */
    final class WP_Theme implements \ArrayAccess
    {
        /**
         * Whether the theme has been marked as updateable.
         *
         * @since 4.4.0
         * @var bool
         *
         * @see WP_MS_Themes_List_Table
         */
        public $update = \false;
        /**
         * Headers for style.css files.
         *
         * @since 3.4.0
         * @since 5.4.0 Added `Requires at least` and `Requires PHP` headers.
         * @var string[]
         */
        private static $file_headers = array('Name' => 'Theme Name', 'ThemeURI' => 'Theme URI', 'Description' => 'Description', 'Author' => 'Author', 'AuthorURI' => 'Author URI', 'Version' => 'Version', 'Template' => 'Template', 'Status' => 'Status', 'Tags' => 'Tags', 'TextDomain' => 'Text Domain', 'DomainPath' => 'Domain Path', 'RequiresWP' => 'Requires at least', 'RequiresPHP' => 'Requires PHP');
        /**
         * Default themes.
         *
         * @since 3.4.0
         * @since 3.5.0 Added the Twenty Twelve theme.
         * @since 3.6.0 Added the Twenty Thirteen theme.
         * @since 3.8.0 Added the Twenty Fourteen theme.
         * @since 4.1.0 Added the Twenty Fifteen theme.
         * @since 4.4.0 Added the Twenty Sixteen theme.
         * @since 4.7.0 Added the Twenty Seventeen theme.
         * @since 5.0.0 Added the Twenty Nineteen theme.
         * @since 5.3.0 Added the Twenty Twenty theme.
         * @since 5.6.0 Added the Twenty Twenty-One theme.
         * @since 5.9.0 Added the Twenty Twenty-Two theme.
         * @var string[]
         */
        private static $default_themes = array('classic' => 'WordPress Classic', 'default' => 'WordPress Default', 'twentyten' => 'Twenty Ten', 'twentyeleven' => 'Twenty Eleven', 'twentytwelve' => 'Twenty Twelve', 'twentythirteen' => 'Twenty Thirteen', 'twentyfourteen' => 'Twenty Fourteen', 'twentyfifteen' => 'Twenty Fifteen', 'twentysixteen' => 'Twenty Sixteen', 'twentyseventeen' => 'Twenty Seventeen', 'twentynineteen' => 'Twenty Nineteen', 'twentytwenty' => 'Twenty Twenty', 'twentytwentyone' => 'Twenty Twenty-One', 'twentytwentytwo' => 'Twenty Twenty-Two');
        /**
         * Renamed theme tags.
         *
         * @since 3.8.0
         * @var string[]
         */
        private static $tag_map = array('fixed-width' => 'fixed-layout', 'flexible-width' => 'fluid-layout');
        /**
         * Absolute path to the theme root, usually wp-content/themes
         *
         * @since 3.4.0
         * @var string
         */
        private $theme_root;
        /**
         * Header data from the theme's style.css file.
         *
         * @since 3.4.0
         * @var array
         */
        private $headers = array();
        /**
         * Header data from the theme's style.css file after being sanitized.
         *
         * @since 3.4.0
         * @var array
         */
        private $headers_sanitized;
        /**
         * Header name from the theme's style.css after being translated.
         *
         * Cached due to sorting functions running over the translated name.
         *
         * @since 3.4.0
         * @var string
         */
        private $name_translated;
        /**
         * Errors encountered when initializing the theme.
         *
         * @since 3.4.0
         * @var WP_Error
         */
        private $errors;
        /**
         * The directory name of the theme's files, inside the theme root.
         *
         * In the case of a child theme, this is directory name of the child theme.
         * Otherwise, 'stylesheet' is the same as 'template'.
         *
         * @since 3.4.0
         * @var string
         */
        private $stylesheet;
        /**
         * The directory name of the theme's files, inside the theme root.
         *
         * In the case of a child theme, this is the directory name of the parent theme.
         * Otherwise, 'template' is the same as 'stylesheet'.
         *
         * @since 3.4.0
         * @var string
         */
        private $template;
        /**
         * A reference to the parent theme, in the case of a child theme.
         *
         * @since 3.4.0
         * @var WP_Theme
         */
        private $parent;
        /**
         * URL to the theme root, usually an absolute URL to wp-content/themes
         *
         * @since 3.4.0
         * @var string
         */
        private $theme_root_uri;
        /**
         * Flag for whether the theme's textdomain is loaded.
         *
         * @since 3.4.0
         * @var bool
         */
        private $textdomain_loaded;
        /**
         * Stores an md5 hash of the theme root, to function as the cache key.
         *
         * @since 3.4.0
         * @var string
         */
        private $cache_hash;
        /**
         * Flag for whether the themes cache bucket should be persistently cached.
         *
         * Default is false. Can be set with the {@see 'wp_cache_themes_persistently'} filter.
         *
         * @since 3.4.0
         * @var bool
         */
        private static $persistently_cache;
        /**
         * Expiration time for the themes cache bucket.
         *
         * By default the bucket is not cached, so this value is useless.
         *
         * @since 3.4.0
         * @var bool
         */
        private static $cache_expiration = 1800;
        /**
         * Constructor for WP_Theme.
         *
         * @since 3.4.0
         *
         * @global array $wp_theme_directories
         *
         * @param string        $theme_dir  Directory of the theme within the theme_root.
         * @param string        $theme_root Theme root.
         * @param WP_Theme|null $_child If this theme is a parent theme, the child may be passed for validation purposes.
         */
        public function __construct($theme_dir, $theme_root, $_child = \null)
        {
        }
        /**
         * When converting the object to a string, the theme name is returned.
         *
         * @since 3.4.0
         *
         * @return string Theme name, ready for display (translated)
         */
        public function __toString()
        {
        }
        /**
         * __isset() magic method for properties formerly returned by current_theme_info()
         *
         * @since 3.4.0
         *
         * @param string $offset Property to check if set.
         * @return bool Whether the given property is set.
         */
        public function __isset($offset)
        {
        }
        /**
         * __get() magic method for properties formerly returned by current_theme_info()
         *
         * @since 3.4.0
         *
         * @param string $offset Property to get.
         * @return mixed Property value.
         */
        public function __get($offset)
        {
        }
        /**
         * Method to implement ArrayAccess for keys formerly returned by get_themes()
         *
         * @since 3.4.0
         *
         * @param mixed $offset
         * @param mixed $value
         */
        #[\ReturnTypeWillChange]
        public function offsetSet($offset, $value)
        {
        }
        /**
         * Method to implement ArrayAccess for keys formerly returned by get_themes()
         *
         * @since 3.4.0
         *
         * @param mixed $offset
         */
        #[\ReturnTypeWillChange]
        public function offsetUnset($offset)
        {
        }
        /**
         * Method to implement ArrayAccess for keys formerly returned by get_themes()
         *
         * @since 3.4.0
         *
         * @param mixed $offset
         * @return bool
         */
        #[\ReturnTypeWillChange]
        public function offsetExists($offset)
        {
        }
        /**
         * Method to implement ArrayAccess for keys formerly returned by get_themes().
         *
         * Author, Author Name, Author URI, and Description did not previously return
         * translated data. We are doing so now as it is safe to do. However, as
         * Name and Title could have been used as the key for get_themes(), both remain
         * untranslated for back compatibility. This means that ['Name'] is not ideal,
         * and care should be taken to use `$theme::display( 'Name' )` to get a properly
         * translated header.
         *
         * @since 3.4.0
         *
         * @param mixed $offset
         * @return mixed
         */
        #[\ReturnTypeWillChange]
        public function offsetGet($offset)
        {
        }
        /**
         * Returns errors property.
         *
         * @since 3.4.0
         *
         * @return WP_Error|false WP_Error if there are errors, or false.
         */
        public function errors()
        {
        }
        /**
         * Determines whether the theme exists.
         *
         * A theme with errors exists. A theme with the error of 'theme_not_found',
         * meaning that the theme's directory was not found, does not exist.
         *
         * @since 3.4.0
         *
         * @return bool Whether the theme exists.
         */
        public function exists()
        {
        }
        /**
         * Returns reference to the parent theme.
         *
         * @since 3.4.0
         *
         * @return WP_Theme|false Parent theme, or false if the active theme is not a child theme.
         */
        public function parent()
        {
        }
        /**
         * Adds theme data to cache.
         *
         * Cache entries keyed by the theme and the type of data.
         *
         * @since 3.4.0
         *
         * @param string       $key  Type of data to store (theme, screenshot, headers, post_templates)
         * @param array|string $data Data to store
         * @return bool Return value from wp_cache_add()
         */
        private function cache_add($key, $data)
        {
        }
        /**
         * Gets theme data from cache.
         *
         * Cache entries are keyed by the theme and the type of data.
         *
         * @since 3.4.0
         *
         * @param string $key Type of data to retrieve (theme, screenshot, headers, post_templates)
         * @return mixed Retrieved data
         */
        private function cache_get($key)
        {
        }
        /**
         * Clears the cache for the theme.
         *
         * @since 3.4.0
         */
        public function cache_delete()
        {
        }
        /**
         * Gets a raw, unformatted theme header.
         *
         * The header is sanitized, but is not translated, and is not marked up for display.
         * To get a theme header for display, use the display() method.
         *
         * Use the get_template() method, not the 'Template' header, for finding the template.
         * The 'Template' header is only good for what was written in the style.css, while
         * get_template() takes into account where WordPress actually located the theme and
         * whether it is actually valid.
         *
         * @since 3.4.0
         *
         * @param string $header Theme header. Name, Description, Author, Version, ThemeURI, AuthorURI, Status, Tags.
         * @return string|array|false String or array (for Tags header) on success, false on failure.
         */
        public function get($header)
        {
        }
        /**
         * Gets a theme header, formatted and translated for display.
         *
         * @since 3.4.0
         *
         * @param string $header    Theme header. Name, Description, Author, Version, ThemeURI, AuthorURI, Status, Tags.
         * @param bool   $markup    Optional. Whether to mark up the header. Defaults to true.
         * @param bool   $translate Optional. Whether to translate the header. Defaults to true.
         * @return string|array|false Processed header. An array for Tags if `$markup` is false, string otherwise.
         *                            False on failure.
         */
        public function display($header, $markup = \true, $translate = \true)
        {
        }
        /**
         * Sanitizes a theme header.
         *
         * @since 3.4.0
         * @since 5.4.0 Added support for `Requires at least` and `Requires PHP` headers.
         *
         * @param string $header Theme header. Accepts 'Name', 'Description', 'Author', 'Version',
         *                       'ThemeURI', 'AuthorURI', 'Status', 'Tags', 'RequiresWP', 'RequiresPHP'.
         * @param string $value  Value to sanitize.
         * @return string|array An array for Tags header, string otherwise.
         */
        private function sanitize_header($header, $value)
        {
        }
        /**
         * Marks up a theme header.
         *
         * @since 3.4.0
         *
         * @param string       $header    Theme header. Name, Description, Author, Version, ThemeURI, AuthorURI, Status, Tags.
         * @param string|array $value     Value to mark up. An array for Tags header, string otherwise.
         * @param string       $translate Whether the header has been translated.
         * @return string Value, marked up.
         */
        private function markup_header($header, $value, $translate)
        {
        }
        /**
         * Translates a theme header.
         *
         * @since 3.4.0
         *
         * @param string       $header Theme header. Name, Description, Author, Version, ThemeURI, AuthorURI, Status, Tags.
         * @param string|array $value  Value to translate. An array for Tags header, string otherwise.
         * @return string|array Translated value. An array for Tags header, string otherwise.
         */
        private function translate_header($header, $value)
        {
        }
        /**
         * Returns the directory name of the theme's "stylesheet" files, inside the theme root.
         *
         * In the case of a child theme, this is directory name of the child theme.
         * Otherwise, get_stylesheet() is the same as get_template().
         *
         * @since 3.4.0
         *
         * @return string Stylesheet
         */
        public function get_stylesheet()
        {
        }
        /**
         * Returns the directory name of the theme's "template" files, inside the theme root.
         *
         * In the case of a child theme, this is the directory name of the parent theme.
         * Otherwise, the get_template() is the same as get_stylesheet().
         *
         * @since 3.4.0
         *
         * @return string Template
         */
        public function get_template()
        {
        }
        /**
         * Returns the absolute path to the directory of a theme's "stylesheet" files.
         *
         * In the case of a child theme, this is the absolute path to the directory
         * of the child theme's files.
         *
         * @since 3.4.0
         *
         * @return string Absolute path of the stylesheet directory.
         */
        public function get_stylesheet_directory()
        {
        }
        /**
         * Returns the absolute path to the directory of a theme's "template" files.
         *
         * In the case of a child theme, this is the absolute path to the directory
         * of the parent theme's files.
         *
         * @since 3.4.0
         *
         * @return string Absolute path of the template directory.
         */
        public function get_template_directory()
        {
        }
        /**
         * Returns the URL to the directory of a theme's "stylesheet" files.
         *
         * In the case of a child theme, this is the URL to the directory of the
         * child theme's files.
         *
         * @since 3.4.0
         *
         * @return string URL to the stylesheet directory.
         */
        public function get_stylesheet_directory_uri()
        {
        }
        /**
         * Returns the URL to the directory of a theme's "template" files.
         *
         * In the case of a child theme, this is the URL to the directory of the
         * parent theme's files.
         *
         * @since 3.4.0
         *
         * @return string URL to the template directory.
         */
        public function get_template_directory_uri()
        {
        }
        /**
         * Returns the absolute path to the directory of the theme root.
         *
         * This is typically the absolute path to wp-content/themes.
         *
         * @since 3.4.0
         *
         * @return string Theme root.
         */
        public function get_theme_root()
        {
        }
        /**
         * Returns the URL to the directory of the theme root.
         *
         * This is typically the absolute URL to wp-content/themes. This forms the basis
         * for all other URLs returned by WP_Theme, so we pass it to the public function
         * get_theme_root_uri() and allow it to run the {@see 'theme_root_uri'} filter.
         *
         * @since 3.4.0
         *
         * @return string Theme root URI.
         */
        public function get_theme_root_uri()
        {
        }
        /**
         * Returns the main screenshot file for the theme.
         *
         * The main screenshot is called screenshot.png. gif and jpg extensions are also allowed.
         *
         * Screenshots for a theme must be in the stylesheet directory. (In the case of child
         * themes, parent theme screenshots are not inherited.)
         *
         * @since 3.4.0
         *
         * @param string $uri Type of URL to return, either 'relative' or an absolute URI. Defaults to absolute URI.
         * @return string|false Screenshot file. False if the theme does not have a screenshot.
         */
        public function get_screenshot($uri = 'uri')
        {
        }
        /**
         * Returns files in the theme's directory.
         *
         * @since 3.4.0
         *
         * @param string[]|string $type          Optional. Array of extensions to find, string of a single extension,
         *                                       or null for all extensions. Default null.
         * @param int             $depth         Optional. How deep to search for files. Defaults to a flat scan (0 depth).
         *                                       -1 depth is infinite.
         * @param bool            $search_parent Optional. Whether to return parent files. Default false.
         * @return string[] Array of files, keyed by the path to the file relative to the theme's directory, with the values
         *                  being absolute paths.
         */
        public function get_files($type = \null, $depth = 0, $search_parent = \false)
        {
        }
        /**
         * Returns the theme's post templates.
         *
         * @since 4.7.0
         * @since 5.8.0 Include block templates.
         *
         * @return array[] Array of page template arrays, keyed by post type and filename,
         *                 with the value of the translated header name.
         */
        public function get_post_templates()
        {
        }
        /**
         * Returns the theme's post templates for a given post type.
         *
         * @since 3.4.0
         * @since 4.7.0 Added the `$post_type` parameter.
         *
         * @param WP_Post|null $post      Optional. The post being edited, provided for context.
         * @param string       $post_type Optional. Post type to get the templates for. Default 'page'.
         *                                If a post is provided, its post type is used.
         * @return string[] Array of template header names keyed by the template file name.
         */
        public function get_page_templates($post = \null, $post_type = 'page')
        {
        }
        /**
         * Scans a directory for files of a certain extension.
         *
         * @since 3.4.0
         *
         * @param string            $path          Absolute path to search.
         * @param array|string|null $extensions    Optional. Array of extensions to find, string of a single extension,
         *                                         or null for all extensions. Default null.
         * @param int               $depth         Optional. How many levels deep to search for files. Accepts 0, 1+, or
         *                                         -1 (infinite depth). Default 0.
         * @param string            $relative_path Optional. The basename of the absolute path. Used to control the
         *                                         returned path for the found files, particularly when this function
         *                                         recurses to lower depths. Default empty.
         * @return string[]|false Array of files, keyed by the path to the file relative to the `$path` directory prepended
         *                        with `$relative_path`, with the values being absolute paths. False otherwise.
         */
        private static function scandir($path, $extensions = \null, $depth = 0, $relative_path = '')
        {
        }
        /**
         * Loads the theme's textdomain.
         *
         * Translation files are not inherited from the parent theme. TODO: If this fails for the
         * child theme, it should probably try to load the parent theme's translations.
         *
         * @since 3.4.0
         *
         * @return bool True if the textdomain was successfully loaded or has already been loaded.
         *  False if no textdomain was specified in the file headers, or if the domain could not be loaded.
         */
        public function load_textdomain()
        {
        }
        /**
         * Determines whether the theme is allowed (multisite only).
         *
         * @since 3.4.0
         *
         * @param string $check   Optional. Whether to check only the 'network'-wide settings, the 'site'
         *                        settings, or 'both'. Defaults to 'both'.
         * @param int    $blog_id Optional. Ignored if only network-wide settings are checked. Defaults to current site.
         * @return bool Whether the theme is allowed for the network. Returns true in single-site.
         */
        public function is_allowed($check = 'both', $blog_id = \null)
        {
        }
        /**
         * Returns whether this theme is a block-based theme or not.
         *
         * @since 5.9.0
         *
         * @return bool
         */
        public function is_block_theme()
        {
        }
        /**
         * Retrieves the path of a file in the theme.
         *
         * Searches in the stylesheet directory before the template directory so themes
         * which inherit from a parent theme can just override one file.
         *
         * @since 5.9.0
         *
         * @param string $file Optional. File to search for in the stylesheet directory.
         * @return string The path of the file.
         */
        public function get_file_path($file = '')
        {
        }
        /**
         * Determines the latest WordPress default theme that is installed.
         *
         * This hits the filesystem.
         *
         * @since 4.4.0
         *
         * @return WP_Theme|false Object, or false if no theme is installed, which would be bad.
         */
        public static function get_core_default_theme()
        {
        }
        /**
         * Returns array of stylesheet names of themes allowed on the site or network.
         *
         * @since 3.4.0
         *
         * @param int $blog_id Optional. ID of the site. Defaults to the current site.
         * @return string[] Array of stylesheet names.
         */
        public static function get_allowed($blog_id = \null)
        {
        }
        /**
         * Returns array of stylesheet names of themes allowed on the network.
         *
         * @since 3.4.0
         *
         * @return string[] Array of stylesheet names.
         */
        public static function get_allowed_on_network()
        {
        }
        /**
         * Returns array of stylesheet names of themes allowed on the site.
         *
         * @since 3.4.0
         *
         * @param int $blog_id Optional. ID of the site. Defaults to the current site.
         * @return string[] Array of stylesheet names.
         */
        public static function get_allowed_on_site($blog_id = \null)
        {
        }
        /**
         * Enables a theme for all sites on the current network.
         *
         * @since 4.6.0
         *
         * @param string|string[] $stylesheets Stylesheet name or array of stylesheet names.
         */
        public static function network_enable_theme($stylesheets)
        {
        }
        /**
         * Disables a theme for all sites on the current network.
         *
         * @since 4.6.0
         *
         * @param string|string[] $stylesheets Stylesheet name or array of stylesheet names.
         */
        public static function network_disable_theme($stylesheets)
        {
        }
        /**
         * Sorts themes by name.
         *
         * @since 3.4.0
         *
         * @param WP_Theme[] $themes Array of theme objects to sort (passed by reference).
         */
        public static function sort_by_name(&$themes)
        {
        }
        /**
         * Callback function for usort() to naturally sort themes by name.
         *
         * Accesses the Name header directly from the class for maximum speed.
         * Would choke on HTML but we don't care enough to slow it down with strip_tags().
         *
         * @since 3.4.0
         *
         * @param WP_Theme $a First theme.
         * @param WP_Theme $b Second theme.
         * @return int Negative if `$a` falls lower in the natural order than `$b`. Zero if they fall equally.
         *             Greater than 0 if `$a` falls higher in the natural order than `$b`. Used with usort().
         */
        private static function _name_sort($a, $b)
        {
        }
        /**
         * Callback function for usort() to naturally sort themes by translated name.
         *
         * @since 3.4.0
         *
         * @param WP_Theme $a First theme.
         * @param WP_Theme $b Second theme.
         * @return int Negative if `$a` falls lower in the natural order than `$b`. Zero if they fall equally.
         *             Greater than 0 if `$a` falls higher in the natural order than `$b`. Used with usort().
         */
        private static function _name_sort_i18n($a, $b)
        {
        }
    }
    /**
     * WP_Theme_JSON class
     *
     * @package WordPress
     * @subpackage Theme
     * @since 5.8.0
     */
    /**
     * Class that encapsulates the processing of structures that adhere to the theme.json spec.
     *
     * This class is for internal core usage and is not supposed to be used by extenders (plugins and/or themes).
     * This is a low-level API that may need to do breaking changes. Please,
     * use get_global_settings, get_global_styles, and get_global_stylesheet instead.
     *
     * @access private
     */
    class WP_Theme_JSON
    {
        /**
         * Container of data in theme.json format.
         *
         * @since 5.8.0
         * @var array
         */
        protected $theme_json = \null;
        /**
         * Holds block metadata extracted from block.json
         * to be shared among all instances so we don't
         * process it twice.
         *
         * @since 5.8.0
         * @var array
         */
        protected static $blocks_metadata = \null;
        /**
         * The CSS selector for the top-level styles.
         *
         * @since 5.8.0
         * @var string
         */
        const ROOT_BLOCK_SELECTOR = 'body';
        /**
         * The sources of data this object can represent.
         *
         * @since 5.8.0
         * @var string[]
         */
        const VALID_ORIGINS = array('default', 'theme', 'custom');
        /**
         * Presets are a set of values that serve
         * to bootstrap some styles: colors, font sizes, etc.
         *
         * They are a unkeyed array of values such as:
         *
         * ```php
         * array(
         *   array(
         *     'slug'      => 'unique-name-within-the-set',
         *     'name'      => 'Name for the UI',
         *     <value_key> => 'value'
         *   ),
         * )
         * ```
         *
         * This contains the necessary metadata to process them:
         *
         * - path             => Where to find the preset within the settings section.
         * - prevent_override => Disables override of default presets by theme presets.
         *                       The relationship between whether to override the defaults
         *                       and whether the defaults are enabled is inverse:
         *                         - If defaults are enabled  => theme presets should not be overriden
         *                         - If defaults are disabled => theme presets should be overriden
         *                       For example, a theme sets defaultPalette to false,
         *                       making the default palette hidden from the user.
         *                       In that case, we want all the theme presets to be present,
         *                       so they should override the defaults by setting this false.
         * - use_default_names => whether to use the default names
         * - value_key        => the key that represents the value
         * - value_func       => optionally, instead of value_key, a function to generate
         *                       the value that takes a preset as an argument
         *                       (either value_key or value_func should be present)
         * - css_vars         => template string to use in generating the CSS Custom Property.
         *                       Example output: "--wp--preset--duotone--blue: <value>" will generate as many CSS Custom Properties as presets defined
         *                       substituting the $slug for the slug's value for each preset value.
         * - classes          => array containing a structure with the classes to
         *                       generate for the presets, where for each array item
         *                       the key is the class name and the value the property name.
         *                       The "$slug" substring will be replaced by the slug of each preset.
         *                       For example:
         *                       'classes' => array(
         *                         '.has-$slug-color'            => 'color',
         *                         '.has-$slug-background-color' => 'background-color',
         *                         '.has-$slug-border-color'     => 'border-color',
         *                       )
         * - properties       => array of CSS properties to be used by kses to
         *                       validate the content of each preset
         *                       by means of the remove_insecure_properties method.
         *
         * @since 5.8.0
         * @since 5.9.0 Added the `color.duotone` and `typography.fontFamilies` presets,
         *              `use_default_names` preset key, and simplified the metadata structure.
         * @since 6.0.0 Replaced `override` with `prevent_override` and updated the
         *              `prevent_overried` value for `color.duotone` to use `color.defaultDuotone`.
         * @var array
         */
        const PRESETS_METADATA = array(array('path' => array('color', 'palette'), 'prevent_override' => array('color', 'defaultPalette'), 'use_default_names' => \false, 'value_key' => 'color', 'css_vars' => '--wp--preset--color--$slug', 'classes' => array('.has-$slug-color' => 'color', '.has-$slug-background-color' => 'background-color', '.has-$slug-border-color' => 'border-color'), 'properties' => array('color', 'background-color', 'border-color')), array('path' => array('color', 'gradients'), 'prevent_override' => array('color', 'defaultGradients'), 'use_default_names' => \false, 'value_key' => 'gradient', 'css_vars' => '--wp--preset--gradient--$slug', 'classes' => array('.has-$slug-gradient-background' => 'background'), 'properties' => array('background')), array('path' => array('color', 'duotone'), 'prevent_override' => array('color', 'defaultDuotone'), 'use_default_names' => \false, 'value_func' => 'wp_get_duotone_filter_property', 'css_vars' => '--wp--preset--duotone--$slug', 'classes' => array(), 'properties' => array('filter')), array('path' => array('typography', 'fontSizes'), 'prevent_override' => \false, 'use_default_names' => \true, 'value_key' => 'size', 'css_vars' => '--wp--preset--font-size--$slug', 'classes' => array('.has-$slug-font-size' => 'font-size'), 'properties' => array('font-size')), array('path' => array('typography', 'fontFamilies'), 'prevent_override' => \false, 'use_default_names' => \false, 'value_key' => 'fontFamily', 'css_vars' => '--wp--preset--font-family--$slug', 'classes' => array('.has-$slug-font-family' => 'font-family'), 'properties' => array('font-family')));
        /**
         * Metadata for style properties.
         *
         * Each element is a direct mapping from the CSS property name to the
         * path to the value in theme.json & block attributes.
         *
         * @since 5.8.0
         * @since 5.9.0 Added the `border-*`, `font-family`, `font-style`, `font-weight`,
         *              `letter-spacing`, `margin-*`, `padding-*`, `--wp--style--block-gap`,
         *              `text-decoration`, `text-transform`, and `filter` properties,
         *              simplified the metadata structure.
         * @var array
         */
        const PROPERTIES_METADATA = array('background' => array('color', 'gradient'), 'background-color' => array('color', 'background'), 'border-radius' => array('border', 'radius'), 'border-top-left-radius' => array('border', 'radius', 'topLeft'), 'border-top-right-radius' => array('border', 'radius', 'topRight'), 'border-bottom-left-radius' => array('border', 'radius', 'bottomLeft'), 'border-bottom-right-radius' => array('border', 'radius', 'bottomRight'), 'border-color' => array('border', 'color'), 'border-width' => array('border', 'width'), 'border-style' => array('border', 'style'), 'color' => array('color', 'text'), 'font-family' => array('typography', 'fontFamily'), 'font-size' => array('typography', 'fontSize'), 'font-style' => array('typography', 'fontStyle'), 'font-weight' => array('typography', 'fontWeight'), 'letter-spacing' => array('typography', 'letterSpacing'), 'line-height' => array('typography', 'lineHeight'), 'margin' => array('spacing', 'margin'), 'margin-top' => array('spacing', 'margin', 'top'), 'margin-right' => array('spacing', 'margin', 'right'), 'margin-bottom' => array('spacing', 'margin', 'bottom'), 'margin-left' => array('spacing', 'margin', 'left'), 'padding' => array('spacing', 'padding'), 'padding-top' => array('spacing', 'padding', 'top'), 'padding-right' => array('spacing', 'padding', 'right'), 'padding-bottom' => array('spacing', 'padding', 'bottom'), 'padding-left' => array('spacing', 'padding', 'left'), '--wp--style--block-gap' => array('spacing', 'blockGap'), 'text-decoration' => array('typography', 'textDecoration'), 'text-transform' => array('typography', 'textTransform'), 'filter' => array('filter', 'duotone'));
        /**
         * Protected style properties.
         *
         * These style properties are only rendered if a setting enables it
         * via a value other than `null`.
         *
         * Each element maps the style property to the corresponding theme.json
         * setting key.
         *
         * @since 5.9.0
         */
        const PROTECTED_PROPERTIES = array('spacing.blockGap' => array('spacing', 'blockGap'));
        /**
         * The top-level keys a theme.json can have.
         *
         * @since 5.8.0 As `ALLOWED_TOP_LEVEL_KEYS`.
         * @since 5.9.0 Renamed from `ALLOWED_TOP_LEVEL_KEYS` to `VALID_TOP_LEVEL_KEYS`,
         *              added the `customTemplates` and `templateParts` values.
         * @var string[]
         */
        const VALID_TOP_LEVEL_KEYS = array('customTemplates', 'patterns', 'settings', 'styles', 'templateParts', 'version', 'title');
        /**
         * The valid properties under the settings key.
         *
         * @since 5.8.0 As `ALLOWED_SETTINGS`.
         * @since 5.9.0 Renamed from `ALLOWED_SETTINGS` to `VALID_SETTINGS`,
         *              added new properties for `border`, `color`, `spacing`,
         *              and `typography`, and renamed others according to the new schema.
         * @since 6.0.0 Added `color.defaultDuotone`.
         * @var array
         */
        const VALID_SETTINGS = array('appearanceTools' => \null, 'border' => array('color' => \null, 'radius' => \null, 'style' => \null, 'width' => \null), 'color' => array('background' => \null, 'custom' => \null, 'customDuotone' => \null, 'customGradient' => \null, 'defaultDuotone' => \null, 'defaultGradients' => \null, 'defaultPalette' => \null, 'duotone' => \null, 'gradients' => \null, 'link' => \null, 'palette' => \null, 'text' => \null), 'custom' => \null, 'layout' => array('contentSize' => \null, 'wideSize' => \null), 'spacing' => array('blockGap' => \null, 'margin' => \null, 'padding' => \null, 'units' => \null), 'typography' => array('customFontSize' => \null, 'dropCap' => \null, 'fontFamilies' => \null, 'fontSizes' => \null, 'fontStyle' => \null, 'fontWeight' => \null, 'letterSpacing' => \null, 'lineHeight' => \null, 'textDecoration' => \null, 'textTransform' => \null));
        /**
         * The valid properties under the styles key.
         *
         * @since 5.8.0 As `ALLOWED_STYLES`.
         * @since 5.9.0 Renamed from `ALLOWED_STYLES` to `VALID_STYLES`,
         *              added new properties for `border`, `filter`, `spacing`,
         *              and `typography`.
         * @var array
         */
        const VALID_STYLES = array('border' => array('color' => \null, 'radius' => \null, 'style' => \null, 'width' => \null), 'color' => array('background' => \null, 'gradient' => \null, 'text' => \null), 'filter' => array('duotone' => \null), 'spacing' => array('margin' => \null, 'padding' => \null, 'blockGap' => 'top'), 'typography' => array('fontFamily' => \null, 'fontSize' => \null, 'fontStyle' => \null, 'fontWeight' => \null, 'letterSpacing' => \null, 'lineHeight' => \null, 'textDecoration' => \null, 'textTransform' => \null));
        /**
         * The valid elements that can be found under styles.
         *
         * @since 5.8.0
         * @var string[]
         */
        const ELEMENTS = array('link' => 'a', 'h1' => 'h1', 'h2' => 'h2', 'h3' => 'h3', 'h4' => 'h4', 'h5' => 'h5', 'h6' => 'h6');
        /**
         * Options that settings.appearanceTools enables.
         *
         * @since 6.0.0
         * @var array
         */
        const APPEARANCE_TOOLS_OPT_INS = array(array('border', 'color'), array('border', 'radius'), array('border', 'style'), array('border', 'width'), array('color', 'link'), array('spacing', 'blockGap'), array('spacing', 'margin'), array('spacing', 'padding'), array('typography', 'lineHeight'));
        /**
         * The latest version of the schema in use.
         *
         * @since 5.8.0
         * @since 5.9.0 Changed value from 1 to 2.
         * @var int
         */
        const LATEST_SCHEMA = 2;
        /**
         * Constructor.
         *
         * @since 5.8.0
         *
         * @param array  $theme_json A structure that follows the theme.json schema.
         * @param string $origin     Optional. What source of data this object represents.
         *                           One of 'default', 'theme', or 'custom'. Default 'theme'.
         */
        public function __construct($theme_json = array(), $origin = 'theme')
        {
        }
        /**
         * Enables some opt-in settings if theme declared support.
         *
         * @since 5.9.0
         *
         * @param array $theme_json A theme.json structure to modify.
         * @return array The modified theme.json structure.
         */
        protected static function maybe_opt_in_into_settings($theme_json)
        {
        }
        /**
         * Enables some settings.
         *
         * @since 5.9.0
         *
         * @param array $context The context to which the settings belong.
         */
        protected static function do_opt_in_into_settings(&$context)
        {
        }
        /**
         * Sanitizes the input according to the schemas.
         *
         * @since 5.8.0
         * @since 5.9.0 Added the `$valid_block_names` and `$valid_element_name` parameters.
         *
         * @param array $input               Structure to sanitize.
         * @param array $valid_block_names   List of valid block names.
         * @param array $valid_element_names List of valid element names.
         * @return array The sanitized output.
         */
        protected static function sanitize($input, $valid_block_names, $valid_element_names)
        {
        }
        /**
         * Returns the metadata for each block.
         *
         * Example:
         *
         *     {
         *       'core/paragraph': {
         *         'selector': 'p',
         *         'elements': {
         *           'link' => 'link selector',
         *           'etc'  => 'element selector'
         *         }
         *       },
         *       'core/heading': {
         *         'selector': 'h1',
         *         'elements': {}
         *       },
         *       'core/image': {
         *         'selector': '.wp-block-image',
         *         'duotone': 'img',
         *         'elements': {}
         *       }
         *     }
         *
         * @since 5.8.0
         * @since 5.9.0 Added `duotone` key with CSS selector.
         *
         * @return array Block metadata.
         */
        protected static function get_blocks_metadata()
        {
        }
        /**
         * Given a tree, removes the keys that are not present in the schema.
         *
         * It is recursive and modifies the input in-place.
         *
         * @since 5.8.0
         *
         * @param array $tree   Input to process.
         * @param array $schema Schema to adhere to.
         * @return array Returns the modified $tree.
         */
        protected static function remove_keys_not_in_schema($tree, $schema)
        {
        }
        /**
         * Returns the existing settings for each block.
         *
         * Example:
         *
         *     {
         *       'root': {
         *         'color': {
         *           'custom': true
         *         }
         *       },
         *       'core/paragraph': {
         *         'spacing': {
         *           'customPadding': true
         *         }
         *       }
         *     }
         *
         * @since 5.8.0
         *
         * @return array Settings per block.
         */
        public function get_settings()
        {
        }
        /**
         * Returns the stylesheet that results of processing
         * the theme.json structure this object represents.
         *
         * @since 5.8.0
         * @since 5.9.0 Removed the `$type` parameter`, added the `$types` and `$origins` parameters.
         *
         * @param array $types   Types of styles to load. Will load all by default. It accepts:
         *                       - `variables`: only the CSS Custom Properties for presets & custom ones.
         *                       - `styles`: only the styles section in theme.json.
         *                       - `presets`: only the classes for the presets.
         * @param array $origins A list of origins to include. By default it includes VALID_ORIGINS.
         * @return string Stylesheet.
         */
        public function get_stylesheet($types = array('variables', 'styles', 'presets'), $origins = \null)
        {
        }
        /**
         * Returns the page templates of the active theme.
         *
         * @since 5.9.0
         *
         * @return array
         */
        public function get_custom_templates()
        {
        }
        /**
         * Returns the template part data of active theme.
         *
         * @since 5.9.0
         *
         * @return array
         */
        public function get_template_parts()
        {
        }
        /**
         * Converts each style section into a list of rulesets
         * containing the block styles to be appended to the stylesheet.
         *
         * See glossary at https://developer.mozilla.org/en-US/docs/Web/CSS/Syntax
         *
         * For each section this creates a new ruleset such as:
         *
         *   block-selector {
         *     style-property-one: value;
         *   }
         *
         * @since 5.8.0 As `get_block_styles()`.
         * @since 5.9.0 Renamed from `get_block_styles()` to `get_block_classes()`
         *              and no longer returns preset classes.
         *              Removed the `$setting_nodes` parameter.
         *
         * @param array $style_nodes Nodes with styles.
         * @return string The new stylesheet.
         */
        protected function get_block_classes($style_nodes)
        {
        }
        /**
         * Creates new rulesets as classes for each preset value such as:
         *
         *   .has-value-color {
         *     color: value;
         *   }
         *
         *   .has-value-background-color {
         *     background-color: value;
         *   }
         *
         *   .has-value-font-size {
         *     font-size: value;
         *   }
         *
         *   .has-value-gradient-background {
         *     background: value;
         *   }
         *
         *   p.has-value-gradient-background {
         *     background: value;
         *   }
         *
         * @since 5.9.0
         *
         * @param array $setting_nodes Nodes with settings.
         * @param array $origins       List of origins to process presets from.
         * @return string The new stylesheet.
         */
        protected function get_preset_classes($setting_nodes, $origins)
        {
        }
        /**
         * Converts each styles section into a list of rulesets
         * to be appended to the stylesheet.
         * These rulesets contain all the css variables (custom variables and preset variables).
         *
         * See glossary at https://developer.mozilla.org/en-US/docs/Web/CSS/Syntax
         *
         * For each section this creates a new ruleset such as:
         *
         *     block-selector {
         *       --wp--preset--category--slug: value;
         *       --wp--custom--variable: value;
         *     }
         *
         * @since 5.8.0
         * @since 5.9.0 Added the `$origins` parameter.
         *
         * @param array $nodes   Nodes with settings.
         * @param array $origins List of origins to process.
         * @return string The new stylesheet.
         */
        protected function get_css_variables($nodes, $origins)
        {
        }
        /**
         * Given a selector and a declaration list,
         * creates the corresponding ruleset.
         *
         * @since 5.8.0
         *
         * @param string $selector     CSS selector.
         * @param array  $declarations List of declarations.
         * @return string CSS ruleset.
         */
        protected static function to_ruleset($selector, $declarations)
        {
        }
        /**
         * Function that appends a sub-selector to a existing one.
         *
         * Given the compounded $selector "h1, h2, h3"
         * and the $to_append selector ".some-class" the result will be
         * "h1.some-class, h2.some-class, h3.some-class".
         *
         * @since 5.8.0
         *
         * @param string $selector  Original selector.
         * @param string $to_append Selector to append.
         * @return string
         */
        protected static function append_to_selector($selector, $to_append)
        {
        }
        /**
         * Given a settings array, it returns the generated rulesets
         * for the preset classes.
         *
         * @since 5.8.0
         * @since 5.9.0 Added the `$origins` parameter.
         *
         * @param array  $settings Settings to process.
         * @param string $selector Selector wrapping the classes.
         * @param array  $origins  List of origins to process.
         * @return string The result of processing the presets.
         */
        protected static function compute_preset_classes($settings, $selector, $origins)
        {
        }
        /**
         * Function that scopes a selector with another one. This works a bit like
         * SCSS nesting except the `&` operator isn't supported.
         *
         * <code>
         * $scope = '.a, .b .c';
         * $selector = '> .x, .y';
         * $merged = scope_selector( $scope, $selector );
         * // $merged is '.a > .x, .a .y, .b .c > .x, .b .c .y'
         * </code>
         *
         * @since 5.9.0
         *
         * @param string $scope    Selector to scope to.
         * @param string $selector Original selector.
         * @return string Scoped selector.
         */
        protected static function scope_selector($scope, $selector)
        {
        }
        /**
         * Gets preset values keyed by slugs based on settings and metadata.
         *
         * <code>
         * $settings = array(
         *     'typography' => array(
         *         'fontFamilies' => array(
         *             array(
         *                 'slug'       => 'sansSerif',
         *                 'fontFamily' => '"Helvetica Neue", sans-serif',
         *             ),
         *             array(
         *                 'slug'   => 'serif',
         *                 'colors' => 'Georgia, serif',
         *             )
         *         ),
         *     ),
         * );
         * $meta = array(
         *    'path'      => array( 'typography', 'fontFamilies' ),
         *    'value_key' => 'fontFamily',
         * );
         * $values_by_slug = get_settings_values_by_slug();
         * // $values_by_slug === array(
         * //   'sans-serif' => '"Helvetica Neue", sans-serif',
         * //   'serif'      => 'Georgia, serif',
         * // );
         * </code>
         *
         * @since 5.9.0
         *
         * @param array $settings        Settings to process.
         * @param array $preset_metadata One of the PRESETS_METADATA values.
         * @param array $origins         List of origins to process.
         * @return array Array of presets where each key is a slug and each value is the preset value.
         */
        protected static function get_settings_values_by_slug($settings, $preset_metadata, $origins)
        {
        }
        /**
         * Similar to get_settings_values_by_slug, but doesn't compute the value.
         *
         * @since 5.9.0
         *
         * @param array $settings        Settings to process.
         * @param array $preset_metadata One of the PRESETS_METADATA values.
         * @param array $origins         List of origins to process.
         * @return array Array of presets where the key and value are both the slug.
         */
        protected static function get_settings_slugs($settings, $preset_metadata, $origins = \null)
        {
        }
        /**
         * Transform a slug into a CSS Custom Property.
         *
         * @since 5.9.0
         *
         * @param string $input String to replace.
         * @param string $slug  The slug value to use to generate the custom property.
         * @return string The CSS Custom Property. Something along the lines of `--wp--preset--color--black`.
         */
        protected static function replace_slug_in_string($input, $slug)
        {
        }
        /**
         * Given the block settings, it extracts the CSS Custom Properties
         * for the presets and adds them to the $declarations array
         * following the format:
         *
         *     array(
         *       'name'  => 'property_name',
         *       'value' => 'property_value,
         *     )
         *
         * @since 5.8.0
         * @since 5.9.0 Added the `$origins` parameter.
         *
         * @param array $settings Settings to process.
         * @param array $origins  List of origins to process.
         * @return array Returns the modified $declarations.
         */
        protected static function compute_preset_vars($settings, $origins)
        {
        }
        /**
         * Given an array of settings, it extracts the CSS Custom Properties
         * for the custom values and adds them to the $declarations
         * array following the format:
         *
         *     array(
         *       'name'  => 'property_name',
         *       'value' => 'property_value,
         *     )
         *
         * @since 5.8.0
         *
         * @param array $settings Settings to process.
         * @return array Returns the modified $declarations.
         */
        protected static function compute_theme_vars($settings)
        {
        }
        /**
         * Given a tree, it creates a flattened one
         * by merging the keys and binding the leaf values
         * to the new keys.
         *
         * It also transforms camelCase names into kebab-case
         * and substitutes '/' by '-'.
         *
         * This is thought to be useful to generate
         * CSS Custom Properties from a tree,
         * although there's nothing in the implementation
         * of this function that requires that format.
         *
         * For example, assuming the given prefix is '--wp'
         * and the token is '--', for this input tree:
         *
         *     {
         *       'some/property': 'value',
         *       'nestedProperty': {
         *         'sub-property': 'value'
         *       }
         *     }
         *
         * it'll return this output:
         *
         *     {
         *       '--wp--some-property': 'value',
         *       '--wp--nested-property--sub-property': 'value'
         *     }
         *
         * @since 5.8.0
         *
         * @param array  $tree   Input tree to process.
         * @param string $prefix Optional. Prefix to prepend to each variable. Default empty string.
         * @param string $token  Optional. Token to use between levels. Default '--'.
         * @return array The flattened tree.
         */
        protected static function flatten_tree($tree, $prefix = '', $token = '--')
        {
        }
        /**
         * Given a styles array, it extracts the style properties
         * and adds them to the $declarations array following the format:
         *
         *     array(
         *       'name'  => 'property_name',
         *       'value' => 'property_value,
         *     )
         *
         * @since 5.8.0
         * @since 5.9.0 Added the `$settings` and `$properties` parameters.
         *
         * @param array $styles    Styles to process.
         * @param array $settings  Theme settings.
         * @param array $properties Properties metadata.
         * @return array Returns the modified $declarations.
         */
        protected static function compute_style_properties($styles, $settings = array(), $properties = \null)
        {
        }
        /**
         * Returns the style property for the given path.
         *
         * It also converts CSS Custom Property stored as
         * "var:preset|color|secondary" to the form
         * "--wp--preset--color--secondary".
         *
         * @since 5.8.0
         * @since 5.9.0 Added support for values of array type, which are returned as is.
         *
         * @param array $styles Styles subtree.
         * @param array $path   Which property to process.
         * @return string|array Style property value.
         */
        protected static function get_property_value($styles, $path)
        {
        }
        /**
         * Builds metadata for the setting nodes, which returns in the form of:
         *
         *     [
         *       [
         *         'path'     => ['path', 'to', 'some', 'node' ],
         *         'selector' => 'CSS selector for some node'
         *       ],
         *       [
         *         'path'     => [ 'path', 'to', 'other', 'node' ],
         *         'selector' => 'CSS selector for other node'
         *       ],
         *     ]
         *
         * @since 5.8.0
         *
         * @param array $theme_json The tree to extract setting nodes from.
         * @param array $selectors  List of selectors per block.
         * @return array
         */
        protected static function get_setting_nodes($theme_json, $selectors = array())
        {
        }
        /**
         * Builds metadata for the style nodes, which returns in the form of:
         *
         *     [
         *       [
         *         'path'     => [ 'path', 'to', 'some', 'node' ],
         *         'selector' => 'CSS selector for some node',
         *         'duotone'  => 'CSS selector for duotone for some node'
         *       ],
         *       [
         *         'path'     => ['path', 'to', 'other', 'node' ],
         *         'selector' => 'CSS selector for other node',
         *         'duotone'  => null
         *       ],
         *     ]
         *
         * @since 5.8.0
         *
         * @param array $theme_json The tree to extract style nodes from.
         * @param array $selectors  List of selectors per block.
         * @return array
         */
        protected static function get_style_nodes($theme_json, $selectors = array())
        {
        }
        /**
         * For metadata values that can either be booleans or paths to booleans, gets the value.
         *
         * ```php
         * $data = array(
         *   'color' => array(
         *     'defaultPalette' => true
         *   )
         * );
         *
         * static::get_metadata_boolean( $data, false );
         * // => false
         *
         * static::get_metadata_boolean( $data, array( 'color', 'defaultPalette' ) );
         * // => true
         * ```
         *
         * @since 6.0.0
         *
         * @param array      $data    The data to inspect.
         * @param bool|array $path    Boolean or path to a boolean.
         * @param bool       $default Default value if the referenced path is missing.
         *                            Default false.
         * @return bool Value of boolean metadata.
         */
        protected static function get_metadata_boolean($data, $path, $default = \false)
        {
        }
        /**
         * Merge new incoming data.
         *
         * @since 5.8.0
         * @since 5.9.0 Duotone preset also has origins.
         *
         * @param WP_Theme_JSON $incoming Data to merge.
         */
        public function merge($incoming)
        {
        }
        /**
         * Converts all filter (duotone) presets into SVGs.
         *
         * @since 5.9.1
         *
         * @param array $origins List of origins to process.
         * @return string SVG filters.
         */
        public function get_svg_filters($origins)
        {
        }
        /**
         * Returns whether a presets should be overridden or not.
         *
         * @since 5.9.0
         * @deprecated 6.0.0 Use {@see 'get_metadata_boolean'} instead.
         *
         * @param array      $theme_json The theme.json like structure to inspect.
         * @param array      $path       Path to inspect.
         * @param bool|array $override   Data to compute whether to override the preset.
         * @return boolean
         */
        protected static function should_override_preset($theme_json, $path, $override)
        {
        }
        /**
         * Returns the default slugs for all the presets in an associative array
         * whose keys are the preset paths and the leafs is the list of slugs.
         *
         * For example:
         *
         *  array(
         *   'color' => array(
         *     'palette'   => array( 'slug-1', 'slug-2' ),
         *     'gradients' => array( 'slug-3', 'slug-4' ),
         *   ),
         * )
         *
         * @since 5.9.0
         *
         * @param array $data      A theme.json like structure.
         * @param array $node_path The path to inspect. It's 'settings' by default.
         * @return array
         */
        protected static function get_default_slugs($data, $node_path)
        {
        }
        /**
         * Get a `default`'s preset name by a provided slug.
         *
         * @since 5.9.0
         *
         * @param string $slug The slug we want to find a match from default presets.
         * @param array  $base_path The path to inspect. It's 'settings' by default.
         * @return string|null
         */
        protected function get_name_from_defaults($slug, $base_path)
        {
        }
        /**
         * Removes the preset values whose slug is equal to any of given slugs.
         *
         * @since 5.9.0
         *
         * @param array $node  The node with the presets to validate.
         * @param array $slugs The slugs that should not be overridden.
         * @return array The new node.
         */
        protected static function filter_slugs($node, $slugs)
        {
        }
        /**
         * Removes insecure data from theme.json.
         *
         * @since 5.9.0
         *
         * @param array $theme_json Structure to sanitize.
         * @return array Sanitized structure.
         */
        public static function remove_insecure_properties($theme_json)
        {
        }
        /**
         * Processes a setting node and returns the same node
         * without the insecure settings.
         *
         * @since 5.9.0
         *
         * @param array $input Node to process.
         * @return array
         */
        protected static function remove_insecure_settings($input)
        {
        }
        /**
         * Processes a style node and returns the same node
         * without the insecure styles.
         *
         * @since 5.9.0
         *
         * @param array $input Node to process.
         * @return array
         */
        protected static function remove_insecure_styles($input)
        {
        }
        /**
         * Checks that a declaration provided by the user is safe.
         *
         * @since 5.9.0
         *
         * @param string $property_name  Property name in a CSS declaration, i.e. the `color` in `color: red`.
         * @param string $property_value Value in a CSS declaration, i.e. the `red` in `color: red`.
         * @return bool
         */
        protected static function is_safe_css_declaration($property_name, $property_value)
        {
        }
        /**
         * Returns the raw data.
         *
         * @since 5.8.0
         *
         * @return array Raw data.
         */
        public function get_raw_data()
        {
        }
        /**
         * Transforms the given editor settings according the
         * add_theme_support format to the theme.json format.
         *
         * @since 5.8.0
         *
         * @param array $settings Existing editor settings.
         * @return array Config that adheres to the theme.json schema.
         */
        public static function get_from_editor_settings($settings)
        {
        }
        /**
         * Returns the current theme's wanted patterns(slugs) to be
         * registered from Pattern Directory.
         *
         * @since 6.0.0
         *
         * @return string[]
         */
        public function get_patterns()
        {
        }
        /**
         * Returns a valid theme.json as provided by a theme.
         *
         * Unlike get_raw_data() this returns the presets flattened, as provided by a theme.
         * This also uses appearanceTools instead of their opt-ins if all of them are true.
         *
         * @since 6.0.0
         *
         * @return array
         */
        public function get_data()
        {
        }
    }
    /**
     * Class for generating SQL clauses that filter a primary query according to date.
     *
     * WP_Date_Query is a helper that allows primary query classes, such as WP_Query, to filter
     * their results by date columns, by generating `WHERE` subclauses to be attached to the
     * primary SQL query string.
     *
     * Attempting to filter by an invalid date value (eg month=13) will generate SQL that will
     * return no results. In these cases, a _doing_it_wrong() error notice is also thrown.
     * See WP_Date_Query::validate_date_values().
     *
     * @link https://developer.wordpress.org/reference/classes/wp_query/
     *
     * @since 3.7.0
     */
    class WP_Date_Query
    {
        /**
         * Array of date queries.
         *
         * See WP_Date_Query::__construct() for information on date query arguments.
         *
         * @since 3.7.0
         * @var array
         */
        public $queries = array();
        /**
         * The default relation between top-level queries. Can be either 'AND' or 'OR'.
         *
         * @since 3.7.0
         * @var string
         */
        public $relation = 'AND';
        /**
         * The column to query against. Can be changed via the query arguments.
         *
         * @since 3.7.0
         * @var string
         */
        public $column = 'post_date';
        /**
         * The value comparison operator. Can be changed via the query arguments.
         *
         * @since 3.7.0
         * @var string
         */
        public $compare = '=';
        /**
         * Supported time-related parameter keys.
         *
         * @since 4.1.0
         * @var string[]
         */
        public $time_keys = array('after', 'before', 'year', 'month', 'monthnum', 'week', 'w', 'dayofyear', 'day', 'dayofweek', 'dayofweek_iso', 'hour', 'minute', 'second');
        /**
         * Constructor.
         *
         * Time-related parameters that normally require integer values ('year', 'month', 'week', 'dayofyear', 'day',
         * 'dayofweek', 'dayofweek_iso', 'hour', 'minute', 'second') accept arrays of integers for some values of
         * 'compare'. When 'compare' is 'IN' or 'NOT IN', arrays are accepted; when 'compare' is 'BETWEEN' or 'NOT
         * BETWEEN', arrays of two valid values are required. See individual argument descriptions for accepted values.
         *
         * @since 3.7.0
         * @since 4.0.0 The $inclusive logic was updated to include all times within the date range.
         * @since 4.1.0 Introduced 'dayofweek_iso' time type parameter.
         *
         * @param array  $date_query {
         *     Array of date query clauses.
         *
         *     @type array ...$0 {
         *         @type string $column   Optional. The column to query against. If undefined, inherits the value of
         *                                the `$default_column` parameter. See WP_Date_Query::validate_column() and
         *                                the {@see 'date_query_valid_columns'} filter for the list of accepted values.
         *                                Default 'post_date'.
         *         @type string $compare  Optional. The comparison operator. Accepts '=', '!=', '>', '>=', '<', '<=',
         *                                'IN', 'NOT IN', 'BETWEEN', 'NOT BETWEEN'. Default '='.
         *         @type string $relation Optional. The boolean relationship between the date queries. Accepts 'OR' or 'AND'.
         *                                Default 'OR'.
         *         @type array  ...$0 {
         *             Optional. An array of first-order clause parameters, or another fully-formed date query.
         *
         *             @type string|array $before {
         *                 Optional. Date to retrieve posts before. Accepts `strtotime()`-compatible string,
         *                 or array of 'year', 'month', 'day' values.
         *
         *                 @type string $year  The four-digit year. Default empty. Accepts any four-digit year.
         *                 @type string $month Optional when passing array.The month of the year.
         *                                     Default (string:empty)|(array:1). Accepts numbers 1-12.
         *                 @type string $day   Optional when passing array.The day of the month.
         *                                     Default (string:empty)|(array:1). Accepts numbers 1-31.
         *             }
         *             @type string|array $after {
         *                 Optional. Date to retrieve posts after. Accepts `strtotime()`-compatible string,
         *                 or array of 'year', 'month', 'day' values.
         *
         *                 @type string $year  The four-digit year. Accepts any four-digit year. Default empty.
         *                 @type string $month Optional when passing array. The month of the year. Accepts numbers 1-12.
         *                                     Default (string:empty)|(array:12).
         *                 @type string $day   Optional when passing array.The day of the month. Accepts numbers 1-31.
         *                                     Default (string:empty)|(array:last day of month).
         *             }
         *             @type string       $column        Optional. Used to add a clause comparing a column other than
         *                                               the column specified in the top-level `$column` parameter.
         *                                               See WP_Date_Query::validate_column() and
         *                                               the {@see 'date_query_valid_columns'} filter for the list
         *                                               of accepted values. Default is the value of top-level `$column`.
         *             @type string       $compare       Optional. The comparison operator. Accepts '=', '!=', '>', '>=',
         *                                               '<', '<=', 'IN', 'NOT IN', 'BETWEEN', 'NOT BETWEEN'. 'IN',
         *                                               'NOT IN', 'BETWEEN', and 'NOT BETWEEN'. Comparisons support
         *                                               arrays in some time-related parameters. Default '='.
         *             @type bool         $inclusive     Optional. Include results from dates specified in 'before' or
         *                                               'after'. Default false.
         *             @type int|int[]    $year          Optional. The four-digit year number. Accepts any four-digit year
         *                                               or an array of years if `$compare` supports it. Default empty.
         *             @type int|int[]    $month         Optional. The two-digit month number. Accepts numbers 1-12 or an
         *                                               array of valid numbers if `$compare` supports it. Default empty.
         *             @type int|int[]    $week          Optional. The week number of the year. Accepts numbers 0-53 or an
         *                                               array of valid numbers if `$compare` supports it. Default empty.
         *             @type int|int[]    $dayofyear     Optional. The day number of the year. Accepts numbers 1-366 or an
         *                                               array of valid numbers if `$compare` supports it.
         *             @type int|int[]    $day           Optional. The day of the month. Accepts numbers 1-31 or an array
         *                                               of valid numbers if `$compare` supports it. Default empty.
         *             @type int|int[]    $dayofweek     Optional. The day number of the week. Accepts numbers 1-7 (1 is
         *                                               Sunday) or an array of valid numbers if `$compare` supports it.
         *                                               Default empty.
         *             @type int|int[]    $dayofweek_iso Optional. The day number of the week (ISO). Accepts numbers 1-7
         *                                               (1 is Monday) or an array of valid numbers if `$compare` supports it.
         *                                               Default empty.
         *             @type int|int[]    $hour          Optional. The hour of the day. Accepts numbers 0-23 or an array
         *                                               of valid numbers if `$compare` supports it. Default empty.
         *             @type int|int[]    $minute        Optional. The minute of the hour. Accepts numbers 0-59 or an array
         *                                               of valid numbers if `$compare` supports it. Default empty.
         *             @type int|int[]    $second        Optional. The second of the minute. Accepts numbers 0-59 or an
         *                                               array of valid numbers if `$compare` supports it. Default empty.
         *         }
         *     }
         * }
         * @param string $default_column Optional. Default column to query against. See WP_Date_Query::validate_column()
         *                               and the {@see 'date_query_valid_columns'} filter for the list of accepted values.
         *                               Default 'post_date'.
         */
        public function __construct($date_query, $default_column = 'post_date')
        {
        }
        /**
         * Recursive-friendly query sanitizer.
         *
         * Ensures that each query-level clause has a 'relation' key, and that
         * each first-order clause contains all the necessary keys from `$defaults`.
         *
         * @since 4.1.0
         *
         * @param array $queries
         * @param array $parent_query
         * @return array Sanitized queries.
         */
        public function sanitize_query($queries, $parent_query = \null)
        {
        }
        /**
         * Determine whether this is a first-order clause.
         *
         * Checks to see if the current clause has any time-related keys.
         * If so, it's first-order.
         *
         * @since 4.1.0
         *
         * @param array $query Query clause.
         * @return bool True if this is a first-order clause.
         */
        protected function is_first_order_clause($query)
        {
        }
        /**
         * Determines and validates what comparison operator to use.
         *
         * @since 3.7.0
         *
         * @param array $query A date query or a date subquery.
         * @return string The comparison operator.
         */
        public function get_compare($query)
        {
        }
        /**
         * Validates the given date_query values and triggers errors if something is not valid.
         *
         * Note that date queries with invalid date ranges are allowed to
         * continue (though of course no items will be found for impossible dates).
         * This method only generates debug notices for these cases.
         *
         * @since 4.1.0
         *
         * @param array $date_query The date_query array.
         * @return bool  True if all values in the query are valid, false if one or more fail.
         */
        public function validate_date_values($date_query = array())
        {
        }
        /**
         * Validates a column name parameter.
         *
         * Column names without a table prefix (like 'post_date') are checked against a list of
         * allowed and known tables, and then, if found, have a table prefix (such as 'wp_posts.')
         * prepended. Prefixed column names (such as 'wp_posts.post_date') bypass this allowed
         * check, and are only sanitized to remove illegal characters.
         *
         * @since 3.7.0
         *
         * @param string $column The user-supplied column name.
         * @return string A validated column name value.
         */
        public function validate_column($column)
        {
        }
        /**
         * Generate WHERE clause to be appended to a main query.
         *
         * @since 3.7.0
         *
         * @return string MySQL WHERE clause.
         */
        public function get_sql()
        {
        }
        /**
         * Generate SQL clauses to be appended to a main query.
         *
         * Called by the public WP_Date_Query::get_sql(), this method is abstracted
         * out to maintain parity with the other Query classes.
         *
         * @since 4.1.0
         *
         * @return string[] {
         *     Array containing JOIN and WHERE SQL clauses to append to the main query.
         *
         *     @type string $join  SQL fragment to append to the main JOIN clause.
         *     @type string $where SQL fragment to append to the main WHERE clause.
         * }
         */
        protected function get_sql_clauses()
        {
        }
        /**
         * Generate SQL clauses for a single query array.
         *
         * If nested subqueries are found, this method recurses the tree to
         * produce the properly nested SQL.
         *
         * @since 4.1.0
         *
         * @param array $query Query to parse.
         * @param int   $depth Optional. Number of tree levels deep we currently are.
         *                     Used to calculate indentation. Default 0.
         * @return array {
         *     Array containing JOIN and WHERE SQL clauses to append to a single query array.
         *
         *     @type string $join  SQL fragment to append to the main JOIN clause.
         *     @type string $where SQL fragment to append to the main WHERE clause.
         * }
         */
        protected function get_sql_for_query($query, $depth = 0)
        {
        }
        /**
         * Turns a single date clause into pieces for a WHERE clause.
         *
         * A wrapper for get_sql_for_clause(), included here for backward
         * compatibility while retaining the naming convention across Query classes.
         *
         * @since 3.7.0
         *
         * @param array $query Date query arguments.
         * @return string[] {
         *     Array containing JOIN and WHERE SQL clauses to append to the main query.
         *
         *     @type string $join  SQL fragment to append to the main JOIN clause.
         *     @type string $where SQL fragment to append to the main WHERE clause.
         * }
         */
        protected function get_sql_for_subquery($query)
        {
        }
        /**
         * Turns a first-order date query into SQL for a WHERE clause.
         *
         * @since 4.1.0
         *
         * @param array $query        Date query clause.
         * @param array $parent_query Parent query of the current date query.
         * @return string[] {
         *     Array containing JOIN and WHERE SQL clauses to append to the main query.
         *
         *     @type string $join  SQL fragment to append to the main JOIN clause.
         *     @type string $where SQL fragment to append to the main WHERE clause.
         * }
         */
        protected function get_sql_for_clause($query, $parent_query)
        {
        }
        /**
         * Builds and validates a value string based on the comparison operator.
         *
         * @since 3.7.0
         *
         * @param string       $compare The compare operator to use.
         * @param string|array $value   The value.
         * @return string|false|int The value to be used in SQL or false on error.
         */
        public function build_value($compare, $value)
        {
        }
        /**
         * Builds a MySQL format date/time based on some query parameters.
         *
         * You can pass an array of values (year, month, etc.) with missing parameter values being defaulted to
         * either the maximum or minimum values (controlled by the $default_to parameter). Alternatively you can
         * pass a string that will be passed to date_create().
         *
         * @since 3.7.0
         *
         * @param string|array $datetime       An array of parameters or a strotime() string
         * @param bool         $default_to_max Whether to round up incomplete dates. Supported by values
         *                                     of $datetime that are arrays, or string values that are a
         *                                     subset of MySQL date format ('Y', 'Y-m', 'Y-m-d', 'Y-m-d H:i').
         *                                     Default: false.
         * @return string|false A MySQL format date/time or false on failure
         */
        public function build_mysql_datetime($datetime, $default_to_max = \false)
        {
        }
        /**
         * Builds a query string for comparing time values (hour, minute, second).
         *
         * If just hour, minute, or second is set than a normal comparison will be done.
         * However if multiple values are passed, a pseudo-decimal time will be created
         * in order to be able to accurately compare against.
         *
         * @since 3.7.0
         *
         * @param string   $column  The column to query against. Needs to be pre-validated!
         * @param string   $compare The comparison operator. Needs to be pre-validated!
         * @param int|null $hour    Optional. An hour value (0-23).
         * @param int|null $minute  Optional. A minute value (0-59).
         * @param int|null $second  Optional. A second value (0-59).
         * @return string|false A query part or false on failure.
         */
        public function build_time_query($column, $compare, $hour = \null, $minute = \null, $second = \null)
        {
        }
        /**
         * Sanitizes a 'relation' operator.
         *
         * @since 6.0.3
         *
         * @param string $relation Raw relation key from the query argument.
         * @return string Sanitized relation ('AND' or 'OR').
         */
        public function sanitize_relation($relation)
        {
        }
    }
    class Plural_Forms
    {
        /**
         * Operator characters.
         *
         * @since 4.9.0
         * @var string OP_CHARS Operator characters.
         */
        const OP_CHARS = '|&><!=%?:';
        /**
         * Valid number characters.
         *
         * @since 4.9.0
         * @var string NUM_CHARS Valid number characters.
         */
        const NUM_CHARS = '0123456789';
        /**
         * Operator precedence.
         *
         * Operator precedence from highest to lowest. Higher numbers indicate
         * higher precedence, and are executed first.
         *
         * @see https://en.wikipedia.org/wiki/Operators_in_C_and_C%2B%2B#Operator_precedence
         *
         * @since 4.9.0
         * @var array $op_precedence Operator precedence from highest to lowest.
         */
        protected static $op_precedence = array('%' => 6, '<' => 5, '<=' => 5, '>' => 5, '>=' => 5, '==' => 4, '!=' => 4, '&&' => 3, '||' => 2, '?:' => 1, '?' => 1, '(' => 0, ')' => 0);
        /**
         * Tokens generated from the string.
         *
         * @since 4.9.0
         * @var array $tokens List of tokens.
         */
        protected $tokens = array();
        /**
         * Cache for repeated calls to the function.
         *
         * @since 4.9.0
         * @var array $cache Map of $n => $result
         */
        protected $cache = array();
        /**
         * Constructor.
         *
         * @since 4.9.0
         *
         * @param string $str Plural function (just the bit after `plural=` from Plural-Forms)
         */
        public function __construct($str)
        {
        }
        /**
         * Parse a Plural-Forms string into tokens.
         *
         * Uses the shunting-yard algorithm to convert the string to Reverse Polish
         * Notation tokens.
         *
         * @since 4.9.0
         *
         * @throws Exception If there is a syntax or parsing error with the string.
         *
         * @param string $str String to parse.
         */
        protected function parse($str)
        {
        }
        /**
         * Get the plural form for a number.
         *
         * Caches the value for repeated calls.
         *
         * @since 4.9.0
         *
         * @param int $num Number to get plural form for.
         * @return int Plural form value.
         */
        public function get($num)
        {
        }
        /**
         * Execute the plural form function.
         *
         * @since 4.9.0
         *
         * @throws Exception If the plural form value cannot be calculated.
         *
         * @param int $n Variable "n" to substitute.
         * @return int Plural form value.
         */
        public function execute($n)
        {
        }
    }
    class POMO_Reader
    {
        public $endian = 'little';
        public $_post = '';
        /**
         * PHP5 constructor.
         */
        public function __construct()
        {
        }
        /**
         * PHP4 constructor.
         *
         * @deprecated 5.4.0 Use __construct() instead.
         *
         * @see POMO_Reader::__construct()
         */
        public function POMO_Reader()
        {
        }
        /**
         * Sets the endianness of the file.
         *
         * @param string $endian Set the endianness of the file. Accepts 'big', or 'little'.
         */
        public function setEndian($endian)
        {
        }
        /**
         * Reads a 32bit Integer from the Stream
         *
         * @return mixed The integer, corresponding to the next 32 bits from
         *  the stream of false if there are not enough bytes or on error
         */
        public function readint32()
        {
        }
        /**
         * Reads an array of 32-bit Integers from the Stream
         *
         * @param int $count How many elements should be read
         * @return mixed Array of integers or false if there isn't
         *  enough data or on error
         */
        public function readint32array($count)
        {
        }
        /**
         * @param string $string
         * @param int    $start
         * @param int    $length
         * @return string
         */
        public function substr($string, $start, $length)
        {
        }
        /**
         * @param string $string
         * @return int
         */
        public function strlen($string)
        {
        }
        /**
         * @param string $string
         * @param int    $chunk_size
         * @return array
         */
        public function str_split($string, $chunk_size)
        {
        }
        /**
         * @return int
         */
        public function pos()
        {
        }
        /**
         * @return true
         */
        public function is_resource()
        {
        }
        /**
         * @return true
         */
        public function close()
        {
        }
    }
    class POMO_FileReader extends \POMO_Reader
    {
        /**
         * @param string $filename
         */
        public function __construct($filename)
        {
        }
        /**
         * PHP4 constructor.
         *
         * @deprecated 5.4.0 Use __construct() instead.
         *
         * @see POMO_FileReader::__construct()
         */
        public function POMO_FileReader($filename)
        {
        }
        /**
         * @param int $bytes
         * @return string|false Returns read string, otherwise false.
         */
        public function read($bytes)
        {
        }
        /**
         * @param int $pos
         * @return bool
         */
        public function seekto($pos)
        {
        }
        /**
         * @return bool
         */
        public function is_resource()
        {
        }
        /**
         * @return bool
         */
        public function feof()
        {
        }
        /**
         * @return bool
         */
        public function close()
        {
        }
        /**
         * @return string
         */
        public function read_all()
        {
        }
    }
    /**
     * Provides file-like methods for manipulating a string instead
     * of a physical file.
     */
    class POMO_StringReader extends \POMO_Reader
    {
        public $_str = '';
        /**
         * PHP5 constructor.
         */
        public function __construct($str = '')
        {
        }
        /**
         * PHP4 constructor.
         *
         * @deprecated 5.4.0 Use __construct() instead.
         *
         * @see POMO_StringReader::__construct()
         */
        public function POMO_StringReader($str = '')
        {
        }
        /**
         * @param string $bytes
         * @return string
         */
        public function read($bytes)
        {
        }
        /**
         * @param int $pos
         * @return int
         */
        public function seekto($pos)
        {
        }
        /**
         * @return int
         */
        public function length()
        {
        }
        /**
         * @return string
         */
        public function read_all()
        {
        }
    }
    /**
     * Reads the contents of the file in the beginning.
     */
    class POMO_CachedFileReader extends \POMO_StringReader
    {
        /**
         * PHP5 constructor.
         */
        public function __construct($filename)
        {
        }
        /**
         * PHP4 constructor.
         *
         * @deprecated 5.4.0 Use __construct() instead.
         *
         * @see POMO_CachedFileReader::__construct()
         */
        public function POMO_CachedFileReader($filename)
        {
        }
    }
    /**
     * Reads the contents of the file in the beginning.
     */
    class POMO_CachedIntFileReader extends \POMO_CachedFileReader
    {
        /**
         * PHP5 constructor.
         */
        public function __construct($filename)
        {
        }
        /**
         * PHP4 constructor.
         *
         * @deprecated 5.4.0 Use __construct() instead.
         *
         * @see POMO_CachedIntFileReader::__construct()
         */
        public function POMO_CachedIntFileReader($filename)
        {
        }
    }
    class Translations
    {
        public $entries = array();
        public $headers = array();
        /**
         * Add entry to the PO structure
         *
         * @param array|Translation_Entry $entry
         * @return bool true on success, false if the entry doesn't have a key
         */
        public function add_entry($entry)
        {
        }
        /**
         * @param array|Translation_Entry $entry
         * @return bool
         */
        public function add_entry_or_merge($entry)
        {
        }
        /**
         * Sets $header PO header to $value
         *
         * If the header already exists, it will be overwritten
         *
         * TODO: this should be out of this class, it is gettext specific
         *
         * @param string $header header name, without trailing :
         * @param string $value header value, without trailing \n
         */
        public function set_header($header, $value)
        {
        }
        /**
         * @param array $headers
         */
        public function set_headers($headers)
        {
        }
        /**
         * @param string $header
         */
        public function get_header($header)
        {
        }
        /**
         * @param Translation_Entry $entry
         */
        public function translate_entry(&$entry)
        {
        }
        /**
         * @param string $singular
         * @param string $context
         * @return string
         */
        public function translate($singular, $context = \null)
        {
        }
        /**
         * Given the number of items, returns the 0-based index of the plural form to use
         *
         * Here, in the base Translations class, the common logic for English is implemented:
         *  0 if there is one element, 1 otherwise
         *
         * This function should be overridden by the subclasses. For example MO/PO can derive the logic
         * from their headers.
         *
         * @param int $count number of items
         */
        public function select_plural_form($count)
        {
        }
        /**
         * @return int
         */
        public function get_plural_forms_count()
        {
        }
        /**
         * @param string $singular
         * @param string $plural
         * @param int    $count
         * @param string $context
         */
        public function translate_plural($singular, $plural, $count, $context = \null)
        {
        }
        /**
         * Merge $other in the current object.
         *
         * @param Object $other Another Translation object, whose translations will be merged in this one (passed by reference).
         */
        public function merge_with(&$other)
        {
        }
        /**
         * @param object $other
         */
        public function merge_originals_with(&$other)
        {
        }
    }
    class Gettext_Translations extends \Translations
    {
        /**
         * The gettext implementation of select_plural_form.
         *
         * It lives in this class, because there are more than one descendand, which will use it and
         * they can't share it effectively.
         *
         * @param int $count
         */
        public function gettext_select_plural_form($count)
        {
        }
        /**
         * @param string $header
         * @return array
         */
        public function nplurals_and_expression_from_header($header)
        {
        }
        /**
         * Makes a function, which will return the right translation index, according to the
         * plural forms header
         *
         * @param int    $nplurals
         * @param string $expression
         */
        public function make_plural_form_function($nplurals, $expression)
        {
        }
        /**
         * Adds parentheses to the inner parts of ternary operators in
         * plural expressions, because PHP evaluates ternary oerators from left to right
         *
         * @param string $expression the expression without parentheses
         * @return string the expression with parentheses added
         */
        public function parenthesize_plural_exression($expression)
        {
        }
        /**
         * @param string $translation
         * @return array
         */
        public function make_headers($translation)
        {
        }
        /**
         * @param string $header
         * @param string $value
         */
        public function set_header($header, $value)
        {
        }
    }
    class MO extends \Gettext_Translations
    {
        public $_nplurals = 2;
        /**
         * Loaded MO file.
         *
         * @var string
         */
        private $filename = '';
        /**
         * Returns the loaded MO file.
         *
         * @return string The loaded MO file.
         */
        public function get_filename()
        {
        }
        /**
         * Fills up with the entries from MO file $filename
         *
         * @param string $filename MO file to load
         * @return bool True if the import from file was successful, otherwise false.
         */
        public function import_from_file($filename)
        {
        }
        /**
         * @param string $filename
         * @return bool
         */
        public function export_to_file($filename)
        {
        }
        /**
         * @return string|false
         */
        public function export()
        {
        }
        /**
         * @param Translation_Entry $entry
         * @return bool
         */
        public function is_entry_good_for_export($entry)
        {
        }
        /**
         * @param resource $fh
         * @return true
         */
        public function export_to_file_handle($fh)
        {
        }
        /**
         * @param Translation_Entry $entry
         * @return string
         */
        public function export_original($entry)
        {
        }
        /**
         * @param Translation_Entry $entry
         * @return string
         */
        public function export_translations($entry)
        {
        }
        /**
         * @return string
         */
        public function export_headers()
        {
        }
        /**
         * @param int $magic
         * @return string|false
         */
        public function get_byteorder($magic)
        {
        }
        /**
         * @param POMO_FileReader $reader
         * @return bool True if the import was successful, otherwise false.
         */
        public function import_from_reader($reader)
        {
        }
        /**
         * Build a Translation_Entry from original string and translation strings,
         * found in a MO file
         *
         * @static
         * @param string $original original string to translate from MO file. Might contain
         *  0x04 as context separator or 0x00 as singular/plural separator
         * @param string $translation translation string from MO file. Might contain
         *  0x00 as a plural translations separator
         * @return Translation_Entry Entry instance.
         */
        public function &make_entry($original, $translation)
        {
        }
        /**
         * @param int $count
         * @return string
         */
        public function select_plural_form($count)
        {
        }
        /**
         * @return int
         */
        public function get_plural_forms_count()
        {
        }
    }
    /**
     * Provides the same interface as Translations, but doesn't do anything
     */
    class NOOP_Translations
    {
        public $entries = array();
        public $headers = array();
        public function add_entry($entry)
        {
        }
        /**
         * @param string $header
         * @param string $value
         */
        public function set_header($header, $value)
        {
        }
        /**
         * @param array $headers
         */
        public function set_headers($headers)
        {
        }
        /**
         * @param string $header
         * @return false
         */
        public function get_header($header)
        {
        }
        /**
         * @param Translation_Entry $entry
         * @return false
         */
        public function translate_entry(&$entry)
        {
        }
        /**
         * @param string $singular
         * @param string $context
         */
        public function translate($singular, $context = \null)
        {
        }
        /**
         * @param int $count
         * @return bool
         */
        public function select_plural_form($count)
        {
        }
        /**
         * @return int
         */
        public function get_plural_forms_count()
        {
        }
        /**
         * @param string $singular
         * @param string $plural
         * @param int    $count
         * @param string $context
         */
        public function translate_plural($singular, $plural, $count, $context = \null)
        {
        }
        /**
         * @param object $other
         */
        public function merge_with(&$other)
        {
        }
    }
    /**
     * Translation_Entry class encapsulates a translatable string.
     */
    class Translation_Entry
    {
        /**
         * Whether the entry contains a string and its plural form, default is false.
         *
         * @var bool
         */
        public $is_plural = \false;
        public $context = \null;
        public $singular = \null;
        public $plural = \null;
        public $translations = array();
        public $translator_comments = '';
        public $extracted_comments = '';
        public $references = array();
        public $flags = array();
        /**
         * @param array $args {
         *     Arguments array, supports the following keys:
         *
         *     @type string $singular            The string to translate, if omitted an
         *                                       empty entry will be created.
         *     @type string $plural              The plural form of the string, setting
         *                                       this will set `$is_plural` to true.
         *     @type array  $translations        Translations of the string and possibly
         *                                       its plural forms.
         *     @type string $context             A string differentiating two equal strings
         *                                       used in different contexts.
         *     @type string $translator_comments Comments left by translators.
         *     @type string $extracted_comments  Comments left by developers.
         *     @type array  $references          Places in the code this string is used, in
         *                                       relative_to_root_path/file.php:linenum form.
         *     @type array  $flags               Flags like php-format.
         * }
         */
        public function __construct($args = array())
        {
        }
        /**
         * PHP4 constructor.
         *
         * @deprecated 5.4.0 Use __construct() instead.
         *
         * @see Translation_Entry::__construct()
         */
        public function Translation_Entry($args = array())
        {
        }
        /**
         * Generates a unique key for this entry.
         *
         * @return string|false The key or false if the entry is empty.
         */
        public function key()
        {
        }
        /**
         * @param object $other
         */
        public function merge_with(&$other)
        {
        }
    }
    class PO extends \Gettext_Translations
    {
        public $comments_before_headers = '';
        /**
         * Exports headers to a PO entry
         *
         * @return string msgid/msgstr PO entry for this PO file headers, doesn't contain newline at the end
         */
        public function export_headers()
        {
        }
        /**
         * Exports all entries to PO format
         *
         * @return string sequence of mgsgid/msgstr PO strings, doesn't containt newline at the end
         */
        public function export_entries()
        {
        }
        /**
         * Exports the whole PO file as a string
         *
         * @param bool $include_headers whether to include the headers in the export
         * @return string ready for inclusion in PO file string for headers and all the enrtries
         */
        public function export($include_headers = \true)
        {
        }
        /**
         * Same as {@link export}, but writes the result to a file
         *
         * @param string $filename        Where to write the PO string.
         * @param bool   $include_headers Whether to include the headers in the export.
         * @return bool true on success, false on error
         */
        public function export_to_file($filename, $include_headers = \true)
        {
        }
        /**
         * Text to include as a comment before the start of the PO contents
         *
         * Doesn't need to include # in the beginning of lines, these are added automatically
         *
         * @param string $text Text to include as a comment.
         */
        public function set_comment_before_headers($text)
        {
        }
        /**
         * Formats a string in PO-style
         *
         * @param string $string the string to format
         * @return string the poified string
         */
        public static function poify($string)
        {
        }
        /**
         * Gives back the original string from a PO-formatted string
         *
         * @param string $string PO-formatted string
         * @return string enascaped string
         */
        public static function unpoify($string)
        {
        }
        /**
         * Inserts $with in the beginning of every new line of $string and
         * returns the modified string
         *
         * @param string $string prepend lines in this string
         * @param string $with prepend lines with this string
         */
        public static function prepend_each_line($string, $with)
        {
        }
        /**
         * Prepare a text as a comment -- wraps the lines and prepends #
         * and a special character to each line
         *
         * @access private
         * @param string $text the comment text
         * @param string $char character to denote a special PO comment,
         *  like :, default is a space
         */
        public static function comment_block($text, $char = ' ')
        {
        }
        /**
         * Builds a string from the entry for inclusion in PO file
         *
         * @param Translation_Entry $entry the entry to convert to po string.
         * @return string|false PO-style formatted string for the entry or
         *  false if the entry is empty
         */
        public static function export_entry($entry)
        {
        }
        public static function match_begin_and_end_newlines($translation, $original)
        {
        }
        /**
         * @param string $filename
         * @return bool
         */
        public function import_from_file($filename)
        {
        }
        /**
         * Helper function for read_entry
         *
         * @param string $context
         * @return bool
         */
        protected static function is_final($context)
        {
        }
        /**
         * @param resource $f
         * @param int      $lineno
         * @return null|false|array
         */
        public function read_entry($f, $lineno = 0)
        {
        }
        /**
         * @param resource $f
         * @param string   $action
         * @return bool
         */
        public function read_line($f, $action = 'read')
        {
        }
        /**
         * @param Translation_Entry $entry
         * @param string            $po_comment_line
         */
        public function add_comment_to_entry(&$entry, $po_comment_line)
        {
        }
        /**
         * @param string $s
         * @return string
         */
        public static function trim_quotes($s)
        {
        }
    }
    /**
     * Post API: WP_Post class
     *
     * @package WordPress
     * @subpackage Post
     * @since 4.4.0
     */
    /**
     * Core class used to implement the WP_Post object.
     *
     * @since 3.5.0
     *
     * @property string $page_template
     *
     * @property-read int[]  $ancestors
     * @property-read int    $post_category
     * @property-read string $tag_input
     */
    final class WP_Post
    {
        /**
         * Post ID.
         *
         * @since 3.5.0
         * @var int
         */
        public $ID;
        /**
         * ID of post author.
         *
         * A numeric string, for compatibility reasons.
         *
         * @since 3.5.0
         * @var string
         */
        public $post_author = 0;
        /**
         * The post's local publication time.
         *
         * @since 3.5.0
         * @var string
         */
        public $post_date = '0000-00-00 00:00:00';
        /**
         * The post's GMT publication time.
         *
         * @since 3.5.0
         * @var string
         */
        public $post_date_gmt = '0000-00-00 00:00:00';
        /**
         * The post's content.
         *
         * @since 3.5.0
         * @var string
         */
        public $post_content = '';
        /**
         * The post's title.
         *
         * @since 3.5.0
         * @var string
         */
        public $post_title = '';
        /**
         * The post's excerpt.
         *
         * @since 3.5.0
         * @var string
         */
        public $post_excerpt = '';
        /**
         * The post's status.
         *
         * @since 3.5.0
         * @var string
         */
        public $post_status = 'publish';
        /**
         * Whether comments are allowed.
         *
         * @since 3.5.0
         * @var string
         */
        public $comment_status = 'open';
        /**
         * Whether pings are allowed.
         *
         * @since 3.5.0
         * @var string
         */
        public $ping_status = 'open';
        /**
         * The post's password in plain text.
         *
         * @since 3.5.0
         * @var string
         */
        public $post_password = '';
        /**
         * The post's slug.
         *
         * @since 3.5.0
         * @var string
         */
        public $post_name = '';
        /**
         * URLs queued to be pinged.
         *
         * @since 3.5.0
         * @var string
         */
        public $to_ping = '';
        /**
         * URLs that have been pinged.
         *
         * @since 3.5.0
         * @var string
         */
        public $pinged = '';
        /**
         * The post's local modified time.
         *
         * @since 3.5.0
         * @var string
         */
        public $post_modified = '0000-00-00 00:00:00';
        /**
         * The post's GMT modified time.
         *
         * @since 3.5.0
         * @var string
         */
        public $post_modified_gmt = '0000-00-00 00:00:00';
        /**
         * A utility DB field for post content.
         *
         * @since 3.5.0
         * @var string
         */
        public $post_content_filtered = '';
        /**
         * ID of a post's parent post.
         *
         * @since 3.5.0
         * @var int
         */
        public $post_parent = 0;
        /**
         * The unique identifier for a post, not necessarily a URL, used as the feed GUID.
         *
         * @since 3.5.0
         * @var string
         */
        public $guid = '';
        /**
         * A field used for ordering posts.
         *
         * @since 3.5.0
         * @var int
         */
        public $menu_order = 0;
        /**
         * The post's type, like post or page.
         *
         * @since 3.5.0
         * @var string
         */
        public $post_type = 'post';
        /**
         * An attachment's mime type.
         *
         * @since 3.5.0
         * @var string
         */
        public $post_mime_type = '';
        /**
         * Cached comment count.
         *
         * A numeric string, for compatibility reasons.
         *
         * @since 3.5.0
         * @var string
         */
        public $comment_count = 0;
        /**
         * Stores the post object's sanitization level.
         *
         * Does not correspond to a DB field.
         *
         * @since 3.5.0
         * @var string
         */
        public $filter;
        /**
         * Retrieve WP_Post instance.
         *
         * @since 3.5.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param int $post_id Post ID.
         * @return WP_Post|false Post object, false otherwise.
         */
        public static function get_instance($post_id)
        {
        }
        /**
         * Constructor.
         *
         * @since 3.5.0
         *
         * @param WP_Post|object $post Post object.
         */
        public function __construct($post)
        {
        }
        /**
         * Isset-er.
         *
         * @since 3.5.0
         *
         * @param string $key Property to check if set.
         * @return bool
         */
        public function __isset($key)
        {
        }
        /**
         * Getter.
         *
         * @since 3.5.0
         *
         * @param string $key Key to get.
         * @return mixed
         */
        public function __get($key)
        {
        }
        /**
         * {@Missing Summary}
         *
         * @since 3.5.0
         *
         * @param string $filter Filter.
         * @return WP_Post
         */
        public function filter($filter)
        {
        }
        /**
         * Convert object to array.
         *
         * @since 3.5.0
         *
         * @return array Object as array.
         */
        public function to_array()
        {
        }
    }
    /**
     * Class to validate and to work with IPv6 addresses
     *
     * @package Requests
     * @subpackage Utilities
     */
    /**
     * Class to validate and to work with IPv6 addresses
     *
     * This was originally based on the PEAR class of the same name, but has been
     * entirely rewritten.
     *
     * @package Requests
     * @subpackage Utilities
     */
    class Requests_IPv6
    {
        /**
         * Uncompresses an IPv6 address
         *
         * RFC 4291 allows you to compress consecutive zero pieces in an address to
         * '::'. This method expects a valid IPv6 address and expands the '::' to
         * the required number of zero pieces.
         *
         * Example:  FF01::101   ->  FF01:0:0:0:0:0:0:101
         *           ::1         ->  0:0:0:0:0:0:0:1
         *
         * @author Alexander Merz <alexander.merz@web.de>
         * @author elfrink at introweb dot nl
         * @author Josh Peck <jmp at joshpeck dot org>
         * @copyright 2003-2005 The PHP Group
         * @license http://www.opensource.org/licenses/bsd-license.php
         * @param string $ip An IPv6 address
         * @return string The uncompressed IPv6 address
         */
        public static function uncompress($ip)
        {
        }
        /**
         * Compresses an IPv6 address
         *
         * RFC 4291 allows you to compress consecutive zero pieces in an address to
         * '::'. This method expects a valid IPv6 address and compresses consecutive
         * zero pieces to '::'.
         *
         * Example:  FF01:0:0:0:0:0:0:101   ->  FF01::101
         *           0:0:0:0:0:0:0:1        ->  ::1
         *
         * @see uncompress()
         * @param string $ip An IPv6 address
         * @return string The compressed IPv6 address
         */
        public static function compress($ip)
        {
        }
        /**
         * Splits an IPv6 address into the IPv6 and IPv4 representation parts
         *
         * RFC 4291 allows you to represent the last two parts of an IPv6 address
         * using the standard IPv4 representation
         *
         * Example:  0:0:0:0:0:0:13.1.68.3
         *           0:0:0:0:0:FFFF:129.144.52.38
         *
         * @param string $ip An IPv6 address
         * @return string[] [0] contains the IPv6 represented part, and [1] the IPv4 represented part
         */
        protected static function split_v6_v4($ip)
        {
        }
        /**
         * Checks an IPv6 address
         *
         * Checks if the given IP is a valid IPv6 address
         *
         * @param string $ip An IPv6 address
         * @return bool true if $ip is a valid IPv6 address
         */
        public static function check_ipv6($ip)
        {
        }
    }
    /**
     * SSL utilities for Requests
     *
     * @package Requests
     * @subpackage Utilities
     */
    /**
     * SSL utilities for Requests
     *
     * Collection of utilities for working with and verifying SSL certificates.
     *
     * @package Requests
     * @subpackage Utilities
     */
    class Requests_SSL
    {
        /**
         * Verify the certificate against common name and subject alternative names
         *
         * Unfortunately, PHP doesn't check the certificate against the alternative
         * names, leading things like 'https://www.github.com/' to be invalid.
         *
         * @see https://tools.ietf.org/html/rfc2818#section-3.1 RFC2818, Section 3.1
         *
         * @throws Requests_Exception On not obtaining a match for the host (`fsockopen.ssl.no_match`)
         * @param string $host Host name to verify against
         * @param array $cert Certificate data from openssl_x509_parse()
         * @return bool
         */
        public static function verify_certificate($host, $cert)
        {
        }
        /**
         * Verify that a reference name is valid
         *
         * Verifies a dNSName for HTTPS usage, (almost) as per Firefox's rules:
         * - Wildcards can only occur in a name with more than 3 components
         * - Wildcards can only occur as the last character in the first
         *   component
         * - Wildcards may be preceded by additional characters
         *
         * We modify these rules to be a bit stricter and only allow the wildcard
         * character to be the full first component; that is, with the exclusion of
         * the third rule.
         *
         * @param string $reference Reference dNSName
         * @return boolean Is the name valid?
         */
        public static function verify_reference_name($reference)
        {
        }
        /**
         * Match a hostname against a dNSName reference
         *
         * @param string $host Requested host
         * @param string $reference dNSName to match against
         * @return boolean Does the domain match?
         */
        public static function match_domain($host, $reference)
        {
        }
    }
    /**
     * Proxy connection interface
     *
     * @package Requests
     * @subpackage Proxy
     * @since 1.6
     */
    /**
     * Proxy connection interface
     *
     * Implement this interface to handle proxy settings and authentication
     *
     * Parameters should be passed via the constructor where possible, as this
     * makes it much easier for users to use your provider.
     *
     * @see Requests_Hooks
     * @package Requests
     * @subpackage Proxy
     * @since 1.6
     */
    interface Requests_Proxy
    {
        /**
         * Register hooks as needed
         *
         * This method is called in {@see Requests::request} when the user has set
         * an instance as the 'auth' option. Use this callback to register all the
         * hooks you'll need.
         *
         * @see Requests_Hooks::register
         * @param Requests_Hooks $hooks Hook system
         */
        public function register(\Requests_Hooks $hooks);
    }
    /**
     * HTTP Proxy connection interface
     *
     * @package Requests
     * @subpackage Proxy
     * @since 1.6
     */
    /**
     * HTTP Proxy connection interface
     *
     * Provides a handler for connection via an HTTP proxy
     *
     * @package Requests
     * @subpackage Proxy
     * @since 1.6
     */
    class Requests_Proxy_HTTP implements \Requests_Proxy
    {
        /**
         * Proxy host and port
         *
         * Notation: "host:port" (eg 127.0.0.1:8080 or someproxy.com:3128)
         *
         * @var string
         */
        public $proxy;
        /**
         * Username
         *
         * @var string
         */
        public $user;
        /**
         * Password
         *
         * @var string
         */
        public $pass;
        /**
         * Do we need to authenticate? (ie username & password have been provided)
         *
         * @var boolean
         */
        public $use_authentication;
        /**
         * Constructor
         *
         * @since 1.6
         * @throws Requests_Exception On incorrect number of arguments (`authbasicbadargs`)
         * @param array|null $args Array of user and password. Must have exactly two elements
         */
        public function __construct($args = \null)
        {
        }
        /**
         * Register the necessary callbacks
         *
         * @since 1.6
         * @see curl_before_send
         * @see fsockopen_remote_socket
         * @see fsockopen_remote_host_path
         * @see fsockopen_header
         * @param Requests_Hooks $hooks Hook system
         */
        public function register(\Requests_Hooks $hooks)
        {
        }
        /**
         * Set cURL parameters before the data is sent
         *
         * @since 1.6
         * @param resource $handle cURL resource
         */
        public function curl_before_send(&$handle)
        {
        }
        /**
         * Alter remote socket information before opening socket connection
         *
         * @since 1.6
         * @param string $remote_socket Socket connection string
         */
        public function fsockopen_remote_socket(&$remote_socket)
        {
        }
        /**
         * Alter remote path before getting stream data
         *
         * @since 1.6
         * @param string $path Path to send in HTTP request string ("GET ...")
         * @param string $url Full URL we're requesting
         */
        public function fsockopen_remote_host_path(&$path, $url)
        {
        }
        /**
         * Add extra headers to the request before sending
         *
         * @since 1.6
         * @param string $out HTTP header string
         */
        public function fsockopen_header(&$out)
        {
        }
        /**
         * Get the authentication string (user:pass)
         *
         * @since 1.6
         * @return string
         */
        public function get_auth_string()
        {
        }
    }
    /**
     * Session handler for persistent requests and default parameters
     *
     * @package Requests
     * @subpackage Session Handler
     */
    /**
     * Session handler for persistent requests and default parameters
     *
     * Allows various options to be set as default values, and merges both the
     * options and URL properties together. A base URL can be set for all requests,
     * with all subrequests resolved from this. Base options can be set (including
     * a shared cookie jar), then overridden for individual requests.
     *
     * @package Requests
     * @subpackage Session Handler
     */
    class Requests_Session
    {
        /**
         * Base URL for requests
         *
         * URLs will be made absolute using this as the base
         *
         * @var string|null
         */
        public $url = \null;
        /**
         * Base headers for requests
         *
         * @var array
         */
        public $headers = array();
        /**
         * Base data for requests
         *
         * If both the base data and the per-request data are arrays, the data will
         * be merged before sending the request.
         *
         * @var array
         */
        public $data = array();
        /**
         * Base options for requests
         *
         * The base options are merged with the per-request data for each request.
         * The only default option is a shared cookie jar between requests.
         *
         * Values here can also be set directly via properties on the Session
         * object, e.g. `$session->useragent = 'X';`
         *
         * @var array
         */
        public $options = array();
        /**
         * Create a new session
         *
         * @param string|null $url Base URL for requests
         * @param array $headers Default headers for requests
         * @param array $data Default data for requests
         * @param array $options Default options for requests
         */
        public function __construct($url = \null, $headers = array(), $data = array(), $options = array())
        {
        }
        /**
         * Get a property's value
         *
         * @param string $key Property key
         * @return mixed|null Property value, null if none found
         */
        public function __get($key)
        {
        }
        /**
         * Set a property's value
         *
         * @param string $key Property key
         * @param mixed $value Property value
         */
        public function __set($key, $value)
        {
        }
        /**
         * Remove a property's value
         *
         * @param string $key Property key
         */
        public function __isset($key)
        {
        }
        /**
         * Remove a property's value
         *
         * @param string $key Property key
         */
        public function __unset($key)
        {
        }
        /**#@+
         * @see request()
         * @param string $url
         * @param array $headers
         * @param array $options
         * @return Requests_Response
         */
        /**
         * Send a GET request
         */
        public function get($url, $headers = array(), $options = array())
        {
        }
        /**
         * Send a HEAD request
         */
        public function head($url, $headers = array(), $options = array())
        {
        }
        /**
         * Send a DELETE request
         */
        public function delete($url, $headers = array(), $options = array())
        {
        }
        /**#@-*/
        /**#@+
         * @see request()
         * @param string $url
         * @param array $headers
         * @param array $data
         * @param array $options
         * @return Requests_Response
         */
        /**
         * Send a POST request
         */
        public function post($url, $headers = array(), $data = array(), $options = array())
        {
        }
        /**
         * Send a PUT request
         */
        public function put($url, $headers = array(), $data = array(), $options = array())
        {
        }
        /**
         * Send a PATCH request
         *
         * Note: Unlike {@see post} and {@see put}, `$headers` is required, as the
         * specification recommends that should send an ETag
         *
         * @link https://tools.ietf.org/html/rfc5789
         */
        public function patch($url, $headers, $data = array(), $options = array())
        {
        }
        /**#@-*/
        /**
         * Main interface for HTTP requests
         *
         * This method initiates a request and sends it via a transport before
         * parsing.
         *
         * @see Requests::request()
         *
         * @throws Requests_Exception On invalid URLs (`nonhttp`)
         *
         * @param string $url URL to request
         * @param array $headers Extra headers to send with the request
         * @param array|null $data Data to send either as a query string for GET/HEAD requests, or in the body for POST requests
         * @param string $type HTTP request type (use Requests constants)
         * @param array $options Options for the request (see {@see Requests::request})
         * @return Requests_Response
         */
        public function request($url, $headers = array(), $data = array(), $type = \Requests::GET, $options = array())
        {
        }
        /**
         * Send multiple HTTP requests simultaneously
         *
         * @see Requests::request_multiple()
         *
         * @param array $requests Requests data (see {@see Requests::request_multiple})
         * @param array $options Global and default options (see {@see Requests::request})
         * @return array Responses (either Requests_Response or a Requests_Exception object)
         */
        public function request_multiple($requests, $options = array())
        {
        }
        /**
         * Merge a request's data with the default data
         *
         * @param array $request Request data (same form as {@see request_multiple})
         * @param boolean $merge_options Should we merge options as well?
         * @return array Request data
         */
        protected function merge_request($request, $merge_options = \true)
        {
        }
    }
    /**
     * Exception for HTTP requests
     *
     * @package Requests
     */
    /**
     * Exception for HTTP requests
     *
     * @package Requests
     */
    class Requests_Exception extends \Exception
    {
        /**
         * Type of exception
         *
         * @var string
         */
        protected $type;
        /**
         * Data associated with the exception
         *
         * @var mixed
         */
        protected $data;
        /**
         * Create a new exception
         *
         * @param string $message Exception message
         * @param string $type Exception type
         * @param mixed $data Associated data
         * @param integer $code Exception numerical code, if applicable
         */
        public function __construct($message, $type, $data = \null, $code = 0)
        {
        }
        /**
         * Like {@see getCode()}, but a string code.
         *
         * @codeCoverageIgnore
         * @return string
         */
        public function getType()
        {
        }
        /**
         * Gives any relevant data
         *
         * @codeCoverageIgnore
         * @return mixed
         */
        public function getData()
        {
        }
    }
    class Requests_Exception_Transport extends \Requests_Exception
    {
    }
    class Requests_Exception_Transport_cURL extends \Requests_Exception_Transport
    {
        const EASY = 'cURLEasy';
        const MULTI = 'cURLMulti';
        const SHARE = 'cURLShare';
        /**
         * cURL error code
         *
         * @var integer
         */
        protected $code = -1;
        /**
         * Which type of cURL error
         *
         * EASY|MULTI|SHARE
         *
         * @var string
         */
        protected $type = 'Unknown';
        /**
         * Clear text error message
         *
         * @var string
         */
        protected $reason = 'Unknown';
        public function __construct($message, $type, $data = \null, $code = 0)
        {
        }
        /**
         * Get the error message
         */
        public function getReason()
        {
        }
    }
    /**
     * Exception based on HTTP response
     *
     * @package Requests
     */
    /**
     * Exception based on HTTP response
     *
     * @package Requests
     */
    class Requests_Exception_HTTP extends \Requests_Exception
    {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code = 0;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason = 'Unknown';
        /**
         * Create a new exception
         *
         * There is no mechanism to pass in the status code, as this is set by the
         * subclass used. Reason phrases can vary, however.
         *
         * @param string|null $reason Reason phrase
         * @param mixed $data Associated data
         */
        public function __construct($reason = \null, $data = \null)
        {
        }
        /**
         * Get the status message
         */
        public function getReason()
        {
        }
        /**
         * Get the correct exception class for a given error code
         *
         * @param int|bool $code HTTP status code, or false if unavailable
         * @return string Exception class name to use
         */
        public static function get_class($code)
        {
        }
    }
    /**
     * Exception for 502 Bad Gateway responses
     *
     * @package Requests
     */
    /**
     * Exception for 502 Bad Gateway responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_502 extends \Requests_Exception_HTTP
    {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code = 502;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason = 'Bad Gateway';
    }
    /**
     * Exception for 415 Unsupported Media Type responses
     *
     * @package Requests
     */
    /**
     * Exception for 415 Unsupported Media Type responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_415 extends \Requests_Exception_HTTP
    {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code = 415;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason = 'Unsupported Media Type';
    }
    /**
     * Exception for 411 Length Required responses
     *
     * @package Requests
     */
    /**
     * Exception for 411 Length Required responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_411 extends \Requests_Exception_HTTP
    {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code = 411;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason = 'Length Required';
    }
    /**
     * Exception for 414 Request-URI Too Large responses
     *
     * @package Requests
     */
    /**
     * Exception for 414 Request-URI Too Large responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_414 extends \Requests_Exception_HTTP
    {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code = 414;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason = 'Request-URI Too Large';
    }
    /**
     * Exception for 404 Not Found responses
     *
     * @package Requests
     */
    /**
     * Exception for 404 Not Found responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_404 extends \Requests_Exception_HTTP
    {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code = 404;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason = 'Not Found';
    }
    /**
     * Exception for 500 Internal Server Error responses
     *
     * @package Requests
     */
    /**
     * Exception for 500 Internal Server Error responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_500 extends \Requests_Exception_HTTP
    {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code = 500;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason = 'Internal Server Error';
    }
    /**
     * Exception for 409 Conflict responses
     *
     * @package Requests
     */
    /**
     * Exception for 409 Conflict responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_409 extends \Requests_Exception_HTTP
    {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code = 409;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason = 'Conflict';
    }
    /**
     * Exception for 407 Proxy Authentication Required responses
     *
     * @package Requests
     */
    /**
     * Exception for 407 Proxy Authentication Required responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_407 extends \Requests_Exception_HTTP
    {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code = 407;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason = 'Proxy Authentication Required';
    }
    /**
     * Exception for 405 Method Not Allowed responses
     *
     * @package Requests
     */
    /**
     * Exception for 405 Method Not Allowed responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_405 extends \Requests_Exception_HTTP
    {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code = 405;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason = 'Method Not Allowed';
    }
    /**
     * Exception for 418 I'm A Teapot responses
     *
     * @see https://tools.ietf.org/html/rfc2324
     * @package Requests
     */
    /**
     * Exception for 418 I'm A Teapot responses
     *
     * @see https://tools.ietf.org/html/rfc2324
     * @package Requests
     */
    class Requests_Exception_HTTP_418 extends \Requests_Exception_HTTP
    {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code = 418;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason = "I'm A Teapot";
    }
    /**
     * Exception for unknown status responses
     *
     * @package Requests
     */
    /**
     * Exception for unknown status responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_Unknown extends \Requests_Exception_HTTP
    {
        /**
         * HTTP status code
         *
         * @var integer|bool Code if available, false if an error occurred
         */
        protected $code = 0;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason = 'Unknown';
        /**
         * Create a new exception
         *
         * If `$data` is an instance of {@see Requests_Response}, uses the status
         * code from it. Otherwise, sets as 0
         *
         * @param string|null $reason Reason phrase
         * @param mixed $data Associated data
         */
        public function __construct($reason = \null, $data = \null)
        {
        }
    }
    /**
     * Exception for 416 Requested Range Not Satisfiable responses
     *
     * @package Requests
     */
    /**
     * Exception for 416 Requested Range Not Satisfiable responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_416 extends \Requests_Exception_HTTP
    {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code = 416;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason = 'Requested Range Not Satisfiable';
    }
    /**
     * Exception for 406 Not Acceptable responses
     *
     * @package Requests
     */
    /**
     * Exception for 406 Not Acceptable responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_406 extends \Requests_Exception_HTTP
    {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code = 406;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason = 'Not Acceptable';
    }
    /**
     * Exception for 304 Not Modified responses
     *
     * @package Requests
     */
    /**
     * Exception for 304 Not Modified responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_304 extends \Requests_Exception_HTTP
    {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code = 304;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason = 'Not Modified';
    }
    /**
     * Exception for 431 Request Header Fields Too Large responses
     *
     * @see https://tools.ietf.org/html/rfc6585
     * @package Requests
     */
    /**
     * Exception for 431 Request Header Fields Too Large responses
     *
     * @see https://tools.ietf.org/html/rfc6585
     * @package Requests
     */
    class Requests_Exception_HTTP_431 extends \Requests_Exception_HTTP
    {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code = 431;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason = 'Request Header Fields Too Large';
    }
    /**
     * Exception for 306 Switch Proxy responses
     *
     * @package Requests
     */
    /**
     * Exception for 306 Switch Proxy responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_306 extends \Requests_Exception_HTTP
    {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code = 306;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason = 'Switch Proxy';
    }
    /**
     * Exception for 501 Not Implemented responses
     *
     * @package Requests
     */
    /**
     * Exception for 501 Not Implemented responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_501 extends \Requests_Exception_HTTP
    {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code = 501;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason = 'Not Implemented';
    }
    /**
     * Exception for 504 Gateway Timeout responses
     *
     * @package Requests
     */
    /**
     * Exception for 504 Gateway Timeout responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_504 extends \Requests_Exception_HTTP
    {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code = 504;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason = 'Gateway Timeout';
    }
    /**
     * Exception for 413 Request Entity Too Large responses
     *
     * @package Requests
     */
    /**
     * Exception for 413 Request Entity Too Large responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_413 extends \Requests_Exception_HTTP
    {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code = 413;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason = 'Request Entity Too Large';
    }
    /**
     * Exception for 412 Precondition Failed responses
     *
     * @package Requests
     */
    /**
     * Exception for 412 Precondition Failed responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_412 extends \Requests_Exception_HTTP
    {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code = 412;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason = 'Precondition Failed';
    }
    /**
     * Exception for 402 Payment Required responses
     *
     * @package Requests
     */
    /**
     * Exception for 402 Payment Required responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_402 extends \Requests_Exception_HTTP
    {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code = 402;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason = 'Payment Required';
    }
    /**
     * Exception for 401 Unauthorized responses
     *
     * @package Requests
     */
    /**
     * Exception for 401 Unauthorized responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_401 extends \Requests_Exception_HTTP
    {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code = 401;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason = 'Unauthorized';
    }
    /**
     * Exception for 505 HTTP Version Not Supported responses
     *
     * @package Requests
     */
    /**
     * Exception for 505 HTTP Version Not Supported responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_505 extends \Requests_Exception_HTTP
    {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code = 505;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason = 'HTTP Version Not Supported';
    }
    /**
     * Exception for 403 Forbidden responses
     *
     * @package Requests
     */
    /**
     * Exception for 403 Forbidden responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_403 extends \Requests_Exception_HTTP
    {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code = 403;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason = 'Forbidden';
    }
    /**
     * Exception for 400 Bad Request responses
     *
     * @package Requests
     */
    /**
     * Exception for 400 Bad Request responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_400 extends \Requests_Exception_HTTP
    {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code = 400;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason = 'Bad Request';
    }
    /**
     * Exception for 305 Use Proxy responses
     *
     * @package Requests
     */
    /**
     * Exception for 305 Use Proxy responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_305 extends \Requests_Exception_HTTP
    {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code = 305;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason = 'Use Proxy';
    }
    /**
     * Exception for 428 Precondition Required responses
     *
     * @see https://tools.ietf.org/html/rfc6585
     * @package Requests
     */
    /**
     * Exception for 428 Precondition Required responses
     *
     * @see https://tools.ietf.org/html/rfc6585
     * @package Requests
     */
    class Requests_Exception_HTTP_428 extends \Requests_Exception_HTTP
    {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code = 428;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason = 'Precondition Required';
    }
    /**
     * Exception for 503 Service Unavailable responses
     *
     * @package Requests
     */
    /**
     * Exception for 503 Service Unavailable responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_503 extends \Requests_Exception_HTTP
    {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code = 503;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason = 'Service Unavailable';
    }
    /**
     * Exception for 408 Request Timeout responses
     *
     * @package Requests
     */
    /**
     * Exception for 408 Request Timeout responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_408 extends \Requests_Exception_HTTP
    {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code = 408;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason = 'Request Timeout';
    }
    /**
     * Exception for 417 Expectation Failed responses
     *
     * @package Requests
     */
    /**
     * Exception for 417 Expectation Failed responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_417 extends \Requests_Exception_HTTP
    {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code = 417;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason = 'Expectation Failed';
    }
    /**
     * Exception for 410 Gone responses
     *
     * @package Requests
     */
    /**
     * Exception for 410 Gone responses
     *
     * @package Requests
     */
    class Requests_Exception_HTTP_410 extends \Requests_Exception_HTTP
    {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code = 410;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason = 'Gone';
    }
    /**
     * Exception for 511 Network Authentication Required responses
     *
     * @see https://tools.ietf.org/html/rfc6585
     * @package Requests
     */
    /**
     * Exception for 511 Network Authentication Required responses
     *
     * @see https://tools.ietf.org/html/rfc6585
     * @package Requests
     */
    class Requests_Exception_HTTP_511 extends \Requests_Exception_HTTP
    {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code = 511;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason = 'Network Authentication Required';
    }
    /**
     * Exception for 429 Too Many Requests responses
     *
     * @see https://tools.ietf.org/html/draft-nottingham-http-new-status-04
     * @package Requests
     */
    /**
     * Exception for 429 Too Many Requests responses
     *
     * @see https://tools.ietf.org/html/draft-nottingham-http-new-status-04
     * @package Requests
     */
    class Requests_Exception_HTTP_429 extends \Requests_Exception_HTTP
    {
        /**
         * HTTP status code
         *
         * @var integer
         */
        protected $code = 429;
        /**
         * Reason phrase
         *
         * @var string
         */
        protected $reason = 'Too Many Requests';
    }
    /**
     * Base HTTP transport
     *
     * @package Requests
     * @subpackage Transport
     */
    /**
     * Base HTTP transport
     *
     * @package Requests
     * @subpackage Transport
     */
    interface Requests_Transport
    {
        /**
         * Perform a request
         *
         * @param string $url URL to request
         * @param array $headers Associative array of request headers
         * @param string|array $data Data to send either as the POST body, or as parameters in the URL for a GET/HEAD
         * @param array $options Request options, see {@see Requests::response()} for documentation
         * @return string Raw HTTP result
         */
        public function request($url, $headers = array(), $data = array(), $options = array());
        /**
         * Send multiple requests simultaneously
         *
         * @param array $requests Request data (array of 'url', 'headers', 'data', 'options') as per {@see Requests_Transport::request}
         * @param array $options Global options, see {@see Requests::response()} for documentation
         * @return array Array of Requests_Response objects (may contain Requests_Exception or string responses as well)
         */
        public function request_multiple($requests, $options);
        /**
         * Self-test whether the transport can be used
         * @return bool
         */
        public static function test();
    }
    /**
     * HTTP response class
     *
     * Contains a response from Requests::request()
     * @package Requests
     */
    /**
     * HTTP response class
     *
     * Contains a response from Requests::request()
     * @package Requests
     */
    class Requests_Response
    {
        /**
         * Constructor
         */
        public function __construct()
        {
        }
        /**
         * Response body
         *
         * @var string
         */
        public $body = '';
        /**
         * Raw HTTP data from the transport
         *
         * @var string
         */
        public $raw = '';
        /**
         * Headers, as an associative array
         *
         * @var Requests_Response_Headers Array-like object representing headers
         */
        public $headers = array();
        /**
         * Status code, false if non-blocking
         *
         * @var integer|boolean
         */
        public $status_code = \false;
        /**
         * Protocol version, false if non-blocking
         *
         * @var float|boolean
         */
        public $protocol_version = \false;
        /**
         * Whether the request succeeded or not
         *
         * @var boolean
         */
        public $success = \false;
        /**
         * Number of redirects the request used
         *
         * @var integer
         */
        public $redirects = 0;
        /**
         * URL requested
         *
         * @var string
         */
        public $url = '';
        /**
         * Previous requests (from redirects)
         *
         * @var array Array of Requests_Response objects
         */
        public $history = array();
        /**
         * Cookies from the request
         *
         * @var Requests_Cookie_Jar Array-like object representing a cookie jar
         */
        public $cookies = array();
        /**
         * Is the response a redirect?
         *
         * @return boolean True if redirect (3xx status), false if not.
         */
        public function is_redirect()
        {
        }
        /**
         * Throws an exception if the request was not successful
         *
         * @throws Requests_Exception If `$allow_redirects` is false, and code is 3xx (`response.no_redirects`)
         * @throws Requests_Exception_HTTP On non-successful status code. Exception class corresponds to code (e.g. {@see Requests_Exception_HTTP_404})
         * @param boolean $allow_redirects Set to false to throw on a 3xx as well
         */
        public function throw_for_status($allow_redirects = \true)
        {
        }
    }
    /**
     * Authentication provider interface
     *
     * @package Requests
     * @subpackage Authentication
     */
    /**
     * Authentication provider interface
     *
     * Implement this interface to act as an authentication provider.
     *
     * Parameters should be passed via the constructor where possible, as this
     * makes it much easier for users to use your provider.
     *
     * @see Requests_Hooks
     * @package Requests
     * @subpackage Authentication
     */
    interface Requests_Auth
    {
        /**
         * Register hooks as needed
         *
         * This method is called in {@see Requests::request} when the user has set
         * an instance as the 'auth' option. Use this callback to register all the
         * hooks you'll need.
         *
         * @see Requests_Hooks::register
         * @param Requests_Hooks $hooks Hook system
         */
        public function register(\Requests_Hooks $hooks);
    }
    /**
     * Basic Authentication provider
     *
     * @package Requests
     * @subpackage Authentication
     */
    /**
     * Basic Authentication provider
     *
     * Provides a handler for Basic HTTP authentication via the Authorization
     * header.
     *
     * @package Requests
     * @subpackage Authentication
     */
    class Requests_Auth_Basic implements \Requests_Auth
    {
        /**
         * Username
         *
         * @var string
         */
        public $user;
        /**
         * Password
         *
         * @var string
         */
        public $pass;
        /**
         * Constructor
         *
         * @throws Requests_Exception On incorrect number of arguments (`authbasicbadargs`)
         * @param array|null $args Array of user and password. Must have exactly two elements
         */
        public function __construct($args = \null)
        {
        }
        /**
         * Register the necessary callbacks
         *
         * @see curl_before_send
         * @see fsockopen_header
         * @param Requests_Hooks $hooks Hook system
         */
        public function register(\Requests_Hooks $hooks)
        {
        }
        /**
         * Set cURL parameters before the data is sent
         *
         * @param resource $handle cURL resource
         */
        public function curl_before_send(&$handle)
        {
        }
        /**
         * Add extra headers to the request before sending
         *
         * @param string $out HTTP header string
         */
        public function fsockopen_header(&$out)
        {
        }
        /**
         * Get the authentication string (user:pass)
         *
         * @return string
         */
        public function getAuthString()
        {
        }
    }
    /**
     * IRI parser/serialiser/normaliser
     *
     * @package Requests
     * @subpackage Utilities
     */
    /**
     * IRI parser/serialiser/normaliser
     *
     * Copyright (c) 2007-2010, Geoffrey Sneddon and Steve Minutillo.
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are met:
     *
     *  * Redistributions of source code must retain the above copyright notice,
     *       this list of conditions and the following disclaimer.
     *
     *  * Redistributions in binary form must reproduce the above copyright notice,
     *       this list of conditions and the following disclaimer in the documentation
     *       and/or other materials provided with the distribution.
     *
     *  * Neither the name of the SimplePie Team nor the names of its contributors
     *       may be used to endorse or promote products derived from this software
     *       without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
     * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS BE
     * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
     * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
     * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
     * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
     * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     *
     * @package Requests
     * @subpackage Utilities
     * @author Geoffrey Sneddon
     * @author Steve Minutillo
     * @copyright 2007-2009 Geoffrey Sneddon and Steve Minutillo
     * @license http://www.opensource.org/licenses/bsd-license.php
     * @link http://hg.gsnedders.com/iri/
     *
     * @property string $iri IRI we're working with
     * @property-read string $uri IRI in URI form, {@see to_uri}
     * @property string $scheme Scheme part of the IRI
     * @property string $authority Authority part, formatted for a URI (userinfo + host + port)
     * @property string $iauthority Authority part of the IRI (userinfo + host + port)
     * @property string $userinfo Userinfo part, formatted for a URI (after '://' and before '@')
     * @property string $iuserinfo Userinfo part of the IRI (after '://' and before '@')
     * @property string $host Host part, formatted for a URI
     * @property string $ihost Host part of the IRI
     * @property string $port Port part of the IRI (after ':')
     * @property string $path Path part, formatted for a URI (after first '/')
     * @property string $ipath Path part of the IRI (after first '/')
     * @property string $query Query part, formatted for a URI (after '?')
     * @property string $iquery Query part of the IRI (after '?')
     * @property string $fragment Fragment, formatted for a URI (after '#')
     * @property string $ifragment Fragment part of the IRI (after '#')
     */
    class Requests_IRI
    {
        /**
         * Scheme
         *
         * @var string|null
         */
        protected $scheme = \null;
        /**
         * User Information
         *
         * @var string|null
         */
        protected $iuserinfo = \null;
        /**
         * ihost
         *
         * @var string|null
         */
        protected $ihost = \null;
        /**
         * Port
         *
         * @var string|null
         */
        protected $port = \null;
        /**
         * ipath
         *
         * @var string
         */
        protected $ipath = '';
        /**
         * iquery
         *
         * @var string|null
         */
        protected $iquery = \null;
        /**
         * ifragment|null
         *
         * @var string
         */
        protected $ifragment = \null;
        /**
         * Normalization database
         *
         * Each key is the scheme, each value is an array with each key as the IRI
         * part and value as the default value for that part.
         *
         * @var array
         */
        protected $normalization = array('acap' => array('port' => 674), 'dict' => array('port' => 2628), 'file' => array('ihost' => 'localhost'), 'http' => array('port' => 80), 'https' => array('port' => 443));
        /**
         * Return the entire IRI when you try and read the object as a string
         *
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * Overload __set() to provide access via properties
         *
         * @param string $name Property name
         * @param mixed $value Property value
         */
        public function __set($name, $value)
        {
        }
        /**
         * Overload __get() to provide access via properties
         *
         * @param string $name Property name
         * @return mixed
         */
        public function __get($name)
        {
        }
        /**
         * Overload __isset() to provide access via properties
         *
         * @param string $name Property name
         * @return bool
         */
        public function __isset($name)
        {
        }
        /**
         * Overload __unset() to provide access via properties
         *
         * @param string $name Property name
         */
        public function __unset($name)
        {
        }
        /**
         * Create a new IRI object, from a specified string
         *
         * @param string|null $iri
         */
        public function __construct($iri = \null)
        {
        }
        /**
         * Create a new IRI object by resolving a relative IRI
         *
         * Returns false if $base is not absolute, otherwise an IRI.
         *
         * @param Requests_IRI|string $base (Absolute) Base IRI
         * @param Requests_IRI|string $relative Relative IRI
         * @return Requests_IRI|false
         */
        public static function absolutize($base, $relative)
        {
        }
        /**
         * Parse an IRI into scheme/authority/path/query/fragment segments
         *
         * @param string $iri
         * @return array
         */
        protected function parse_iri($iri)
        {
        }
        /**
         * Remove dot segments from a path
         *
         * @param string $input
         * @return string
         */
        protected function remove_dot_segments($input)
        {
        }
        /**
         * Replace invalid character with percent encoding
         *
         * @param string $string Input string
         * @param string $extra_chars Valid characters not in iunreserved or
         *                            iprivate (this is ASCII-only)
         * @param bool $iprivate Allow iprivate
         * @return string
         */
        protected function replace_invalid_with_pct_encoding($string, $extra_chars, $iprivate = \false)
        {
        }
        /**
         * Callback function for preg_replace_callback.
         *
         * Removes sequences of percent encoded bytes that represent UTF-8
         * encoded characters in iunreserved
         *
         * @param array $match PCRE match
         * @return string Replacement
         */
        protected function remove_iunreserved_percent_encoded($match)
        {
        }
        protected function scheme_normalization()
        {
        }
        /**
         * Check if the object represents a valid IRI. This needs to be done on each
         * call as some things change depending on another part of the IRI.
         *
         * @return bool
         */
        public function is_valid()
        {
        }
        /**
         * Set the entire IRI. Returns true on success, false on failure (if there
         * are any invalid characters).
         *
         * @param string $iri
         * @return bool
         */
        protected function set_iri($iri)
        {
        }
        /**
         * Set the scheme. Returns true on success, false on failure (if there are
         * any invalid characters).
         *
         * @param string $scheme
         * @return bool
         */
        protected function set_scheme($scheme)
        {
        }
        /**
         * Set the authority. Returns true on success, false on failure (if there are
         * any invalid characters).
         *
         * @param string $authority
         * @return bool
         */
        protected function set_authority($authority)
        {
        }
        /**
         * Set the iuserinfo.
         *
         * @param string $iuserinfo
         * @return bool
         */
        protected function set_userinfo($iuserinfo)
        {
        }
        /**
         * Set the ihost. Returns true on success, false on failure (if there are
         * any invalid characters).
         *
         * @param string $ihost
         * @return bool
         */
        protected function set_host($ihost)
        {
        }
        /**
         * Set the port. Returns true on success, false on failure (if there are
         * any invalid characters).
         *
         * @param string $port
         * @return bool
         */
        protected function set_port($port)
        {
        }
        /**
         * Set the ipath.
         *
         * @param string $ipath
         * @return bool
         */
        protected function set_path($ipath)
        {
        }
        /**
         * Set the iquery.
         *
         * @param string $iquery
         * @return bool
         */
        protected function set_query($iquery)
        {
        }
        /**
         * Set the ifragment.
         *
         * @param string $ifragment
         * @return bool
         */
        protected function set_fragment($ifragment)
        {
        }
        /**
         * Convert an IRI to a URI (or parts thereof)
         *
         * @param string|bool IRI to convert (or false from {@see get_iri})
         * @return string|false URI if IRI is valid, false otherwise.
         */
        protected function to_uri($string)
        {
        }
        /**
         * Get the complete IRI
         *
         * @return string|false
         */
        protected function get_iri()
        {
        }
        /**
         * Get the complete URI
         *
         * @return string
         */
        protected function get_uri()
        {
        }
        /**
         * Get the complete iauthority
         *
         * @return string|null
         */
        protected function get_iauthority()
        {
        }
        /**
         * Get the complete authority
         *
         * @return string
         */
        protected function get_authority()
        {
        }
    }
    /**
     * fsockopen HTTP transport
     *
     * @package Requests
     * @subpackage Transport
     */
    /**
     * fsockopen HTTP transport
     *
     * @package Requests
     * @subpackage Transport
     */
    class Requests_Transport_fsockopen implements \Requests_Transport
    {
        /**
         * Second to microsecond conversion
         *
         * @var integer
         */
        const SECOND_IN_MICROSECONDS = 1000000;
        /**
         * Raw HTTP data
         *
         * @var string
         */
        public $headers = '';
        /**
         * Stream metadata
         *
         * @var array Associative array of properties, see {@see https://secure.php.net/stream_get_meta_data}
         */
        public $info;
        /**
         * What's the maximum number of bytes we should keep?
         *
         * @var int|bool Byte count, or false if no limit.
         */
        protected $max_bytes = \false;
        protected $connect_error = '';
        /**
         * Perform a request
         *
         * @throws Requests_Exception On failure to connect to socket (`fsockopenerror`)
         * @throws Requests_Exception On socket timeout (`timeout`)
         *
         * @param string $url URL to request
         * @param array $headers Associative array of request headers
         * @param string|array $data Data to send either as the POST body, or as parameters in the URL for a GET/HEAD
         * @param array $options Request options, see {@see Requests::response()} for documentation
         * @return string Raw HTTP result
         */
        public function request($url, $headers = array(), $data = array(), $options = array())
        {
        }
        /**
         * Send multiple requests simultaneously
         *
         * @param array $requests Request data (array of 'url', 'headers', 'data', 'options') as per {@see Requests_Transport::request}
         * @param array $options Global options, see {@see Requests::response()} for documentation
         * @return array Array of Requests_Response objects (may contain Requests_Exception or string responses as well)
         */
        public function request_multiple($requests, $options)
        {
        }
        /**
         * Retrieve the encodings we can accept
         *
         * @return string Accept-Encoding header value
         */
        protected static function accept_encoding()
        {
        }
        /**
         * Format a URL given GET data
         *
         * @param array $url_parts
         * @param array|object $data Data to build query using, see {@see https://secure.php.net/http_build_query}
         * @return string URL with data
         */
        protected static function format_get($url_parts, $data)
        {
        }
        /**
         * Error handler for stream_socket_client()
         *
         * @param int $errno Error number (e.g. E_WARNING)
         * @param string $errstr Error message
         */
        public function connect_error_handler($errno, $errstr)
        {
        }
        /**
         * Verify the certificate against common name and subject alternative names
         *
         * Unfortunately, PHP doesn't check the certificate against the alternative
         * names, leading things like 'https://www.github.com/' to be invalid.
         * Instead
         *
         * @see https://tools.ietf.org/html/rfc2818#section-3.1 RFC2818, Section 3.1
         *
         * @throws Requests_Exception On failure to connect via TLS (`fsockopen.ssl.connect_error`)
         * @throws Requests_Exception On not obtaining a match for the host (`fsockopen.ssl.no_match`)
         * @param string $host Host name to verify against
         * @param resource $context Stream context
         * @return bool
         */
        public function verify_certificate_from_context($host, $context)
        {
        }
        /**
         * Whether this transport is valid
         *
         * @codeCoverageIgnore
         * @return boolean True if the transport is valid, false otherwise.
         */
        public static function test($capabilities = array())
        {
        }
    }
    /**
     * cURL HTTP transport
     *
     * @package Requests
     * @subpackage Transport
     */
    /**
     * cURL HTTP transport
     *
     * @package Requests
     * @subpackage Transport
     */
    class Requests_Transport_cURL implements \Requests_Transport
    {
        const CURL_7_10_5 = 0x70a05;
        const CURL_7_16_2 = 0x71002;
        /**
         * Raw HTTP data
         *
         * @var string
         */
        public $headers = '';
        /**
         * Raw body data
         *
         * @var string
         */
        public $response_data = '';
        /**
         * Information on the current request
         *
         * @var array cURL information array, see {@see https://secure.php.net/curl_getinfo}
         */
        public $info;
        /**
         * cURL version number
         *
         * @var int
         */
        public $version;
        /**
         * cURL handle
         *
         * @var resource
         */
        protected $handle;
        /**
         * Hook dispatcher instance
         *
         * @var Requests_Hooks
         */
        protected $hooks;
        /**
         * Have we finished the headers yet?
         *
         * @var boolean
         */
        protected $done_headers = \false;
        /**
         * If streaming to a file, keep the file pointer
         *
         * @var resource
         */
        protected $stream_handle;
        /**
         * How many bytes are in the response body?
         *
         * @var int
         */
        protected $response_bytes;
        /**
         * What's the maximum number of bytes we should keep?
         *
         * @var int|bool Byte count, or false if no limit.
         */
        protected $response_byte_limit;
        /**
         * Constructor
         */
        public function __construct()
        {
        }
        /**
         * Destructor
         */
        public function __destruct()
        {
        }
        /**
         * Perform a request
         *
         * @throws Requests_Exception On a cURL error (`curlerror`)
         *
         * @param string $url URL to request
         * @param array $headers Associative array of request headers
         * @param string|array $data Data to send either as the POST body, or as parameters in the URL for a GET/HEAD
         * @param array $options Request options, see {@see Requests::response()} for documentation
         * @return string Raw HTTP result
         */
        public function request($url, $headers = array(), $data = array(), $options = array())
        {
        }
        /**
         * Send multiple requests simultaneously
         *
         * @param array $requests Request data
         * @param array $options Global options
         * @return array Array of Requests_Response objects (may contain Requests_Exception or string responses as well)
         */
        public function request_multiple($requests, $options)
        {
        }
        /**
         * Get the cURL handle for use in a multi-request
         *
         * @param string $url URL to request
         * @param array $headers Associative array of request headers
         * @param string|array $data Data to send either as the POST body, or as parameters in the URL for a GET/HEAD
         * @param array $options Request options, see {@see Requests::response()} for documentation
         * @return resource Subrequest's cURL handle
         */
        public function &get_subrequest_handle($url, $headers, $data, $options)
        {
        }
        /**
         * Setup the cURL handle for the given data
         *
         * @param string $url URL to request
         * @param array $headers Associative array of request headers
         * @param string|array $data Data to send either as the POST body, or as parameters in the URL for a GET/HEAD
         * @param array $options Request options, see {@see Requests::response()} for documentation
         */
        protected function setup_handle($url, $headers, $data, $options)
        {
        }
        /**
         * Process a response
         *
         * @param string $response Response data from the body
         * @param array $options Request options
         * @return string|false HTTP response data including headers. False if non-blocking.
         * @throws Requests_Exception
         */
        public function process_response($response, $options)
        {
        }
        /**
         * Collect the headers as they are received
         *
         * @param resource $handle cURL resource
         * @param string $headers Header string
         * @return integer Length of provided header
         */
        public function stream_headers($handle, $headers)
        {
        }
        /**
         * Collect data as it's received
         *
         * @since 1.6.1
         *
         * @param resource $handle cURL resource
         * @param string $data Body data
         * @return integer Length of provided data
         */
        public function stream_body($handle, $data)
        {
        }
        /**
         * Format a URL given GET data
         *
         * @param string $url
         * @param array|object $data Data to build query using, see {@see https://secure.php.net/http_build_query}
         * @return string URL with data
         */
        protected static function format_get($url, $data)
        {
        }
        /**
         * Whether this transport is valid
         *
         * @codeCoverageIgnore
         * @return boolean True if the transport is valid, false otherwise.
         */
        public static function test($capabilities = array())
        {
        }
        /**
         * Get the correct "Expect" header for the given request data.
         *
         * @param string|array $data Data to send either as the POST body, or as parameters in the URL for a GET/HEAD.
         * @return string The "Expect" header.
         */
        protected function get_expect_header($data)
        {
        }
    }
    /**
     * IDNA URL encoder
     *
     * Note: Not fully compliant, as nameprep does nothing yet.
     *
     * @package Requests
     * @subpackage Utilities
     * @see https://tools.ietf.org/html/rfc3490 IDNA specification
     * @see https://tools.ietf.org/html/rfc3492 Punycode/Bootstrap specification
     */
    class Requests_IDNAEncoder
    {
        /**
         * ACE prefix used for IDNA
         *
         * @see https://tools.ietf.org/html/rfc3490#section-5
         * @var string
         */
        const ACE_PREFIX = 'xn--';
        /**#@+
         * Bootstrap constant for Punycode
         *
         * @see https://tools.ietf.org/html/rfc3492#section-5
         * @var int
         */
        const BOOTSTRAP_BASE = 36;
        const BOOTSTRAP_TMIN = 1;
        const BOOTSTRAP_TMAX = 26;
        const BOOTSTRAP_SKEW = 38;
        const BOOTSTRAP_DAMP = 700;
        const BOOTSTRAP_INITIAL_BIAS = 72;
        const BOOTSTRAP_INITIAL_N = 128;
        /**#@-*/
        /**
         * Encode a hostname using Punycode
         *
         * @param string $string Hostname
         * @return string Punycode-encoded hostname
         */
        public static function encode($string)
        {
        }
        /**
         * Convert a UTF-8 string to an ASCII string using Punycode
         *
         * @throws Requests_Exception Provided string longer than 64 ASCII characters (`idna.provided_too_long`)
         * @throws Requests_Exception Prepared string longer than 64 ASCII characters (`idna.prepared_too_long`)
         * @throws Requests_Exception Provided string already begins with xn-- (`idna.provided_is_prefixed`)
         * @throws Requests_Exception Encoded string longer than 64 ASCII characters (`idna.encoded_too_long`)
         *
         * @param string $string ASCII or UTF-8 string (max length 64 characters)
         * @return string ASCII string
         */
        public static function to_ascii($string)
        {
        }
        /**
         * Check whether a given string contains only ASCII characters
         *
         * @internal (Testing found regex was the fastest implementation)
         *
         * @param string $string
         * @return bool Is the string ASCII-only?
         */
        protected static function is_ascii($string)
        {
        }
        /**
         * Prepare a string for use as an IDNA name
         *
         * @todo Implement this based on RFC 3491 and the newer 5891
         * @param string $string
         * @return string Prepared string
         */
        protected static function nameprep($string)
        {
        }
        /**
         * Convert a UTF-8 string to a UCS-4 codepoint array
         *
         * Based on Requests_IRI::replace_invalid_with_pct_encoding()
         *
         * @throws Requests_Exception Invalid UTF-8 codepoint (`idna.invalidcodepoint`)
         * @param string $input
         * @return array Unicode code points
         */
        protected static function utf8_to_codepoints($input)
        {
        }
        /**
         * RFC3492-compliant encoder
         *
         * @internal Pseudo-code from Section 6.3 is commented with "#" next to relevant code
         * @throws Requests_Exception On character outside of the domain (never happens with Punycode) (`idna.character_outside_domain`)
         *
         * @param string $input UTF-8 encoded string to encode
         * @return string Punycode-encoded string
         */
        public static function punycode_encode($input)
        {
        }
        /**
         * Convert a digit to its respective character
         *
         * @see https://tools.ietf.org/html/rfc3492#section-5
         * @throws Requests_Exception On invalid digit (`idna.invalid_digit`)
         *
         * @param int $digit Digit in the range 0-35
         * @return string Single character corresponding to digit
         */
        protected static function digit_to_char($digit)
        {
        }
        /**
         * Adapt the bias
         *
         * @see https://tools.ietf.org/html/rfc3492#section-6.1
         * @param int $delta
         * @param int $numpoints
         * @param bool $firsttime
         * @return int New bias
         *
         * function adapt(delta,numpoints,firsttime):
         */
        protected static function adapt($delta, $numpoints, $firsttime)
        {
        }
    }
    /**
     * Cookie holder object
     *
     * @package Requests
     * @subpackage Cookies
     */
    /**
     * Cookie holder object
     *
     * @package Requests
     * @subpackage Cookies
     */
    class Requests_Cookie_Jar implements \ArrayAccess, \IteratorAggregate
    {
        /**
         * Actual item data
         *
         * @var array
         */
        protected $cookies = array();
        /**
         * Create a new jar
         *
         * @param array $cookies Existing cookie values
         */
        public function __construct($cookies = array())
        {
        }
        /**
         * Normalise cookie data into a Requests_Cookie
         *
         * @param string|Requests_Cookie $cookie
         * @return Requests_Cookie
         */
        public function normalize_cookie($cookie, $key = \null)
        {
        }
        /**
         * Normalise cookie data into a Requests_Cookie
         *
         * @codeCoverageIgnore
         * @deprecated Use {@see Requests_Cookie_Jar::normalize_cookie}
         * @return Requests_Cookie
         */
        public function normalizeCookie($cookie, $key = \null)
        {
        }
        /**
         * Check if the given item exists
         *
         * @param string $key Item key
         * @return boolean Does the item exist?
         */
        public function offsetExists($key)
        {
        }
        /**
         * Get the value for the item
         *
         * @param string $key Item key
         * @return string|null Item value (null if offsetExists is false)
         */
        public function offsetGet($key)
        {
        }
        /**
         * Set the given item
         *
         * @throws Requests_Exception On attempting to use dictionary as list (`invalidset`)
         *
         * @param string $key Item name
         * @param string $value Item value
         */
        public function offsetSet($key, $value)
        {
        }
        /**
         * Unset the given header
         *
         * @param string $key
         */
        public function offsetUnset($key)
        {
        }
        /**
         * Get an iterator for the data
         *
         * @return ArrayIterator
         */
        public function getIterator()
        {
        }
        /**
         * Register the cookie handler with the request's hooking system
         *
         * @param Requests_Hooker $hooks Hooking system
         */
        public function register(\Requests_Hooker $hooks)
        {
        }
        /**
         * Add Cookie header to a request if we have any
         *
         * As per RFC 6265, cookies are separated by '; '
         *
         * @param string $url
         * @param array $headers
         * @param array $data
         * @param string $type
         * @param array $options
         */
        public function before_request($url, &$headers, &$data, &$type, &$options)
        {
        }
        /**
         * Parse all cookies from a response and attach them to the response
         *
         * @var Requests_Response $response
         */
        public function before_redirect_check(\Requests_Response $return)
        {
        }
    }
    /**
     * Cookie storage object
     *
     * @package Requests
     * @subpackage Cookies
     */
    /**
     * Cookie storage object
     *
     * @package Requests
     * @subpackage Cookies
     */
    class Requests_Cookie
    {
        /**
         * Cookie name.
         *
         * @var string
         */
        public $name;
        /**
         * Cookie value.
         *
         * @var string
         */
        public $value;
        /**
         * Cookie attributes
         *
         * Valid keys are (currently) path, domain, expires, max-age, secure and
         * httponly.
         *
         * @var Requests_Utility_CaseInsensitiveDictionary|array Array-like object
         */
        public $attributes = array();
        /**
         * Cookie flags
         *
         * Valid keys are (currently) creation, last-access, persistent and
         * host-only.
         *
         * @var array
         */
        public $flags = array();
        /**
         * Reference time for relative calculations
         *
         * This is used in place of `time()` when calculating Max-Age expiration and
         * checking time validity.
         *
         * @var int
         */
        public $reference_time = 0;
        /**
         * Create a new cookie object
         *
         * @param string $name
         * @param string $value
         * @param array|Requests_Utility_CaseInsensitiveDictionary $attributes Associative array of attribute data
         */
        public function __construct($name, $value, $attributes = array(), $flags = array(), $reference_time = \null)
        {
        }
        /**
         * Check if a cookie is expired.
         *
         * Checks the age against $this->reference_time to determine if the cookie
         * is expired.
         *
         * @return boolean True if expired, false if time is valid.
         */
        public function is_expired()
        {
        }
        /**
         * Check if a cookie is valid for a given URI
         *
         * @param Requests_IRI $uri URI to check
         * @return boolean Whether the cookie is valid for the given URI
         */
        public function uri_matches(\Requests_IRI $uri)
        {
        }
        /**
         * Check if a cookie is valid for a given domain
         *
         * @param string $string Domain to check
         * @return boolean Whether the cookie is valid for the given domain
         */
        public function domain_matches($string)
        {
        }
        /**
         * Check if a cookie is valid for a given path
         *
         * From the path-match check in RFC 6265 section 5.1.4
         *
         * @param string $request_path Path to check
         * @return boolean Whether the cookie is valid for the given path
         */
        public function path_matches($request_path)
        {
        }
        /**
         * Normalize cookie and attributes
         *
         * @return boolean Whether the cookie was successfully normalized
         */
        public function normalize()
        {
        }
        /**
         * Parse an individual cookie attribute
         *
         * Handles parsing individual attributes from the cookie values.
         *
         * @param string $name Attribute name
         * @param string|boolean $value Attribute value (string value, or true if empty/flag)
         * @return mixed Value if available, or null if the attribute value is invalid (and should be skipped)
         */
        protected function normalize_attribute($name, $value)
        {
        }
        /**
         * Format a cookie for a Cookie header
         *
         * This is used when sending cookies to a server.
         *
         * @return string Cookie formatted for Cookie header
         */
        public function format_for_header()
        {
        }
        /**
         * Format a cookie for a Cookie header
         *
         * @codeCoverageIgnore
         * @deprecated Use {@see Requests_Cookie::format_for_header}
         * @return string
         */
        public function formatForHeader()
        {
        }
        /**
         * Format a cookie for a Set-Cookie header
         *
         * This is used when sending cookies to clients. This isn't really
         * applicable to client-side usage, but might be handy for debugging.
         *
         * @return string Cookie formatted for Set-Cookie header
         */
        public function format_for_set_cookie()
        {
        }
        /**
         * Format a cookie for a Set-Cookie header
         *
         * @codeCoverageIgnore
         * @deprecated Use {@see Requests_Cookie::format_for_set_cookie}
         * @return string
         */
        public function formatForSetCookie()
        {
        }
        /**
         * Get the cookie value
         *
         * Attributes and other data can be accessed via methods.
         */
        public function __toString()
        {
        }
        /**
         * Parse a cookie string into a cookie object
         *
         * Based on Mozilla's parsing code in Firefox and related projects, which
         * is an intentional deviation from RFC 2109 and RFC 2616. RFC 6265
         * specifies some of this handling, but not in a thorough manner.
         *
         * @param string Cookie header value (from a Set-Cookie header)
         * @return Requests_Cookie Parsed cookie object
         */
        public static function parse($string, $name = '', $reference_time = \null)
        {
        }
        /**
         * Parse all Set-Cookie headers from request headers
         *
         * @param Requests_Response_Headers $headers Headers to parse from
         * @param Requests_IRI|null $origin URI for comparing cookie origins
         * @param int|null $time Reference time for expiration calculation
         * @return array
         */
        public static function parse_from_headers(\Requests_Response_Headers $headers, \Requests_IRI $origin = \null, $time = \null)
        {
        }
        /**
         * Parse all Set-Cookie headers from request headers
         *
         * @codeCoverageIgnore
         * @deprecated Use {@see Requests_Cookie::parse_from_headers}
         * @return array
         */
        public static function parseFromHeaders(\Requests_Response_Headers $headers)
        {
        }
    }
    /**
     * Case-insensitive dictionary, suitable for HTTP headers
     *
     * @package Requests
     * @subpackage Utilities
     */
    /**
     * Case-insensitive dictionary, suitable for HTTP headers
     *
     * @package Requests
     * @subpackage Utilities
     */
    class Requests_Utility_CaseInsensitiveDictionary implements \ArrayAccess, \IteratorAggregate
    {
        /**
         * Actual item data
         *
         * @var array
         */
        protected $data = array();
        /**
         * Creates a case insensitive dictionary.
         *
         * @param array $data Dictionary/map to convert to case-insensitive
         */
        public function __construct(array $data = array())
        {
        }
        /**
         * Check if the given item exists
         *
         * @param string $key Item key
         * @return boolean Does the item exist?
         */
        public function offsetExists($key)
        {
        }
        /**
         * Get the value for the item
         *
         * @param string $key Item key
         * @return string|null Item value (null if offsetExists is false)
         */
        public function offsetGet($key)
        {
        }
        /**
         * Set the given item
         *
         * @throws Requests_Exception On attempting to use dictionary as list (`invalidset`)
         *
         * @param string $key Item name
         * @param string $value Item value
         */
        public function offsetSet($key, $value)
        {
        }
        /**
         * Unset the given header
         *
         * @param string $key
         */
        public function offsetUnset($key)
        {
        }
        /**
         * Get an iterator for the data
         *
         * @return ArrayIterator
         */
        public function getIterator()
        {
        }
        /**
         * Get the headers as an array
         *
         * @return array Header data
         */
        public function getAll()
        {
        }
    }
    /**
     * Iterator for arrays requiring filtered values
     *
     * @package Requests
     * @subpackage Utilities
     */
    /**
     * Iterator for arrays requiring filtered values
     *
     * @package Requests
     * @subpackage Utilities
     */
    class Requests_Utility_FilteredIterator extends \ArrayIterator
    {
        /**
         * Callback to run as a filter
         *
         * @var callable
         */
        protected $callback;
        /**
         * Create a new iterator
         *
         * @param array $data
         * @param callable $callback Callback to be called on each value
         */
        public function __construct($data, $callback)
        {
        }
        /**
         * Get the current item's value after filtering
         *
         * @return string
         */
        public function current()
        {
        }
        /**
         * @inheritdoc
         */
        public function unserialize($serialized)
        {
        }
        /**
         * @inheritdoc
         *
         * @phpcs:disable PHPCompatibility.FunctionNameRestrictions.ReservedFunctionNames.MethodDoubleUnderscore,PHPCompatibility.FunctionNameRestrictions.NewMagicMethods.__unserializeFound
         */
        public function __unserialize($serialized)
        {
        }
        public function __wakeup()
        {
        }
    }
    /**
     * Case-insensitive dictionary, suitable for HTTP headers
     *
     * @package Requests
     */
    /**
     * Case-insensitive dictionary, suitable for HTTP headers
     *
     * @package Requests
     */
    class Requests_Response_Headers extends \Requests_Utility_CaseInsensitiveDictionary
    {
        /**
         * Get the given header
         *
         * Unlike {@see self::getValues()}, this returns a string. If there are
         * multiple values, it concatenates them with a comma as per RFC2616.
         *
         * Avoid using this where commas may be used unquoted in values, such as
         * Set-Cookie headers.
         *
         * @param string $key
         * @return string|null Header value
         */
        public function offsetGet($key)
        {
        }
        /**
         * Set the given item
         *
         * @throws Requests_Exception On attempting to use dictionary as list (`invalidset`)
         *
         * @param string $key Item name
         * @param string $value Item value
         */
        public function offsetSet($key, $value)
        {
        }
        /**
         * Get all values for a given header
         *
         * @param string $key
         * @return array|null Header values
         */
        public function getValues($key)
        {
        }
        /**
         * Flattens a value into a string
         *
         * Converts an array into a string by imploding values with a comma, as per
         * RFC2616's rules for folding headers.
         *
         * @param string|array $value Value to flatten
         * @return string Flattened value
         */
        public function flatten($value)
        {
        }
        /**
         * Get an iterator for the data
         *
         * Converts the internal
         * @return ArrayIterator
         */
        public function getIterator()
        {
        }
    }
    /**
     * User API: WP_User class
     *
     * @package WordPress
     * @subpackage Users
     * @since 4.4.0
     */
    /**
     * Core class used to implement the WP_User object.
     *
     * @since 2.0.0
     *
     * @property string $nickname
     * @property string $description
     * @property string $user_description
     * @property string $first_name
     * @property string $user_firstname
     * @property string $last_name
     * @property string $user_lastname
     * @property string $user_login
     * @property string $user_pass
     * @property string $user_nicename
     * @property string $user_email
     * @property string $user_url
     * @property string $user_registered
     * @property string $user_activation_key
     * @property string $user_status
     * @property int    $user_level
     * @property string $display_name
     * @property string $spam
     * @property string $deleted
     * @property string $locale
     * @property string $rich_editing
     * @property string $syntax_highlighting
     * @property string $use_ssl
     */
    class WP_User
    {
        /**
         * User data container.
         *
         * @since 2.0.0
         * @var stdClass
         */
        public $data;
        /**
         * The user's ID.
         *
         * @since 2.1.0
         * @var int
         */
        public $ID = 0;
        /**
         * Capabilities that the individual user has been granted outside of those inherited from their role.
         *
         * @since 2.0.0
         * @var bool[] Array of key/value pairs where keys represent a capability name
         *             and boolean values represent whether the user has that capability.
         */
        public $caps = array();
        /**
         * User metadata option name.
         *
         * @since 2.0.0
         * @var string
         */
        public $cap_key;
        /**
         * The roles the user is part of.
         *
         * @since 2.0.0
         * @var string[]
         */
        public $roles = array();
        /**
         * All capabilities the user has, including individual and role based.
         *
         * @since 2.0.0
         * @var bool[] Array of key/value pairs where keys represent a capability name
         *             and boolean values represent whether the user has that capability.
         */
        public $allcaps = array();
        /**
         * The filter context applied to user data fields.
         *
         * @since 2.9.0
         * @var string
         */
        public $filter = \null;
        /**
         * The site ID the capabilities of this user are initialized for.
         *
         * @since 4.9.0
         * @var int
         */
        private $site_id = 0;
        /**
         * @since 3.3.0
         * @var array
         */
        private static $back_compat_keys;
        /**
         * Constructor.
         *
         * Retrieves the userdata and passes it to WP_User::init().
         *
         * @since 2.0.0
         *
         * @param int|string|stdClass|WP_User $id      User's ID, a WP_User object, or a user object from the DB.
         * @param string                      $name    Optional. User's username
         * @param int                         $site_id Optional Site ID, defaults to current site.
         */
        public function __construct($id = 0, $name = '', $site_id = '')
        {
        }
        /**
         * Sets up object properties, including capabilities.
         *
         * @since 3.3.0
         *
         * @param object $data    User DB row object.
         * @param int    $site_id Optional. The site ID to initialize for.
         */
        public function init($data, $site_id = '')
        {
        }
        /**
         * Returns only the main user fields.
         *
         * @since 3.3.0
         * @since 4.4.0 Added 'ID' as an alias of 'id' for the `$field` parameter.
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param string     $field The field to query against: 'id', 'ID', 'slug', 'email' or 'login'.
         * @param string|int $value The field value.
         * @return object|false Raw user object.
         */
        public static function get_data_by($field, $value)
        {
        }
        /**
         * Magic method for checking the existence of a certain custom field.
         *
         * @since 3.3.0
         *
         * @param string $key User meta key to check if set.
         * @return bool Whether the given user meta key is set.
         */
        public function __isset($key)
        {
        }
        /**
         * Magic method for accessing custom fields.
         *
         * @since 3.3.0
         *
         * @param string $key User meta key to retrieve.
         * @return mixed Value of the given user meta key (if set). If `$key` is 'id', the user ID.
         */
        public function __get($key)
        {
        }
        /**
         * Magic method for setting custom user fields.
         *
         * This method does not update custom fields in the database. It only stores
         * the value on the WP_User instance.
         *
         * @since 3.3.0
         *
         * @param string $key   User meta key.
         * @param mixed  $value User meta value.
         */
        public function __set($key, $value)
        {
        }
        /**
         * Magic method for unsetting a certain custom field.
         *
         * @since 4.4.0
         *
         * @param string $key User meta key to unset.
         */
        public function __unset($key)
        {
        }
        /**
         * Determines whether the user exists in the database.
         *
         * @since 3.4.0
         *
         * @return bool True if user exists in the database, false if not.
         */
        public function exists()
        {
        }
        /**
         * Retrieves the value of a property or meta key.
         *
         * Retrieves from the users and usermeta table.
         *
         * @since 3.3.0
         *
         * @param string $key Property
         * @return mixed
         */
        public function get($key)
        {
        }
        /**
         * Determines whether a property or meta key is set.
         *
         * Consults the users and usermeta tables.
         *
         * @since 3.3.0
         *
         * @param string $key Property.
         * @return bool
         */
        public function has_prop($key)
        {
        }
        /**
         * Returns an array representation.
         *
         * @since 3.5.0
         *
         * @return array Array representation.
         */
        public function to_array()
        {
        }
        /**
         * Makes private/protected methods readable for backward compatibility.
         *
         * @since 4.3.0
         *
         * @param string $name      Method to call.
         * @param array  $arguments Arguments to pass when calling.
         * @return mixed|false Return value of the callback, false otherwise.
         */
        public function __call($name, $arguments)
        {
        }
        /**
         * Sets up capability object properties.
         *
         * Will set the value for the 'cap_key' property to current database table
         * prefix, followed by 'capabilities'. Will then check to see if the
         * property matching the 'cap_key' exists and is an array. If so, it will be
         * used.
         *
         * @since 2.1.0
         * @deprecated 4.9.0 Use WP_User::for_site()
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param string $cap_key Optional capability key
         */
        protected function _init_caps($cap_key = '')
        {
        }
        /**
         * Retrieves all of the capabilities of the user's roles, and merges them with
         * individual user capabilities.
         *
         * All of the capabilities of the user's roles are merged with the user's individual
         * capabilities. This means that the user can be denied specific capabilities that
         * their role might have, but the user is specifically denied.
         *
         * @since 2.0.0
         *
         * @return bool[] Array of key/value pairs where keys represent a capability name
         *                and boolean values represent whether the user has that capability.
         */
        public function get_role_caps()
        {
        }
        /**
         * Adds role to user.
         *
         * Updates the user's meta data option with capabilities and roles.
         *
         * @since 2.0.0
         *
         * @param string $role Role name.
         */
        public function add_role($role)
        {
        }
        /**
         * Removes role from user.
         *
         * @since 2.0.0
         *
         * @param string $role Role name.
         */
        public function remove_role($role)
        {
        }
        /**
         * Sets the role of the user.
         *
         * This will remove the previous roles of the user and assign the user the
         * new one. You can set the role to an empty string and it will remove all
         * of the roles from the user.
         *
         * @since 2.0.0
         *
         * @param string $role Role name.
         */
        public function set_role($role)
        {
        }
        /**
         * Chooses the maximum level the user has.
         *
         * Will compare the level from the $item parameter against the $max
         * parameter. If the item is incorrect, then just the $max parameter value
         * will be returned.
         *
         * Used to get the max level based on the capabilities the user has. This
         * is also based on roles, so if the user is assigned the Administrator role
         * then the capability 'level_10' will exist and the user will get that
         * value.
         *
         * @since 2.0.0
         *
         * @param int    $max  Max level of user.
         * @param string $item Level capability name.
         * @return int Max Level.
         */
        public function level_reduction($max, $item)
        {
        }
        /**
         * Updates the maximum user level for the user.
         *
         * Updates the 'user_level' user metadata (includes prefix that is the
         * database table prefix) with the maximum user level. Gets the value from
         * the all of the capabilities that the user has.
         *
         * @since 2.0.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         */
        public function update_user_level_from_caps()
        {
        }
        /**
         * Adds capability and grant or deny access to capability.
         *
         * @since 2.0.0
         *
         * @param string $cap   Capability name.
         * @param bool   $grant Whether to grant capability to user.
         */
        public function add_cap($cap, $grant = \true)
        {
        }
        /**
         * Removes capability from user.
         *
         * @since 2.0.0
         *
         * @param string $cap Capability name.
         */
        public function remove_cap($cap)
        {
        }
        /**
         * Removes all of the capabilities of the user.
         *
         * @since 2.1.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         */
        public function remove_all_caps()
        {
        }
        /**
         * Returns whether the user has the specified capability.
         *
         * This function also accepts an ID of an object to check against if the capability is a meta capability. Meta
         * capabilities such as `edit_post` and `edit_user` are capabilities used by the `map_meta_cap()` function to
         * map to primitive capabilities that a user or role has, such as `edit_posts` and `edit_others_posts`.
         *
         * Example usage:
         *
         *     $user->has_cap( 'edit_posts' );
         *     $user->has_cap( 'edit_post', $post->ID );
         *     $user->has_cap( 'edit_post_meta', $post->ID, $meta_key );
         *
         * While checking against a role in place of a capability is supported in part, this practice is discouraged as it
         * may produce unreliable results.
         *
         * @since 2.0.0
         * @since 5.3.0 Formalized the existing and already documented `...$args` parameter
         *              by adding it to the function signature.
         *
         * @see map_meta_cap()
         *
         * @param string $cap     Capability name.
         * @param mixed  ...$args Optional further parameters, typically starting with an object ID.
         * @return bool Whether the user has the given capability, or, if an object ID is passed, whether the user has
         *              the given capability for that object.
         */
        public function has_cap($cap, ...$args)
        {
        }
        /**
         * Converts numeric level to level capability name.
         *
         * Prepends 'level_' to level number.
         *
         * @since 2.0.0
         *
         * @param int $level Level number, 1 to 10.
         * @return string
         */
        public function translate_level_to_cap($level)
        {
        }
        /**
         * Sets the site to operate on. Defaults to the current site.
         *
         * @since 3.0.0
         * @deprecated 4.9.0 Use WP_User::for_site()
         *
         * @param int $blog_id Optional. Site ID, defaults to current site.
         */
        public function for_blog($blog_id = '')
        {
        }
        /**
         * Sets the site to operate on. Defaults to the current site.
         *
         * @since 4.9.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param int $site_id Site ID to initialize user capabilities for. Default is the current site.
         */
        public function for_site($site_id = '')
        {
        }
        /**
         * Gets the ID of the site for which the user's capabilities are currently initialized.
         *
         * @since 4.9.0
         *
         * @return int Site ID.
         */
        public function get_site_id()
        {
        }
        /**
         * Gets the available user capabilities data.
         *
         * @since 4.9.0
         *
         * @return bool[] List of capabilities keyed by the capability name,
         *                e.g. array( 'edit_posts' => true, 'delete_posts' => false ).
         */
        private function get_caps_data()
        {
        }
    }
    /**
     * Error Protection API: WP_Recovery_Mode class
     *
     * @package WordPress
     * @since 5.2.0
     */
    /**
     * Core class used to implement Recovery Mode.
     *
     * @since 5.2.0
     */
    class WP_Recovery_Mode
    {
        const EXIT_ACTION = 'exit_recovery_mode';
        /**
         * Service to handle cookies.
         *
         * @since 5.2.0
         * @var WP_Recovery_Mode_Cookie_Service
         */
        private $cookie_service;
        /**
         * Service to generate a recovery mode key.
         *
         * @since 5.2.0
         * @var WP_Recovery_Mode_Key_Service
         */
        private $key_service;
        /**
         * Service to generate and validate recovery mode links.
         *
         * @since 5.2.0
         * @var WP_Recovery_Mode_Link_Service
         */
        private $link_service;
        /**
         * Service to handle sending an email with a recovery mode link.
         *
         * @since 5.2.0
         * @var WP_Recovery_Mode_Email_Service
         */
        private $email_service;
        /**
         * Is recovery mode initialized.
         *
         * @since 5.2.0
         * @var bool
         */
        private $is_initialized = \false;
        /**
         * Is recovery mode active in this session.
         *
         * @since 5.2.0
         * @var bool
         */
        private $is_active = \false;
        /**
         * Get an ID representing the current recovery mode session.
         *
         * @since 5.2.0
         * @var string
         */
        private $session_id = '';
        /**
         * WP_Recovery_Mode constructor.
         *
         * @since 5.2.0
         */
        public function __construct()
        {
        }
        /**
         * Initialize recovery mode for the current request.
         *
         * @since 5.2.0
         */
        public function initialize()
        {
        }
        /**
         * Checks whether recovery mode is active.
         *
         * This will not change after recovery mode has been initialized. {@see WP_Recovery_Mode::run()}.
         *
         * @since 5.2.0
         *
         * @return bool True if recovery mode is active, false otherwise.
         */
        public function is_active()
        {
        }
        /**
         * Gets the recovery mode session ID.
         *
         * @since 5.2.0
         *
         * @return string The session ID if recovery mode is active, empty string otherwise.
         */
        public function get_session_id()
        {
        }
        /**
         * Checks whether recovery mode has been initialized.
         *
         * Recovery mode should not be used until this point. Initialization happens immediately before loading plugins.
         *
         * @since 5.2.0
         *
         * @return bool
         */
        public function is_initialized()
        {
        }
        /**
         * Handles a fatal error occurring.
         *
         * The calling API should immediately die() after calling this function.
         *
         * @since 5.2.0
         *
         * @param array $error Error details from `error_get_last()`.
         * @return true|WP_Error True if the error was handled and headers have already been sent.
         *                       Or the request will exit to try and catch multiple errors at once.
         *                       WP_Error if an error occurred preventing it from being handled.
         */
        public function handle_error(array $error)
        {
        }
        /**
         * Ends the current recovery mode session.
         *
         * @since 5.2.0
         *
         * @return bool True on success, false on failure.
         */
        public function exit_recovery_mode()
        {
        }
        /**
         * Handles a request to exit Recovery Mode.
         *
         * @since 5.2.0
         */
        public function handle_exit_recovery_mode()
        {
        }
        /**
         * Cleans any recovery mode keys that have expired according to the link TTL.
         *
         * Executes on a daily cron schedule.
         *
         * @since 5.2.0
         */
        public function clean_expired_keys()
        {
        }
        /**
         * Handles checking for the recovery mode cookie and validating it.
         *
         * @since 5.2.0
         */
        protected function handle_cookie()
        {
        }
        /**
         * Gets the rate limit between sending new recovery mode email links.
         *
         * @since 5.2.0
         *
         * @return int Rate limit in seconds.
         */
        protected function get_email_rate_limit()
        {
        }
        /**
         * Gets the number of seconds the recovery mode link is valid for.
         *
         * @since 5.2.0
         *
         * @return int Interval in seconds.
         */
        protected function get_link_ttl()
        {
        }
        /**
         * Gets the extension that the error occurred in.
         *
         * @since 5.2.0
         *
         * @global array $wp_theme_directories
         *
         * @param array $error Error details from `error_get_last()`.
         * @return array|false {
         *     Extension details.
         *
         *     @type string $slug The extension slug. This is the plugin or theme's directory.
         *     @type string $type The extension type. Either 'plugin' or 'theme'.
         * }
         */
        protected function get_extension_for_error($error)
        {
        }
        /**
         * Checks whether the given extension a network activated plugin.
         *
         * @since 5.2.0
         *
         * @param array $extension Extension data.
         * @return bool True if network plugin, false otherwise.
         */
        protected function is_network_plugin($extension)
        {
        }
        /**
         * Stores the given error so that the extension causing it is paused.
         *
         * @since 5.2.0
         *
         * @param array $error Error details from `error_get_last()`.
         * @return bool True if the error was stored successfully, false otherwise.
         */
        protected function store_error($error)
        {
        }
        /**
         * Redirects the current request to allow recovering multiple errors in one go.
         *
         * The redirection will only happen when on a protected endpoint.
         *
         * It must be ensured that this method is only called when an error actually occurred and will not occur on the
         * next request again. Otherwise it will create a redirect loop.
         *
         * @since 5.2.0
         */
        protected function redirect_protected()
        {
        }
    }
    /**
     * Taxonomy API: WP_Term_Query class.
     *
     * @package WordPress
     * @subpackage Taxonomy
     * @since 4.6.0
     */
    /**
     * Class used for querying terms.
     *
     * @since 4.6.0
     *
     * @see WP_Term_Query::__construct() for accepted arguments.
     */
    class WP_Term_Query
    {
        /**
         * SQL string used to perform database query.
         *
         * @since 4.6.0
         * @var string
         */
        public $request;
        /**
         * Metadata query container.
         *
         * @since 4.6.0
         * @var WP_Meta_Query A meta query instance.
         */
        public $meta_query = \false;
        /**
         * Metadata query clauses.
         *
         * @since 4.6.0
         * @var array
         */
        protected $meta_query_clauses;
        /**
         * SQL query clauses.
         *
         * @since 4.6.0
         * @var array
         */
        protected $sql_clauses = array('select' => '', 'from' => '', 'where' => array(), 'orderby' => '', 'limits' => '');
        /**
         * Query vars set by the user.
         *
         * @since 4.6.0
         * @var array
         */
        public $query_vars;
        /**
         * Default values for query vars.
         *
         * @since 4.6.0
         * @var array
         */
        public $query_var_defaults;
        /**
         * List of terms located by the query.
         *
         * @since 4.6.0
         * @var array
         */
        public $terms;
        /**
         * Constructor.
         *
         * Sets up the term query, based on the query vars passed.
         *
         * @since 4.6.0
         * @since 4.6.0 Introduced 'term_taxonomy_id' parameter.
         * @since 4.7.0 Introduced 'object_ids' parameter.
         * @since 4.9.0 Added 'slug__in' support for 'orderby'.
         * @since 5.1.0 Introduced the 'meta_compare_key' parameter.
         * @since 5.3.0 Introduced the 'meta_type_key' parameter.
         *
         * @param string|array $query {
         *     Optional. Array or query string of term query parameters. Default empty.
         *
         *     @type string|string[] $taxonomy               Taxonomy name, or array of taxonomy names, to which results
         *                                                   should be limited.
         *     @type int|int[]       $object_ids             Object ID, or array of object IDs. Results will be
         *                                                   limited to terms associated with these objects.
         *     @type string          $orderby                Field(s) to order terms by. Accepts:
         *                                                   - Term fields ('name', 'slug', 'term_group', 'term_id', 'id',
         *                                                     'description', 'parent', 'term_order'). Unless `$object_ids`
         *                                                     is not empty, 'term_order' is treated the same as 'term_id'.
         *                                                   - 'count' to use the number of objects associated with the term.
         *                                                   - 'include' to match the 'order' of the `$include` param.
         *                                                   - 'slug__in' to match the 'order' of the `$slug` param.
         *                                                   - 'meta_value'
         *                                                   - 'meta_value_num'.
         *                                                   - The value of `$meta_key`.
         *                                                   - The array keys of `$meta_query`.
         *                                                   - 'none' to omit the ORDER BY clause.
         *                                                   Default 'name'.
         *     @type string          $order                  Whether to order terms in ascending or descending order.
         *                                                   Accepts 'ASC' (ascending) or 'DESC' (descending).
         *                                                   Default 'ASC'.
         *     @type bool|int        $hide_empty             Whether to hide terms not assigned to any posts. Accepts
         *                                                   1|true or 0|false. Default 1|true.
         *     @type int[]|string    $include                Array or comma/space-separated string of term IDs to include.
         *                                                   Default empty array.
         *     @type int[]|string    $exclude                Array or comma/space-separated string of term IDs to exclude.
         *                                                   If `$include` is non-empty, `$exclude` is ignored.
         *                                                   Default empty array.
         *     @type int[]|string    $exclude_tree           Array or comma/space-separated string of term IDs to exclude
         *                                                   along with all of their descendant terms. If `$include` is
         *                                                   non-empty, `$exclude_tree` is ignored. Default empty array.
         *     @type int|string      $number                 Maximum number of terms to return. Accepts ''|0 (all) or any
         *                                                   positive number. Default ''|0 (all). Note that `$number` may
         *                                                   not return accurate results when coupled with `$object_ids`.
         *                                                   See #41796 for details.
         *     @type int             $offset                 The number by which to offset the terms query. Default empty.
         *     @type string          $fields                 Term fields to query for. Accepts:
         *                                                   - 'all' Returns an array of complete term objects (`WP_Term[]`).
         *                                                   - 'all_with_object_id' Returns an array of term objects
         *                                                     with the 'object_id' param (`WP_Term[]`). Works only
         *                                                     when the `$object_ids` parameter is populated.
         *                                                   - 'ids' Returns an array of term IDs (`int[]`).
         *                                                   - 'tt_ids' Returns an array of term taxonomy IDs (`int[]`).
         *                                                   - 'names' Returns an array of term names (`string[]`).
         *                                                   - 'slugs' Returns an array of term slugs (`string[]`).
         *                                                   - 'count' Returns the number of matching terms (`int`).
         *                                                   - 'id=>parent' Returns an associative array of parent term IDs,
         *                                                      keyed by term ID (`int[]`).
         *                                                   - 'id=>name' Returns an associative array of term names,
         *                                                      keyed by term ID (`string[]`).
         *                                                   - 'id=>slug' Returns an associative array of term slugs,
         *                                                      keyed by term ID (`string[]`).
         *                                                   Default 'all'.
         *     @type bool            $count                  Whether to return a term count. If true, will take precedence
         *                                                   over `$fields`. Default false.
         *     @type string|string[] $name                   Name or array of names to return term(s) for.
         *                                                   Default empty.
         *     @type string|string[] $slug                   Slug or array of slugs to return term(s) for.
         *                                                   Default empty.
         *     @type int|int[]       $term_taxonomy_id       Term taxonomy ID, or array of term taxonomy IDs,
         *                                                   to match when querying terms.
         *     @type bool            $hierarchical           Whether to include terms that have non-empty descendants
         *                                                   (even if `$hide_empty` is set to true). Default true.
         *     @type string          $search                 Search criteria to match terms. Will be SQL-formatted with
         *                                                   wildcards before and after. Default empty.
         *     @type string          $name__like             Retrieve terms with criteria by which a term is LIKE
         *                                                   `$name__like`. Default empty.
         *     @type string          $description__like      Retrieve terms where the description is LIKE
         *                                                   `$description__like`. Default empty.
         *     @type bool            $pad_counts             Whether to pad the quantity of a term's children in the
         *                                                   quantity of each term's "count" object variable.
         *                                                   Default false.
         *     @type string          $get                    Whether to return terms regardless of ancestry or whether the
         *                                                   terms are empty. Accepts 'all' or '' (disabled).
         *                                                   Default ''.
         *     @type int             $child_of               Term ID to retrieve child terms of. If multiple taxonomies
         *                                                   are passed, `$child_of` is ignored. Default 0.
         *     @type int             $parent                 Parent term ID to retrieve direct-child terms of.
         *                                                   Default empty.
         *     @type bool            $childless              True to limit results to terms that have no children.
         *                                                   This parameter has no effect on non-hierarchical taxonomies.
         *                                                   Default false.
         *     @type string          $cache_domain           Unique cache key to be produced when this query is stored in
         *                                                   an object cache. Default 'core'.
         *     @type bool            $update_term_meta_cache Whether to prime meta caches for matched terms. Default true.
         *     @type string|string[] $meta_key               Meta key or keys to filter by.
         *     @type string|string[] $meta_value             Meta value or values to filter by.
         *     @type string          $meta_compare           MySQL operator used for comparing the meta value.
         *                                                   See WP_Meta_Query::__construct for accepted values and default value.
         *     @type string          $meta_compare_key       MySQL operator used for comparing the meta key.
         *                                                   See WP_Meta_Query::__construct for accepted values and default value.
         *     @type string          $meta_type              MySQL data type that the meta_value column will be CAST to for comparisons.
         *                                                   See WP_Meta_Query::__construct for accepted values and default value.
         *     @type string          $meta_type_key          MySQL data type that the meta_key column will be CAST to for comparisons.
         *                                                   See WP_Meta_Query::__construct for accepted values and default value.
         *     @type array           $meta_query             An associative array of WP_Meta_Query arguments.
         *                                                   See WP_Meta_Query::__construct for accepted values.
         * }
         */
        public function __construct($query = '')
        {
        }
        /**
         * Parse arguments passed to the term query with default query parameters.
         *
         * @since 4.6.0
         *
         * @param string|array $query WP_Term_Query arguments. See WP_Term_Query::__construct()
         */
        public function parse_query($query = '')
        {
        }
        /**
         * Sets up the query and retrieves the results.
         *
         * The return type varies depending on the value passed to `$args['fields']`. See
         * WP_Term_Query::get_terms() for details.
         *
         * @since 4.6.0
         *
         * @param string|array $query Array or URL query string of parameters.
         * @return WP_Term[]|int[]|string[]|string Array of terms, or number of terms as numeric string
         *                                         when 'count' is passed as a query var.
         */
        public function query($query)
        {
        }
        /**
         * Retrieves the query results.
         *
         * The return type varies depending on the value passed to `$args['fields']`.
         *
         * The following will result in an array of `WP_Term` objects being returned:
         *
         *   - 'all'
         *   - 'all_with_object_id'
         *
         * The following will result in a numeric string being returned:
         *
         *   - 'count'
         *
         * The following will result in an array of text strings being returned:
         *
         *   - 'id=>name'
         *   - 'id=>slug'
         *   - 'names'
         *   - 'slugs'
         *
         * The following will result in an array of numeric strings being returned:
         *
         *   - 'id=>parent'
         *
         * The following will result in an array of integers being returned:
         *
         *   - 'ids'
         *   - 'tt_ids'
         *
         * @since 4.6.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @return WP_Term[]|int[]|string[]|string Array of terms, or number of terms as numeric string
         *                                         when 'count' is passed as a query var.
         */
        public function get_terms()
        {
        }
        /**
         * Parse and sanitize 'orderby' keys passed to the term query.
         *
         * @since 4.6.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param string $orderby_raw Alias for the field to order by.
         * @return string|false Value to used in the ORDER clause. False otherwise.
         */
        protected function parse_orderby($orderby_raw)
        {
        }
        /**
         * Format response depending on field requested.
         *
         * @since 6.0.0
         *
         * @param WP_Term[] $term_objects Array of term objects.
         * @param string    $_fields      Field to format.
         *
         * @return WP_Term[]|int[]|string[] Array of terms / strings / ints depending on field requested.
         */
        protected function format_terms($term_objects, $_fields)
        {
        }
        /**
         * Generate the ORDER BY clause for an 'orderby' param that is potentially related to a meta query.
         *
         * @since 4.6.0
         *
         * @param string $orderby_raw Raw 'orderby' value passed to WP_Term_Query.
         * @return string ORDER BY clause.
         */
        protected function parse_orderby_meta($orderby_raw)
        {
        }
        /**
         * Parse an 'order' query variable and cast it to ASC or DESC as necessary.
         *
         * @since 4.6.0
         *
         * @param string $order The 'order' query variable.
         * @return string The sanitized 'order' query variable.
         */
        protected function parse_order($order)
        {
        }
        /**
         * Used internally to generate a SQL string related to the 'search' parameter.
         *
         * @since 4.6.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param string $search Search string.
         * @return string Search SQL.
         */
        protected function get_search_sql($search)
        {
        }
        /**
         * Creates an array of term objects from an array of term IDs.
         *
         * Also discards invalid term objects.
         *
         * @since 4.9.8
         *
         * @param Object[]|int[] $terms List of objects or term ids.
         * @return WP_Term[] Array of `WP_Term` objects.
         */
        protected function populate_terms($terms)
        {
        }
    }
    /**
     * Meta API: WP_Metadata_Lazyloader class
     *
     * @package WordPress
     * @subpackage Meta
     * @since 4.5.0
     */
    /**
     * Core class used for lazy-loading object metadata.
     *
     * When loading many objects of a given type, such as posts in a WP_Query loop, it often makes
     * sense to prime various metadata caches at the beginning of the loop. This means fetching all
     * relevant metadata with a single database query, a technique that has the potential to improve
     * performance dramatically in some cases.
     *
     * In cases where the given metadata may not even be used in the loop, we can improve performance
     * even more by only priming the metadata cache for affected items the first time a piece of metadata
     * is requested - ie, by lazy-loading it. So, for example, comment meta may not be loaded into the
     * cache in the comments section of a post until the first time get_comment_meta() is called in the
     * context of the comment loop.
     *
     * WP uses the WP_Metadata_Lazyloader class to queue objects for metadata cache priming. The class
     * then detects the relevant get_*_meta() function call, and queries the metadata of all queued objects.
     *
     * Do not access this class directly. Use the wp_metadata_lazyloader() function.
     *
     * @since 4.5.0
     */
    class WP_Metadata_Lazyloader
    {
        /**
         * Pending objects queue.
         *
         * @since 4.5.0
         * @var array
         */
        protected $pending_objects;
        /**
         * Settings for supported object types.
         *
         * @since 4.5.0
         * @var array
         */
        protected $settings = array();
        /**
         * Constructor.
         *
         * @since 4.5.0
         */
        public function __construct()
        {
        }
        /**
         * Adds objects to the metadata lazy-load queue.
         *
         * @since 4.5.0
         *
         * @param string $object_type Type of object whose meta is to be lazy-loaded. Accepts 'term' or 'comment'.
         * @param array  $object_ids  Array of object IDs.
         * @return void|WP_Error WP_Error on failure.
         */
        public function queue_objects($object_type, $object_ids)
        {
        }
        /**
         * Resets lazy-load queue for a given object type.
         *
         * @since 4.5.0
         *
         * @param string $object_type Object type. Accepts 'comment' or 'term'.
         * @return void|WP_Error WP_Error on failure.
         */
        public function reset_queue($object_type)
        {
        }
        /**
         * Lazy-loads term meta for queued terms.
         *
         * This method is public so that it can be used as a filter callback. As a rule, there
         * is no need to invoke it directly.
         *
         * @since 4.5.0
         *
         * @param mixed $check The `$check` param passed from the 'get_term_metadata' hook.
         * @return mixed In order not to short-circuit `get_metadata()`. Generally, this is `null`, but it could be
         *               another value if filtered by a plugin.
         */
        public function lazyload_term_meta($check)
        {
        }
        /**
         * Lazy-loads comment meta for queued comments.
         *
         * This method is public so that it can be used as a filter callback. As a rule, there is no need to invoke it
         * directly, from either inside or outside the `WP_Query` object.
         *
         * @since 4.5.0
         *
         * @param mixed $check The `$check` param passed from the {@see 'get_comment_metadata'} hook.
         * @return mixed The original value of `$check`, so as not to short-circuit `get_comment_metadata()`.
         */
        public function lazyload_comment_meta($check)
        {
        }
    }
}
namespace PHPMailer\PHPMailer {
    /**
     * PHPMailer RFC821 SMTP email transport class.
     * Implements RFC 821 SMTP commands and provides some utility methods for sending mail to an SMTP server.
     *
     * @author Chris Ryan
     * @author Marcus Bointon <phpmailer@synchromedia.co.uk>
     */
    class SMTP
    {
        /**
         * The PHPMailer SMTP version number.
         *
         * @var string
         */
        const VERSION = '6.6.0';
        /**
         * SMTP line break constant.
         *
         * @var string
         */
        const LE = "\r\n";
        /**
         * The SMTP port to use if one is not specified.
         *
         * @var int
         */
        const DEFAULT_PORT = 25;
        /**
         * The maximum line length allowed by RFC 5321 section 4.5.3.1.6,
         * *excluding* a trailing CRLF break.
         *
         * @see https://tools.ietf.org/html/rfc5321#section-4.5.3.1.6
         *
         * @var int
         */
        const MAX_LINE_LENGTH = 998;
        /**
         * The maximum line length allowed for replies in RFC 5321 section 4.5.3.1.5,
         * *including* a trailing CRLF line break.
         *
         * @see https://tools.ietf.org/html/rfc5321#section-4.5.3.1.5
         *
         * @var int
         */
        const MAX_REPLY_LENGTH = 512;
        /**
         * Debug level for no output.
         *
         * @var int
         */
        const DEBUG_OFF = 0;
        /**
         * Debug level to show client -> server messages.
         *
         * @var int
         */
        const DEBUG_CLIENT = 1;
        /**
         * Debug level to show client -> server and server -> client messages.
         *
         * @var int
         */
        const DEBUG_SERVER = 2;
        /**
         * Debug level to show connection status, client -> server and server -> client messages.
         *
         * @var int
         */
        const DEBUG_CONNECTION = 3;
        /**
         * Debug level to show all messages.
         *
         * @var int
         */
        const DEBUG_LOWLEVEL = 4;
        /**
         * Debug output level.
         * Options:
         * * self::DEBUG_OFF (`0`) No debug output, default
         * * self::DEBUG_CLIENT (`1`) Client commands
         * * self::DEBUG_SERVER (`2`) Client commands and server responses
         * * self::DEBUG_CONNECTION (`3`) As DEBUG_SERVER plus connection status
         * * self::DEBUG_LOWLEVEL (`4`) Low-level data output, all messages.
         *
         * @var int
         */
        public $do_debug = self::DEBUG_OFF;
        /**
         * How to handle debug output.
         * Options:
         * * `echo` Output plain-text as-is, appropriate for CLI
         * * `html` Output escaped, line breaks converted to `<br>`, appropriate for browser output
         * * `error_log` Output to error log as configured in php.ini
         * Alternatively, you can provide a callable expecting two params: a message string and the debug level:
         *
         * ```php
         * $smtp->Debugoutput = function($str, $level) {echo "debug level $level; message: $str";};
         * ```
         *
         * Alternatively, you can pass in an instance of a PSR-3 compatible logger, though only `debug`
         * level output is used:
         *
         * ```php
         * $mail->Debugoutput = new myPsr3Logger;
         * ```
         *
         * @var string|callable|\Psr\Log\LoggerInterface
         */
        public $Debugoutput = 'echo';
        /**
         * Whether to use VERP.
         *
         * @see http://en.wikipedia.org/wiki/Variable_envelope_return_path
         * @see http://www.postfix.org/VERP_README.html Info on VERP
         *
         * @var bool
         */
        public $do_verp = false;
        /**
         * The timeout value for connection, in seconds.
         * Default of 5 minutes (300sec) is from RFC2821 section 4.5.3.2.
         * This needs to be quite high to function correctly with hosts using greetdelay as an anti-spam measure.
         *
         * @see http://tools.ietf.org/html/rfc2821#section-4.5.3.2
         *
         * @var int
         */
        public $Timeout = 300;
        /**
         * How long to wait for commands to complete, in seconds.
         * Default of 5 minutes (300sec) is from RFC2821 section 4.5.3.2.
         *
         * @var int
         */
        public $Timelimit = 300;
        /**
         * Patterns to extract an SMTP transaction id from reply to a DATA command.
         * The first capture group in each regex will be used as the ID.
         * MS ESMTP returns the message ID, which may not be correct for internal tracking.
         *
         * @var string[]
         */
        protected $smtp_transaction_id_patterns = ['exim' => '/[\\d]{3} OK id=(.*)/', 'sendmail' => '/[\\d]{3} 2.0.0 (.*) Message/', 'postfix' => '/[\\d]{3} 2.0.0 Ok: queued as (.*)/', 'Microsoft_ESMTP' => '/[0-9]{3} 2.[\\d].0 (.*)@(?:.*) Queued mail for delivery/', 'Amazon_SES' => '/[\\d]{3} Ok (.*)/', 'SendGrid' => '/[\\d]{3} Ok: queued as (.*)/', 'CampaignMonitor' => '/[\\d]{3} 2.0.0 OK:([a-zA-Z\\d]{48})/', 'Haraka' => '/[\\d]{3} Message Queued \\((.*)\\)/', 'Mailjet' => '/[\\d]{3} OK queued as (.*)/'];
        /**
         * The last transaction ID issued in response to a DATA command,
         * if one was detected.
         *
         * @var string|bool|null
         */
        protected $last_smtp_transaction_id;
        /**
         * The socket for the server connection.
         *
         * @var ?resource
         */
        protected $smtp_conn;
        /**
         * Error information, if any, for the last SMTP command.
         *
         * @var array
         */
        protected $error = ['error' => '', 'detail' => '', 'smtp_code' => '', 'smtp_code_ex' => ''];
        /**
         * The reply the server sent to us for HELO.
         * If null, no HELO string has yet been received.
         *
         * @var string|null
         */
        protected $helo_rply;
        /**
         * The set of SMTP extensions sent in reply to EHLO command.
         * Indexes of the array are extension names.
         * Value at index 'HELO' or 'EHLO' (according to command that was sent)
         * represents the server name. In case of HELO it is the only element of the array.
         * Other values can be boolean TRUE or an array containing extension options.
         * If null, no HELO/EHLO string has yet been received.
         *
         * @var array|null
         */
        protected $server_caps;
        /**
         * The most recent reply received from the server.
         *
         * @var string
         */
        protected $last_reply = '';
        /**
         * Output debugging info via a user-selected method.
         *
         * @param string $str   Debug string to output
         * @param int    $level The debug level of this message; see DEBUG_* constants
         *
         * @see SMTP::$Debugoutput
         * @see SMTP::$do_debug
         */
        protected function edebug($str, $level = 0)
        {
        }
        /**
         * Connect to an SMTP server.
         *
         * @param string $host    SMTP server IP or host name
         * @param int    $port    The port number to connect to
         * @param int    $timeout How long to wait for the connection to open
         * @param array  $options An array of options for stream_context_create()
         *
         * @return bool
         */
        public function connect($host, $port = null, $timeout = 30, $options = [])
        {
        }
        /**
         * Create connection to the SMTP server.
         *
         * @param string $host    SMTP server IP or host name
         * @param int    $port    The port number to connect to
         * @param int    $timeout How long to wait for the connection to open
         * @param array  $options An array of options for stream_context_create()
         *
         * @return false|resource
         */
        protected function getSMTPConnection($host, $port = null, $timeout = 30, $options = [])
        {
        }
        /**
         * Initiate a TLS (encrypted) session.
         *
         * @return bool
         */
        public function startTLS()
        {
        }
        /**
         * Perform SMTP authentication.
         * Must be run after hello().
         *
         * @see    hello()
         *
         * @param string $username The user name
         * @param string $password The password
         * @param string $authtype The auth type (CRAM-MD5, PLAIN, LOGIN, XOAUTH2)
         * @param OAuthTokenProvider $OAuth An optional OAuthTokenProvider instance for XOAUTH2 authentication
         *
         * @return bool True if successfully authenticated
         */
        public function authenticate($username, $password, $authtype = null, $OAuth = null)
        {
        }
        /**
         * Calculate an MD5 HMAC hash.
         * Works like hash_hmac('md5', $data, $key)
         * in case that function is not available.
         *
         * @param string $data The data to hash
         * @param string $key  The key to hash with
         *
         * @return string
         */
        protected function hmac($data, $key)
        {
        }
        /**
         * Check connection state.
         *
         * @return bool True if connected
         */
        public function connected()
        {
        }
        /**
         * Close the socket and clean up the state of the class.
         * Don't use this function without first trying to use QUIT.
         *
         * @see quit()
         */
        public function close()
        {
        }
        /**
         * Send an SMTP DATA command.
         * Issues a data command and sends the msg_data to the server,
         * finalizing the mail transaction. $msg_data is the message
         * that is to be send with the headers. Each header needs to be
         * on a single line followed by a <CRLF> with the message headers
         * and the message body being separated by an additional <CRLF>.
         * Implements RFC 821: DATA <CRLF>.
         *
         * @param string $msg_data Message data to send
         *
         * @return bool
         */
        public function data($msg_data)
        {
        }
        /**
         * Send an SMTP HELO or EHLO command.
         * Used to identify the sending server to the receiving server.
         * This makes sure that client and server are in a known state.
         * Implements RFC 821: HELO <SP> <domain> <CRLF>
         * and RFC 2821 EHLO.
         *
         * @param string $host The host name or IP to connect to
         *
         * @return bool
         */
        public function hello($host = '')
        {
        }
        /**
         * Send an SMTP HELO or EHLO command.
         * Low-level implementation used by hello().
         *
         * @param string $hello The HELO string
         * @param string $host  The hostname to say we are
         *
         * @return bool
         *
         * @see hello()
         */
        protected function sendHello($hello, $host)
        {
        }
        /**
         * Parse a reply to HELO/EHLO command to discover server extensions.
         * In case of HELO, the only parameter that can be discovered is a server name.
         *
         * @param string $type `HELO` or `EHLO`
         */
        protected function parseHelloFields($type)
        {
        }
        /**
         * Send an SMTP MAIL command.
         * Starts a mail transaction from the email address specified in
         * $from. Returns true if successful or false otherwise. If True
         * the mail transaction is started and then one or more recipient
         * commands may be called followed by a data command.
         * Implements RFC 821: MAIL <SP> FROM:<reverse-path> <CRLF>.
         *
         * @param string $from Source address of this message
         *
         * @return bool
         */
        public function mail($from)
        {
        }
        /**
         * Send an SMTP QUIT command.
         * Closes the socket if there is no error or the $close_on_error argument is true.
         * Implements from RFC 821: QUIT <CRLF>.
         *
         * @param bool $close_on_error Should the connection close if an error occurs?
         *
         * @return bool
         */
        public function quit($close_on_error = true)
        {
        }
        /**
         * Send an SMTP RCPT command.
         * Sets the TO argument to $toaddr.
         * Returns true if the recipient was accepted false if it was rejected.
         * Implements from RFC 821: RCPT <SP> TO:<forward-path> <CRLF>.
         *
         * @param string $address The address the message is being sent to
         * @param string $dsn     Comma separated list of DSN notifications. NEVER, SUCCESS, FAILURE
         *                        or DELAY. If you specify NEVER all other notifications are ignored.
         *
         * @return bool
         */
        public function recipient($address, $dsn = '')
        {
        }
        /**
         * Send an SMTP RSET command.
         * Abort any transaction that is currently in progress.
         * Implements RFC 821: RSET <CRLF>.
         *
         * @return bool True on success
         */
        public function reset()
        {
        }
        /**
         * Send a command to an SMTP server and check its return code.
         *
         * @param string    $command       The command name - not sent to the server
         * @param string    $commandstring The actual command to send
         * @param int|array $expect        One or more expected integer success codes
         *
         * @return bool True on success
         */
        protected function sendCommand($command, $commandstring, $expect)
        {
        }
        /**
         * Send an SMTP SAML command.
         * Starts a mail transaction from the email address specified in $from.
         * Returns true if successful or false otherwise. If True
         * the mail transaction is started and then one or more recipient
         * commands may be called followed by a data command. This command
         * will send the message to the users terminal if they are logged
         * in and send them an email.
         * Implements RFC 821: SAML <SP> FROM:<reverse-path> <CRLF>.
         *
         * @param string $from The address the message is from
         *
         * @return bool
         */
        public function sendAndMail($from)
        {
        }
        /**
         * Send an SMTP VRFY command.
         *
         * @param string $name The name to verify
         *
         * @return bool
         */
        public function verify($name)
        {
        }
        /**
         * Send an SMTP NOOP command.
         * Used to keep keep-alives alive, doesn't actually do anything.
         *
         * @return bool
         */
        public function noop()
        {
        }
        /**
         * Send an SMTP TURN command.
         * This is an optional command for SMTP that this class does not support.
         * This method is here to make the RFC821 Definition complete for this class
         * and _may_ be implemented in future.
         * Implements from RFC 821: TURN <CRLF>.
         *
         * @return bool
         */
        public function turn()
        {
        }
        /**
         * Send raw data to the server.
         *
         * @param string $data    The data to send
         * @param string $command Optionally, the command this is part of, used only for controlling debug output
         *
         * @return int|bool The number of bytes sent to the server or false on error
         */
        public function client_send($data, $command = '')
        {
        }
        /**
         * Get the latest error.
         *
         * @return array
         */
        public function getError()
        {
        }
        /**
         * Get SMTP extensions available on the server.
         *
         * @return array|null
         */
        public function getServerExtList()
        {
        }
        /**
         * Get metadata about the SMTP server from its HELO/EHLO response.
         * The method works in three ways, dependent on argument value and current state:
         *   1. HELO/EHLO has not been sent - returns null and populates $this->error.
         *   2. HELO has been sent -
         *     $name == 'HELO': returns server name
         *     $name == 'EHLO': returns boolean false
         *     $name == any other string: returns null and populates $this->error
         *   3. EHLO has been sent -
         *     $name == 'HELO'|'EHLO': returns the server name
         *     $name == any other string: if extension $name exists, returns True
         *       or its options (e.g. AUTH mechanisms supported). Otherwise returns False.
         *
         * @param string $name Name of SMTP extension or 'HELO'|'EHLO'
         *
         * @return string|bool|null
         */
        public function getServerExt($name)
        {
        }
        /**
         * Get the last reply from the server.
         *
         * @return string
         */
        public function getLastReply()
        {
        }
        /**
         * Read the SMTP server's response.
         * Either before eof or socket timeout occurs on the operation.
         * With SMTP we can tell if we have more lines to read if the
         * 4th character is '-' symbol. If it is a space then we don't
         * need to read anything else.
         *
         * @return string
         */
        protected function get_lines()
        {
        }
        /**
         * Enable or disable VERP address generation.
         *
         * @param bool $enabled
         */
        public function setVerp($enabled = false)
        {
        }
        /**
         * Get VERP address generation mode.
         *
         * @return bool
         */
        public function getVerp()
        {
        }
        /**
         * Set error messages and codes.
         *
         * @param string $message      The error message
         * @param string $detail       Further detail on the error
         * @param string $smtp_code    An associated SMTP error code
         * @param string $smtp_code_ex Extended SMTP code
         */
        protected function setError($message, $detail = '', $smtp_code = '', $smtp_code_ex = '')
        {
        }
        /**
         * Set debug output method.
         *
         * @param string|callable $method The name of the mechanism to use for debugging output, or a callable to handle it
         */
        public function setDebugOutput($method = 'echo')
        {
        }
        /**
         * Get debug output method.
         *
         * @return string
         */
        public function getDebugOutput()
        {
        }
        /**
         * Set debug output level.
         *
         * @param int $level
         */
        public function setDebugLevel($level = 0)
        {
        }
        /**
         * Get debug output level.
         *
         * @return int
         */
        public function getDebugLevel()
        {
        }
        /**
         * Set SMTP timeout.
         *
         * @param int $timeout The timeout duration in seconds
         */
        public function setTimeout($timeout = 0)
        {
        }
        /**
         * Get SMTP timeout.
         *
         * @return int
         */
        public function getTimeout()
        {
        }
        /**
         * Reports an error number and string.
         *
         * @param int    $errno   The error number returned by PHP
         * @param string $errmsg  The error message returned by PHP
         * @param string $errfile The file the error occurred in
         * @param int    $errline The line number the error occurred on
         */
        protected function errorHandler($errno, $errmsg, $errfile = '', $errline = 0)
        {
        }
        /**
         * Extract and return the ID of the last SMTP transaction based on
         * a list of patterns provided in SMTP::$smtp_transaction_id_patterns.
         * Relies on the host providing the ID in response to a DATA command.
         * If no reply has been received yet, it will return null.
         * If no pattern was matched, it will return false.
         *
         * @return bool|string|null
         */
        protected function recordLastTransactionID()
        {
        }
        /**
         * Get the queue/transaction ID of the last SMTP transaction
         * If no reply has been received yet, it will return null.
         * If no pattern was matched, it will return false.
         *
         * @return bool|string|null
         *
         * @see recordLastTransactionID()
         */
        public function getLastTransactionID()
        {
        }
    }
    /**
     * PHPMailer - PHP email creation and transport class.
     *
     * @author Marcus Bointon (Synchro/coolbru) <phpmailer@synchromedia.co.uk>
     * @author Jim Jagielski (jimjag) <jimjag@gmail.com>
     * @author Andy Prevost (codeworxtech) <codeworxtech@users.sourceforge.net>
     * @author Brent R. Matzelle (original founder)
     */
    class PHPMailer
    {
        const CHARSET_ASCII = 'us-ascii';
        const CHARSET_ISO88591 = 'iso-8859-1';
        const CHARSET_UTF8 = 'utf-8';
        const CONTENT_TYPE_PLAINTEXT = 'text/plain';
        const CONTENT_TYPE_TEXT_CALENDAR = 'text/calendar';
        const CONTENT_TYPE_TEXT_HTML = 'text/html';
        const CONTENT_TYPE_MULTIPART_ALTERNATIVE = 'multipart/alternative';
        const CONTENT_TYPE_MULTIPART_MIXED = 'multipart/mixed';
        const CONTENT_TYPE_MULTIPART_RELATED = 'multipart/related';
        const ENCODING_7BIT = '7bit';
        const ENCODING_8BIT = '8bit';
        const ENCODING_BASE64 = 'base64';
        const ENCODING_BINARY = 'binary';
        const ENCODING_QUOTED_PRINTABLE = 'quoted-printable';
        const ENCRYPTION_STARTTLS = 'tls';
        const ENCRYPTION_SMTPS = 'ssl';
        const ICAL_METHOD_REQUEST = 'REQUEST';
        const ICAL_METHOD_PUBLISH = 'PUBLISH';
        const ICAL_METHOD_REPLY = 'REPLY';
        const ICAL_METHOD_ADD = 'ADD';
        const ICAL_METHOD_CANCEL = 'CANCEL';
        const ICAL_METHOD_REFRESH = 'REFRESH';
        const ICAL_METHOD_COUNTER = 'COUNTER';
        const ICAL_METHOD_DECLINECOUNTER = 'DECLINECOUNTER';
        /**
         * Email priority.
         * Options: null (default), 1 = High, 3 = Normal, 5 = low.
         * When null, the header is not set at all.
         *
         * @var int|null
         */
        public $Priority;
        /**
         * The character set of the message.
         *
         * @var string
         */
        public $CharSet = self::CHARSET_ISO88591;
        /**
         * The MIME Content-type of the message.
         *
         * @var string
         */
        public $ContentType = self::CONTENT_TYPE_PLAINTEXT;
        /**
         * The message encoding.
         * Options: "8bit", "7bit", "binary", "base64", and "quoted-printable".
         *
         * @var string
         */
        public $Encoding = self::ENCODING_8BIT;
        /**
         * Holds the most recent mailer error message.
         *
         * @var string
         */
        public $ErrorInfo = '';
        /**
         * The From email address for the message.
         *
         * @var string
         */
        public $From = '';
        /**
         * The From name of the message.
         *
         * @var string
         */
        public $FromName = '';
        /**
         * The envelope sender of the message.
         * This will usually be turned into a Return-Path header by the receiver,
         * and is the address that bounces will be sent to.
         * If not empty, will be passed via `-f` to sendmail or as the 'MAIL FROM' value over SMTP.
         *
         * @var string
         */
        public $Sender = '';
        /**
         * The Subject of the message.
         *
         * @var string
         */
        public $Subject = '';
        /**
         * An HTML or plain text message body.
         * If HTML then call isHTML(true).
         *
         * @var string
         */
        public $Body = '';
        /**
         * The plain-text message body.
         * This body can be read by mail clients that do not have HTML email
         * capability such as mutt & Eudora.
         * Clients that can read HTML will view the normal Body.
         *
         * @var string
         */
        public $AltBody = '';
        /**
         * An iCal message part body.
         * Only supported in simple alt or alt_inline message types
         * To generate iCal event structures, use classes like EasyPeasyICS or iCalcreator.
         *
         * @see http://sprain.ch/blog/downloads/php-class-easypeasyics-create-ical-files-with-php/
         * @see http://kigkonsult.se/iCalcreator/
         *
         * @var string
         */
        public $Ical = '';
        /**
         * Value-array of "method" in Contenttype header "text/calendar"
         *
         * @var string[]
         */
        protected static $IcalMethods = [self::ICAL_METHOD_REQUEST, self::ICAL_METHOD_PUBLISH, self::ICAL_METHOD_REPLY, self::ICAL_METHOD_ADD, self::ICAL_METHOD_CANCEL, self::ICAL_METHOD_REFRESH, self::ICAL_METHOD_COUNTER, self::ICAL_METHOD_DECLINECOUNTER];
        /**
         * The complete compiled MIME message body.
         *
         * @var string
         */
        protected $MIMEBody = '';
        /**
         * The complete compiled MIME message headers.
         *
         * @var string
         */
        protected $MIMEHeader = '';
        /**
         * Extra headers that createHeader() doesn't fold in.
         *
         * @var string
         */
        protected $mailHeader = '';
        /**
         * Word-wrap the message body to this number of chars.
         * Set to 0 to not wrap. A useful value here is 78, for RFC2822 section 2.1.1 compliance.
         *
         * @see static::STD_LINE_LENGTH
         *
         * @var int
         */
        public $WordWrap = 0;
        /**
         * Which method to use to send mail.
         * Options: "mail", "sendmail", or "smtp".
         *
         * @var string
         */
        public $Mailer = 'mail';
        /**
         * The path to the sendmail program.
         *
         * @var string
         */
        public $Sendmail = '/usr/sbin/sendmail';
        /**
         * Whether mail() uses a fully sendmail-compatible MTA.
         * One which supports sendmail's "-oi -f" options.
         *
         * @var bool
         */
        public $UseSendmailOptions = true;
        /**
         * The email address that a reading confirmation should be sent to, also known as read receipt.
         *
         * @var string
         */
        public $ConfirmReadingTo = '';
        /**
         * The hostname to use in the Message-ID header and as default HELO string.
         * If empty, PHPMailer attempts to find one with, in order,
         * $_SERVER['SERVER_NAME'], gethostname(), php_uname('n'), or the value
         * 'localhost.localdomain'.
         *
         * @see PHPMailer::$Helo
         *
         * @var string
         */
        public $Hostname = '';
        /**
         * An ID to be used in the Message-ID header.
         * If empty, a unique id will be generated.
         * You can set your own, but it must be in the format "<id@domain>",
         * as defined in RFC5322 section 3.6.4 or it will be ignored.
         *
         * @see https://tools.ietf.org/html/rfc5322#section-3.6.4
         *
         * @var string
         */
        public $MessageID = '';
        /**
         * The message Date to be used in the Date header.
         * If empty, the current date will be added.
         *
         * @var string
         */
        public $MessageDate = '';
        /**
         * SMTP hosts.
         * Either a single hostname or multiple semicolon-delimited hostnames.
         * You can also specify a different port
         * for each host by using this format: [hostname:port]
         * (e.g. "smtp1.example.com:25;smtp2.example.com").
         * You can also specify encryption type, for example:
         * (e.g. "tls://smtp1.example.com:587;ssl://smtp2.example.com:465").
         * Hosts will be tried in order.
         *
         * @var string
         */
        public $Host = 'localhost';
        /**
         * The default SMTP server port.
         *
         * @var int
         */
        public $Port = 25;
        /**
         * The SMTP HELO/EHLO name used for the SMTP connection.
         * Default is $Hostname. If $Hostname is empty, PHPMailer attempts to find
         * one with the same method described above for $Hostname.
         *
         * @see PHPMailer::$Hostname
         *
         * @var string
         */
        public $Helo = '';
        /**
         * What kind of encryption to use on the SMTP connection.
         * Options: '', static::ENCRYPTION_STARTTLS, or static::ENCRYPTION_SMTPS.
         *
         * @var string
         */
        public $SMTPSecure = '';
        /**
         * Whether to enable TLS encryption automatically if a server supports it,
         * even if `SMTPSecure` is not set to 'tls'.
         * Be aware that in PHP >= 5.6 this requires that the server's certificates are valid.
         *
         * @var bool
         */
        public $SMTPAutoTLS = true;
        /**
         * Whether to use SMTP authentication.
         * Uses the Username and Password properties.
         *
         * @see PHPMailer::$Username
         * @see PHPMailer::$Password
         *
         * @var bool
         */
        public $SMTPAuth = false;
        /**
         * Options array passed to stream_context_create when connecting via SMTP.
         *
         * @var array
         */
        public $SMTPOptions = [];
        /**
         * SMTP username.
         *
         * @var string
         */
        public $Username = '';
        /**
         * SMTP password.
         *
         * @var string
         */
        public $Password = '';
        /**
         * SMTP auth type.
         * Options are CRAM-MD5, LOGIN, PLAIN, XOAUTH2, attempted in that order if not specified.
         *
         * @var string
         */
        public $AuthType = '';
        /**
         * An implementation of the PHPMailer OAuthTokenProvider interface.
         *
         * @var OAuthTokenProvider
         */
        protected $oauth;
        /**
         * The SMTP server timeout in seconds.
         * Default of 5 minutes (300sec) is from RFC2821 section 4.5.3.2.
         *
         * @var int
         */
        public $Timeout = 300;
        /**
         * Comma separated list of DSN notifications
         * 'NEVER' under no circumstances a DSN must be returned to the sender.
         *         If you use NEVER all other notifications will be ignored.
         * 'SUCCESS' will notify you when your mail has arrived at its destination.
         * 'FAILURE' will arrive if an error occurred during delivery.
         * 'DELAY'   will notify you if there is an unusual delay in delivery, but the actual
         *           delivery's outcome (success or failure) is not yet decided.
         *
         * @see https://tools.ietf.org/html/rfc3461 See section 4.1 for more information about NOTIFY
         */
        public $dsn = '';
        /**
         * SMTP class debug output mode.
         * Debug output level.
         * Options:
         * @see SMTP::DEBUG_OFF: No output
         * @see SMTP::DEBUG_CLIENT: Client messages
         * @see SMTP::DEBUG_SERVER: Client and server messages
         * @see SMTP::DEBUG_CONNECTION: As SERVER plus connection status
         * @see SMTP::DEBUG_LOWLEVEL: Noisy, low-level data output, rarely needed
         *
         * @see SMTP::$do_debug
         *
         * @var int
         */
        public $SMTPDebug = 0;
        /**
         * How to handle debug output.
         * Options:
         * * `echo` Output plain-text as-is, appropriate for CLI
         * * `html` Output escaped, line breaks converted to `<br>`, appropriate for browser output
         * * `error_log` Output to error log as configured in php.ini
         * By default PHPMailer will use `echo` if run from a `cli` or `cli-server` SAPI, `html` otherwise.
         * Alternatively, you can provide a callable expecting two params: a message string and the debug level:
         *
         * ```php
         * $mail->Debugoutput = function($str, $level) {echo "debug level $level; message: $str";};
         * ```
         *
         * Alternatively, you can pass in an instance of a PSR-3 compatible logger, though only `debug`
         * level output is used:
         *
         * ```php
         * $mail->Debugoutput = new myPsr3Logger;
         * ```
         *
         * @see SMTP::$Debugoutput
         *
         * @var string|callable|\Psr\Log\LoggerInterface
         */
        public $Debugoutput = 'echo';
        /**
         * Whether to keep the SMTP connection open after each message.
         * If this is set to true then the connection will remain open after a send,
         * and closing the connection will require an explicit call to smtpClose().
         * It's a good idea to use this if you are sending multiple messages as it reduces overhead.
         * See the mailing list example for how to use it.
         *
         * @var bool
         */
        public $SMTPKeepAlive = false;
        /**
         * Whether to split multiple to addresses into multiple messages
         * or send them all in one message.
         * Only supported in `mail` and `sendmail` transports, not in SMTP.
         *
         * @var bool
         *
         * @deprecated 6.0.0 PHPMailer isn't a mailing list manager!
         */
        public $SingleTo = false;
        /**
         * Storage for addresses when SingleTo is enabled.
         *
         * @var array
         */
        protected $SingleToArray = [];
        /**
         * Whether to generate VERP addresses on send.
         * Only applicable when sending via SMTP.
         *
         * @see https://en.wikipedia.org/wiki/Variable_envelope_return_path
         * @see http://www.postfix.org/VERP_README.html Postfix VERP info
         *
         * @var bool
         */
        public $do_verp = false;
        /**
         * Whether to allow sending messages with an empty body.
         *
         * @var bool
         */
        public $AllowEmpty = false;
        /**
         * DKIM selector.
         *
         * @var string
         */
        public $DKIM_selector = '';
        /**
         * DKIM Identity.
         * Usually the email address used as the source of the email.
         *
         * @var string
         */
        public $DKIM_identity = '';
        /**
         * DKIM passphrase.
         * Used if your key is encrypted.
         *
         * @var string
         */
        public $DKIM_passphrase = '';
        /**
         * DKIM signing domain name.
         *
         * @example 'example.com'
         *
         * @var string
         */
        public $DKIM_domain = '';
        /**
         * DKIM Copy header field values for diagnostic use.
         *
         * @var bool
         */
        public $DKIM_copyHeaderFields = true;
        /**
         * DKIM Extra signing headers.
         *
         * @example ['List-Unsubscribe', 'List-Help']
         *
         * @var array
         */
        public $DKIM_extraHeaders = [];
        /**
         * DKIM private key file path.
         *
         * @var string
         */
        public $DKIM_private = '';
        /**
         * DKIM private key string.
         *
         * If set, takes precedence over `$DKIM_private`.
         *
         * @var string
         */
        public $DKIM_private_string = '';
        /**
         * Callback Action function name.
         *
         * The function that handles the result of the send email action.
         * It is called out by send() for each email sent.
         *
         * Value can be any php callable: http://www.php.net/is_callable
         *
         * Parameters:
         *   bool $result        result of the send action
         *   array   $to            email addresses of the recipients
         *   array   $cc            cc email addresses
         *   array   $bcc           bcc email addresses
         *   string  $subject       the subject
         *   string  $body          the email body
         *   string  $from          email address of sender
         *   string  $extra         extra information of possible use
         *                          "smtp_transaction_id' => last smtp transaction id
         *
         * @var string
         */
        public $action_function = '';
        /**
         * What to put in the X-Mailer header.
         * Options: An empty string for PHPMailer default, whitespace/null for none, or a string to use.
         *
         * @var string|null
         */
        public $XMailer = '';
        /**
         * Which validator to use by default when validating email addresses.
         * May be a callable to inject your own validator, but there are several built-in validators.
         * The default validator uses PHP's FILTER_VALIDATE_EMAIL filter_var option.
         *
         * @see PHPMailer::validateAddress()
         *
         * @var string|callable
         */
        public static $validator = 'php';
        /**
         * An instance of the SMTP sender class.
         *
         * @var SMTP
         */
        protected $smtp;
        /**
         * The array of 'to' names and addresses.
         *
         * @var array
         */
        protected $to = [];
        /**
         * The array of 'cc' names and addresses.
         *
         * @var array
         */
        protected $cc = [];
        /**
         * The array of 'bcc' names and addresses.
         *
         * @var array
         */
        protected $bcc = [];
        /**
         * The array of reply-to names and addresses.
         *
         * @var array
         */
        protected $ReplyTo = [];
        /**
         * An array of all kinds of addresses.
         * Includes all of $to, $cc, $bcc.
         *
         * @see PHPMailer::$to
         * @see PHPMailer::$cc
         * @see PHPMailer::$bcc
         *
         * @var array
         */
        protected $all_recipients = [];
        /**
         * An array of names and addresses queued for validation.
         * In send(), valid and non duplicate entries are moved to $all_recipients
         * and one of $to, $cc, or $bcc.
         * This array is used only for addresses with IDN.
         *
         * @see PHPMailer::$to
         * @see PHPMailer::$cc
         * @see PHPMailer::$bcc
         * @see PHPMailer::$all_recipients
         *
         * @var array
         */
        protected $RecipientsQueue = [];
        /**
         * An array of reply-to names and addresses queued for validation.
         * In send(), valid and non duplicate entries are moved to $ReplyTo.
         * This array is used only for addresses with IDN.
         *
         * @see PHPMailer::$ReplyTo
         *
         * @var array
         */
        protected $ReplyToQueue = [];
        /**
         * The array of attachments.
         *
         * @var array
         */
        protected $attachment = [];
        /**
         * The array of custom headers.
         *
         * @var array
         */
        protected $CustomHeader = [];
        /**
         * The most recent Message-ID (including angular brackets).
         *
         * @var string
         */
        protected $lastMessageID = '';
        /**
         * The message's MIME type.
         *
         * @var string
         */
        protected $message_type = '';
        /**
         * The array of MIME boundary strings.
         *
         * @var array
         */
        protected $boundary = [];
        /**
         * The array of available text strings for the current language.
         *
         * @var array
         */
        protected $language = [];
        /**
         * The number of errors encountered.
         *
         * @var int
         */
        protected $error_count = 0;
        /**
         * The S/MIME certificate file path.
         *
         * @var string
         */
        protected $sign_cert_file = '';
        /**
         * The S/MIME key file path.
         *
         * @var string
         */
        protected $sign_key_file = '';
        /**
         * The optional S/MIME extra certificates ("CA Chain") file path.
         *
         * @var string
         */
        protected $sign_extracerts_file = '';
        /**
         * The S/MIME password for the key.
         * Used only if the key is encrypted.
         *
         * @var string
         */
        protected $sign_key_pass = '';
        /**
         * Whether to throw exceptions for errors.
         *
         * @var bool
         */
        protected $exceptions = false;
        /**
         * Unique ID used for message ID and boundaries.
         *
         * @var string
         */
        protected $uniqueid = '';
        /**
         * The PHPMailer Version number.
         *
         * @var string
         */
        const VERSION = '6.6.0';
        /**
         * Error severity: message only, continue processing.
         *
         * @var int
         */
        const STOP_MESSAGE = 0;
        /**
         * Error severity: message, likely ok to continue processing.
         *
         * @var int
         */
        const STOP_CONTINUE = 1;
        /**
         * Error severity: message, plus full stop, critical error reached.
         *
         * @var int
         */
        const STOP_CRITICAL = 2;
        /**
         * The SMTP standard CRLF line break.
         * If you want to change line break format, change static::$LE, not this.
         */
        const CRLF = "\r\n";
        /**
         * "Folding White Space" a white space string used for line folding.
         */
        const FWS = ' ';
        /**
         * SMTP RFC standard line ending; Carriage Return, Line Feed.
         *
         * @var string
         */
        protected static $LE = self::CRLF;
        /**
         * The maximum line length supported by mail().
         *
         * Background: mail() will sometimes corrupt messages
         * with headers headers longer than 65 chars, see #818.
         *
         * @var int
         */
        const MAIL_MAX_LINE_LENGTH = 63;
        /**
         * The maximum line length allowed by RFC 2822 section 2.1.1.
         *
         * @var int
         */
        const MAX_LINE_LENGTH = 998;
        /**
         * The lower maximum line length allowed by RFC 2822 section 2.1.1.
         * This length does NOT include the line break
         * 76 means that lines will be 77 or 78 chars depending on whether
         * the line break format is LF or CRLF; both are valid.
         *
         * @var int
         */
        const STD_LINE_LENGTH = 76;
        /**
         * Constructor.
         *
         * @param bool $exceptions Should we throw external exceptions?
         */
        public function __construct($exceptions = null)
        {
        }
        /**
         * Destructor.
         */
        public function __destruct()
        {
        }
        /**
         * Call mail() in a safe_mode-aware fashion.
         * Also, unless sendmail_path points to sendmail (or something that
         * claims to be sendmail), don't pass params (not a perfect fix,
         * but it will do).
         *
         * @param string      $to      To
         * @param string      $subject Subject
         * @param string      $body    Message Body
         * @param string      $header  Additional Header(s)
         * @param string|null $params  Params
         *
         * @return bool
         */
        private function mailPassthru($to, $subject, $body, $header, $params)
        {
        }
        /**
         * Output debugging info via a user-defined method.
         * Only generates output if debug output is enabled.
         *
         * @see PHPMailer::$Debugoutput
         * @see PHPMailer::$SMTPDebug
         *
         * @param string $str
         */
        protected function edebug($str)
        {
        }
        /**
         * Sets message type to HTML or plain.
         *
         * @param bool $isHtml True for HTML mode
         */
        public function isHTML($isHtml = true)
        {
        }
        /**
         * Send messages using SMTP.
         */
        public function isSMTP()
        {
        }
        /**
         * Send messages using PHP's mail() function.
         */
        public function isMail()
        {
        }
        /**
         * Send messages using $Sendmail.
         */
        public function isSendmail()
        {
        }
        /**
         * Send messages using qmail.
         */
        public function isQmail()
        {
        }
        /**
         * Add a "To" address.
         *
         * @param string $address The email address to send to
         * @param string $name
         *
         * @throws Exception
         *
         * @return bool true on success, false if address already used or invalid in some way
         */
        public function addAddress($address, $name = '')
        {
        }
        /**
         * Add a "CC" address.
         *
         * @param string $address The email address to send to
         * @param string $name
         *
         * @throws Exception
         *
         * @return bool true on success, false if address already used or invalid in some way
         */
        public function addCC($address, $name = '')
        {
        }
        /**
         * Add a "BCC" address.
         *
         * @param string $address The email address to send to
         * @param string $name
         *
         * @throws Exception
         *
         * @return bool true on success, false if address already used or invalid in some way
         */
        public function addBCC($address, $name = '')
        {
        }
        /**
         * Add a "Reply-To" address.
         *
         * @param string $address The email address to reply to
         * @param string $name
         *
         * @throws Exception
         *
         * @return bool true on success, false if address already used or invalid in some way
         */
        public function addReplyTo($address, $name = '')
        {
        }
        /**
         * Add an address to one of the recipient arrays or to the ReplyTo array. Because PHPMailer
         * can't validate addresses with an IDN without knowing the PHPMailer::$CharSet (that can still
         * be modified after calling this function), addition of such addresses is delayed until send().
         * Addresses that have been added already return false, but do not throw exceptions.
         *
         * @param string $kind    One of 'to', 'cc', 'bcc', or 'ReplyTo'
         * @param string $address The email address to send, resp. to reply to
         * @param string $name
         *
         * @throws Exception
         *
         * @return bool true on success, false if address already used or invalid in some way
         */
        protected function addOrEnqueueAnAddress($kind, $address, $name)
        {
        }
        /**
         * Add an address to one of the recipient arrays or to the ReplyTo array.
         * Addresses that have been added already return false, but do not throw exceptions.
         *
         * @param string $kind    One of 'to', 'cc', 'bcc', or 'ReplyTo'
         * @param string $address The email address to send, resp. to reply to
         * @param string $name
         *
         * @throws Exception
         *
         * @return bool true on success, false if address already used or invalid in some way
         */
        protected function addAnAddress($kind, $address, $name = '')
        {
        }
        /**
         * Parse and validate a string containing one or more RFC822-style comma-separated email addresses
         * of the form "display name <address>" into an array of name/address pairs.
         * Uses the imap_rfc822_parse_adrlist function if the IMAP extension is available.
         * Note that quotes in the name part are removed.
         *
         * @see http://www.andrew.cmu.edu/user/agreen1/testing/mrbs/web/Mail/RFC822.php A more careful implementation
         *
         * @param string $addrstr The address list string
         * @param bool   $useimap Whether to use the IMAP extension to parse the list
         * @param string $charset The charset to use when decoding the address list string.
         *
         * @return array
         */
        public static function parseAddresses($addrstr, $useimap = true, $charset = self::CHARSET_ISO88591)
        {
        }
        /**
         * Set the From and FromName properties.
         *
         * @param string $address
         * @param string $name
         * @param bool   $auto    Whether to also set the Sender address, defaults to true
         *
         * @throws Exception
         *
         * @return bool
         */
        public function setFrom($address, $name = '', $auto = true)
        {
        }
        /**
         * Return the Message-ID header of the last email.
         * Technically this is the value from the last time the headers were created,
         * but it's also the message ID of the last sent message except in
         * pathological cases.
         *
         * @return string
         */
        public function getLastMessageID()
        {
        }
        /**
         * Check that a string looks like an email address.
         * Validation patterns supported:
         * * `auto` Pick best pattern automatically;
         * * `pcre8` Use the squiloople.com pattern, requires PCRE > 8.0;
         * * `pcre` Use old PCRE implementation;
         * * `php` Use PHP built-in FILTER_VALIDATE_EMAIL;
         * * `html5` Use the pattern given by the HTML5 spec for 'email' type form input elements.
         * * `noregex` Don't use a regex: super fast, really dumb.
         * Alternatively you may pass in a callable to inject your own validator, for example:
         *
         * ```php
         * PHPMailer::validateAddress('user@example.com', function($address) {
         *     return (strpos($address, '@') !== false);
         * });
         * ```
         *
         * You can also set the PHPMailer::$validator static to a callable, allowing built-in methods to use your validator.
         *
         * @param string          $address       The email address to check
         * @param string|callable $patternselect Which pattern to use
         *
         * @return bool
         */
        public static function validateAddress($address, $patternselect = null)
        {
        }
        /**
         * Tells whether IDNs (Internationalized Domain Names) are supported or not. This requires the
         * `intl` and `mbstring` PHP extensions.
         *
         * @return bool `true` if required functions for IDN support are present
         */
        public static function idnSupported()
        {
        }
        /**
         * Converts IDN in given email address to its ASCII form, also known as punycode, if possible.
         * Important: Address must be passed in same encoding as currently set in PHPMailer::$CharSet.
         * This function silently returns unmodified address if:
         * - No conversion is necessary (i.e. domain name is not an IDN, or is already in ASCII form)
         * - Conversion to punycode is impossible (e.g. required PHP functions are not available)
         *   or fails for any reason (e.g. domain contains characters not allowed in an IDN).
         *
         * @see PHPMailer::$CharSet
         *
         * @param string $address The email address to convert
         *
         * @return string The encoded address in ASCII form
         */
        public function punyencodeAddress($address)
        {
        }
        /**
         * Create a message and send it.
         * Uses the sending method specified by $Mailer.
         *
         * @throws Exception
         *
         * @return bool false on error - See the ErrorInfo property for details of the error
         */
        public function send()
        {
        }
        /**
         * Prepare a message for sending.
         *
         * @throws Exception
         *
         * @return bool
         */
        public function preSend()
        {
        }
        /**
         * Actually send a message via the selected mechanism.
         *
         * @throws Exception
         *
         * @return bool
         */
        public function postSend()
        {
        }
        /**
         * Send mail using the $Sendmail program.
         *
         * @see PHPMailer::$Sendmail
         *
         * @param string $header The message headers
         * @param string $body   The message body
         *
         * @throws Exception
         *
         * @return bool
         */
        protected function sendmailSend($header, $body)
        {
        }
        /**
         * Fix CVE-2016-10033 and CVE-2016-10045 by disallowing potentially unsafe shell characters.
         * Note that escapeshellarg and escapeshellcmd are inadequate for our purposes, especially on Windows.
         *
         * @see https://github.com/PHPMailer/PHPMailer/issues/924 CVE-2016-10045 bug report
         *
         * @param string $string The string to be validated
         *
         * @return bool
         */
        protected static function isShellSafe($string)
        {
        }
        /**
         * Check whether a file path is of a permitted type.
         * Used to reject URLs and phar files from functions that access local file paths,
         * such as addAttachment.
         *
         * @param string $path A relative or absolute path to a file
         *
         * @return bool
         */
        protected static function isPermittedPath($path)
        {
        }
        /**
         * Check whether a file path is safe, accessible, and readable.
         *
         * @param string $path A relative or absolute path to a file
         *
         * @return bool
         */
        protected static function fileIsAccessible($path)
        {
        }
        /**
         * Send mail using the PHP mail() function.
         *
         * @see http://www.php.net/manual/en/book.mail.php
         *
         * @param string $header The message headers
         * @param string $body   The message body
         *
         * @throws Exception
         *
         * @return bool
         */
        protected function mailSend($header, $body)
        {
        }
        /**
         * Get an instance to use for SMTP operations.
         * Override this function to load your own SMTP implementation,
         * or set one with setSMTPInstance.
         *
         * @return SMTP
         */
        public function getSMTPInstance()
        {
        }
        /**
         * Provide an instance to use for SMTP operations.
         *
         * @return SMTP
         */
        public function setSMTPInstance(\PHPMailer\PHPMailer\SMTP $smtp)
        {
        }
        /**
         * Send mail via SMTP.
         * Returns false if there is a bad MAIL FROM, RCPT, or DATA input.
         *
         * @see PHPMailer::setSMTPInstance() to use a different class.
         *
         * @uses \PHPMailer\PHPMailer\SMTP
         *
         * @param string $header The message headers
         * @param string $body   The message body
         *
         * @throws Exception
         *
         * @return bool
         */
        protected function smtpSend($header, $body)
        {
        }
        /**
         * Initiate a connection to an SMTP server.
         * Returns false if the operation failed.
         *
         * @param array $options An array of options compatible with stream_context_create()
         *
         * @throws Exception
         *
         * @uses \PHPMailer\PHPMailer\SMTP
         *
         * @return bool
         */
        public function smtpConnect($options = null)
        {
        }
        /**
         * Close the active SMTP session if one exists.
         */
        public function smtpClose()
        {
        }
        /**
         * Set the language for error messages.
         * The default language is English.
         *
         * @param string $langcode  ISO 639-1 2-character language code (e.g. French is "fr")
         *                          Optionally, the language code can be enhanced with a 4-character
         *                          script annotation and/or a 2-character country annotation.
         * @param string $lang_path Path to the language file directory, with trailing separator (slash)
         *                          Do not set this from user input!
         *
         * @return bool Returns true if the requested language was loaded, false otherwise.
         */
        public function setLanguage($langcode = 'en', $lang_path = '')
        {
        }
        /**
         * Get the array of strings for the current language.
         *
         * @return array
         */
        public function getTranslations()
        {
        }
        /**
         * Create recipient headers.
         *
         * @param string $type
         * @param array  $addr An array of recipients,
         *                     where each recipient is a 2-element indexed array with element 0 containing an address
         *                     and element 1 containing a name, like:
         *                     [['joe@example.com', 'Joe User'], ['zoe@example.com', 'Zoe User']]
         *
         * @return string
         */
        public function addrAppend($type, $addr)
        {
        }
        /**
         * Format an address for use in a message header.
         *
         * @param array $addr A 2-element indexed array, element 0 containing an address, element 1 containing a name like
         *                    ['joe@example.com', 'Joe User']
         *
         * @return string
         */
        public function addrFormat($addr)
        {
        }
        /**
         * Word-wrap message.
         * For use with mailers that do not automatically perform wrapping
         * and for quoted-printable encoded messages.
         * Original written by philippe.
         *
         * @param string $message The message to wrap
         * @param int    $length  The line length to wrap to
         * @param bool   $qp_mode Whether to run in Quoted-Printable mode
         *
         * @return string
         */
        public function wrapText($message, $length, $qp_mode = false)
        {
        }
        /**
         * Find the last character boundary prior to $maxLength in a utf-8
         * quoted-printable encoded string.
         * Original written by Colin Brown.
         *
         * @param string $encodedText utf-8 QP text
         * @param int    $maxLength   Find the last character boundary prior to this length
         *
         * @return int
         */
        public function utf8CharBoundary($encodedText, $maxLength)
        {
        }
        /**
         * Apply word wrapping to the message body.
         * Wraps the message body to the number of chars set in the WordWrap property.
         * You should only do this to plain-text bodies as wrapping HTML tags may break them.
         * This is called automatically by createBody(), so you don't need to call it yourself.
         */
        public function setWordWrap()
        {
        }
        /**
         * Assemble message headers.
         *
         * @return string The assembled headers
         */
        public function createHeader()
        {
        }
        /**
         * Get the message MIME type headers.
         *
         * @return string
         */
        public function getMailMIME()
        {
        }
        /**
         * Returns the whole MIME message.
         * Includes complete headers and body.
         * Only valid post preSend().
         *
         * @see PHPMailer::preSend()
         *
         * @return string
         */
        public function getSentMIMEMessage()
        {
        }
        /**
         * Create a unique ID to use for boundaries.
         *
         * @return string
         */
        protected function generateId()
        {
        }
        /**
         * Assemble the message body.
         * Returns an empty string on failure.
         *
         * @throws Exception
         *
         * @return string The assembled message body
         */
        public function createBody()
        {
        }
        /**
         * Return the start of a message boundary.
         *
         * @param string $boundary
         * @param string $charSet
         * @param string $contentType
         * @param string $encoding
         *
         * @return string
         */
        protected function getBoundary($boundary, $charSet, $contentType, $encoding)
        {
        }
        /**
         * Return the end of a message boundary.
         *
         * @param string $boundary
         *
         * @return string
         */
        protected function endBoundary($boundary)
        {
        }
        /**
         * Set the message type.
         * PHPMailer only supports some preset message types, not arbitrary MIME structures.
         */
        protected function setMessageType()
        {
        }
        /**
         * Format a header line.
         *
         * @param string     $name
         * @param string|int $value
         *
         * @return string
         */
        public function headerLine($name, $value)
        {
        }
        /**
         * Return a formatted mail line.
         *
         * @param string $value
         *
         * @return string
         */
        public function textLine($value)
        {
        }
        /**
         * Add an attachment from a path on the filesystem.
         * Never use a user-supplied path to a file!
         * Returns false if the file could not be found or read.
         * Explicitly *does not* support passing URLs; PHPMailer is not an HTTP client.
         * If you need to do that, fetch the resource yourself and pass it in via a local file or string.
         *
         * @param string $path        Path to the attachment
         * @param string $name        Overrides the attachment name
         * @param string $encoding    File encoding (see $Encoding)
         * @param string $type        MIME type, e.g. `image/jpeg`; determined automatically from $path if not specified
         * @param string $disposition Disposition to use
         *
         * @throws Exception
         *
         * @return bool
         */
        public function addAttachment($path, $name = '', $encoding = self::ENCODING_BASE64, $type = '', $disposition = 'attachment')
        {
        }
        /**
         * Return the array of attachments.
         *
         * @return array
         */
        public function getAttachments()
        {
        }
        /**
         * Attach all file, string, and binary attachments to the message.
         * Returns an empty string on failure.
         *
         * @param string $disposition_type
         * @param string $boundary
         *
         * @throws Exception
         *
         * @return string
         */
        protected function attachAll($disposition_type, $boundary)
        {
        }
        /**
         * Encode a file attachment in requested format.
         * Returns an empty string on failure.
         *
         * @param string $path     The full path to the file
         * @param string $encoding The encoding to use; one of 'base64', '7bit', '8bit', 'binary', 'quoted-printable'
         *
         * @return string
         */
        protected function encodeFile($path, $encoding = self::ENCODING_BASE64)
        {
        }
        /**
         * Encode a string in requested format.
         * Returns an empty string on failure.
         *
         * @param string $str      The text to encode
         * @param string $encoding The encoding to use; one of 'base64', '7bit', '8bit', 'binary', 'quoted-printable'
         *
         * @throws Exception
         *
         * @return string
         */
        public function encodeString($str, $encoding = self::ENCODING_BASE64)
        {
        }
        /**
         * Encode a header value (not including its label) optimally.
         * Picks shortest of Q, B, or none. Result includes folding if needed.
         * See RFC822 definitions for phrase, comment and text positions.
         *
         * @param string $str      The header value to encode
         * @param string $position What context the string will be used in
         *
         * @return string
         */
        public function encodeHeader($str, $position = 'text')
        {
        }
        /**
         * Check if a string contains multi-byte characters.
         *
         * @param string $str multi-byte text to wrap encode
         *
         * @return bool
         */
        public function hasMultiBytes($str)
        {
        }
        /**
         * Does a string contain any 8-bit chars (in any charset)?
         *
         * @param string $text
         *
         * @return bool
         */
        public function has8bitChars($text)
        {
        }
        /**
         * Encode and wrap long multibyte strings for mail headers
         * without breaking lines within a character.
         * Adapted from a function by paravoid.
         *
         * @see http://www.php.net/manual/en/function.mb-encode-mimeheader.php#60283
         *
         * @param string $str       multi-byte text to wrap encode
         * @param string $linebreak string to use as linefeed/end-of-line
         *
         * @return string
         */
        public function base64EncodeWrapMB($str, $linebreak = null)
        {
        }
        /**
         * Encode a string in quoted-printable format.
         * According to RFC2045 section 6.7.
         *
         * @param string $string The text to encode
         *
         * @return string
         */
        public function encodeQP($string)
        {
        }
        /**
         * Encode a string using Q encoding.
         *
         * @see http://tools.ietf.org/html/rfc2047#section-4.2
         *
         * @param string $str      the text to encode
         * @param string $position Where the text is going to be used, see the RFC for what that means
         *
         * @return string
         */
        public function encodeQ($str, $position = 'text')
        {
        }
        /**
         * Add a string or binary attachment (non-filesystem).
         * This method can be used to attach ascii or binary data,
         * such as a BLOB record from a database.
         *
         * @param string $string      String attachment data
         * @param string $filename    Name of the attachment
         * @param string $encoding    File encoding (see $Encoding)
         * @param string $type        File extension (MIME) type
         * @param string $disposition Disposition to use
         *
         * @throws Exception
         *
         * @return bool True on successfully adding an attachment
         */
        public function addStringAttachment($string, $filename, $encoding = self::ENCODING_BASE64, $type = '', $disposition = 'attachment')
        {
        }
        /**
         * Add an embedded (inline) attachment from a file.
         * This can include images, sounds, and just about any other document type.
         * These differ from 'regular' attachments in that they are intended to be
         * displayed inline with the message, not just attached for download.
         * This is used in HTML messages that embed the images
         * the HTML refers to using the $cid value.
         * Never use a user-supplied path to a file!
         *
         * @param string $path        Path to the attachment
         * @param string $cid         Content ID of the attachment; Use this to reference
         *                            the content when using an embedded image in HTML
         * @param string $name        Overrides the attachment name
         * @param string $encoding    File encoding (see $Encoding)
         * @param string $type        File MIME type
         * @param string $disposition Disposition to use
         *
         * @throws Exception
         *
         * @return bool True on successfully adding an attachment
         */
        public function addEmbeddedImage($path, $cid, $name = '', $encoding = self::ENCODING_BASE64, $type = '', $disposition = 'inline')
        {
        }
        /**
         * Add an embedded stringified attachment.
         * This can include images, sounds, and just about any other document type.
         * If your filename doesn't contain an extension, be sure to set the $type to an appropriate MIME type.
         *
         * @param string $string      The attachment binary data
         * @param string $cid         Content ID of the attachment; Use this to reference
         *                            the content when using an embedded image in HTML
         * @param string $name        A filename for the attachment. If this contains an extension,
         *                            PHPMailer will attempt to set a MIME type for the attachment.
         *                            For example 'file.jpg' would get an 'image/jpeg' MIME type.
         * @param string $encoding    File encoding (see $Encoding), defaults to 'base64'
         * @param string $type        MIME type - will be used in preference to any automatically derived type
         * @param string $disposition Disposition to use
         *
         * @throws Exception
         *
         * @return bool True on successfully adding an attachment
         */
        public function addStringEmbeddedImage($string, $cid, $name = '', $encoding = self::ENCODING_BASE64, $type = '', $disposition = 'inline')
        {
        }
        /**
         * Validate encodings.
         *
         * @param string $encoding
         *
         * @return bool
         */
        protected function validateEncoding($encoding)
        {
        }
        /**
         * Check if an embedded attachment is present with this cid.
         *
         * @param string $cid
         *
         * @return bool
         */
        protected function cidExists($cid)
        {
        }
        /**
         * Check if an inline attachment is present.
         *
         * @return bool
         */
        public function inlineImageExists()
        {
        }
        /**
         * Check if an attachment (non-inline) is present.
         *
         * @return bool
         */
        public function attachmentExists()
        {
        }
        /**
         * Check if this message has an alternative body set.
         *
         * @return bool
         */
        public function alternativeExists()
        {
        }
        /**
         * Clear queued addresses of given kind.
         *
         * @param string $kind 'to', 'cc', or 'bcc'
         */
        public function clearQueuedAddresses($kind)
        {
        }
        /**
         * Clear all To recipients.
         */
        public function clearAddresses()
        {
        }
        /**
         * Clear all CC recipients.
         */
        public function clearCCs()
        {
        }
        /**
         * Clear all BCC recipients.
         */
        public function clearBCCs()
        {
        }
        /**
         * Clear all ReplyTo recipients.
         */
        public function clearReplyTos()
        {
        }
        /**
         * Clear all recipient types.
         */
        public function clearAllRecipients()
        {
        }
        /**
         * Clear all filesystem, string, and binary attachments.
         */
        public function clearAttachments()
        {
        }
        /**
         * Clear all custom headers.
         */
        public function clearCustomHeaders()
        {
        }
        /**
         * Add an error message to the error container.
         *
         * @param string $msg
         */
        protected function setError($msg)
        {
        }
        /**
         * Return an RFC 822 formatted date.
         *
         * @return string
         */
        public static function rfcDate()
        {
        }
        /**
         * Get the server hostname.
         * Returns 'localhost.localdomain' if unknown.
         *
         * @return string
         */
        protected function serverHostname()
        {
        }
        /**
         * Validate whether a string contains a valid value to use as a hostname or IP address.
         * IPv6 addresses must include [], e.g. `[::1]`, not just `::1`.
         *
         * @param string $host The host name or IP address to check
         *
         * @return bool
         */
        public static function isValidHost($host)
        {
        }
        /**
         * Get an error message in the current language.
         *
         * @param string $key
         *
         * @return string
         */
        protected function lang($key)
        {
        }
        /**
         * Build an error message starting with a generic one and adding details if possible.
         *
         * @param string $base_key
         * @return string
         */
        private function getSmtpErrorMessage($base_key)
        {
        }
        /**
         * Check if an error occurred.
         *
         * @return bool True if an error did occur
         */
        public function isError()
        {
        }
        /**
         * Add a custom header.
         * $name value can be overloaded to contain
         * both header name and value (name:value).
         *
         * @param string      $name  Custom header name
         * @param string|null $value Header value
         *
         * @throws Exception
         */
        public function addCustomHeader($name, $value = null)
        {
        }
        /**
         * Returns all custom headers.
         *
         * @return array
         */
        public function getCustomHeaders()
        {
        }
        /**
         * Create a message body from an HTML string.
         * Automatically inlines images and creates a plain-text version by converting the HTML,
         * overwriting any existing values in Body and AltBody.
         * Do not source $message content from user input!
         * $basedir is prepended when handling relative URLs, e.g. <img src="/images/a.png"> and must not be empty
         * will look for an image file in $basedir/images/a.png and convert it to inline.
         * If you don't provide a $basedir, relative paths will be left untouched (and thus probably break in email)
         * Converts data-uri images into embedded attachments.
         * If you don't want to apply these transformations to your HTML, just set Body and AltBody directly.
         *
         * @param string        $message  HTML message string
         * @param string        $basedir  Absolute path to a base directory to prepend to relative paths to images
         * @param bool|callable $advanced Whether to use the internal HTML to text converter
         *                                or your own custom converter
         * @return string The transformed message body
         *
         * @throws Exception
         *
         * @see PHPMailer::html2text()
         */
        public function msgHTML($message, $basedir = '', $advanced = false)
        {
        }
        /**
         * Convert an HTML string into plain text.
         * This is used by msgHTML().
         * Note - older versions of this function used a bundled advanced converter
         * which was removed for license reasons in #232.
         * Example usage:
         *
         * ```php
         * //Use default conversion
         * $plain = $mail->html2text($html);
         * //Use your own custom converter
         * $plain = $mail->html2text($html, function($html) {
         *     $converter = new MyHtml2text($html);
         *     return $converter->get_text();
         * });
         * ```
         *
         * @param string        $html     The HTML text to convert
         * @param bool|callable $advanced Any boolean value to use the internal converter,
         *                                or provide your own callable for custom conversion.
         *                                *Never* pass user-supplied data into this parameter
         *
         * @return string
         */
        public function html2text($html, $advanced = false)
        {
        }
        /**
         * Get the MIME type for a file extension.
         *
         * @param string $ext File extension
         *
         * @return string MIME type of file
         */
        public static function _mime_types($ext = '')
        {
        }
        /**
         * Map a file name to a MIME type.
         * Defaults to 'application/octet-stream', i.e.. arbitrary binary data.
         *
         * @param string $filename A file name or full path, does not need to exist as a file
         *
         * @return string
         */
        public static function filenameToType($filename)
        {
        }
        /**
         * Multi-byte-safe pathinfo replacement.
         * Drop-in replacement for pathinfo(), but multibyte- and cross-platform-safe.
         *
         * @see http://www.php.net/manual/en/function.pathinfo.php#107461
         *
         * @param string     $path    A filename or path, does not need to exist as a file
         * @param int|string $options Either a PATHINFO_* constant,
         *                            or a string name to return only the specified piece
         *
         * @return string|array
         */
        public static function mb_pathinfo($path, $options = null)
        {
        }
        /**
         * Set or reset instance properties.
         * You should avoid this function - it's more verbose, less efficient, more error-prone and
         * harder to debug than setting properties directly.
         * Usage Example:
         * `$mail->set('SMTPSecure', static::ENCRYPTION_STARTTLS);`
         *   is the same as:
         * `$mail->SMTPSecure = static::ENCRYPTION_STARTTLS;`.
         *
         * @param string $name  The property name to set
         * @param mixed  $value The value to set the property to
         *
         * @return bool
         */
        public function set($name, $value = '')
        {
        }
        /**
         * Strip newlines to prevent header injection.
         *
         * @param string $str
         *
         * @return string
         */
        public function secureHeader($str)
        {
        }
        /**
         * Normalize line breaks in a string.
         * Converts UNIX LF, Mac CR and Windows CRLF line breaks into a single line break format.
         * Defaults to CRLF (for message bodies) and preserves consecutive breaks.
         *
         * @param string $text
         * @param string $breaktype What kind of line break to use; defaults to static::$LE
         *
         * @return string
         */
        public static function normalizeBreaks($text, $breaktype = null)
        {
        }
        /**
         * Remove trailing breaks from a string.
         *
         * @param string $text
         *
         * @return string The text to remove breaks from
         */
        public static function stripTrailingWSP($text)
        {
        }
        /**
         * Return the current line break format string.
         *
         * @return string
         */
        public static function getLE()
        {
        }
        /**
         * Set the line break format string, e.g. "\r\n".
         *
         * @param string $le
         */
        protected static function setLE($le)
        {
        }
        /**
         * Set the public and private key files and password for S/MIME signing.
         *
         * @param string $cert_filename
         * @param string $key_filename
         * @param string $key_pass            Password for private key
         * @param string $extracerts_filename Optional path to chain certificate
         */
        public function sign($cert_filename, $key_filename, $key_pass, $extracerts_filename = '')
        {
        }
        /**
         * Quoted-Printable-encode a DKIM header.
         *
         * @param string $txt
         *
         * @return string
         */
        public function DKIM_QP($txt)
        {
        }
        /**
         * Generate a DKIM signature.
         *
         * @param string $signHeader
         *
         * @throws Exception
         *
         * @return string The DKIM signature value
         */
        public function DKIM_Sign($signHeader)
        {
        }
        /**
         * Generate a DKIM canonicalization header.
         * Uses the 'relaxed' algorithm from RFC6376 section 3.4.2.
         * Canonicalized headers should *always* use CRLF, regardless of mailer setting.
         *
         * @see https://tools.ietf.org/html/rfc6376#section-3.4.2
         *
         * @param string $signHeader Header
         *
         * @return string
         */
        public function DKIM_HeaderC($signHeader)
        {
        }
        /**
         * Generate a DKIM canonicalization body.
         * Uses the 'simple' algorithm from RFC6376 section 3.4.3.
         * Canonicalized bodies should *always* use CRLF, regardless of mailer setting.
         *
         * @see https://tools.ietf.org/html/rfc6376#section-3.4.3
         *
         * @param string $body Message Body
         *
         * @return string
         */
        public function DKIM_BodyC($body)
        {
        }
        /**
         * Create the DKIM header and body in a new message header.
         *
         * @param string $headers_line Header lines
         * @param string $subject      Subject
         * @param string $body         Body
         *
         * @throws Exception
         *
         * @return string
         */
        public function DKIM_Add($headers_line, $subject, $body)
        {
        }
        /**
         * Detect if a string contains a line longer than the maximum line length
         * allowed by RFC 2822 section 2.1.1.
         *
         * @param string $str
         *
         * @return bool
         */
        public static function hasLineLongerThanMax($str)
        {
        }
        /**
         * If a string contains any "special" characters, double-quote the name,
         * and escape any double quotes with a backslash.
         *
         * @param string $str
         *
         * @return string
         *
         * @see RFC822 3.4.1
         */
        public static function quotedString($str)
        {
        }
        /**
         * Allows for public read access to 'to' property.
         * Before the send() call, queued addresses (i.e. with IDN) are not yet included.
         *
         * @return array
         */
        public function getToAddresses()
        {
        }
        /**
         * Allows for public read access to 'cc' property.
         * Before the send() call, queued addresses (i.e. with IDN) are not yet included.
         *
         * @return array
         */
        public function getCcAddresses()
        {
        }
        /**
         * Allows for public read access to 'bcc' property.
         * Before the send() call, queued addresses (i.e. with IDN) are not yet included.
         *
         * @return array
         */
        public function getBccAddresses()
        {
        }
        /**
         * Allows for public read access to 'ReplyTo' property.
         * Before the send() call, queued addresses (i.e. with IDN) are not yet included.
         *
         * @return array
         */
        public function getReplyToAddresses()
        {
        }
        /**
         * Allows for public read access to 'all_recipients' property.
         * Before the send() call, queued addresses (i.e. with IDN) are not yet included.
         *
         * @return array
         */
        public function getAllRecipientAddresses()
        {
        }
        /**
         * Perform a callback.
         *
         * @param bool   $isSent
         * @param array  $to
         * @param array  $cc
         * @param array  $bcc
         * @param string $subject
         * @param string $body
         * @param string $from
         * @param array  $extra
         */
        protected function doCallback($isSent, $to, $cc, $bcc, $subject, $body, $from, $extra)
        {
        }
        /**
         * Get the OAuthTokenProvider instance.
         *
         * @return OAuthTokenProvider
         */
        public function getOAuth()
        {
        }
        /**
         * Set an OAuthTokenProvider instance.
         */
        public function setOAuth(\PHPMailer\PHPMailer\OAuthTokenProvider $oauth)
        {
        }
    }
    /**
     * PHPMailer exception handler.
     *
     * @author Marcus Bointon <phpmailer@synchromedia.co.uk>
     */
    class Exception extends \Exception
    {
        /**
         * Prettify error message output.
         *
         * @return string
         */
        public function errorMessage()
        {
        }
    }
}
namespace {
    /*************************************************
    
    Snoopy - the PHP net client
    Author: Monte Ohrt <monte@ispi.net>
    Copyright (c): 1999-2008 New Digital Group, all rights reserved
    Version: 1.2.4
    
     * This library is free software; you can redistribute it and/or
     * modify it under the terms of the GNU Lesser General Public
     * License as published by the Free Software Foundation; either
     * version 2.1 of the License, or (at your option) any later version.
     *
     * This library is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     * Lesser General Public License for more details.
     *
     * You should have received a copy of the GNU Lesser General Public
     * License along with this library; if not, write to the Free Software
     * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
    
    You may contact the author of Snoopy by e-mail at:
    monte@ohrt.com
    
    The latest version of Snoopy can be obtained from:
    http://snoopy.sourceforge.net/
    
    *************************************************/
    class Snoopy
    {
        /**** Public variables ****/
        /* user definable vars */
        var $host = "www.php.net";
        // host name we are connecting to
        var $port = 80;
        // port we are connecting to
        var $proxy_host = "";
        // proxy host to use
        var $proxy_port = "";
        // proxy port to use
        var $proxy_user = "";
        // proxy user to use
        var $proxy_pass = "";
        // proxy password to use
        var $agent = "Snoopy v1.2.4";
        // agent we masquerade as
        var $referer = "";
        // referer info to pass
        var $cookies = array();
        // array of cookies to pass
        // $cookies["username"]="joe";
        var $rawheaders = array();
        // array of raw headers to send
        // $rawheaders["Content-type"]="text/html";
        var $maxredirs = 5;
        // http redirection depth maximum. 0 = disallow
        var $lastredirectaddr = "";
        // contains address of last redirected address
        var $offsiteok = \true;
        // allows redirection off-site
        var $maxframes = 0;
        // frame content depth maximum. 0 = disallow
        var $expandlinks = \true;
        // expand links to fully qualified URLs.
        // this only applies to fetchlinks()
        // submitlinks(), and submittext()
        var $passcookies = \true;
        // pass set cookies back through redirects
        // NOTE: this currently does not respect
        // dates, domains or paths.
        var $user = "";
        // user for http authentication
        var $pass = "";
        // password for http authentication
        // http accept types
        var $accept = "image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, */*";
        var $results = "";
        // where the content is put
        var $error = "";
        // error messages sent here
        var $response_code = "";
        // response code returned from server
        var $headers = array();
        // headers returned from server sent here
        var $maxlength = 500000;
        // max return data length (body)
        var $read_timeout = 0;
        // timeout on read operations, in seconds
        // supported only since PHP 4 Beta 4
        // set to 0 to disallow timeouts
        var $timed_out = \false;
        // if a read operation timed out
        var $status = 0;
        // http request status
        var $temp_dir = "/tmp";
        // temporary directory that the webserver
        // has permission to write to.
        // under Windows, this should be C:\temp
        var $curl_path = "/usr/local/bin/curl";
        // Snoopy will use cURL for fetching
        // SSL content if a full system path to
        // the cURL binary is supplied here.
        // set to false if you do not have
        // cURL installed. See http://curl.haxx.se
        // for details on installing cURL.
        // Snoopy does *not* use the cURL
        // library functions built into php,
        // as these functions are not stable
        // as of this Snoopy release.
        /**** Private variables ****/
        var $_maxlinelen = 4096;
        // max line length (headers)
        var $_httpmethod = "GET";
        // default http request method
        var $_httpversion = "HTTP/1.0";
        // default http request version
        var $_submit_method = "POST";
        // default submit method
        var $_submit_type = "application/x-www-form-urlencoded";
        // default submit type
        var $_mime_boundary = "";
        // MIME boundary for multipart/form-data submit type
        var $_redirectaddr = \false;
        // will be set if page fetched is a redirect
        var $_redirectdepth = 0;
        // increments on an http redirect
        var $_frameurls = array();
        // frame src urls
        var $_framedepth = 0;
        // increments on frame depth
        var $_isproxy = \false;
        // set if using a proxy server
        var $_fp_timeout = 30;
        // timeout for socket connection
        /*======================================================================*\
        	Function:	fetch
        	Purpose:	fetch the contents of a web page
        				(and possibly other protocols in the
        				future like ftp, nntp, gopher, etc.)
        	Input:		$URI	the location of the page to fetch
        	Output:		$this->results	the output text from the fetch
        \*======================================================================*/
        function fetch($URI)
        {
        }
        /*======================================================================*\
        	Function:	submit
        	Purpose:	submit an http form
        	Input:		$URI	the location to post the data
        				$formvars	the formvars to use.
        					format: $formvars["var"] = "val";
        				$formfiles  an array of files to submit
        					format: $formfiles["var"] = "/dir/filename.ext";
        	Output:		$this->results	the text output from the post
        \*======================================================================*/
        function submit($URI, $formvars = "", $formfiles = "")
        {
        }
        /*======================================================================*\
        	Function:	fetchlinks
        	Purpose:	fetch the links from a web page
        	Input:		$URI	where you are fetching from
        	Output:		$this->results	an array of the URLs
        \*======================================================================*/
        function fetchlinks($URI)
        {
        }
        /*======================================================================*\
        	Function:	fetchform
        	Purpose:	fetch the form elements from a web page
        	Input:		$URI	where you are fetching from
        	Output:		$this->results	the resulting html form
        \*======================================================================*/
        function fetchform($URI)
        {
        }
        /*======================================================================*\
        	Function:	fetchtext
        	Purpose:	fetch the text from a web page, stripping the links
        	Input:		$URI	where you are fetching from
        	Output:		$this->results	the text from the web page
        \*======================================================================*/
        function fetchtext($URI)
        {
        }
        /*======================================================================*\
        	Function:	submitlinks
        	Purpose:	grab links from a form submission
        	Input:		$URI	where you are submitting from
        	Output:		$this->results	an array of the links from the post
        \*======================================================================*/
        function submitlinks($URI, $formvars = "", $formfiles = "")
        {
        }
        /*======================================================================*\
        	Function:	submittext
        	Purpose:	grab text from a form submission
        	Input:		$URI	where you are submitting from
        	Output:		$this->results	the text from the web page
        \*======================================================================*/
        function submittext($URI, $formvars = "", $formfiles = "")
        {
        }
        /*======================================================================*\
        	Function:	set_submit_multipart
        	Purpose:	Set the form submission content type to
        				multipart/form-data
        \*======================================================================*/
        function set_submit_multipart()
        {
        }
        /*======================================================================*\
        	Function:	set_submit_normal
        	Purpose:	Set the form submission content type to
        				application/x-www-form-urlencoded
        \*======================================================================*/
        function set_submit_normal()
        {
        }
        /*======================================================================*\
        	Private functions
        \*======================================================================*/
        /*======================================================================*\
        	Function:	_striplinks
        	Purpose:	strip the hyperlinks from an html document
        	Input:		$document	document to strip.
        	Output:		$match		an array of the links
        \*======================================================================*/
        function _striplinks($document)
        {
        }
        /*======================================================================*\
        	Function:	_stripform
        	Purpose:	strip the form elements from an html document
        	Input:		$document	document to strip.
        	Output:		$match		an array of the links
        \*======================================================================*/
        function _stripform($document)
        {
        }
        /*======================================================================*\
        	Function:	_striptext
        	Purpose:	strip the text from an html document
        	Input:		$document	document to strip.
        	Output:		$text		the resulting text
        \*======================================================================*/
        function _striptext($document)
        {
        }
        /*======================================================================*\
        	Function:	_expandlinks
        	Purpose:	expand each link into a fully qualified URL
        	Input:		$links			the links to qualify
        				$URI			the full URI to get the base from
        	Output:		$expandedLinks	the expanded links
        \*======================================================================*/
        function _expandlinks($links, $URI)
        {
        }
        /*======================================================================*\
        	Function:	_httprequest
        	Purpose:	go get the http data from the server
        	Input:		$url		the url to fetch
        				$fp			the current open file pointer
        				$URI		the full URI
        				$body		body contents to send if any (POST)
        	Output:
        \*======================================================================*/
        function _httprequest($url, $fp, $URI, $http_method, $content_type = "", $body = "")
        {
        }
        /*======================================================================*\
        	Function:	_httpsrequest
        	Purpose:	go get the https data from the server using curl
        	Input:		$url		the url to fetch
        				$URI		the full URI
        				$body		body contents to send if any (POST)
        	Output:
        \*======================================================================*/
        function _httpsrequest($url, $URI, $http_method, $content_type = "", $body = "")
        {
        }
        /*======================================================================*\
        	Function:	setcookies()
        	Purpose:	set cookies for a redirection
        \*======================================================================*/
        function setcookies()
        {
        }
        /*======================================================================*\
        	Function:	_check_timeout
        	Purpose:	checks whether timeout has occurred
        	Input:		$fp	file pointer
        \*======================================================================*/
        function _check_timeout($fp)
        {
        }
        /*======================================================================*\
        	Function:	_connect
        	Purpose:	make a socket connection
        	Input:		$fp	file pointer
        \*======================================================================*/
        function _connect(&$fp)
        {
        }
        /*======================================================================*\
        	Function:	_disconnect
        	Purpose:	disconnect a socket connection
        	Input:		$fp	file pointer
        \*======================================================================*/
        function _disconnect($fp)
        {
        }
        /*======================================================================*\
        	Function:	_prepare_post_body
        	Purpose:	Prepare post body according to encoding type
        	Input:		$formvars  - form variables
        				$formfiles - form upload files
        	Output:		post body
        \*======================================================================*/
        function _prepare_post_body($formvars, $formfiles)
        {
        }
    }
    /**
     * Object Cache API: WP_Object_Cache class
     *
     * @package WordPress
     * @subpackage Cache
     * @since 5.4.0
     */
    /**
     * Core class that implements an object cache.
     *
     * The WordPress Object Cache is used to save on trips to the database. The
     * Object Cache stores all of the cache data to memory and makes the cache
     * contents available by using a key, which is used to name and later retrieve
     * the cache contents.
     *
     * The Object Cache can be replaced by other caching mechanisms by placing files
     * in the wp-content folder which is looked at in wp-settings. If that file
     * exists, then this file will not be included.
     *
     * @since 2.0.0
     */
    class WP_Object_Cache
    {
        /**
         * Holds the cached objects.
         *
         * @since 2.0.0
         * @var array
         */
        private $cache = array();
        /**
         * The amount of times the cache data was already stored in the cache.
         *
         * @since 2.5.0
         * @var int
         */
        public $cache_hits = 0;
        /**
         * Amount of times the cache did not have the request in cache.
         *
         * @since 2.0.0
         * @var int
         */
        public $cache_misses = 0;
        /**
         * List of global cache groups.
         *
         * @since 3.0.0
         * @var array
         */
        protected $global_groups = array();
        /**
         * The blog prefix to prepend to keys in non-global groups.
         *
         * @since 3.5.0
         * @var string
         */
        private $blog_prefix;
        /**
         * Holds the value of is_multisite().
         *
         * @since 3.5.0
         * @var bool
         */
        private $multisite;
        /**
         * Sets up object properties; PHP 5 style constructor.
         *
         * @since 2.0.8
         */
        public function __construct()
        {
        }
        /**
         * Makes private properties readable for backward compatibility.
         *
         * @since 4.0.0
         *
         * @param string $name Property to get.
         * @return mixed Property.
         */
        public function __get($name)
        {
        }
        /**
         * Makes private properties settable for backward compatibility.
         *
         * @since 4.0.0
         *
         * @param string $name  Property to set.
         * @param mixed  $value Property value.
         * @return mixed Newly-set property.
         */
        public function __set($name, $value)
        {
        }
        /**
         * Makes private properties checkable for backward compatibility.
         *
         * @since 4.0.0
         *
         * @param string $name Property to check if set.
         * @return bool Whether the property is set.
         */
        public function __isset($name)
        {
        }
        /**
         * Makes private properties un-settable for backward compatibility.
         *
         * @since 4.0.0
         *
         * @param string $name Property to unset.
         */
        public function __unset($name)
        {
        }
        /**
         * Serves as a utility function to determine whether a key exists in the cache.
         *
         * @since 3.4.0
         *
         * @param int|string $key   Cache key to check for existence.
         * @param string     $group Cache group for the key existence check.
         * @return bool Whether the key exists in the cache for the given group.
         */
        protected function _exists($key, $group)
        {
        }
        /**
         * Adds data to the cache if it doesn't already exist.
         *
         * @since 2.0.0
         *
         * @uses WP_Object_Cache::_exists() Checks to see if the cache already has data.
         * @uses WP_Object_Cache::set()     Sets the data after the checking the cache
         *                                  contents existence.
         *
         * @param int|string $key    What to call the contents in the cache.
         * @param mixed      $data   The contents to store in the cache.
         * @param string     $group  Optional. Where to group the cache contents. Default 'default'.
         * @param int        $expire Optional. When to expire the cache contents, in seconds.
         *                           Default 0 (no expiration).
         * @return bool True on success, false if cache key and group already exist.
         */
        public function add($key, $data, $group = 'default', $expire = 0)
        {
        }
        /**
         * Adds multiple values to the cache in one call.
         *
         * @since 6.0.0
         *
         * @param array  $data   Array of keys and values to be added.
         * @param string $group  Optional. Where the cache contents are grouped. Default empty.
         * @param int    $expire Optional. When to expire the cache contents, in seconds.
         *                       Default 0 (no expiration).
         * @return bool[] Array of return values, grouped by key. Each value is either
         *                true on success, or false if cache key and group already exist.
         */
        public function add_multiple(array $data, $group = '', $expire = 0)
        {
        }
        /**
         * Replaces the contents in the cache, if contents already exist.
         *
         * @since 2.0.0
         *
         * @see WP_Object_Cache::set()
         *
         * @param int|string $key    What to call the contents in the cache.
         * @param mixed      $data   The contents to store in the cache.
         * @param string     $group  Optional. Where to group the cache contents. Default 'default'.
         * @param int        $expire Optional. When to expire the cache contents, in seconds.
         *                           Default 0 (no expiration).
         * @return bool True if contents were replaced, false if original value does not exist.
         */
        public function replace($key, $data, $group = 'default', $expire = 0)
        {
        }
        /**
         * Sets the data contents into the cache.
         *
         * The cache contents are grouped by the $group parameter followed by the
         * $key. This allows for duplicate IDs in unique groups. Therefore, naming of
         * the group should be used with care and should follow normal function
         * naming guidelines outside of core WordPress usage.
         *
         * The $expire parameter is not used, because the cache will automatically
         * expire for each time a page is accessed and PHP finishes. The method is
         * more for cache plugins which use files.
         *
         * @since 2.0.0
         *
         * @param int|string $key    What to call the contents in the cache.
         * @param mixed      $data   The contents to store in the cache.
         * @param string     $group  Optional. Where to group the cache contents. Default 'default'.
         * @param int        $expire Optional. Not used.
         * @return true Always returns true.
         */
        public function set($key, $data, $group = 'default', $expire = 0)
        {
        }
        /**
         * Sets multiple values to the cache in one call.
         *
         * @since 6.0.0
         *
         * @param array  $data   Array of key and value to be set.
         * @param string $group  Optional. Where the cache contents are grouped. Default empty.
         * @param int    $expire Optional. When to expire the cache contents, in seconds.
         *                       Default 0 (no expiration).
         * @return bool[] Array of return values, grouped by key. Each value is always true.
         */
        public function set_multiple(array $data, $group = '', $expire = 0)
        {
        }
        /**
         * Retrieves the cache contents, if it exists.
         *
         * The contents will be first attempted to be retrieved by searching by the
         * key in the cache group. If the cache is hit (success) then the contents
         * are returned.
         *
         * On failure, the number of cache misses will be incremented.
         *
         * @since 2.0.0
         *
         * @param int|string $key   The key under which the cache contents are stored.
         * @param string     $group Optional. Where the cache contents are grouped. Default 'default'.
         * @param bool       $force Optional. Unused. Whether to force an update of the local cache
         *                          from the persistent cache. Default false.
         * @param bool       $found Optional. Whether the key was found in the cache (passed by reference).
         *                          Disambiguates a return of false, a storable value. Default null.
         * @return mixed|false The cache contents on success, false on failure to retrieve contents.
         */
        public function get($key, $group = 'default', $force = \false, &$found = \null)
        {
        }
        /**
         * Retrieves multiple values from the cache in one call.
         *
         * @since 5.5.0
         *
         * @param array  $keys  Array of keys under which the cache contents are stored.
         * @param string $group Optional. Where the cache contents are grouped. Default 'default'.
         * @param bool   $force Optional. Whether to force an update of the local cache
         *                      from the persistent cache. Default false.
         * @return array Array of return values, grouped by key. Each value is either
         *               the cache contents on success, or false on failure.
         */
        public function get_multiple($keys, $group = 'default', $force = \false)
        {
        }
        /**
         * Removes the contents of the cache key in the group.
         *
         * If the cache key does not exist in the group, then nothing will happen.
         *
         * @since 2.0.0
         *
         * @param int|string $key        What the contents in the cache are called.
         * @param string     $group      Optional. Where the cache contents are grouped. Default 'default'.
         * @param bool       $deprecated Optional. Unused. Default false.
         * @return bool True on success, false if the contents were not deleted.
         */
        public function delete($key, $group = 'default', $deprecated = \false)
        {
        }
        /**
         * Deletes multiple values from the cache in one call.
         *
         * @since 6.0.0
         *
         * @param array  $keys  Array of keys to be deleted.
         * @param string $group Optional. Where the cache contents are grouped. Default empty.
         * @return bool[] Array of return values, grouped by key. Each value is either
         *                true on success, or false if the contents were not deleted.
         */
        public function delete_multiple(array $keys, $group = '')
        {
        }
        /**
         * Increments numeric cache item's value.
         *
         * @since 3.3.0
         *
         * @param int|string $key    The cache key to increment.
         * @param int        $offset Optional. The amount by which to increment the item's value.
         *                           Default 1.
         * @param string     $group  Optional. The group the key is in. Default 'default'.
         * @return int|false The item's new value on success, false on failure.
         */
        public function incr($key, $offset = 1, $group = 'default')
        {
        }
        /**
         * Decrements numeric cache item's value.
         *
         * @since 3.3.0
         *
         * @param int|string $key    The cache key to decrement.
         * @param int        $offset Optional. The amount by which to decrement the item's value.
         *                           Default 1.
         * @param string     $group  Optional. The group the key is in. Default 'default'.
         * @return int|false The item's new value on success, false on failure.
         */
        public function decr($key, $offset = 1, $group = 'default')
        {
        }
        /**
         * Clears the object cache of all data.
         *
         * @since 2.0.0
         *
         * @return true Always returns true.
         */
        public function flush()
        {
        }
        /**
         * Sets the list of global cache groups.
         *
         * @since 3.0.0
         *
         * @param string|string[] $groups List of groups that are global.
         */
        public function add_global_groups($groups)
        {
        }
        /**
         * Switches the internal blog ID.
         *
         * This changes the blog ID used to create keys in blog specific groups.
         *
         * @since 3.5.0
         *
         * @param int $blog_id Blog ID.
         */
        public function switch_to_blog($blog_id)
        {
        }
        /**
         * Resets cache keys.
         *
         * @since 3.0.0
         *
         * @deprecated 3.5.0 Use WP_Object_Cache::switch_to_blog()
         * @see switch_to_blog()
         */
        public function reset()
        {
        }
        /**
         * Echoes the stats of the caching.
         *
         * Gives the cache hits, and cache misses. Also prints every cached group,
         * key and the data.
         *
         * @since 2.0.0
         */
        public function stats()
        {
        }
    }
    /**
     * Blocks API: WP_Block_Styles_Registry class
     *
     * @package WordPress
     * @subpackage Blocks
     * @since 5.3.0
     */
    /**
     * Class used for interacting with block styles.
     *
     * @since 5.3.0
     */
    final class WP_Block_Styles_Registry
    {
        /**
         * Registered block styles, as `$block_name => $block_style_name => $block_style_properties` multidimensional arrays.
         *
         * @since 5.3.0
         *
         * @var array[]
         */
        private $registered_block_styles = array();
        /**
         * Container for the main instance of the class.
         *
         * @since 5.3.0
         *
         * @var WP_Block_Styles_Registry|null
         */
        private static $instance = \null;
        /**
         * Registers a block style for the given block type.
         *
         * @since 5.3.0
         *
         * @param string $block_name       Block type name including namespace.
         * @param array  $style_properties Array containing the properties of the style name, label,
         *                                 is_default, style_handle (name of the stylesheet to be enqueued),
         *                                 inline_style (string containing the CSS to be added).
         * @return bool True if the block style was registered with success and false otherwise.
         */
        public function register($block_name, $style_properties)
        {
        }
        /**
         * Unregisters a block style of the given block type.
         *
         * @since 5.3.0
         *
         * @param string $block_name       Block type name including namespace.
         * @param string $block_style_name Block style name.
         * @return bool True if the block style was unregistered with success and false otherwise.
         */
        public function unregister($block_name, $block_style_name)
        {
        }
        /**
         * Retrieves the properties of a registered block style for the given block type.
         *
         * @since 5.3.0
         *
         * @param string $block_name       Block type name including namespace.
         * @param string $block_style_name Block style name.
         * @return array Registered block style properties.
         */
        public function get_registered($block_name, $block_style_name)
        {
        }
        /**
         * Retrieves all registered block styles.
         *
         * @since 5.3.0
         *
         * @return array[] Array of arrays containing the registered block styles properties grouped by block type.
         */
        public function get_all_registered()
        {
        }
        /**
         * Retrieves registered block styles for a specific block type.
         *
         * @since 5.3.0
         *
         * @param string $block_name Block type name including namespace.
         * @return array[] Array whose keys are block style names and whose values are block style properties.
         */
        public function get_registered_styles_for_block($block_name)
        {
        }
        /**
         * Checks if a block style is registered for the given block type.
         *
         * @since 5.3.0
         *
         * @param string $block_name       Block type name including namespace.
         * @param string $block_style_name Block style name.
         * @return bool True if the block style is registered, false otherwise.
         */
        public function is_registered($block_name, $block_style_name)
        {
        }
        /**
         * Utility method to retrieve the main instance of the class.
         *
         * The instance will be created if it does not exist yet.
         *
         * @since 5.3.0
         *
         * @return WP_Block_Styles_Registry The main instance.
         */
        public static function get_instance()
        {
        }
    }
    /**
     * Diff API: WP_Text_Diff_Renderer_Table class
     *
     * @package WordPress
     * @subpackage Diff
     * @since 4.7.0
     */
    /**
     * Table renderer to display the diff lines.
     *
     * @since 2.6.0
     * @uses Text_Diff_Renderer Extends
     */
    class WP_Text_Diff_Renderer_Table extends \Text_Diff_Renderer
    {
        /**
         * @see Text_Diff_Renderer::_leading_context_lines
         * @var int
         * @since 2.6.0
         */
        public $_leading_context_lines = 10000;
        /**
         * @see Text_Diff_Renderer::_trailing_context_lines
         * @var int
         * @since 2.6.0
         */
        public $_trailing_context_lines = 10000;
        /**
         * Threshold for when a diff should be saved or omitted.
         *
         * @var float
         * @since 2.6.0
         */
        protected $_diff_threshold = 0.6;
        /**
         * Inline display helper object name.
         *
         * @var string
         * @since 2.6.0
         */
        protected $inline_diff_renderer = 'WP_Text_Diff_Renderer_inline';
        /**
         * Should we show the split view or not
         *
         * @var string
         * @since 3.6.0
         */
        protected $_show_split_view = \true;
        protected $compat_fields = array('_show_split_view', 'inline_diff_renderer', '_diff_threshold');
        /**
         * Caches the output of count_chars() in compute_string_distance()
         *
         * @var array
         * @since 5.0.0
         */
        protected $count_cache = array();
        /**
         * Caches the difference calculation in compute_string_distance()
         *
         * @var array
         * @since 5.0.0
         */
        protected $difference_cache = array();
        /**
         * Constructor - Call parent constructor with params array.
         *
         * This will set class properties based on the key value pairs in the array.
         *
         * @since 2.6.0
         *
         * @param array $params
         */
        public function __construct($params = array())
        {
        }
        /**
         * @ignore
         *
         * @param string $header
         * @return string
         */
        public function _startBlock($header)
        {
        }
        /**
         * @ignore
         *
         * @param array  $lines
         * @param string $prefix
         */
        public function _lines($lines, $prefix = ' ')
        {
        }
        /**
         * @ignore
         *
         * @param string $line HTML-escape the value.
         * @return string
         */
        public function addedLine($line)
        {
        }
        /**
         * @ignore
         *
         * @param string $line HTML-escape the value.
         * @return string
         */
        public function deletedLine($line)
        {
        }
        /**
         * @ignore
         *
         * @param string $line HTML-escape the value.
         * @return string
         */
        public function contextLine($line)
        {
        }
        /**
         * @ignore
         *
         * @return string
         */
        public function emptyLine()
        {
        }
        /**
         * @ignore
         *
         * @param array $lines
         * @param bool  $encode
         * @return string
         */
        public function _added($lines, $encode = \true)
        {
        }
        /**
         * @ignore
         *
         * @param array $lines
         * @param bool  $encode
         * @return string
         */
        public function _deleted($lines, $encode = \true)
        {
        }
        /**
         * @ignore
         *
         * @param array $lines
         * @param bool  $encode
         * @return string
         */
        public function _context($lines, $encode = \true)
        {
        }
        /**
         * Process changed lines to do word-by-word diffs for extra highlighting.
         *
         * (TRAC style) sometimes these lines can actually be deleted or added rows.
         * We do additional processing to figure that out
         *
         * @since 2.6.0
         *
         * @param array $orig
         * @param array $final
         * @return string
         */
        public function _changed($orig, $final)
        {
        }
        /**
         * Takes changed blocks and matches which rows in orig turned into which rows in final.
         *
         * @since 2.6.0
         *
         * @param array $orig  Lines of the original version of the text.
         * @param array $final Lines of the final version of the text.
         * @return array {
         *     Array containing results of comparing the original text to the final text.
         *
         *     @type array $orig_matches  Associative array of original matches. Index == row
         *                                number of `$orig`, value == corresponding row number
         *                                of that same line in `$final` or 'x' if there is no
         *                                corresponding row (indicating it is a deleted line).
         *     @type array $final_matches Associative array of final matches. Index == row
         *                                number of `$final`, value == corresponding row number
         *                                of that same line in `$orig` or 'x' if there is no
         *                                corresponding row (indicating it is a new line).
         *     @type array $orig_rows     Associative array of interleaved rows of `$orig` with
         *                                blanks to keep matches aligned with side-by-side diff
         *                                of `$final`. A value >= 0 corresponds to index of `$orig`.
         *                                Value < 0 indicates a blank row.
         *     @type array $final_rows    Associative array of interleaved rows of `$final` with
         *                                blanks to keep matches aligned with side-by-side diff
         *                                of `$orig`. A value >= 0 corresponds to index of `$final`.
         *                                Value < 0 indicates a blank row.
         * }
         */
        public function interleave_changed_lines($orig, $final)
        {
        }
        /**
         * Computes a number that is intended to reflect the "distance" between two strings.
         *
         * @since 2.6.0
         *
         * @param string $string1
         * @param string $string2
         * @return int
         */
        public function compute_string_distance($string1, $string2)
        {
        }
        /**
         * @ignore
         * @since 2.6.0
         *
         * @param int $a
         * @param int $b
         * @return int
         */
        public function difference($a, $b)
        {
        }
        /**
         * Make private properties readable for backward compatibility.
         *
         * @since 4.0.0
         *
         * @param string $name Property to get.
         * @return mixed Property.
         */
        public function __get($name)
        {
        }
        /**
         * Make private properties settable for backward compatibility.
         *
         * @since 4.0.0
         *
         * @param string $name  Property to check if set.
         * @param mixed  $value Property value.
         * @return mixed Newly-set property.
         */
        public function __set($name, $value)
        {
        }
        /**
         * Make private properties checkable for backward compatibility.
         *
         * @since 4.0.0
         *
         * @param string $name Property to check if set.
         * @return bool Whether the property is set.
         */
        public function __isset($name)
        {
        }
        /**
         * Make private properties un-settable for backward compatibility.
         *
         * @since 4.0.0
         *
         * @param string $name Property to unset.
         */
        public function __unset($name)
        {
        }
    }
    /**
     * Block support flags.
     *
     * @package WordPress
     *
     * @since 5.6.0
     */
    /**
     * Class encapsulating and implementing Block Supports.
     *
     * @since 5.6.0
     *
     * @access private
     */
    class WP_Block_Supports
    {
        /**
         * Config.
         *
         * @since 5.6.0
         * @var array
         */
        private $block_supports = array();
        /**
         * Tracks the current block to be rendered.
         *
         * @since 5.6.0
         * @var array
         */
        public static $block_to_render = \null;
        /**
         * Container for the main instance of the class.
         *
         * @since 5.6.0
         * @var WP_Block_Supports|null
         */
        private static $instance = \null;
        /**
         * Utility method to retrieve the main instance of the class.
         *
         * The instance will be created if it does not exist yet.
         *
         * @since 5.6.0
         *
         * @return WP_Block_Supports The main instance.
         */
        public static function get_instance()
        {
        }
        /**
         * Initializes the block supports. It registers the block supports block attributes.
         *
         * @since 5.6.0
         */
        public static function init()
        {
        }
        /**
         * Registers a block support.
         *
         * @since 5.6.0
         *
         * @param string $block_support_name   Block support name.
         * @param array  $block_support_config Array containing the properties of the block support.
         */
        public function register($block_support_name, $block_support_config)
        {
        }
        /**
         * Generates an array of HTML attributes, such as classes, by applying to
         * the given block all of the features that the block supports.
         *
         * @since 5.6.0
         *
         * @return string[] Array of HTML attributes.
         */
        public function apply_block_supports()
        {
        }
        /**
         * Registers the block attributes required by the different block supports.
         *
         * @since 5.6.0
         */
        private function register_attributes()
        {
        }
    }
    /**
     * Taxonomy API: WP_Taxonomy class
     *
     * @package WordPress
     * @subpackage Taxonomy
     * @since 4.7.0
     */
    /**
     * Core class used for interacting with taxonomies.
     *
     * @since 4.7.0
     */
    final class WP_Taxonomy
    {
        /**
         * Taxonomy key.
         *
         * @since 4.7.0
         * @var string
         */
        public $name;
        /**
         * Name of the taxonomy shown in the menu. Usually plural.
         *
         * @since 4.7.0
         * @var string
         */
        public $label;
        /**
         * Labels object for this taxonomy.
         *
         * If not set, tag labels are inherited for non-hierarchical types
         * and category labels for hierarchical ones.
         *
         * @see get_taxonomy_labels()
         *
         * @since 4.7.0
         * @var stdClass
         */
        public $labels;
        /**
         * Default labels.
         *
         * @since 6.0.0
         * @var (string|null)[][] $default_labels
         */
        protected static $default_labels = array();
        /**
         * A short descriptive summary of what the taxonomy is for.
         *
         * @since 4.7.0
         * @var string
         */
        public $description = '';
        /**
         * Whether a taxonomy is intended for use publicly either via the admin interface or by front-end users.
         *
         * @since 4.7.0
         * @var bool
         */
        public $public = \true;
        /**
         * Whether the taxonomy is publicly queryable.
         *
         * @since 4.7.0
         * @var bool
         */
        public $publicly_queryable = \true;
        /**
         * Whether the taxonomy is hierarchical.
         *
         * @since 4.7.0
         * @var bool
         */
        public $hierarchical = \false;
        /**
         * Whether to generate and allow a UI for managing terms in this taxonomy in the admin.
         *
         * @since 4.7.0
         * @var bool
         */
        public $show_ui = \true;
        /**
         * Whether to show the taxonomy in the admin menu.
         *
         * If true, the taxonomy is shown as a submenu of the object type menu. If false, no menu is shown.
         *
         * @since 4.7.0
         * @var bool
         */
        public $show_in_menu = \true;
        /**
         * Whether the taxonomy is available for selection in navigation menus.
         *
         * @since 4.7.0
         * @var bool
         */
        public $show_in_nav_menus = \true;
        /**
         * Whether to list the taxonomy in the tag cloud widget controls.
         *
         * @since 4.7.0
         * @var bool
         */
        public $show_tagcloud = \true;
        /**
         * Whether to show the taxonomy in the quick/bulk edit panel.
         *
         * @since 4.7.0
         * @var bool
         */
        public $show_in_quick_edit = \true;
        /**
         * Whether to display a column for the taxonomy on its post type listing screens.
         *
         * @since 4.7.0
         * @var bool
         */
        public $show_admin_column = \false;
        /**
         * The callback function for the meta box display.
         *
         * @since 4.7.0
         * @var bool|callable
         */
        public $meta_box_cb = \null;
        /**
         * The callback function for sanitizing taxonomy data saved from a meta box.
         *
         * @since 5.1.0
         * @var callable
         */
        public $meta_box_sanitize_cb = \null;
        /**
         * An array of object types this taxonomy is registered for.
         *
         * @since 4.7.0
         * @var string[]
         */
        public $object_type = \null;
        /**
         * Capabilities for this taxonomy.
         *
         * @since 4.7.0
         * @var stdClass
         */
        public $cap;
        /**
         * Rewrites information for this taxonomy.
         *
         * @since 4.7.0
         * @var array|false
         */
        public $rewrite;
        /**
         * Query var string for this taxonomy.
         *
         * @since 4.7.0
         * @var string|false
         */
        public $query_var;
        /**
         * Function that will be called when the count is updated.
         *
         * @since 4.7.0
         * @var callable
         */
        public $update_count_callback;
        /**
         * Whether this taxonomy should appear in the REST API.
         *
         * Default false. If true, standard endpoints will be registered with
         * respect to $rest_base and $rest_controller_class.
         *
         * @since 4.7.4
         * @var bool $show_in_rest
         */
        public $show_in_rest;
        /**
         * The base path for this taxonomy's REST API endpoints.
         *
         * @since 4.7.4
         * @var string|bool $rest_base
         */
        public $rest_base;
        /**
         * The namespace for this taxonomy's REST API endpoints.
         *
         * @since 5.9.0
         * @var string|bool $rest_namespace
         */
        public $rest_namespace;
        /**
         * The controller for this taxonomy's REST API endpoints.
         *
         * Custom controllers must extend WP_REST_Controller.
         *
         * @since 4.7.4
         * @var string|bool $rest_controller_class
         */
        public $rest_controller_class;
        /**
         * The controller instance for this taxonomy's REST API endpoints.
         *
         * Lazily computed. Should be accessed using {@see WP_Taxonomy::get_rest_controller()}.
         *
         * @since 5.5.0
         * @var WP_REST_Controller $rest_controller
         */
        public $rest_controller;
        /**
         * The default term name for this taxonomy. If you pass an array you have
         * to set 'name' and optionally 'slug' and 'description'.
         *
         * @since 5.5.0
         * @var array|string
         */
        public $default_term;
        /**
         * Whether terms in this taxonomy should be sorted in the order they are provided to `wp_set_object_terms()`.
         *
         * Use this in combination with `'orderby' => 'term_order'` when fetching terms.
         *
         * @since 2.5.0
         * @var bool|null
         */
        public $sort = \null;
        /**
         * Array of arguments to automatically use inside `wp_get_object_terms()` for this taxonomy.
         *
         * @since 2.6.0
         * @var array|null
         */
        public $args = \null;
        /**
         * Whether it is a built-in taxonomy.
         *
         * @since 4.7.0
         * @var bool
         */
        public $_builtin;
        /**
         * Constructor.
         *
         * See the register_taxonomy() function for accepted arguments for `$args`.
         *
         * @since 4.7.0
         *
         * @global WP $wp Current WordPress environment instance.
         *
         * @param string       $taxonomy    Taxonomy key, must not exceed 32 characters.
         * @param array|string $object_type Name of the object type for the taxonomy object.
         * @param array|string $args        Optional. Array or query string of arguments for registering a taxonomy.
         *                                  Default empty array.
         */
        public function __construct($taxonomy, $object_type, $args = array())
        {
        }
        /**
         * Sets taxonomy properties.
         *
         * See the register_taxonomy() function for accepted arguments for `$args`.
         *
         * @since 4.7.0
         *
         * @param string|string[] $object_type Name or array of names of the object types for the taxonomy.
         * @param array|string    $args        Array or query string of arguments for registering a taxonomy.
         */
        public function set_props($object_type, $args)
        {
        }
        /**
         * Adds the necessary rewrite rules for the taxonomy.
         *
         * @since 4.7.0
         *
         * @global WP $wp Current WordPress environment instance.
         */
        public function add_rewrite_rules()
        {
        }
        /**
         * Removes any rewrite rules, permastructs, and rules for the taxonomy.
         *
         * @since 4.7.0
         *
         * @global WP $wp Current WordPress environment instance.
         */
        public function remove_rewrite_rules()
        {
        }
        /**
         * Registers the ajax callback for the meta box.
         *
         * @since 4.7.0
         */
        public function add_hooks()
        {
        }
        /**
         * Removes the ajax callback for the meta box.
         *
         * @since 4.7.0
         */
        public function remove_hooks()
        {
        }
        /**
         * Gets the REST API controller for this taxonomy.
         *
         * Will only instantiate the controller class once per request.
         *
         * @since 5.5.0
         *
         * @return WP_REST_Controller|null The controller instance, or null if the taxonomy
         *                                 is set not to show in rest.
         */
        public function get_rest_controller()
        {
        }
        /**
         * Returns the default labels for taxonomies.
         *
         * @since 6.0.0
         *
         * @return (string|null)[][] The default labels for taxonomies.
         */
        public static function get_default_labels()
        {
        }
        /**
         * Resets the cache for the default labels.
         *
         * @since 6.0.0
         */
        public static function reset_default_labels()
        {
        }
    }
    /**
     * Network API: WP_Network_Query class
     *
     * @package WordPress
     * @subpackage Multisite
     * @since 4.6.0
     */
    /**
     * Core class used for querying networks.
     *
     * @since 4.6.0
     *
     * @see WP_Network_Query::__construct() for accepted arguments.
     */
    class WP_Network_Query
    {
        /**
         * SQL for database query.
         *
         * @since 4.6.0
         * @var string
         */
        public $request;
        /**
         * SQL query clauses.
         *
         * @since 4.6.0
         * @var array
         */
        protected $sql_clauses = array('select' => '', 'from' => '', 'where' => array(), 'groupby' => '', 'orderby' => '', 'limits' => '');
        /**
         * Query vars set by the user.
         *
         * @since 4.6.0
         * @var array
         */
        public $query_vars;
        /**
         * Default values for query vars.
         *
         * @since 4.6.0
         * @var array
         */
        public $query_var_defaults;
        /**
         * List of networks located by the query.
         *
         * @since 4.6.0
         * @var array
         */
        public $networks;
        /**
         * The amount of found networks for the current query.
         *
         * @since 4.6.0
         * @var int
         */
        public $found_networks = 0;
        /**
         * The number of pages.
         *
         * @since 4.6.0
         * @var int
         */
        public $max_num_pages = 0;
        /**
         * Constructor.
         *
         * Sets up the network query, based on the query vars passed.
         *
         * @since 4.6.0
         *
         * @param string|array $query {
         *     Optional. Array or query string of network query parameters. Default empty.
         *
         *     @type int[]        $network__in          Array of network IDs to include. Default empty.
         *     @type int[]        $network__not_in      Array of network IDs to exclude. Default empty.
         *     @type bool         $count                Whether to return a network count (true) or array of network objects.
         *                                              Default false.
         *     @type string       $fields               Network fields to return. Accepts 'ids' (returns an array of network IDs)
         *                                              or empty (returns an array of complete network objects). Default empty.
         *     @type int          $number               Maximum number of networks to retrieve. Default empty (no limit).
         *     @type int          $offset               Number of networks to offset the query. Used to build LIMIT clause.
         *                                              Default 0.
         *     @type bool         $no_found_rows        Whether to disable the `SQL_CALC_FOUND_ROWS` query. Default true.
         *     @type string|array $orderby              Network status or array of statuses. Accepts 'id', 'domain', 'path',
         *                                              'domain_length', 'path_length' and 'network__in'. Also accepts false,
         *                                              an empty array, or 'none' to disable `ORDER BY` clause. Default 'id'.
         *     @type string       $order                How to order retrieved networks. Accepts 'ASC', 'DESC'. Default 'ASC'.
         *     @type string       $domain               Limit results to those affiliated with a given domain. Default empty.
         *     @type string[]     $domain__in           Array of domains to include affiliated networks for. Default empty.
         *     @type string[]     $domain__not_in       Array of domains to exclude affiliated networks for. Default empty.
         *     @type string       $path                 Limit results to those affiliated with a given path. Default empty.
         *     @type string[]     $path__in             Array of paths to include affiliated networks for. Default empty.
         *     @type string[]     $path__not_in         Array of paths to exclude affiliated networks for. Default empty.
         *     @type string       $search               Search term(s) to retrieve matching networks for. Default empty.
         *     @type bool         $update_network_cache Whether to prime the cache for found networks. Default true.
         * }
         */
        public function __construct($query = '')
        {
        }
        /**
         * Parses arguments passed to the network query with default query parameters.
         *
         * @since 4.6.0
         *
         * @param string|array $query WP_Network_Query arguments. See WP_Network_Query::__construct()
         */
        public function parse_query($query = '')
        {
        }
        /**
         * Sets up the WordPress query for retrieving networks.
         *
         * @since 4.6.0
         *
         * @param string|array $query Array or URL query string of parameters.
         * @return array|int List of WP_Network objects, a list of network IDs when 'fields' is set to 'ids',
         *                   or the number of networks when 'count' is passed as a query var.
         */
        public function query($query)
        {
        }
        /**
         * Gets a list of networks matching the query vars.
         *
         * @since 4.6.0
         *
         * @return array|int List of WP_Network objects, a list of network IDs when 'fields' is set to 'ids',
         *                   or the number of networks when 'count' is passed as a query var.
         */
        public function get_networks()
        {
        }
        /**
         * Used internally to get a list of network IDs matching the query vars.
         *
         * @since 4.6.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @return int|array A single count of network IDs if a count query. An array of network IDs if a full query.
         */
        protected function get_network_ids()
        {
        }
        /**
         * Populates found_networks and max_num_pages properties for the current query
         * if the limit clause was used.
         *
         * @since 4.6.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         */
        private function set_found_networks()
        {
        }
        /**
         * Used internally to generate an SQL string for searching across multiple columns.
         *
         * @since 4.6.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param string   $search  Search string.
         * @param string[] $columns Array of columns to search.
         * @return string Search SQL.
         */
        protected function get_search_sql($search, $columns)
        {
        }
        /**
         * Parses and sanitizes 'orderby' keys passed to the network query.
         *
         * @since 4.6.0
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param string $orderby Alias for the field to order by.
         * @return string|false Value to used in the ORDER clause. False otherwise.
         */
        protected function parse_orderby($orderby)
        {
        }
        /**
         * Parses an 'order' query variable and cast it to 'ASC' or 'DESC' as necessary.
         *
         * @since 4.6.0
         *
         * @param string $order The 'order' query variable.
         * @return string The sanitized 'order' query variable.
         */
        protected function parse_order($order)
        {
        }
    }
    /**
     * WP_Theme_JSON_Resolver class
     *
     * @package WordPress
     * @subpackage Theme
     * @since 5.8.0
     */
    /**
     * Class that abstracts the processing of the different data sources
     * for site-level config and offers an API to work with them.
     *
     * This class is for internal core usage and is not supposed to be used by extenders (plugins and/or themes).
     * This is a low-level API that may need to do breaking changes. Please,
     * use get_global_settings, get_global_styles, and get_global_stylesheet instead.
     *
     * @access private
     */
    class WP_Theme_JSON_Resolver
    {
        /**
         * Container for data coming from core.
         *
         * @since 5.8.0
         * @var WP_Theme_JSON
         */
        protected static $core = \null;
        /**
         * Container for data coming from the theme.
         *
         * @since 5.8.0
         * @var WP_Theme_JSON
         */
        protected static $theme = \null;
        /**
         * Whether or not the theme supports theme.json.
         *
         * @since 5.8.0
         * @var bool
         */
        protected static $theme_has_support = \null;
        /**
         * Container for data coming from the user.
         *
         * @since 5.9.0
         * @var WP_Theme_JSON
         */
        protected static $user = \null;
        /**
         * Stores the ID of the custom post type
         * that holds the user data.
         *
         * @since 5.9.0
         * @var int
         */
        protected static $user_custom_post_type_id = \null;
        /**
         * Container to keep loaded i18n schema for `theme.json`.
         *
         * @since 5.8.0 As `$theme_json_i18n`.
         * @since 5.9.0 Renamed from `$theme_json_i18n` to `$i18n_schema`.
         * @var array
         */
        protected static $i18n_schema = \null;
        /**
         * Processes a file that adheres to the theme.json schema
         * and returns an array with its contents, or a void array if none found.
         *
         * @since 5.8.0
         *
         * @param string $file_path Path to file. Empty if no file.
         * @return array Contents that adhere to the theme.json schema.
         */
        protected static function read_json_file($file_path)
        {
        }
        /**
         * Returns a data structure used in theme.json translation.
         *
         * @since 5.8.0
         * @deprecated 5.9.0
         *
         * @return array An array of theme.json fields that are translatable and the keys that are translatable.
         */
        public static function get_fields_to_translate()
        {
        }
        /**
         * Given a theme.json structure modifies it in place to update certain values
         * by its translated strings according to the language set by the user.
         *
         * @since 5.8.0
         *
         * @param array  $theme_json The theme.json to translate.
         * @param string $domain     Optional. Text domain. Unique identifier for retrieving translated strings.
         *                           Default 'default'.
         * @return array Returns the modified $theme_json_structure.
         */
        protected static function translate($theme_json, $domain = 'default')
        {
        }
        /**
         * Returns core's origin config.
         *
         * @since 5.8.0
         *
         * @return WP_Theme_JSON Entity that holds core data.
         */
        public static function get_core_data()
        {
        }
        /**
         * Returns the theme's data.
         *
         * Data from theme.json will be backfilled from existing
         * theme supports, if any. Note that if the same data
         * is present in theme.json and in theme supports,
         * the theme.json takes precedence.
         *
         * @since 5.8.0
         * @since 5.9.0 Theme supports have been inlined and the `$theme_support_data` argument removed.
         * @since 6.0.0 Added an `$options` parameter to allow the theme data to be returned without theme supports.
         *
         * @param array $deprecated Deprecated. Not used.
         * @param array $options {
         *     Options arguments.
         *
         *     @type bool $with_supports Whether to include theme supports in the data. Default true.
         * }
         * @return WP_Theme_JSON Entity that holds theme data.
         */
        public static function get_theme_data($deprecated = array(), $options = array())
        {
        }
        /**
         * Returns the custom post type that contains the user's origin config
         * for the active theme or a void array if none are found.
         *
         * This can also create and return a new draft custom post type.
         *
         * @since 5.9.0
         *
         * @param WP_Theme $theme              The theme object. If empty, it
         *                                     defaults to the active theme.
         * @param bool     $create_post        Optional. Whether a new custom post
         *                                     type should be created if none are
         *                                     found. Default false.
         * @param array    $post_status_filter Optional. Filter custom post type by
         *                                     post status. Default `array( 'publish' )`,
         *                                     so it only fetches published posts.
         * @return array Custom Post Type for the user's origin config.
         */
        public static function get_user_data_from_wp_global_styles($theme, $create_post = \false, $post_status_filter = array('publish'))
        {
        }
        /**
         * Returns the user's origin config.
         *
         * @since 5.9.0
         *
         * @return WP_Theme_JSON Entity that holds styles for user data.
         */
        public static function get_user_data()
        {
        }
        /**
         * Returns the data merged from multiple origins.
         *
         * There are three sources of data (origins) for a site:
         * default, theme, and custom. The custom's has higher priority
         * than the theme's, and the theme's higher than default's.
         *
         * Unlike the getters
         * {@link https://developer.wordpress.org/reference/classes/wp_theme_json_resolver/get_core_data/ get_core_data},
         * {@link https://developer.wordpress.org/reference/classes/wp_theme_json_resolver/get_theme_data/ get_theme_data},
         * and {@link https://developer.wordpress.org/reference/classes/wp_theme_json_resolver/get_user_data/ get_user_data},
         * this method returns data after it has been merged with the previous origins.
         * This means that if the same piece of data is declared in different origins
         * (user, theme, and core), the last origin overrides the previous.
         *
         * For example, if the user has set a background color
         * for the paragraph block, and the theme has done it as well,
         * the user preference wins.
         *
         * @since 5.8.0
         * @since 5.9.0 Added user data, removed the `$settings` parameter,
         *              added the `$origin` parameter.
         *
         * @param string $origin Optional. To what level should we merge data.
         *                       Valid values are 'theme' or 'custom'. Default 'custom'.
         * @return WP_Theme_JSON
         */
        public static function get_merged_data($origin = 'custom')
        {
        }
        /**
         * Returns the ID of the custom post type
         * that stores user data.
         *
         * @since 5.9.0
         *
         * @return integer|null
         */
        public static function get_user_global_styles_post_id()
        {
        }
        /**
         * Determines whether the active theme has a theme.json file.
         *
         * @since 5.8.0
         * @since 5.9.0 Added a check in the parent theme.
         *
         * @return bool
         */
        public static function theme_has_support()
        {
        }
        /**
         * Builds the path to the given file and checks that it is readable.
         *
         * If it isn't, returns an empty string, otherwise returns the whole file path.
         *
         * @since 5.8.0
         * @since 5.9.0 Adapted to work with child themes, added the `$template` argument.
         *
         * @param string $file_name Name of the file.
         * @param bool   $template  Optional. Use template theme directory. Default false.
         * @return string The whole file path or empty if the file doesn't exist.
         */
        protected static function get_file_path_from_theme($file_name, $template = \false)
        {
        }
        /**
         * Cleans the cached data so it can be recalculated.
         *
         * @since 5.8.0
         * @since 5.9.0 Added the `$user`, `$user_custom_post_type_id`,
         *              and `$i18n_schema` variables to reset.
         */
        public static function clean_cached_data()
        {
        }
        /**
         * Returns the style variations defined by the theme.
         *
         * @since 6.0.0
         *
         * @return array
         */
        public static function get_style_variations()
        {
        }
    }
    /**
     * Class used internally by Text_Diff to actually compute the diffs.
     *
     * This class is implemented using native PHP code.
     *
     * The algorithm used here is mostly lifted from the perl module
     * Algorithm::Diff (version 1.06) by Ned Konz, which is available at:
     * http://www.perl.com/CPAN/authors/id/N/NE/NEDKONZ/Algorithm-Diff-1.06.zip
     *
     * More ideas are taken from: http://www.ics.uci.edu/~eppstein/161/960229.html
     *
     * Some ideas (and a bit of code) are taken from analyze.c, of GNU
     * diffutils-2.7, which can be found at:
     * ftp://gnudist.gnu.org/pub/gnu/diffutils/diffutils-2.7.tar.gz
     *
     * Some ideas (subdivision by NCHUNKS > 2, and some optimizations) are from
     * Geoffrey T. Dairiki <dairiki@dairiki.org>. The original PHP version of this
     * code was written by him, and is used/adapted with his permission.
     *
     * Copyright 2004-2010 The Horde Project (http://www.horde.org/)
     *
     * See the enclosed file COPYING for license information (LGPL). If you did
     * not receive this file, see http://opensource.org/licenses/lgpl-license.php.
     *
     * @author  Geoffrey T. Dairiki <dairiki@dairiki.org>
     * @package Text_Diff
     */
    class Text_Diff_Engine_native
    {
        function diff($from_lines, $to_lines)
        {
        }
        /**
         * Divides the Largest Common Subsequence (LCS) of the sequences (XOFF,
         * XLIM) and (YOFF, YLIM) into NCHUNKS approximately equally sized
         * segments.
         *
         * Returns (LCS, PTS).  LCS is the length of the LCS. PTS is an array of
         * NCHUNKS+1 (X, Y) indexes giving the diving points between sub
         * sequences.  The first sub-sequence is contained in (X0, X1), (Y0, Y1),
         * the second in (X1, X2), (Y1, Y2) and so on.  Note that (X0, Y0) ==
         * (XOFF, YOFF) and (X[NCHUNKS], Y[NCHUNKS]) == (XLIM, YLIM).
         *
         * This function assumes that the first lines of the specified portions of
         * the two files do not match, and likewise that the last lines do not
         * match.  The caller must trim matching lines from the beginning and end
         * of the portions it is going to specify.
         */
        function _diag($xoff, $xlim, $yoff, $ylim, $nchunks)
        {
        }
        function _lcsPos($ypos)
        {
        }
        /**
         * Finds LCS of two sequences.
         *
         * The results are recorded in the vectors $this->{x,y}changed[], by
         * storing a 1 in the element for each line that is an insertion or
         * deletion (ie. is not in the LCS).
         *
         * The subsequence of file 0 is (XOFF, XLIM) and likewise for file 1.
         *
         * Note that XLIM, YLIM are exclusive bounds.  All line numbers are
         * origin-0 and discarded lines are not counted.
         */
        function _compareseq($xoff, $xlim, $yoff, $ylim)
        {
        }
        /**
         * Adjusts inserts/deletes of identical lines to join changes as much as
         * possible.
         *
         * We do something when a run of changed lines include a line at one end
         * and has an excluded, identical line at the other.  We are free to
         * choose which identical line is included.  `compareseq' usually chooses
         * the one at the beginning, but usually it is cleaner to consider the
         * following identical line to be the "change".
         *
         * This is extracted verbatim from analyze.c (GNU diffutils-2.7).
         */
        function _shiftBoundaries($lines, &$changed, $other_changed)
        {
        }
    }
    /**
     * Class used internally by Diff to actually compute the diffs.
     *
     * This class uses the Unix `diff` program via shell_exec to compute the
     * differences between the two input arrays.
     *
     * Copyright 2007-2010 The Horde Project (http://www.horde.org/)
     *
     * See the enclosed file COPYING for license information (LGPL). If you did
     * not receive this file, see http://opensource.org/licenses/lgpl-license.php.
     *
     * @author  Milian Wolff <mail@milianw.de>
     * @package Text_Diff
     * @since   0.3.0
     */
    class Text_Diff_Engine_shell
    {
        /**
         * Path to the diff executable
         *
         * @var string
         */
        var $_diffCommand = 'diff';
        /**
         * Returns the array of differences.
         *
         * @param array $from_lines lines of text from old file
         * @param array $to_lines   lines of text from new file
         *
         * @return array all changes made (array with Text_Diff_Op_* objects)
         */
        function diff($from_lines, $to_lines)
        {
        }
        /**
         * Get lines from either the old or new text
         *
         * @access private
         *
         * @param array $text_lines Either $from_lines or $to_lines (passed by reference).
         * @param int   $line_no    Current line number (passed by reference).
         * @param int   $end        Optional end line, when we want to chop more
         *                          than one line.
         *
         * @return array The chopped lines
         */
        function _getLines(&$text_lines, &$line_no, $end = \false)
        {
        }
    }
    /**
     * Parses unified or context diffs output from eg. the diff utility.
     *
     * Example:
     * <code>
     * $patch = file_get_contents('example.patch');
     * $diff = new Text_Diff('string', array($patch));
     * $renderer = new Text_Diff_Renderer_inline();
     * echo $renderer->render($diff);
     * </code>
     *
     * Copyright 2005 Örjan Persson <o@42mm.org>
     * Copyright 2005-2010 The Horde Project (http://www.horde.org/)
     *
     * See the enclosed file COPYING for license information (LGPL). If you did
     * not receive this file, see http://opensource.org/licenses/lgpl-license.php.
     *
     * @author  Örjan Persson <o@42mm.org>
     * @package Text_Diff
     * @since   0.2.0
     */
    class Text_Diff_Engine_string
    {
        /**
         * Parses a unified or context diff.
         *
         * First param contains the whole diff and the second can be used to force
         * a specific diff type. If the second parameter is 'autodetect', the
         * diff will be examined to find out which type of diff this is.
         *
         * @param string $diff  The diff content.
         * @param string $mode  The diff mode of the content in $diff. One of
         *                      'context', 'unified', or 'autodetect'.
         *
         * @return array  List of all diff operations.
         */
        function diff($diff, $mode = 'autodetect')
        {
        }
        /**
         * Parses an array containing the unified diff.
         *
         * @param array $diff  Array of lines.
         *
         * @return array  List of all diff operations.
         */
        function parseUnifiedDiff($diff)
        {
        }
        /**
         * Parses an array containing the context diff.
         *
         * @param array $diff  Array of lines.
         *
         * @return array  List of all diff operations.
         */
        function parseContextDiff(&$diff)
        {
        }
    }
    /**
     * Class used internally by Diff to actually compute the diffs.
     *
     * This class uses the xdiff PECL package (http://pecl.php.net/package/xdiff)
     * to compute the differences between the two input arrays.
     *
     * Copyright 2004-2010 The Horde Project (http://www.horde.org/)
     *
     * See the enclosed file COPYING for license information (LGPL). If you did
     * not receive this file, see http://opensource.org/licenses/lgpl-license.php.
     *
     * @author  Jon Parise <jon@horde.org>
     * @package Text_Diff
     */
    class Text_Diff_Engine_xdiff
    {
        /**
         */
        function diff($from_lines, $to_lines)
        {
        }
    }
    /**
     * General API for generating and formatting diffs - the differences between
     * two sequences of strings.
     *
     * The original PHP version of this code was written by Geoffrey T. Dairiki
     * <dairiki@dairiki.org>, and is used/adapted with his permission.
     *
     * Copyright 2004 Geoffrey T. Dairiki <dairiki@dairiki.org>
     * Copyright 2004-2010 The Horde Project (http://www.horde.org/)
     *
     * See the enclosed file COPYING for license information (LGPL). If you did
     * not receive this file, see http://opensource.org/licenses/lgpl-license.php.
     *
     * @package Text_Diff
     * @author  Geoffrey T. Dairiki <dairiki@dairiki.org>
     */
    class Text_Diff
    {
        /**
         * Array of changes.
         *
         * @var array
         */
        var $_edits;
        /**
         * Computes diffs between sequences of strings.
         *
         * @param string $engine     Name of the diffing engine to use.  'auto'
         *                           will automatically select the best.
         * @param array $params      Parameters to pass to the diffing engine.
         *                           Normally an array of two arrays, each
         *                           containing the lines from a file.
         */
        function __construct($engine, $params)
        {
        }
        /**
         * PHP4 constructor.
         */
        public function Text_Diff($engine, $params)
        {
        }
        /**
         * Returns the array of differences.
         */
        function getDiff()
        {
        }
        /**
         * returns the number of new (added) lines in a given diff.
         *
         * @since Text_Diff 1.1.0
         *
         * @return int The number of new lines
         */
        function countAddedLines()
        {
        }
        /**
         * Returns the number of deleted (removed) lines in a given diff.
         *
         * @since Text_Diff 1.1.0
         *
         * @return int The number of deleted lines
         */
        function countDeletedLines()
        {
        }
        /**
         * Computes a reversed diff.
         *
         * Example:
         * <code>
         * $diff = new Text_Diff($lines1, $lines2);
         * $rev = $diff->reverse();
         * </code>
         *
         * @return Text_Diff  A Diff object representing the inverse of the
         *                    original diff.  Note that we purposely don't return a
         *                    reference here, since this essentially is a clone()
         *                    method.
         */
        function reverse()
        {
        }
        /**
         * Checks for an empty diff.
         *
         * @return bool True if two sequences were identical.
         */
        function isEmpty()
        {
        }
        /**
         * Computes the length of the Longest Common Subsequence (LCS).
         *
         * This is mostly for diagnostic purposes.
         *
         * @return int The length of the LCS.
         */
        function lcs()
        {
        }
        /**
         * Gets the original set of lines.
         *
         * This reconstructs the $from_lines parameter passed to the constructor.
         *
         * @return array  The original sequence of strings.
         */
        function getOriginal()
        {
        }
        /**
         * Gets the final set of lines.
         *
         * This reconstructs the $to_lines parameter passed to the constructor.
         *
         * @return array  The sequence of strings.
         */
        function getFinal()
        {
        }
        /**
         * Removes trailing newlines from a line of text. This is meant to be used
         * with array_walk().
         *
         * @param string $line  The line to trim.
         * @param int    $key   The index of the line in the array. Not used.
         */
        static function trimNewlines(&$line, $key)
        {
        }
        /**
         * Determines the location of the system temporary directory.
         *
         * @access protected
         *
         * @return string  A directory name which can be used for temp files.
         *                 Returns false if one could not be found.
         */
        static function _getTempDir()
        {
        }
        /**
         * Checks a diff for validity.
         *
         * This is here only for debugging purposes.
         */
        function _check($from_lines, $to_lines)
        {
        }
    }
    /**
     * @package Text_Diff
     * @author  Geoffrey T. Dairiki <dairiki@dairiki.org>
     */
    class Text_MappedDiff extends \Text_Diff
    {
        /**
         * Computes a diff between sequences of strings.
         *
         * This can be used to compute things like case-insensitve diffs, or diffs
         * which ignore changes in white-space.
         *
         * @param array $from_lines         An array of strings.
         * @param array $to_lines           An array of strings.
         * @param array $mapped_from_lines  This array should have the same size
         *                                  number of elements as $from_lines.  The
         *                                  elements in $mapped_from_lines and
         *                                  $mapped_to_lines are what is actually
         *                                  compared when computing the diff.
         * @param array $mapped_to_lines    This array should have the same number
         *                                  of elements as $to_lines.
         */
        function __construct($from_lines, $to_lines, $mapped_from_lines, $mapped_to_lines)
        {
        }
        /**
         * PHP4 constructor.
         */
        public function Text_MappedDiff($from_lines, $to_lines, $mapped_from_lines, $mapped_to_lines)
        {
        }
    }
    /**
     * @package Text_Diff
     * @author  Geoffrey T. Dairiki <dairiki@dairiki.org>
     *
     * @access private
     */
    class Text_Diff_Op
    {
        var $orig;
        var $final;
        function &reverse()
        {
        }
        function norig()
        {
        }
        function nfinal()
        {
        }
    }
    /**
     * @package Text_Diff
     * @author  Geoffrey T. Dairiki <dairiki@dairiki.org>
     *
     * @access private
     */
    class Text_Diff_Op_copy extends \Text_Diff_Op
    {
        /**
         * PHP5 constructor.
         */
        function __construct($orig, $final = \false)
        {
        }
        /**
         * PHP4 constructor.
         */
        public function Text_Diff_Op_copy($orig, $final = \false)
        {
        }
        function &reverse()
        {
        }
    }
    /**
     * @package Text_Diff
     * @author  Geoffrey T. Dairiki <dairiki@dairiki.org>
     *
     * @access private
     */
    class Text_Diff_Op_delete extends \Text_Diff_Op
    {
        /**
         * PHP5 constructor.
         */
        function __construct($lines)
        {
        }
        /**
         * PHP4 constructor.
         */
        public function Text_Diff_Op_delete($lines)
        {
        }
        function &reverse()
        {
        }
    }
    /**
     * @package Text_Diff
     * @author  Geoffrey T. Dairiki <dairiki@dairiki.org>
     *
     * @access private
     */
    class Text_Diff_Op_add extends \Text_Diff_Op
    {
        /**
         * PHP5 constructor.
         */
        function __construct($lines)
        {
        }
        /**
         * PHP4 constructor.
         */
        public function Text_Diff_Op_add($lines)
        {
        }
        function &reverse()
        {
        }
    }
    /**
     * @package Text_Diff
     * @author  Geoffrey T. Dairiki <dairiki@dairiki.org>
     *
     * @access private
     */
    class Text_Diff_Op_change extends \Text_Diff_Op
    {
        /**
         * PHP5 constructor.
         */
        function __construct($orig, $final)
        {
        }
        /**
         * PHP4 constructor.
         */
        public function Text_Diff_Op_change($orig, $final)
        {
        }
        function &reverse()
        {
        }
    }
    /**
     * WP_MatchesMapRegex helper class
     *
     * @package WordPress
     * @since 4.7.0
     */
    /**
     * Helper class to remove the need to use eval to replace $matches[] in query strings.
     *
     * @since 2.9.0
     */
    class WP_MatchesMapRegex
    {
        /**
         * store for matches
         *
         * @var array
         */
        private $_matches;
        /**
         * store for mapping result
         *
         * @var string
         */
        public $output;
        /**
         * subject to perform mapping on (query string containing $matches[] references
         *
         * @var string
         */
        private $_subject;
        /**
         * regexp pattern to match $matches[] references
         *
         * @var string
         */
        public $_pattern = '(\\$matches\\[[1-9]+[0-9]*\\])';
        // Magic number.
        /**
         * constructor
         *
         * @param string $subject subject if regex
         * @param array  $matches data to use in map
         */
        public function __construct($subject, $matches)
        {
        }
        /**
         * Substitute substring matches in subject.
         *
         * static helper function to ease use
         *
         * @param string $subject subject
         * @param array  $matches data used for substitution
         * @return string
         */
        public static function apply($subject, $matches)
        {
        }
        /**
         * do the actual mapping
         *
         * @return string
         */
        private function _map()
        {
        }
        /**
         * preg_replace_callback hook
         *
         * @param array $matches preg_replace regexp matches
         * @return string
         */
        public function callback($matches)
        {
        }
    }
    class wp_atom_server
    {
        public function __call($name, $arguments)
        {
        }
        public static function __callStatic($name, $arguments)
        {
        }
    }
    /**
     * Toolbar API: WP_Admin_Bar class
     *
     * @package WordPress
     * @subpackage Toolbar
     * @since 3.1.0
     */
    /**
     * Core class used to implement the Toolbar API.
     *
     * @since 3.1.0
     */
    class WP_Admin_Bar
    {
        private $nodes = array();
        private $bound = \false;
        public $user;
        /**
         * @since 3.3.0
         *
         * @param string $name
         * @return string|array|void
         */
        public function __get($name)
        {
        }
        /**
         * Initializes the admin bar.
         *
         * @since 3.1.0
         */
        public function initialize()
        {
        }
        /**
         * Adds a node (menu item) to the admin bar menu.
         *
         * @since 3.3.0
         *
         * @param array $node The attributes that define the node.
         */
        public function add_menu($node)
        {
        }
        /**
         * Removes a node from the admin bar.
         *
         * @since 3.1.0
         *
         * @param string $id The menu slug to remove.
         */
        public function remove_menu($id)
        {
        }
        /**
         * Adds a node to the menu.
         *
         * @since 3.1.0
         * @since 4.5.0 Added the ability to pass 'lang' and 'dir' meta data.
         *
         * @param array $args {
         *     Arguments for adding a node.
         *
         *     @type string $id     ID of the item.
         *     @type string $title  Title of the node.
         *     @type string $parent Optional. ID of the parent node.
         *     @type string $href   Optional. Link for the item.
         *     @type bool   $group  Optional. Whether or not the node is a group. Default false.
         *     @type array  $meta   Meta data including the following keys: 'html', 'class', 'rel', 'lang', 'dir',
         *                          'onclick', 'target', 'title', 'tabindex'. Default empty.
         * }
         */
        public function add_node($args)
        {
        }
        /**
         * @since 3.3.0
         *
         * @param array $args
         */
        protected final function _set_node($args)
        {
        }
        /**
         * Gets a node.
         *
         * @since 3.3.0
         *
         * @param string $id
         * @return object|void Node.
         */
        public final function get_node($id)
        {
        }
        /**
         * @since 3.3.0
         *
         * @param string $id
         * @return object|void
         */
        protected final function _get_node($id)
        {
        }
        /**
         * @since 3.3.0
         *
         * @return array|void
         */
        public final function get_nodes()
        {
        }
        /**
         * @since 3.3.0
         *
         * @return array|void
         */
        protected final function _get_nodes()
        {
        }
        /**
         * Adds a group to a toolbar menu node.
         *
         * Groups can be used to organize toolbar items into distinct sections of a toolbar menu.
         *
         * @since 3.3.0
         *
         * @param array $args {
         *     Array of arguments for adding a group.
         *
         *     @type string $id     ID of the item.
         *     @type string $parent Optional. ID of the parent node. Default 'root'.
         *     @type array  $meta   Meta data for the group including the following keys:
         *                         'class', 'onclick', 'target', and 'title'.
         * }
         */
        public final function add_group($args)
        {
        }
        /**
         * Remove a node.
         *
         * @since 3.1.0
         *
         * @param string $id The ID of the item.
         */
        public function remove_node($id)
        {
        }
        /**
         * @since 3.3.0
         *
         * @param string $id
         */
        protected final function _unset_node($id)
        {
        }
        /**
         * @since 3.1.0
         */
        public function render()
        {
        }
        /**
         * @since 3.3.0
         *
         * @return object|void
         */
        protected final function _bind()
        {
        }
        /**
         * @since 3.3.0
         *
         * @param object $root
         */
        protected final function _render($root)
        {
        }
        /**
         * @since 3.3.0
         *
         * @param object $node
         */
        protected final function _render_container($node)
        {
        }
        /**
         * @since 3.3.0
         *
         * @param object $node
         */
        protected final function _render_group($node)
        {
        }
        /**
         * @since 3.3.0
         *
         * @param object $node
         */
        protected final function _render_item($node)
        {
        }
        /**
         * Renders toolbar items recursively.
         *
         * @since 3.1.0
         * @deprecated 3.3.0 Use WP_Admin_Bar::_render_item() or WP_Admin_bar::render() instead.
         * @see WP_Admin_Bar::_render_item()
         * @see WP_Admin_Bar::render()
         *
         * @param string $id    Unused.
         * @param object $node
         */
        public function recursive_render($id, $node)
        {
        }
        /**
         * Adds menus to the admin bar.
         *
         * @since 3.1.0
         */
        public function add_menus()
        {
        }
    }
    /**
     * Locale API: WP_Locale_Switcher class
     *
     * @package WordPress
     * @subpackage i18n
     * @since 4.7.0
     */
    /**
     * Core class used for switching locales.
     *
     * @since 4.7.0
     */
    class WP_Locale_Switcher
    {
        /**
         * Locale stack.
         *
         * @since 4.7.0
         * @var string[]
         */
        private $locales = array();
        /**
         * Original locale.
         *
         * @since 4.7.0
         * @var string
         */
        private $original_locale;
        /**
         * Holds all available languages.
         *
         * @since 4.7.0
         * @var array An array of language codes (file names without the .mo extension).
         */
        private $available_languages = array();
        /**
         * Constructor.
         *
         * Stores the original locale as well as a list of all available languages.
         *
         * @since 4.7.0
         */
        public function __construct()
        {
        }
        /**
         * Initializes the locale switcher.
         *
         * Hooks into the {@see 'locale'} filter to change the locale on the fly.
         *
         * @since 4.7.0
         */
        public function init()
        {
        }
        /**
         * Switches the translations according to the given locale.
         *
         * @since 4.7.0
         *
         * @param string $locale The locale to switch to.
         * @return bool True on success, false on failure.
         */
        public function switch_to_locale($locale)
        {
        }
        /**
         * Restores the translations according to the previous locale.
         *
         * @since 4.7.0
         *
         * @return string|false Locale on success, false on failure.
         */
        public function restore_previous_locale()
        {
        }
        /**
         * Restores the translations according to the original locale.
         *
         * @since 4.7.0
         *
         * @return string|false Locale on success, false on failure.
         */
        public function restore_current_locale()
        {
        }
        /**
         * Whether switch_to_locale() is in effect.
         *
         * @since 4.7.0
         *
         * @return bool True if the locale has been switched, false otherwise.
         */
        public function is_switched()
        {
        }
        /**
         * Filters the locale of the WordPress installation.
         *
         * @since 4.7.0
         *
         * @param string $locale The locale of the WordPress installation.
         * @return string The locale currently being switched to.
         */
        public function filter_locale($locale)
        {
        }
        /**
         * Load translations for a given locale.
         *
         * When switching to a locale, translations for this locale must be loaded from scratch.
         *
         * @since 4.7.0
         *
         * @global Mo[] $l10n An array of all currently loaded text domains.
         *
         * @param string $locale The locale to load translations for.
         */
        private function load_translations($locale)
        {
        }
        /**
         * Changes the site's locale to the given one.
         *
         * Loads the translations, changes the global `$wp_locale` object and updates
         * all post type labels.
         *
         * @since 4.7.0
         *
         * @global WP_Locale $wp_locale WordPress date and time locale object.
         *
         * @param string $locale The locale to change to.
         */
        private function change_locale($locale)
        {
        }
    }
    /**
     * Session API: WP_User_Meta_Session_Tokens class
     *
     * @package WordPress
     * @subpackage Session
     * @since 4.7.0
     */
    /**
     * Meta-based user sessions token manager.
     *
     * @since 4.0.0
     *
     * @see WP_Session_Tokens
     */
    class WP_User_Meta_Session_Tokens extends \WP_Session_Tokens
    {
        /**
         * Retrieves all sessions of the user.
         *
         * @since 4.0.0
         *
         * @return array Sessions of the user.
         */
        protected function get_sessions()
        {
        }
        /**
         * Converts an expiration to an array of session information.
         *
         * @param mixed $session Session or expiration.
         * @return array Session.
         */
        protected function prepare_session($session)
        {
        }
        /**
         * Retrieves a session based on its verifier (token hash).
         *
         * @since 4.0.0
         *
         * @param string $verifier Verifier for the session to retrieve.
         * @return array|null The session, or null if it does not exist
         */
        protected function get_session($verifier)
        {
        }
        /**
         * Updates a session based on its verifier (token hash).
         *
         * @since 4.0.0
         *
         * @param string $verifier Verifier for the session to update.
         * @param array  $session  Optional. Session. Omitting this argument destroys the session.
         */
        protected function update_session($verifier, $session = \null)
        {
        }
        /**
         * Updates the user's sessions in the usermeta table.
         *
         * @since 4.0.0
         *
         * @param array $sessions Sessions.
         */
        protected function update_sessions($sessions)
        {
        }
        /**
         * Destroys all sessions for this user, except the single session with the given verifier.
         *
         * @since 4.0.0
         *
         * @param string $verifier Verifier of the session to keep.
         */
        protected function destroy_other_sessions($verifier)
        {
        }
        /**
         * Destroys all session tokens for the user.
         *
         * @since 4.0.0
         */
        protected function destroy_all_sessions()
        {
        }
        /**
         * Destroys all sessions for all users.
         *
         * @since 4.0.0
         */
        public static function drop_sessions()
        {
        }
    }
}
namespace {
    /**
     * Ajax handler for site health checks on debug mode.
     *
     * @since 5.2.0
     */
    function wp_ajax_health_check_is_in_debug_mode()
    {
    }
}